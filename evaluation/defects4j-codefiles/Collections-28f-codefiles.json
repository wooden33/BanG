{
  "src_test_exact_match": [
    {
      "src_name": "SequencesComparator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/sequence/SequencesComparator.java",
      "class_declaration": "public class SequencesComparator <T> ",
      "methods_under_test": {
        "=1": {
          "SequencesComparator.getScript()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java"
    },
    {
      "src_name": "FixedSizeSortedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/FixedSizeSortedMap.java",
      "class_declaration": "public class FixedSizeSortedMap <K, V> extends AbstractSortedMapDecorator<K, V> implements BoundedMap<K, V>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/FixedSizeSortedMapTest.java"
    },
    {
      "src_name": "UnmodifiableOrderedBidiMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMap.java",
      "class_declaration": "public final class UnmodifiableOrderedBidiMap <K, V> extends AbstractOrderedBidiMapDecorator<K, V> implements Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java"
    },
    {
      "src_name": "IndexedCollection",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/collection/IndexedCollection.java",
      "class_declaration": "public class IndexedCollection <K, C> extends AbstractCollectionDecorator<C> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java"
    },
    {
      "src_name": "BoundedIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/BoundedIterator.java",
      "class_declaration": "public class BoundedIterator <E> implements Iterator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BoundedIterator.hasNext()": [
            2,
            2,
            2
          ],
          "BoundedIterator.next()": [
            2,
            2,
            2
          ],
          "BoundedIterator.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java"
    },
    {
      "src_name": "PredicatedCollection",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/collection/PredicatedCollection.java",
      "class_declaration": "public class PredicatedCollection <E> extends AbstractCollectionDecorator<E> ",
      "methods_under_test": {
        "=1": {
          "Builder.createPredicatedList()": [
            1,
            1,
            1
          ],
          "Builder.createPredicatedSet()": [
            1,
            1,
            1
          ],
          "Builder.createPredicatedMultiSet()": [
            1,
            1,
            1
          ],
          "Builder.createPredicatedBag()": [
            1,
            1,
            1
          ],
          "Builder.createPredicatedQueue()": [
            1,
            1,
            1
          ],
          "Builder.rejectedElements()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Builder.add(final, E)": [
            2,
            2,
            2
          ],
          "Builder.addAll(final, Collection<? extends E>)": [
            3,
            3,
            3
          ],
          "Builder.createPredicatedList(final, List<E>)": [
            2,
            2,
            2
          ],
          "Builder.createPredicatedSet(final, Set<E>)": [
            2,
            2,
            2
          ],
          "Builder.createPredicatedMultiSet(final, MultiSet<E>)": [
            2,
            2,
            2
          ],
          "Builder.createPredicatedBag(final, Bag<E>)": [
            2,
            2,
            2
          ],
          "Builder.createPredicatedQueue(final, Queue<E>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java"
    },
    {
      "src_name": "MultiKeyMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/MultiKeyMap.java",
      "class_declaration": "public class MultiKeyMap <K, V> extends AbstractMapDecorator<MultiKey<? extends K>, V> implements Serializable, Cloneable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java"
    },
    {
      "src_name": "UnmodifiableMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/UnmodifiableMap.java",
      "class_declaration": "public final class UnmodifiableMap <K, V> extends AbstractMapDecorator<K, V> implements Unmodifiable, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java"
    },
    {
      "src_name": "TransformedMultiValuedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMap.java",
      "class_declaration": "public class TransformedMultiValuedMap <K, V> extends AbstractMultiValuedMapDecorator<K, V> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java"
    },
    {
      "src_name": "LazyIteratorChain",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/LazyIteratorChain.java",
      "class_declaration": "public abstract class LazyIteratorChain <E> implements Iterator<E> ",
      "methods_under_test": {
        "=1": {
          "LazyIteratorChain.hasNext()": [
            1,
            1,
            1
          ],
          "LazyIteratorChain.next()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LazyIteratorChain.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java"
    },
    {
      "src_name": "QueueUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/QueueUtils.java",
      "class_declaration": "public class QueueUtils ",
      "methods_under_test": {
        "=1": {
          "QueueUtils.unmodifiableQueue(final, Queue<? extends E>)": [
            1,
            1,
            1
          ],
          "QueueUtils.predicatedQueue(final, Queue<E>, final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "QueueUtils.transformingQueue(final, Queue<E>, final, Transformer<? super E, ? extends E>)": [
            1,
            1,
            1
          ],
          "QueueUtils.emptyQueue()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/QueueUtilsTest.java"
    },
    {
      "src_name": "UnmodifiableSortedSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/UnmodifiableSortedSet.java",
      "class_declaration": "public final class UnmodifiableSortedSet <E> extends AbstractSortedSetDecorator<E> implements Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java"
    },
    {
      "src_name": "PeekingIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/PeekingIterator.java",
      "class_declaration": "public class PeekingIterator <E> implements Iterator<E> ",
      "methods_under_test": {
        "=1": {
          "PeekingIterator.peek()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PeekingIterator.peekingIterator(final, Iterator<? extends E>)": [
            3,
            3,
            3
          ],
          "PeekingIterator.hasNext()": [
            2,
            2,
            2
          ],
          "PeekingIterator.element()": [
            2,
            2,
            2
          ],
          "PeekingIterator.next()": [
            2,
            2,
            2
          ],
          "PeekingIterator.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java"
    },
    {
      "src_name": "DualTreeBidiMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap.java",
      "class_declaration": "public class DualTreeBidiMap <K, V> extends AbstractDualBidiMap<K, V> implements SortedBidiMap<K, V>, Serializable ",
      "methods_under_test": {
        "=1": {
          "BidiOrderedMapIterator.hasNext()": [
            1,
            1,
            1
          ],
          "BidiOrderedMapIterator.next()": [
            1,
            1,
            1
          ],
          "BidiOrderedMapIterator.hasPrevious()": [
            1,
            1,
            1
          ],
          "BidiOrderedMapIterator.previous()": [
            1,
            1,
            1
          ],
          "BidiOrderedMapIterator.remove()": [
            1,
            1,
            1
          ],
          "BidiOrderedMapIterator.reset()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BidiOrderedMapIterator.getKey()": [
            2,
            2,
            2
          ],
          "BidiOrderedMapIterator.getValue()": [
            2,
            2,
            2
          ],
          "BidiOrderedMapIterator.setValue(final, V)": [
            3,
            3,
            3
          ],
          "BidiOrderedMapIterator.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMapTest.java"
    },
    {
      "src_name": "UnmodifiableBag",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/UnmodifiableBag.java",
      "class_declaration": "public final class UnmodifiableBag <E> extends AbstractBagDecorator<E> implements Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bag/UnmodifiableBagTest.java"
    },
    {
      "src_name": "IteratorIterable",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/IteratorIterable.java",
      "class_declaration": "public class IteratorIterable <E> implements Iterable<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "IteratorIterable.iterator()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/IteratorIterableTest.java"
    },
    {
      "src_name": "ListIteratorWrapper",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/ListIteratorWrapper.java",
      "class_declaration": "public class ListIteratorWrapper <E> implements ResettableListIterator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ListIteratorWrapper.add(final, E)": [
            2,
            2,
            2
          ],
          "ListIteratorWrapper.hasNext()": [
            2,
            2,
            2
          ],
          "ListIteratorWrapper.hasPrevious()": [
            2,
            2,
            2
          ],
          "ListIteratorWrapper.next()": [
            3,
            3,
            3
          ],
          "ListIteratorWrapper.nextIndex()": [
            2,
            2,
            2
          ],
          "ListIteratorWrapper.previous()": [
            3,
            3,
            3
          ],
          "ListIteratorWrapper.previousIndex()": [
            2,
            2,
            2
          ],
          "ListIteratorWrapper.remove()": [
            4,
            4,
            4
          ],
          "ListIteratorWrapper.set(final, E)": [
            2,
            2,
            2
          ],
          "ListIteratorWrapper.reset()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapperTest.java"
    },
    {
      "src_name": "HashSetValuedHashMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multimap/HashSetValuedHashMap.java",
      "class_declaration": "public class HashSetValuedHashMap <K, V> extends AbstractSetValuedMap<K, V> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java"
    },
    {
      "src_name": "SetUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/SetUtils.java",
      "class_declaration": "public class SetUtils ",
      "methods_under_test": {
        "=1": {
          "SetUtils.emptySet()": [
            1,
            1,
            1
          ],
          "SetUtils.emptySortedSet()": [
            1,
            1,
            1
          ],
          "SetUtils.emptyIfNull(final, Set<T>)": [
            1,
            1,
            1
          ],
          "SetUtils.newIdentityHashSet()": [
            1,
            1,
            1
          ],
          "SetUtils.synchronizedSet(final, Set<E>)": [
            1,
            1,
            1
          ],
          "SetUtils.unmodifiableSet(final, Set<? extends E>)": [
            1,
            1,
            1
          ],
          "SetUtils.predicatedSet(final, Set<E>, final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "SetUtils.transformedSet(final, Set<E>, final, Transformer<? super E, ? extends E>)": [
            1,
            1,
            1
          ],
          "SetUtils.orderedSet(final, Set<E>)": [
            1,
            1,
            1
          ],
          "SetUtils.synchronizedSortedSet(final, SortedSet<E>)": [
            1,
            1,
            1
          ],
          "SetUtils.unmodifiableSortedSet(final, SortedSet<E>)": [
            1,
            1,
            1
          ],
          "SetUtils.predicatedSortedSet(final, SortedSet<E>, final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "SetUtils.transformedSortedSet(final, SortedSet<E>, final, Transformer<? super E, ? extends E>)": [
            1,
            1,
            1
          ],
          "SetUtils.unmodifiableNavigableSet(final, NavigableSet<E>)": [
            1,
            1,
            1
          ],
          "SetUtils.predicatedNavigableSet(final, NavigableSet<E>, final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "SetUtils.transformedNavigableSet(final, NavigableSet<E>, final, Transformer<? super E, ? extends E>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SetUtils.isEqualSet(final, Collection<?>, final, Collection<?>)": [
            3,
            3,
            3
          ],
          "SetUtils.hashCodeForSet(final, Collection<T>)": [
            4,
            4,
            4
          ],
          "SetUtils.union(final, Set<? extends E>, final, Set<? extends E>)": [
            2,
            2,
            2
          ],
          "SetUtils.difference(final, Set<? extends E>, final, Set<? extends E>)": [
            3,
            3,
            3
          ],
          "SetUtils.intersection(final, Set<? extends E>, final, Set<? extends E>)": [
            3,
            3,
            3
          ],
          "SetUtils.disjunction(final, Set<? extends E>, final, Set<? extends E>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/SetUtilsTest.java"
    },
    {
      "src_name": "MultiMapUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/MultiMapUtils.java",
      "class_declaration": "public class MultiMapUtils ",
      "methods_under_test": {
        "=1": {
          "MultiMapUtils.emptyMultiValuedMap()": [
            1,
            1,
            1
          ],
          "MultiMapUtils.emptyIfNull(final, MultiValuedMap<K, V>)": [
            1,
            1,
            1
          ],
          "MultiMapUtils.isEmpty(final, MultiValuedMap<?, ?>)": [
            1,
            1,
            1
          ],
          "MultiMapUtils.newListValuedHashMap()": [
            1,
            1,
            1
          ],
          "MultiMapUtils.newSetValuedHashMap()": [
            1,
            1,
            1
          ],
          "MultiMapUtils.unmodifiableMultiValuedMap(final, MultiValuedMap<? extends K, ? extends V>)": [
            1,
            1,
            1
          ],
          "MultiMapUtils.transformedMultiValuedMap(final, MultiValuedMap<K, V>, final, Transformer<? super K, ? extends K>, final, Transformer<? super V, ? extends V>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MultiMapUtils.getCollection(final, MultiValuedMap<K, V>, final, K)": [
            2,
            2,
            2
          ],
          "MultiMapUtils.getValuesAsList(final, MultiValuedMap<K, V>, final, K)": [
            3,
            3,
            3
          ],
          "MultiMapUtils.getValuesAsSet(final, MultiValuedMap<K, V>, final, K)": [
            3,
            3,
            3
          ],
          "MultiMapUtils.getValuesAsBag(final, MultiValuedMap<K, V>, final, K)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java"
    },
    {
      "src_name": "FluentIterable",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/FluentIterable.java",
      "class_declaration": "public class FluentIterable <E> implements Iterable<E> ",
      "methods_under_test": {
        "=1": {
          "FluentIterable.empty()": [
            1,
            1,
            1
          ],
          "FluentIterable.of(final, T)": [
            1,
            1,
            1
          ],
          "FluentIterable.of()": [
            1,
            1,
            1
          ],
          "FluentIterable.append()": [
            1,
            1,
            1
          ],
          "FluentIterable.append(final, Iterable<? extends E>)": [
            1,
            1,
            1
          ],
          "FluentIterable.collate(final, Iterable<? extends E>)": [
            1,
            1,
            1
          ],
          "FluentIterable.collate(final, Iterable<? extends E>, final, Comparator<? super E>)": [
            1,
            1,
            1
          ],
          "FluentIterable.eval()": [
            1,
            1,
            1
          ],
          "FluentIterable.filter(final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "FluentIterable.limit(final, long)": [
            1,
            1,
            1
          ],
          "FluentIterable.loop()": [
            1,
            1,
            1
          ],
          "FluentIterable.reverse()": [
            1,
            1,
            1
          ],
          "FluentIterable.skip(final, long)": [
            1,
            1,
            1
          ],
          "FluentIterable.transform(final, Transformer<? super E, ? extends O>)": [
            1,
            1,
            1
          ],
          "FluentIterable.unique()": [
            1,
            1,
            1
          ],
          "FluentIterable.unmodifiable()": [
            1,
            1,
            1
          ],
          "FluentIterable.zip(final, Iterable<? extends E>)": [
            1,
            1,
            1
          ],
          "FluentIterable.zip()": [
            1,
            1,
            1
          ],
          "FluentIterable.asEnumeration()": [
            1,
            1,
            1
          ],
          "FluentIterable.allMatch(final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "FluentIterable.anyMatch(final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "FluentIterable.contains(final, Object)": [
            1,
            1,
            1
          ],
          "FluentIterable.forEach(final, Closure<? super E>)": [
            1,
            1,
            1
          ],
          "FluentIterable.get(final, int)": [
            1,
            1,
            1
          ],
          "FluentIterable.size()": [
            1,
            1,
            1
          ],
          "FluentIterable.toArray(final, Class<E>)": [
            1,
            1,
            1
          ],
          "FluentIterable.toList()": [
            1,
            1,
            1
          ],
          "FluentIterable.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FluentIterable.of(final, Iterable<T>)": [
            3,
            3,
            3
          ],
          "FluentIterable.iterator()": [
            2,
            2,
            2
          ],
          "FluentIterable.copyInto(final, Collection<? super E>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/FluentIterableTest.java"
    },
    {
      "src_name": "IteratorUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/IteratorUtils.java",
      "class_declaration": "public class IteratorUtils ",
      "methods_under_test": {
        "=1": {
          "IteratorUtils.emptyIterator()": [
            1,
            1,
            1
          ],
          "IteratorUtils.emptyListIterator()": [
            1,
            1,
            1
          ],
          "IteratorUtils.emptyOrderedIterator()": [
            1,
            1,
            1
          ],
          "IteratorUtils.emptyMapIterator()": [
            1,
            1,
            1
          ],
          "IteratorUtils.emptyOrderedMapIterator()": [
            1,
            1,
            1
          ],
          "IteratorUtils.singletonIterator(final, E)": [
            1,
            1,
            1
          ],
          "IteratorUtils.singletonListIterator(final, E)": [
            1,
            1,
            1
          ],
          "IteratorUtils.arrayIterator()": [
            1,
            1,
            1
          ],
          "IteratorUtils.arrayIterator(final, Object)": [
            1,
            1,
            1
          ],
          "IteratorUtils.arrayIterator(final, E[], final, int)": [
            1,
            1,
            1
          ],
          "IteratorUtils.arrayIterator(final, Object, final, int)": [
            1,
            1,
            1
          ],
          "IteratorUtils.arrayIterator(final, E[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "IteratorUtils.arrayIterator(final, Object, final, int, final, int)": [
            1,
            1,
            1
          ],
          "IteratorUtils.arrayListIterator()": [
            1,
            1,
            1
          ],
          "IteratorUtils.arrayListIterator(final, Object)": [
            1,
            1,
            1
          ],
          "IteratorUtils.arrayListIterator(final, E[], final, int)": [
            1,
            1,
            1
          ],
          "IteratorUtils.arrayListIterator(final, Object, final, int)": [
            1,
            1,
            1
          ],
          "IteratorUtils.arrayListIterator(final, E[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "IteratorUtils.arrayListIterator(final, Object, final, int, final, int)": [
            1,
            1,
            1
          ],
          "IteratorUtils.boundedIterator(final, Iterator<? extends E>, long)": [
            1,
            1,
            1
          ],
          "IteratorUtils.boundedIterator(final, Iterator<? extends E>, long, long)": [
            1,
            1,
            1
          ],
          "IteratorUtils.unmodifiableIterator(final, Iterator<E>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.unmodifiableListIterator(final, ListIterator<E>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.unmodifiableMapIterator(final, MapIterator<K, V>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.chainedIterator(final, Iterator<? extends E>, final, Iterator<? extends E>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.chainedIterator()": [
            1,
            1,
            1
          ],
          "IteratorUtils.chainedIterator(final, Collection<Iterator<? extends E>>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.collatedIterator(final, Comparator<? super E>, final, Iterator<? extends E>, final, Iterator<? extends E>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.collatedIterator(final, Comparator<? super E>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.collatedIterator(final, Comparator<? super E>, final, Collection<Iterator<? extends E>>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.objectGraphIterator(final, E, final, Transformer<? super E, ? extends E>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.peekingIterator(final, Iterator<? extends E>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.pushbackIterator(final, Iterator<? extends E>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.skippingIterator(final, Iterator<E>, long)": [
            1,
            1,
            1
          ],
          "IteratorUtils.zippingIterator(final, Iterator<? extends E>, final, Iterator<? extends E>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.zippingIterator(final, Iterator<? extends E>, final, Iterator<? extends E>, final, Iterator<? extends E>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.zippingIterator()": [
            1,
            1,
            1
          ],
          "IteratorUtils.toList(final, Iterator<? extends E>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.matchesAny(final, Iterator<E>, final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.isEmpty(final, Iterator<?>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.contains(final, Iterator<E>, final, Object)": [
            1,
            1,
            1
          ],
          "IteratorUtils.toString(final, Iterator<E>)": [
            1,
            1,
            1
          ],
          "IteratorUtils.toString(final, Iterator<E>, final, Transformer<? super E, String>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "IteratorUtils.transformedIterator(final, Iterator<? extends I>, final, Transformer<? super I, ? extends O>)": [
            3,
            3,
            3
          ],
          "IteratorUtils.filteredIterator(final, Iterator<? extends E>, final, Predicate<? super E>)": [
            3,
            3,
            3
          ],
          "IteratorUtils.filteredListIterator(final, ListIterator<? extends E>, final, Predicate<? super E>)": [
            3,
            3,
            3
          ],
          "IteratorUtils.loopingIterator(final, Collection<? extends E>)": [
            2,
            2,
            2
          ],
          "IteratorUtils.loopingListIterator(final, List<E>)": [
            2,
            2,
            2
          ],
          "IteratorUtils.nodeListIterator(final, NodeList)": [
            2,
            2,
            2
          ],
          "IteratorUtils.nodeListIterator(final, Node)": [
            2,
            2,
            2
          ],
          "IteratorUtils.asIterator(final, Enumeration<? extends E>)": [
            2,
            2,
            2
          ],
          "IteratorUtils.asIterator(final, Enumeration<? extends E>, final, Collection<? super E>)": [
            3,
            3,
            3
          ],
          "IteratorUtils.asEnumeration(final, Iterator<? extends E>)": [
            2,
            2,
            2
          ],
          "IteratorUtils.asIterable(final, Iterator<? extends E>)": [
            2,
            2,
            2
          ],
          "IteratorUtils.asMultipleUseIterable(final, Iterator<? extends E>)": [
            2,
            2,
            2
          ],
          "IteratorUtils.toListIterator(final, Iterator<? extends E>)": [
            2,
            2,
            2
          ],
          "IteratorUtils.toArray(final, Iterator<?>)": [
            2,
            2,
            2
          ],
          "IteratorUtils.toArray(final, Iterator<? extends E>, final, Class<E>)": [
            3,
            3,
            3
          ],
          "IteratorUtils.toList(final, Iterator<? extends E>, final, int)": [
            4,
            4,
            4
          ],
          "IteratorUtils.forEach(final, Iterator<E>, final, Closure<? super E>)": [
            3,
            3,
            3
          ],
          "IteratorUtils.forEachButLast(final, Iterator<E>, final, Closure<? super E>)": [
            5,
            5,
            5
          ],
          "IteratorUtils.find(final, Iterator<E>, final, Predicate<? super E>)": [
            5,
            5,
            5
          ],
          "IteratorUtils.indexOf(final, Iterator<E>, final, Predicate<? super E>)": [
            5,
            5,
            5
          ],
          "IteratorUtils.matchesAll(final, Iterator<E>, final, Predicate<? super E>)": [
            5,
            5,
            5
          ],
          "IteratorUtils.get(final, Iterator<E>, final, int)": [
            3,
            3,
            3
          ],
          "IteratorUtils.size(final, Iterator<?>)": [
            3,
            3,
            3
          ],
          "IteratorUtils.toString(final, Iterator<E>, final, Transformer<? super E, String>, final, String, final, String, final, String)": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {
          "IteratorUtils.getIterator(final, Object)": [
            32,
            32,
            32
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java"
    },
    {
      "src_name": "LinkedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/LinkedMap.java",
      "class_declaration": "public class LinkedMap <K, V> extends AbstractLinkedMap<K, V> implements Serializable, Cloneable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java"
    },
    {
      "src_name": "UnmodifiableSortedBidiMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMap.java",
      "class_declaration": "public final class UnmodifiableSortedBidiMap <K, V> extends AbstractSortedBidiMapDecorator<K, V> implements Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java"
    },
    {
      "src_name": "UnmodifiableMultiValuedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMap.java",
      "class_declaration": "public final class UnmodifiableMultiValuedMap <K, V> extends AbstractMultiValuedMapDecorator<K, V> implements Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java"
    },
    {
      "src_name": "CircularFifoQueue",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/queue/CircularFifoQueue.java",
      "class_declaration": "public class CircularFifoQueue <E> extends AbstractCollection<E> implements Queue<E>, BoundedCollection<E>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java"
    },
    {
      "src_name": "UnmodifiableBoundedCollection",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java",
      "class_declaration": "public final class UnmodifiableBoundedCollection <E> extends AbstractCollectionDecorator<E> implements BoundedCollection<E>, Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollectionTest.java"
    },
    {
      "src_name": "PredicatedQueue",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/queue/PredicatedQueue.java",
      "class_declaration": "public class PredicatedQueue <E> extends PredicatedCollection<E> implements Queue<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java"
    },
    {
      "src_name": "ArrayListValuedHashMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMap.java",
      "class_declaration": "public class ArrayListValuedHashMap <K, V> extends AbstractListValuedMap<K, V> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java"
    },
    {
      "src_name": "TransformedBag",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/TransformedBag.java",
      "class_declaration": "public class TransformedBag <E> extends TransformedCollection<E> implements Bag<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bag/TransformedBagTest.java"
    },
    {
      "src_name": "TiedMapEntry",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/keyvalue/TiedMapEntry.java",
      "class_declaration": "public class TiedMapEntry <K, V> implements Map.Entry<K, V>, KeyValue<K, V>, Serializable ",
      "methods_under_test": {
        "=1": {
          "TiedMapEntry.hashCode()": [
            1,
            1,
            1
          ],
          "TiedMapEntry.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TiedMapEntry.setValue(final, V)": [
            2,
            2,
            2
          ],
          "TiedMapEntry.equals(final, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/keyvalue/TiedMapEntryTest.java"
    },
    {
      "src_name": "MultiValueMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/MultiValueMap.java",
      "class_declaration": "@Deprecated\npublic class MultiValueMap <K, V> extends AbstractMapDecorator<K, Object> implements MultiMap<K, V>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ValuesIterator.remove()": [
            5,
            5,
            5
          ],
          "ValuesIterator.hasNext()": [
            2,
            2,
            2
          ],
          "ValuesIterator.next()": [
            2,
            2,
            2
          ],
          "ReflectionFactory.create()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java"
    },
    {
      "src_name": "UnmodifiableNavigableSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/UnmodifiableNavigableSet.java",
      "class_declaration": "public final class UnmodifiableNavigableSet <E> extends AbstractNavigableSetDecorator<E> implements Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java"
    },
    {
      "src_name": "UnmodifiableOrderedMapIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java",
      "class_declaration": "public final class UnmodifiableOrderedMapIterator <K, V> implements OrderedMapIterator<K, V>,\n        Unmodifiable ",
      "methods_under_test": {
        "=1": {
          "UnmodifiableOrderedMapIterator.hasNext()": [
            1,
            1,
            1
          ],
          "UnmodifiableOrderedMapIterator.next()": [
            1,
            1,
            1
          ],
          "UnmodifiableOrderedMapIterator.hasPrevious()": [
            1,
            1,
            1
          ],
          "UnmodifiableOrderedMapIterator.previous()": [
            1,
            1,
            1
          ],
          "UnmodifiableOrderedMapIterator.setValue(final, V)": [
            1,
            1,
            1
          ],
          "UnmodifiableOrderedMapIterator.remove()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(final, OrderedMapIterator<K, ? extends V>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIteratorTest.java"
    },
    {
      "src_name": "CursorableLinkedList",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/list/CursorableLinkedList.java",
      "class_declaration": "public class CursorableLinkedList <E> extends AbstractLinkedList<E> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java"
    },
    {
      "src_name": "ComparableComparator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/comparators/ComparableComparator.java",
      "class_declaration": "public class ComparableComparator <E extends Comparable<? super E>> implements Comparator<E>, Serializable ",
      "methods_under_test": {
        "=1": {
          "ComparableComparator.comparableComparator()": [
            1,
            1,
            1
          ],
          "ComparableComparator.compare(final, E, final, E)": [
            1,
            1,
            1
          ],
          "ComparableComparator.hashCode()": [
            1,
            1,
            1
          ],
          "ComparableComparator.equals(final, Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/comparators/ComparableComparatorTest.java"
    },
    {
      "src_name": "CollectionUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/CollectionUtils.java",
      "class_declaration": "public class CollectionUtils ",
      "methods_under_test": {
        "=1": {
          "CardinalityHelper.max(final, Object)": [
            1,
            1,
            1
          ],
          "CardinalityHelper.min(final, Object)": [
            1,
            1,
            1
          ],
          "CardinalityHelper.freqA(final, Object)": [
            1,
            1,
            1
          ],
          "CardinalityHelper.freqB(final, Object)": [
            1,
            1,
            1
          ],
          "CollectionUtils.emptyCollection()": [
            1,
            1,
            1
          ],
          "CollectionUtils.emptyIfNull(final, Collection<T>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.subtract(final, Iterable<? extends O>, final, Iterable<? extends O>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.isProperSubCollection(final, Collection<?>, final, Collection<?>)": [
            1,
            1,
            1
          ],
          "EquatorWrapper.hashCode()": [
            1,
            1,
            1
          ],
          "CollectionUtils.find(final, Iterable<T>, final, Predicate<? super T>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.forAllButLastDo(final, Iterable<T>, final, C)": [
            1,
            1,
            1
          ],
          "CollectionUtils.forAllButLastDo(final, Iterator<T>, final, C)": [
            1,
            1,
            1
          ],
          "CollectionUtils.filterInverse(final, Iterable<T>, final, Predicate<? super T>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.countMatches(final, Iterable<C>, final, Predicate<? super C>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.exists(final, Iterable<C>, final, Predicate<? super C>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.matchesAll(final, Iterable<C>, final, Predicate<? super C>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.select(final, Iterable<? extends O>, final, Predicate<? super O>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.selectRejected(final, Iterable<? extends O>, final, Predicate<? super O>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.collect(final, Iterable<I>, final, Transformer<? super I, ? extends O>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.collect(final, Iterator<I>, final, Transformer<? super I, ? extends O>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.get(final, Iterator<T>, final, int)": [
            1,
            1,
            1
          ],
          "CollectionUtils.checkIndexBounds(final, int)": [
            1,
            1,
            1
          ],
          "CollectionUtils.get(final, Iterable<T>, final, int)": [
            1,
            1,
            1
          ],
          "CollectionUtils.get(final, Map<K,V>, final, int)": [
            1,
            1,
            1
          ],
          "CollectionUtils.isEmpty(final, Collection<?>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.isNotEmpty(final, Collection<?>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.reverseArray(final, Object[])": [
            1,
            1,
            1
          ],
          "CollectionUtils.collate(Iterable<? extends O>, Iterable<? extends O>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.collate(final, Iterable<? extends O>, final, Iterable<? extends O>, final, boolean)": [
            1,
            1,
            1
          ],
          "CollectionUtils.collate(final, Iterable<? extends O>, final, Iterable<? extends O>, final, Comparator<? super O>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.retainAll(final, Collection<C>, final, Collection<?>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.removeAll(final, Collection<E>, final, Collection<?>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.synchronizedCollection(final, Collection<C>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.unmodifiableCollection(final, Collection<? extends C>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.predicatedCollection(final, Collection<C>, final, Predicate<? super C>)": [
            1,
            1,
            1
          ],
          "CollectionUtils.transformingCollection(final, Collection<E>, final, Transformer<? super E, ? extends E>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CollectionUtils.union(final, Iterable<? extends O>, final, Iterable<? extends O>)": [
            2,
            2,
            2
          ],
          "CollectionUtils.intersection(final, Iterable<? extends O>, final, Iterable<? extends O>)": [
            2,
            2,
            2
          ],
          "CollectionUtils.disjunction(final, Iterable<? extends O>, final, Iterable<? extends O>)": [
            2,
            2,
            2
          ],
          "CollectionUtils.subtract(final, Iterable<? extends O>, final, Iterable<? extends O>, final, Predicate<O>)": [
            5,
            5,
            5
          ],
          "CollectionUtils.containsAll(final, Collection<?>, final, Collection<?>)": [
            8,
            8,
            8
          ],
          "CollectionUtils.containsAny(final, Collection<?>, final, Collection<?>)": [
            6,
            6,
            6
          ],
          "CollectionUtils.getCardinalityMap(final, Iterable<? extends O>)": [
            3,
            3,
            3
          ],
          "CollectionUtils.isSubCollection(final, Collection<?>, final, Collection<?>)": [
            3,
            3,
            3
          ],
          "CollectionUtils.isEqualCollection(final, Collection<?>, final, Collection<?>)": [
            5,
            5,
            5
          ],
          "CollectionUtils.isEqualCollection(final, Collection<? extends E>, final, Collection<? extends E>, final, Equator<? super E>)": [
            4,
            4,
            4
          ],
          "EquatorWrapper.equals(final, Object)": [
            2,
            2,
            2
          ],
          "CollectionUtils.cardinality(final, O, final, Iterable<? super O>)": [
            2,
            2,
            2
          ],
          "CollectionUtils.forAllDo(final, Iterable<T>, final, C)": [
            2,
            2,
            2
          ],
          "CollectionUtils.forAllDo(final, Iterator<T>, final, C)": [
            2,
            2,
            2
          ],
          "CollectionUtils.filter(final, Iterable<T>, final, Predicate<? super T>)": [
            4,
            4,
            4
          ],
          "CollectionUtils.transform(final, Collection<C>, final, Transformer<? super C, ? extends C>)": [
            4,
            4,
            4
          ],
          "CollectionUtils.select(final, Iterable<? extends O>, final, Predicate<? super O>, final, R)": [
            4,
            4,
            4
          ],
          "CollectionUtils.select(final, Iterable<? extends O>, final, Predicate<? super O>, R, R)": [
            4,
            4,
            4
          ],
          "CollectionUtils.selectRejected(final, Iterable<? extends O>, final, Predicate<? super O>, final, R)": [
            4,
            4,
            4
          ],
          "CollectionUtils.collect(final, Iterable<? extends I>, final, Transformer<? super I, ? extends O>, final, R)": [
            2,
            2,
            2
          ],
          "CollectionUtils.collect(final, Iterator<? extends I>, final, Transformer<? super I, ? extends O>, final, R)": [
            3,
            3,
            3
          ],
          "CollectionUtils.addIgnoreNull(final, Collection<T>, final, T)": [
            2,
            2,
            2
          ],
          "CollectionUtils.addAll(final, Collection<C>, final, Iterable<? extends C>)": [
            2,
            2,
            2
          ],
          "CollectionUtils.addAll(final, Collection<C>, final, Iterator<? extends C>)": [
            2,
            2,
            2
          ],
          "CollectionUtils.addAll(final, Collection<C>, final, Enumeration<? extends C>)": [
            2,
            2,
            2
          ],
          "CollectionUtils.addAll(final, Collection<C>, final, C[])": [
            2,
            2,
            2
          ],
          "CollectionUtils.get(final, Object, final, int)": [
            10,
            10,
            10
          ],
          "CollectionUtils.size(final, Object)": [
            10,
            10,
            10
          ],
          "CollectionUtils.sizeIsEmpty(final, Object)": [
            9,
            9,
            9
          ],
          "CollectionUtils.isFull(final, Collection<? extends Object>)": [
            6,
            6,
            6
          ],
          "CollectionUtils.maxSize(final, Collection<? extends Object>)": [
            6,
            6,
            6
          ],
          "CollectionUtils.collate(final, Iterable<? extends O>, final, Iterable<? extends O>, final, Comparator<? super O>, final, boolean)": [
            7,
            7,
            7
          ],
          "CollectionUtils.permutations(final, Collection<E>)": [
            2,
            2,
            2
          ],
          "CollectionUtils.retainAll(final, Iterable<E>, final, Iterable<? extends E>, final, Equator<? super E>)": [
            4,
            4,
            4
          ],
          "CollectionUtils.removeAll(final, Iterable<E>, final, Iterable<? extends E>, final, Equator<? super E>)": [
            4,
            4,
            4
          ],
          "CollectionUtils.extractSingleton(final, Collection<E>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java"
    },
    {
      "src_name": "UnmodifiableIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java",
      "class_declaration": "public final class UnmodifiableIterator <E> implements Iterator<E>, Unmodifiable ",
      "methods_under_test": {
        "=1": {
          "UnmodifiableIterator.hasNext()": [
            1,
            1,
            1
          ],
          "UnmodifiableIterator.next()": [
            1,
            1,
            1
          ],
          "UnmodifiableIterator.remove()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnmodifiableIterator.unmodifiableIterator(final, Iterator<? extends E>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIteratorTest.java"
    },
    {
      "src_name": "DefaultKeyValue",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/keyvalue/DefaultKeyValue.java",
      "class_declaration": "public class DefaultKeyValue <K, V> extends AbstractKeyValue<K, V> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java"
    },
    {
      "src_name": "DualHashBidiMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bidimap/DualHashBidiMap.java",
      "class_declaration": "public class DualHashBidiMap <K, V> extends AbstractDualBidiMap<K, V> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bidimap/DualHashBidiMapTest.java"
    },
    {
      "src_name": "ZippingIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/ZippingIterator.java",
      "class_declaration": "public class ZippingIterator <E> implements Iterator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ZippingIterator.hasNext()": [
            4,
            4,
            4
          ],
          "ZippingIterator.next()": [
            2,
            2,
            2
          ],
          "ZippingIterator.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java"
    },
    {
      "src_name": "PredicatedMultiSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multiset/PredicatedMultiSet.java",
      "class_declaration": "public class PredicatedMultiSet <E> extends PredicatedCollection<E> implements MultiSet<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/multiset/PredicatedMultiSetTest.java"
    },
    {
      "src_name": "DefaultedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/DefaultedMap.java",
      "class_declaration": "public class DefaultedMap <K, V> extends AbstractMapDecorator<K, V> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java"
    },
    {
      "src_name": "BooleanComparator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/comparators/BooleanComparator.java",
      "class_declaration": "public final class BooleanComparator implements Comparator<Boolean>, Serializable ",
      "methods_under_test": {
        "=1": {
          "BooleanComparator.booleanComparator(final, boolean)": [
            1,
            1,
            1
          ],
          "BooleanComparator.compare(final, Boolean, final, Boolean)": [
            1,
            1,
            1
          ],
          "BooleanComparator.hashCode()": [
            1,
            1,
            1
          ],
          "BooleanComparator.equals(final, Object)": [
            1,
            1,
            1
          ],
          "BooleanComparator.sortsTrueFirst()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/comparators/BooleanComparatorTest.java"
    },
    {
      "src_name": "TransformedSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/TransformedSet.java",
      "class_declaration": "public class TransformedSet <E> extends TransformedCollection<E> implements Set<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/TransformedSetTest.java"
    },
    {
      "src_name": "TransformedCollection",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/collection/TransformedCollection.java",
      "class_declaration": "public class TransformedCollection <E> extends AbstractCollectionDecorator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java"
    },
    {
      "src_name": "TrieUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/TrieUtils.java",
      "class_declaration": "public class TrieUtils ",
      "methods_under_test": {
        "=1": {
          "TrieUtils.unmodifiableTrie(final, Trie<K, ? extends V>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/TrieUtilsTest.java"
    },
    {
      "src_name": "ArrayIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/ArrayIterator.java",
      "class_declaration": "public class ArrayIterator <E> implements ResettableIterator<E> ",
      "methods_under_test": {
        "=1": {
          "ArrayIterator.hasNext()": [
            1,
            1,
            1
          ],
          "ArrayIterator.remove()": [
            1,
            1,
            1
          ],
          "ArrayIterator.reset()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArrayIterator.checkBound(final, int, final, int, final, String)": [
            2,
            2,
            2
          ],
          "ArrayIterator.next()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java"
    },
    {
      "src_name": "PredicatedList",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/list/PredicatedList.java",
      "class_declaration": "public class PredicatedList <E> extends PredicatedCollection<E> implements List<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java"
    },
    {
      "src_name": "SkippingIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/SkippingIterator.java",
      "class_declaration": "public class SkippingIterator <E> extends AbstractIteratorDecorator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java"
    },
    {
      "src_name": "GrowthList",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/list/GrowthList.java",
      "class_declaration": "public class GrowthList <E> extends AbstractSerializableListDecorator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/list/GrowthListTest.java"
    },
    {
      "src_name": "SingletonListIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/SingletonListIterator.java",
      "class_declaration": "public class SingletonListIterator <E> implements ResettableListIterator<E> ",
      "methods_under_test": {
        "=1": {
          "SingletonListIterator.hasNext()": [
            1,
            1,
            1
          ],
          "SingletonListIterator.hasPrevious()": [
            1,
            1,
            1
          ],
          "SingletonListIterator.nextIndex()": [
            1,
            1,
            1
          ],
          "SingletonListIterator.previousIndex()": [
            1,
            1,
            1
          ],
          "SingletonListIterator.add(final, E)": [
            1,
            1,
            1
          ],
          "SingletonListIterator.reset()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SingletonListIterator.next()": [
            2,
            2,
            2
          ],
          "SingletonListIterator.previous()": [
            2,
            2,
            2
          ],
          "SingletonListIterator.remove()": [
            2,
            2,
            2
          ],
          "SingletonListIterator.set(final, E)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/SingletonListIteratorTest.java"
    },
    {
      "src_name": "ListOrderedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/ListOrderedMap.java",
      "class_declaration": "public class ListOrderedMap <K, V> extends AbstractMapDecorator<K, V> implements OrderedMap<K, V>, Serializable ",
      "methods_under_test": {
        "=1": {
          "ListOrderedMapIterator.hasNext()": [
            1,
            1,
            1
          ],
          "ListOrderedMapIterator.next()": [
            1,
            1,
            1
          ],
          "ListOrderedMapIterator.hasPrevious()": [
            1,
            1,
            1
          ],
          "ListOrderedMapIterator.previous()": [
            1,
            1,
            1
          ],
          "ListOrderedMapIterator.reset()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ListOrderedMapIterator.remove()": [
            2,
            2,
            2
          ],
          "ListOrderedMapIterator.getKey()": [
            2,
            2,
            2
          ],
          "ListOrderedMapIterator.getValue()": [
            2,
            2,
            2
          ],
          "ListOrderedMapIterator.setValue(final, V)": [
            2,
            2,
            2
          ],
          "ListOrderedMapIterator.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java"
    },
    {
      "src_name": "TransformedSplitMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/splitmap/TransformedSplitMap.java",
      "class_declaration": "public class TransformedSplitMap <J, K, U, V> extends AbstractIterableGetMapDecorator<K, V> implements Put<J, U>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java"
    },
    {
      "src_name": "CollectionBag",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/CollectionBag.java",
      "class_declaration": "public final class CollectionBag <E> extends AbstractBagDecorator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java"
    },
    {
      "src_name": "LazyMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/LazyMap.java",
      "class_declaration": "public class LazyMap <K, V> extends AbstractMapDecorator<K, V> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/LazyMapTest.java"
    },
    {
      "src_name": "CompositeCollection",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/collection/CompositeCollection.java",
      "class_declaration": "public class CompositeCollection <E> implements Collection<E>, Serializable ",
      "methods_under_test": {
        "=1": {
          "CompositeCollection.clear()": [
            1,
            1,
            1
          ],
          "CompositeCollection.setMutator(final, CollectionMutator<E>)": [
            1,
            1,
            1
          ],
          "CompositeCollection.addComposited(final, Collection<E>)": [
            1,
            1,
            1
          ],
          "CompositeCollection.addComposited(final, Collection<E>, final, Collection<E>)": [
            1,
            1,
            1
          ],
          "CompositeCollection.addComposited()": [
            1,
            1,
            1
          ],
          "CompositeCollection.removeComposited(final, Collection<E>)": [
            1,
            1,
            1
          ],
          "CompositeCollection.toCollection()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CompositeCollection.size()": [
            2,
            2,
            2
          ],
          "CompositeCollection.contains(final, Object)": [
            3,
            3,
            3
          ],
          "CompositeCollection.iterator()": [
            3,
            3,
            3
          ],
          "CompositeCollection.toArray()": [
            2,
            2,
            2
          ],
          "CompositeCollection.toArray(final, T[])": [
            5,
            5,
            5
          ],
          "CompositeCollection.add(final, E)": [
            2,
            2,
            2
          ],
          "CompositeCollection.remove(final, Object)": [
            2,
            2,
            2
          ],
          "CompositeCollection.containsAll(final, Collection<?>)": [
            3,
            3,
            3
          ],
          "CompositeCollection.addAll(final, Collection<? extends E>)": [
            2,
            2,
            2
          ],
          "CompositeCollection.removeAll(final, Collection<?>)": [
            3,
            3,
            3
          ],
          "CompositeCollection.retainAll(final, Collection<?>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java"
    },
    {
      "src_name": "IteratorChain",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/IteratorChain.java",
      "class_declaration": "public class IteratorChain <E> implements Iterator<E> ",
      "methods_under_test": {
        "=1": {
          "IteratorChain.size()": [
            1,
            1,
            1
          ],
          "IteratorChain.hasNext()": [
            1,
            1,
            1
          ],
          "IteratorChain.next()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "IteratorChain.addIterator(final, Iterator<? extends E>)": [
            2,
            2,
            2
          ],
          "IteratorChain.updateCurrentIterator()": [
            3,
            3,
            3
          ],
          "IteratorChain.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java"
    },
    {
      "src_name": "FixedOrderComparator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/comparators/FixedOrderComparator.java",
      "class_declaration": "public class FixedOrderComparator <T> implements Comparator<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "FixedOrderComparator.checkLocked()": [
            1,
            1,
            1
          ],
          "FixedOrderComparator.add(final, T)": [
            1,
            1,
            1
          ],
          "FixedOrderComparator.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FixedOrderComparator.setUnknownObjectBehavior(final, UnknownObjectBehavior)": [
            2,
            2,
            2
          ],
          "FixedOrderComparator.addAsEqual(final, T, final, T)": [
            2,
            2,
            2
          ],
          "FixedOrderComparator.compare(final, T, final, T)": [
            5,
            5,
            5
          ],
          "FixedOrderComparator.equals(final, Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java"
    },
    {
      "src_name": "ListUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/ListUtils.java",
      "class_declaration": "public class ListUtils ",
      "methods_under_test": {
        "=1": {
          "ListUtils.emptyIfNull(final, List<T>)": [
            1,
            1,
            1
          ],
          "ListUtils.defaultIfNull(final, List<T>, final, List<T>)": [
            1,
            1,
            1
          ],
          "ListUtils.sum(final, List<? extends E>, final, List<? extends E>)": [
            1,
            1,
            1
          ],
          "ListUtils.union(final, List<? extends E>, final, List<? extends E>)": [
            1,
            1,
            1
          ],
          "ListUtils.select(final, Collection<? extends E>, final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "ListUtils.selectRejected(final, Collection<? extends E>, final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "ListUtils.synchronizedList(final, List<E>)": [
            1,
            1,
            1
          ],
          "ListUtils.unmodifiableList(final, List<? extends E>)": [
            1,
            1,
            1
          ],
          "ListUtils.predicatedList(final, List<E>, final, Predicate<E>)": [
            1,
            1,
            1
          ],
          "ListUtils.transformedList(final, List<E>, final, Transformer<? super E, ? extends E>)": [
            1,
            1,
            1
          ],
          "ListUtils.lazyList(final, List<E>, final, Factory<? extends E>)": [
            1,
            1,
            1
          ],
          "ListUtils.fixedSizeList(final, List<E>)": [
            1,
            1,
            1
          ],
          "ListUtils.longestCommonSubsequence(final, List<E>, final, List<E>)": [
            1,
            1,
            1
          ],
          "LcsVisitor.visitKeepCommand(final, E)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ListUtils.intersection(final, List<? extends E>, final, List<? extends E>)": [
            4,
            4,
            4
          ],
          "ListUtils.subtract(final, List<E>, final, List<? extends E>)": [
            3,
            3,
            3
          ],
          "ListUtils.isEqualList(final, Collection<?>, final, Collection<?>)": [
            5,
            5,
            5
          ],
          "ListUtils.hashCodeForList(final, Collection<?>)": [
            3,
            3,
            3
          ],
          "ListUtils.retainAll(final, Collection<E>, final, Collection<?>)": [
            3,
            3,
            3
          ],
          "ListUtils.removeAll(final, Collection<E>, final, Collection<?>)": [
            3,
            3,
            3
          ],
          "ListUtils.indexOf(final, List<E>, final, Predicate<E>)": [
            4,
            4,
            4
          ],
          "ListUtils.longestCommonSubsequence(final, List<E>, final, List<E>, final, Equator<? super E>)": [
            3,
            3,
            3
          ],
          "ListUtils.longestCommonSubsequence(final, CharSequence, final, CharSequence)": [
            3,
            3,
            3
          ],
          "ListUtils.partition(final, List<T>, final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/ListUtilsTest.java"
    },
    {
      "src_name": "ReferenceMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/ReferenceMap.java",
      "class_declaration": "public class ReferenceMap <K, V> extends AbstractReferenceMap<K, V> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java"
    },
    {
      "src_name": "AbstractMultiValuedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java",
      "class_declaration": "public abstract class AbstractMultiValuedMap <K, V> implements MultiValuedMap<K, V> ",
      "methods_under_test": {
        "=1": {
          "AbstractMultiValuedMap.containsKey(Object)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMap.containsValue(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMap.containsMapping(Object, Object)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMap.entries()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMap.get(final, K)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMap.wrappedCollection(final, K)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMap.remove(Object)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMap.keySet()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMap.values()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMap.clear()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMap.asMap()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMap.hashCode()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMap.toString()": [
            1,
            1,
            1
          ],
          "MapEntryTransformer.transform(final, Map.Entry<K, Collection<V>>)": [
            1,
            1,
            1
          ],
          "MultiValuedMapIterator.hasNext()": [
            1,
            1,
            1
          ],
          "MultiValuedMapIterator.next()": [
            1,
            1,
            1
          ],
          "MultiValuedMapIterator.remove()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMap.doWriteObject(final, ObjectOutputStream)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMap.doReadObject(final, ObjectInputStream)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractMultiValuedMap.removeMapping(final, Object, final, Object)": [
            3,
            3,
            3
          ],
          "AbstractMultiValuedMap.size()": [
            2,
            2,
            2
          ],
          "AbstractMultiValuedMap.put(final, K, final, V)": [
            4,
            4,
            4
          ],
          "AbstractMultiValuedMap.putAll(final, Map<? extends K, ? extends V>)": [
            3,
            3,
            3
          ],
          "AbstractMultiValuedMap.putAll(final, MultiValuedMap<? extends K, ? extends V>)": [
            3,
            3,
            3
          ],
          "AbstractMultiValuedMap.keys()": [
            2,
            2,
            2
          ],
          "AbstractMultiValuedMap.putAll(final, K, final, Iterable<? extends V>)": [
            4,
            4,
            4
          ],
          "AbstractMultiValuedMap.mapIterator()": [
            2,
            2,
            2
          ],
          "AbstractMultiValuedMap.equals(Object)": [
            3,
            3,
            3
          ],
          "WrappedCollection.add(V)": [
            3,
            3,
            3
          ],
          "WrappedCollection.addAll(Collection<? extends V>)": [
            3,
            3,
            3
          ],
          "WrappedCollection.clear()": [
            4,
            4,
            4
          ],
          "WrappedCollection.iterator()": [
            2,
            2,
            2
          ],
          "WrappedCollection.size()": [
            2,
            2,
            2
          ],
          "WrappedCollection.contains(Object)": [
            2,
            2,
            2
          ],
          "WrappedCollection.containsAll(Collection<?>)": [
            2,
            2,
            2
          ],
          "WrappedCollection.remove(Object)": [
            6,
            6,
            6
          ],
          "WrappedCollection.removeAll(Collection<?>)": [
            6,
            6,
            6
          ],
          "WrappedCollection.retainAll(Collection<?>)": [
            6,
            6,
            6
          ],
          "WrappedCollection.toArray()": [
            4,
            4,
            4
          ],
          "WrappedCollection.toArray(T[])": [
            4,
            4,
            4
          ],
          "WrappedCollection.toString()": [
            4,
            4,
            4
          ],
          "MultiValuedMapIterator.getKey()": [
            2,
            2,
            2
          ],
          "MultiValuedMapIterator.getValue()": [
            2,
            2,
            2
          ],
          "MultiValuedMapIterator.setValue(V)": [
            2,
            2,
            2
          ],
          "ValuesIterator.remove()": [
            5,
            5,
            5
          ],
          "ValuesIterator.hasNext()": [
            2,
            2,
            2
          ],
          "ValuesIterator.next()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java"
    },
    {
      "src_name": "UnmodifiableOrderedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap.java",
      "class_declaration": "public final class UnmodifiableOrderedMap <K, V> extends AbstractOrderedMapDecorator<K, V> implements\n        Unmodifiable, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java"
    },
    {
      "src_name": "EnumerationUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/EnumerationUtils.java",
      "class_declaration": "public class EnumerationUtils ",
      "methods_under_test": {
        "=1": {
          "EnumerationUtils.toList(final, Enumeration<? extends E>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EnumerationUtils.get(final, Enumeration<T>, final, int)": [
            3,
            3,
            3
          ],
          "EnumerationUtils.toList(final, StringTokenizer)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java"
    },
    {
      "src_name": "NodeListIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java",
      "class_declaration": "public class NodeListIterator implements Iterator<Node> ",
      "methods_under_test": {
        "=1": {
          "NodeListIterator.hasNext()": [
            1,
            1,
            1
          ],
          "NodeListIterator.remove()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NodeListIterator.next()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java"
    },
    {
      "src_name": "UnmodifiableMapEntry",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntry.java",
      "class_declaration": "public final class UnmodifiableMapEntry <K, V> extends AbstractMapEntry<K, V> implements Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java"
    },
    {
      "src_name": "ComparatorPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java",
      "class_declaration": "public class ComparatorPredicate <T> implements Predicate<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "ComparatorPredicate.comparatorPredicate(final, T, final, Comparator<T>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ComparatorPredicate.comparatorPredicate(final, T, final, Comparator<T>, final, Criterion)": [
            3,
            3,
            3
          ],
          "ComparatorPredicate.evaluate(final, T)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java"
    },
    {
      "src_name": "UnmodifiableSortedBag",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/UnmodifiableSortedBag.java",
      "class_declaration": "public final class UnmodifiableSortedBag <E> extends AbstractSortedBagDecorator<E> implements Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBagTest.java"
    },
    {
      "src_name": "UnmodifiableTrie",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java",
      "class_declaration": "public class UnmodifiableTrie <K, V> implements Trie<K, V>, Serializable, Unmodifiable ",
      "methods_under_test": {
        "=1": {
          "UnmodifiableTrie.entrySet()": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.keySet()": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.values()": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.clear()": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.containsKey(final, Object)": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.containsValue(final, Object)": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.get(final, Object)": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.put(final, K, final, V)": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.putAll(final, Map<? extends K, ? extends V>)": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.remove(final, Object)": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.size()": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.firstKey()": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.headMap(final, K)": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.lastKey()": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.subMap(final, K, final, K)": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.tailMap(final, K)": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.prefixMap(final, K)": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.comparator()": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.mapIterator()": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.nextKey(K)": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.previousKey(K)": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.hashCode()": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.equals(final, Object)": [
            1,
            1,
            1
          ],
          "UnmodifiableTrie.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnmodifiableTrie.unmodifiableTrie(final, Trie<K, ? extends V>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java"
    },
    {
      "src_name": "ComparatorUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/ComparatorUtils.java",
      "class_declaration": "public class ComparatorUtils ",
      "methods_under_test": {
        "=1": {
          "ComparatorUtils.naturalComparator()": [
            1,
            1,
            1
          ],
          "ComparatorUtils.chainedComparator(final, Collection<Comparator<E>>)": [
            1,
            1,
            1
          ],
          "ComparatorUtils.reversedComparator(final, Comparator<E>)": [
            1,
            1,
            1
          ],
          "ComparatorUtils.booleanComparator(final, boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ComparatorUtils.chainedComparator()": [
            3,
            3,
            3
          ],
          "ComparatorUtils.nullLowComparator(Comparator<E>)": [
            2,
            2,
            2
          ],
          "ComparatorUtils.nullHighComparator(Comparator<E>)": [
            2,
            2,
            2
          ],
          "ComparatorUtils.transformedComparator(Comparator<O>, final, Transformer<? super I, ? extends O>)": [
            2,
            2,
            2
          ],
          "ComparatorUtils.min(final, E, final, E, Comparator<E>)": [
            2,
            2,
            2
          ],
          "ComparatorUtils.max(final, E, final, E, Comparator<E>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java"
    },
    {
      "src_name": "FixedSizeList",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/list/FixedSizeList.java",
      "class_declaration": "public class FixedSizeList <E> extends AbstractSerializableListDecorator<E> implements BoundedCollection<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java"
    },
    {
      "src_name": "LoopingListIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/LoopingListIterator.java",
      "class_declaration": "public class LoopingListIterator <E> implements ResettableListIterator<E> ",
      "methods_under_test": {
        "=1": {
          "LoopingListIterator.hasNext()": [
            1,
            1,
            1
          ],
          "LoopingListIterator.hasPrevious()": [
            1,
            1,
            1
          ],
          "LoopingListIterator.remove()": [
            1,
            1,
            1
          ],
          "LoopingListIterator.add(final, E)": [
            1,
            1,
            1
          ],
          "LoopingListIterator.set(final, E)": [
            1,
            1,
            1
          ],
          "LoopingListIterator.reset()": [
            1,
            1,
            1
          ],
          "LoopingListIterator.size()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LoopingListIterator.next()": [
            3,
            3,
            3
          ],
          "LoopingListIterator.nextIndex()": [
            3,
            3,
            3
          ],
          "LoopingListIterator.previous()": [
            4,
            4,
            4
          ],
          "LoopingListIterator.previousIndex()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java"
    },
    {
      "src_name": "TreeList",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/list/TreeList.java",
      "class_declaration": "public class TreeList <E> extends AbstractList<E> ",
      "methods_under_test": {
        "=1": {
          "AVLNode.setValue(final, E)": [
            1,
            1,
            1
          ],
          "AVLNode.toString()": [
            1,
            1,
            1
          ],
          "TreeListIterator.checkModCount()": [
            1,
            1,
            1
          ],
          "TreeListIterator.hasNext()": [
            1,
            1,
            1
          ],
          "TreeListIterator.hasPrevious()": [
            1,
            1,
            1
          ],
          "TreeListIterator.nextIndex()": [
            1,
            1,
            1
          ],
          "TreeListIterator.previousIndex()": [
            1,
            1,
            1
          ],
          "TreeListIterator.add(final, E)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AVLNode.get(final, int)": [
            3,
            3,
            3
          ],
          "AVLNode.indexOf(final, Object, final, int)": [
            5,
            5,
            5
          ],
          "AVLNode.toArray(final, Object[], final, int)": [
            3,
            3,
            3
          ],
          "AVLNode.next()": [
            2,
            2,
            2
          ],
          "AVLNode.previous()": [
            2,
            2,
            2
          ],
          "AVLNode.insert(final, int, final, E)": [
            2,
            2,
            2
          ],
          "AVLNode.remove(final, int)": [
            5,
            5,
            5
          ],
          "TreeListIterator.next()": [
            3,
            3,
            3
          ],
          "TreeListIterator.previous()": [
            3,
            3,
            3
          ],
          "TreeListIterator.remove()": [
            3,
            3,
            3
          ],
          "TreeListIterator.set(final, E)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/list/TreeListTest.java"
    },
    {
      "src_name": "TransformerUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/TransformerUtils.java",
      "class_declaration": "public class TransformerUtils ",
      "methods_under_test": {
        "=1": {
          "TransformerUtils.exceptionTransformer()": [
            1,
            1,
            1
          ],
          "TransformerUtils.nullTransformer()": [
            1,
            1,
            1
          ],
          "TransformerUtils.nopTransformer()": [
            1,
            1,
            1
          ],
          "TransformerUtils.cloneTransformer()": [
            1,
            1,
            1
          ],
          "TransformerUtils.constantTransformer(final, O)": [
            1,
            1,
            1
          ],
          "TransformerUtils.asTransformer(final, Closure<? super T>)": [
            1,
            1,
            1
          ],
          "TransformerUtils.asTransformer(final, Predicate<? super T>)": [
            1,
            1,
            1
          ],
          "TransformerUtils.asTransformer(final, Factory<? extends O>)": [
            1,
            1,
            1
          ],
          "TransformerUtils.chainedTransformer()": [
            1,
            1,
            1
          ],
          "TransformerUtils.chainedTransformer(final, Collection<? extends Transformer<? super T, ? extends T>>)": [
            1,
            1,
            1
          ],
          "TransformerUtils.ifTransformer(final, Predicate<? super T>, final, Transformer<? super T, ? extends T>)": [
            1,
            1,
            1
          ],
          "TransformerUtils.ifTransformer(final, Predicate<? super I>, final, Transformer<? super I, ? extends O>, final, Transformer<? super I, ? extends O>)": [
            1,
            1,
            1
          ],
          "TransformerUtils.switchTransformer(final, Predicate<? super I>, final, Transformer<? super I, ? extends O>, final, Transformer<? super I, ? extends O>)": [
            1,
            1,
            1
          ],
          "TransformerUtils.switchTransformer(final, Predicate<? super I>[], final, Transformer<? super I, ? extends O>[])": [
            1,
            1,
            1
          ],
          "TransformerUtils.switchTransformer(final, Predicate<? super I>[], final, Transformer<? super I, ? extends O>[], final, Transformer<? super I, ? extends O>)": [
            1,
            1,
            1
          ],
          "TransformerUtils.switchTransformer(final, Map<Predicate<I>, Transformer<I, O>>)": [
            1,
            1,
            1
          ],
          "TransformerUtils.instantiateTransformer()": [
            1,
            1,
            1
          ],
          "TransformerUtils.instantiateTransformer(final, Class<?>[], final, Object[])": [
            1,
            1,
            1
          ],
          "TransformerUtils.mapTransformer(final, Map<? super I, ? extends O>)": [
            1,
            1,
            1
          ],
          "TransformerUtils.invokerTransformer(final, String)": [
            1,
            1,
            1
          ],
          "TransformerUtils.invokerTransformer(final, String, final, Class<?>[], final, Object[])": [
            1,
            1,
            1
          ],
          "TransformerUtils.stringValueTransformer()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TransformerUtils.switchMapTransformer(final, Map<I, Transformer<I, O>>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java"
    },
    {
      "src_name": "TreeBag",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/TreeBag.java",
      "class_declaration": "public class TreeBag <E> extends AbstractMapBag<E> implements SortedBag<E>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java"
    },
    {
      "src_name": "SynchronizedMultiSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multiset/SynchronizedMultiSet.java",
      "class_declaration": "public class SynchronizedMultiSet <E> extends SynchronizedCollection<E> implements MultiSet<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/multiset/SynchronizedMultiSetTest.java"
    },
    {
      "src_name": "LazySortedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/LazySortedMap.java",
      "class_declaration": "public class LazySortedMap <K,V> extends LazyMap<K,V> implements SortedMap<K,V> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java"
    },
    {
      "src_name": "ArrayStack",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/ArrayStack.java",
      "class_declaration": "@Deprecated\npublic class ArrayStack <E> extends ArrayList<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/ArrayStackTest.java"
    },
    {
      "src_name": "CatchAndRethrowClosure",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/CatchAndRethrowClosure.java",
      "class_declaration": "public abstract class CatchAndRethrowClosure <E> implements Closure<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "CatchAndRethrowClosure.execute(final, E)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/functors/CatchAndRethrowClosureTest.java"
    },
    {
      "src_name": "HashedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/HashedMap.java",
      "class_declaration": "public class HashedMap <K, V> extends AbstractHashedMap<K, V> implements Serializable, Cloneable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/HashedMapTest.java"
    },
    {
      "src_name": "StaticBucketMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/StaticBucketMap.java",
      "class_declaration": "public final class StaticBucketMap <K, V> extends AbstractIterableMap<K, V> ",
      "methods_under_test": {
        "=1": {
          "Node.hashCode()": [
            1,
            1,
            1
          ],
          "Node.setValue(final, V)": [
            1,
            1,
            1
          ],
          "EntryIterator.next()": [
            1,
            1,
            1
          ],
          "ValueIterator.next()": [
            1,
            1,
            1
          ],
          "KeyIterator.next()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Node.equals(final, Object)": [
            3,
            3,
            3
          ],
          "BaseIterator.hasNext()": [
            6,
            6,
            6
          ],
          "BaseIterator.nextEntry()": [
            2,
            2,
            2
          ],
          "BaseIterator.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/StaticBucketMapTest.java"
    },
    {
      "src_name": "TransformedQueue",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java",
      "class_declaration": "public class TransformedQueue <E> extends TransformedCollection<E> implements Queue<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java"
    },
    {
      "src_name": "TransformedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/TransformedMap.java",
      "class_declaration": "public class TransformedMap <K, V> extends AbstractInputCheckedMapDecorator<K, V> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java"
    },
    {
      "src_name": "TransformedList",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/list/TransformedList.java",
      "class_declaration": "public class TransformedList <E> extends TransformedCollection<E> implements List<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/list/TransformedListTest.java"
    },
    {
      "src_name": "ReferenceIdentityMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/ReferenceIdentityMap.java",
      "class_declaration": "public class ReferenceIdentityMap <K, V> extends AbstractReferenceMap<K, V> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java"
    },
    {
      "src_name": "TreeBidiMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bidimap/TreeBidiMap.java",
      "class_declaration": "public class TreeBidiMap <K extends Comparable<K>, V extends Comparable<V>> implements OrderedBidiMap<K, V>, Serializable ",
      "methods_under_test": {
        "=1": {
          "TreeBidiMap.size()": [
            1,
            1,
            1
          ],
          "TreeBidiMap.containsKey(final, Object)": [
            1,
            1,
            1
          ],
          "TreeBidiMap.containsValue(final, Object)": [
            1,
            1,
            1
          ],
          "TreeBidiMap.get(final, Object)": [
            1,
            1,
            1
          ],
          "TreeBidiMap.put(final, K, final, V)": [
            1,
            1,
            1
          ],
          "TreeBidiMap.putAll(final, Map<? extends K, ? extends V>)": [
            1,
            1,
            1
          ],
          "TreeBidiMap.remove(final, Object)": [
            1,
            1,
            1
          ],
          "TreeBidiMap.clear()": [
            1,
            1,
            1
          ],
          "TreeBidiMap.getKey(final, Object)": [
            1,
            1,
            1
          ],
          "TreeBidiMap.removeValue(final, Object)": [
            1,
            1,
            1
          ],
          "TreeBidiMap.nextKey(final, K)": [
            1,
            1,
            1
          ],
          "TreeBidiMap.previousKey(final, K)": [
            1,
            1,
            1
          ],
          "TreeBidiMap.equals(final, Object)": [
            1,
            1,
            1
          ],
          "TreeBidiMap.hashCode()": [
            1,
            1,
            1
          ],
          "TreeBidiMap.toString()": [
            1,
            1,
            1
          ],
          "TreeBidiMap.readObject(final, ObjectInputStream)": [
            1,
            1,
            1
          ],
          "ViewIterator.hasNext()": [
            1,
            1,
            1
          ],
          "ViewIterator.hasPrevious()": [
            1,
            1,
            1
          ],
          "ViewIterator.setValue(final, V)": [
            1,
            1,
            1
          ],
          "ViewMapIterator.next()": [
            1,
            1,
            1
          ],
          "ViewMapIterator.previous()": [
            1,
            1,
            1
          ],
          "ViewIterator.setValue(final, K)": [
            1,
            1,
            1
          ],
          "InverseViewMapIterator.next()": [
            1,
            1,
            1
          ],
          "InverseViewMapIterator.previous()": [
            1,
            1,
            1
          ],
          "ViewMapEntryIterator.next()": [
            1,
            1,
            1
          ],
          "ViewMapEntryIterator.previous()": [
            1,
            1,
            1
          ],
          "InverseViewMapEntryIterator.next()": [
            1,
            1,
            1
          ],
          "InverseViewMapEntryIterator.previous()": [
            1,
            1,
            1
          ],
          "Node.setValue(final, V)": [
            1,
            1,
            1
          ],
          "Inverse.size()": [
            1,
            1,
            1
          ],
          "Inverse.get(final, Object)": [
            1,
            1,
            1
          ],
          "Inverse.getKey(final, Object)": [
            1,
            1,
            1
          ],
          "Inverse.containsKey(final, Object)": [
            1,
            1,
            1
          ],
          "Inverse.containsValue(final, Object)": [
            1,
            1,
            1
          ],
          "Inverse.nextKey(final, V)": [
            1,
            1,
            1
          ],
          "Inverse.previousKey(final, V)": [
            1,
            1,
            1
          ],
          "Inverse.put(final, V, final, K)": [
            1,
            1,
            1
          ],
          "Inverse.putAll(final, Map<? extends V, ? extends K>)": [
            1,
            1,
            1
          ],
          "Inverse.remove(final, Object)": [
            1,
            1,
            1
          ],
          "Inverse.removeValue(final, Object)": [
            1,
            1,
            1
          ],
          "Inverse.clear()": [
            1,
            1,
            1
          ],
          "Inverse.inverseBidiMap()": [
            1,
            1,
            1
          ],
          "Inverse.equals(final, Object)": [
            1,
            1,
            1
          ],
          "Inverse.hashCode()": [
            1,
            1,
            1
          ],
          "Inverse.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TreeBidiMap.firstKey()": [
            2,
            2,
            2
          ],
          "TreeBidiMap.lastKey()": [
            2,
            2,
            2
          ],
          "TreeBidiMap.keySet()": [
            2,
            2,
            2
          ],
          "TreeBidiMap.values()": [
            2,
            2,
            2
          ],
          "TreeBidiMap.entrySet()": [
            2,
            2,
            2
          ],
          "TreeBidiMap.mapIterator()": [
            2,
            2,
            2
          ],
          "TreeBidiMap.inverseBidiMap()": [
            2,
            2,
            2
          ],
          "TreeBidiMap.lookup(final, Object, final, DataElement)": [
            3,
            3,
            3
          ],
          "ViewIterator.navigateNext()": [
            3,
            3,
            3
          ],
          "ViewIterator.navigatePrevious()": [
            4,
            4,
            4
          ],
          "ViewIterator.remove()": [
            5,
            5,
            5
          ],
          "ViewMapIterator.getKey()": [
            2,
            2,
            2
          ],
          "ViewMapIterator.getValue()": [
            2,
            2,
            2
          ],
          "InverseViewMapIterator.getKey()": [
            2,
            2,
            2
          ],
          "InverseViewMapIterator.getValue()": [
            2,
            2,
            2
          ],
          "Node.equals(final, Object)": [
            3,
            3,
            3
          ],
          "Node.hashCode()": [
            2,
            2,
            2
          ],
          "Inverse.firstKey()": [
            2,
            2,
            2
          ],
          "Inverse.lastKey()": [
            2,
            2,
            2
          ],
          "Inverse.keySet()": [
            2,
            2,
            2
          ],
          "Inverse.values()": [
            2,
            2,
            2
          ],
          "Inverse.entrySet()": [
            2,
            2,
            2
          ],
          "Inverse.mapIterator()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bidimap/TreeBidiMapTest.java"
    },
    {
      "src_name": "AbstractMapEntry",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntry.java",
      "class_declaration": "public abstract class AbstractMapEntry <K, V> extends AbstractKeyValue<K, V> implements Map.Entry<K, V> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryTest.java"
    },
    {
      "src_name": "DefaultMapEntry",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/keyvalue/DefaultMapEntry.java",
      "class_declaration": "public final class DefaultMapEntry <K, V> extends AbstractMapEntry<K, V> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/keyvalue/DefaultMapEntryTest.java"
    },
    {
      "src_name": "ReverseListIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/ReverseListIterator.java",
      "class_declaration": "public class ReverseListIterator <E> implements ResettableListIterator<E> ",
      "methods_under_test": {
        "=1": {
          "ReverseListIterator.hasNext()": [
            1,
            1,
            1
          ],
          "ReverseListIterator.next()": [
            1,
            1,
            1
          ],
          "ReverseListIterator.nextIndex()": [
            1,
            1,
            1
          ],
          "ReverseListIterator.hasPrevious()": [
            1,
            1,
            1
          ],
          "ReverseListIterator.previous()": [
            1,
            1,
            1
          ],
          "ReverseListIterator.previousIndex()": [
            1,
            1,
            1
          ],
          "ReverseListIterator.reset()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ReverseListIterator.remove()": [
            2,
            2,
            2
          ],
          "ReverseListIterator.set(final, E)": [
            2,
            2,
            2
          ],
          "ReverseListIterator.add(final, E)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java"
    },
    {
      "src_name": "PredicatedSortedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/PredicatedSortedMap.java",
      "class_declaration": "public class PredicatedSortedMap <K, V> extends PredicatedMap<K, V> implements SortedMap<K, V> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java"
    },
    {
      "src_name": "PredicatedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/PredicatedMap.java",
      "class_declaration": "public class PredicatedMap <K, V> extends AbstractInputCheckedMapDecorator<K, V> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java"
    },
    {
      "src_name": "AbstractIterableMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/AbstractIterableMap.java",
      "class_declaration": "public abstract class AbstractIterableMap <K, V> implements IterableMap<K, V> ",
      "methods_under_test": {
        "=1": {
          "AbstractIterableMap.mapIterator()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/AbstractIterableMapTest.java"
    },
    {
      "src_name": "UnmodifiableList",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/list/UnmodifiableList.java",
      "class_declaration": "public final class UnmodifiableList <E> extends AbstractSerializableListDecorator<E> implements Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java"
    },
    {
      "src_name": "PermutationIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/PermutationIterator.java",
      "class_declaration": "public class PermutationIterator <E> implements Iterator<List<E>> ",
      "methods_under_test": {
        "=1": {
          "PermutationIterator.hasNext()": [
            1,
            1,
            1
          ],
          "PermutationIterator.remove()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PermutationIterator.next()": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java"
    },
    {
      "src_name": "NullPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/NullPredicate.java",
      "class_declaration": "public final class NullPredicate <T> implements Predicate<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "NullPredicate.nullPredicate()": [
            1,
            1,
            1
          ],
          "NullPredicate.evaluate(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/functors/NullPredicateTest.java"
    },
    {
      "src_name": "CompositeSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/CompositeSet.java",
      "class_declaration": "public class CompositeSet <E> implements Set<E>, Serializable ",
      "methods_under_test": {
        "=1": {
          "CompositeSet.clear()": [
            1,
            1,
            1
          ],
          "CompositeSet.setMutator(final, SetMutator<E>)": [
            1,
            1,
            1
          ],
          "CompositeSet.addComposited(final, Set<E>, final, Set<E>)": [
            1,
            1,
            1
          ],
          "CompositeSet.addComposited()": [
            1,
            1,
            1
          ],
          "CompositeSet.removeComposited(final, Set<E>)": [
            1,
            1,
            1
          ],
          "CompositeSet.toSet()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CompositeSet.size()": [
            2,
            2,
            2
          ],
          "CompositeSet.contains(final, Object)": [
            3,
            3,
            3
          ],
          "CompositeSet.iterator()": [
            3,
            3,
            3
          ],
          "CompositeSet.toArray()": [
            2,
            2,
            2
          ],
          "CompositeSet.toArray(final, T[])": [
            5,
            5,
            5
          ],
          "CompositeSet.add(final, E)": [
            2,
            2,
            2
          ],
          "CompositeSet.remove(final, Object)": [
            3,
            3,
            3
          ],
          "CompositeSet.containsAll(final, Collection<?>)": [
            3,
            3,
            3
          ],
          "CompositeSet.addAll(final, Collection<? extends E>)": [
            2,
            2,
            2
          ],
          "CompositeSet.removeAll(final, Collection<?>)": [
            3,
            3,
            3
          ],
          "CompositeSet.retainAll(final, Collection<?>)": [
            2,
            2,
            2
          ],
          "CompositeSet.addComposited(final, Set<E>)": [
            5,
            5,
            5
          ],
          "CompositeSet.equals(final, Object)": [
            2,
            2,
            2
          ],
          "CompositeSet.hashCode()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java"
    },
    {
      "src_name": "SynchronizedCollection",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/collection/SynchronizedCollection.java",
      "class_declaration": "public class SynchronizedCollection <E> implements Collection<E>, Serializable ",
      "methods_under_test": {
        "=1": {
          "SynchronizedCollection.synchronizedCollection(final, Collection<T>)": [
            1,
            1,
            1
          ],
          "SynchronizedCollection.decorated()": [
            1,
            1,
            1
          ],
          "SynchronizedCollection.clear()": [
            1,
            1,
            1
          ],
          "SynchronizedCollection.iterator()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SynchronizedCollection.add(final, E)": [
            2,
            2,
            2
          ],
          "SynchronizedCollection.addAll(final, Collection<? extends E>)": [
            2,
            2,
            2
          ],
          "SynchronizedCollection.contains(final, Object)": [
            2,
            2,
            2
          ],
          "SynchronizedCollection.containsAll(final, Collection<?>)": [
            2,
            2,
            2
          ],
          "SynchronizedCollection.toArray()": [
            2,
            2,
            2
          ],
          "SynchronizedCollection.toArray(final, T[])": [
            2,
            2,
            2
          ],
          "SynchronizedCollection.remove(final, Object)": [
            2,
            2,
            2
          ],
          "SynchronizedCollection.removeAll(final, Collection<?>)": [
            2,
            2,
            2
          ],
          "SynchronizedCollection.retainAll(final, Collection<?>)": [
            2,
            2,
            2
          ],
          "SynchronizedCollection.size()": [
            2,
            2,
            2
          ],
          "SynchronizedCollection.equals(final, Object)": [
            3,
            3,
            3
          ],
          "SynchronizedCollection.hashCode()": [
            2,
            2,
            2
          ],
          "SynchronizedCollection.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/collection/SynchronizedCollectionTest.java"
    },
    {
      "src_name": "PredicatedNavigableSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/PredicatedNavigableSet.java",
      "class_declaration": "public class PredicatedNavigableSet <E> extends PredicatedSortedSet<E> implements NavigableSet<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java"
    },
    {
      "src_name": "PassiveExpiringMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/PassiveExpiringMap.java",
      "class_declaration": "public class PassiveExpiringMap <K, V> extends AbstractMapDecorator<K, V> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ConstantTimeToLiveExpirationPolicy.expirationTime(final, K, final, V)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java"
    },
    {
      "src_name": "AllPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/AllPredicate.java",
      "class_declaration": "public final class AllPredicate <T> extends AbstractQuantifierPredicate<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java"
    },
    {
      "src_name": "FilterIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/FilterIterator.java",
      "class_declaration": "public class FilterIterator <E> implements Iterator<E> ",
      "methods_under_test": {
        "=1": {
          "FilterIterator.hasNext()": [
            1,
            1,
            1
          ],
          "FilterIterator.setIterator(final, Iterator<? extends E>)": [
            1,
            1,
            1
          ],
          "FilterIterator.setPredicate(final, Predicate<? super E>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FilterIterator.next()": [
            3,
            3,
            3
          ],
          "FilterIterator.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java"
    },
    {
      "src_name": "FixedSizeMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/FixedSizeMap.java",
      "class_declaration": "public class FixedSizeMap <K, V> extends AbstractMapDecorator<K, V> implements BoundedMap<K, V>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/FixedSizeMapTest.java"
    },
    {
      "src_name": "EqualPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/EqualPredicate.java",
      "class_declaration": "public final class EqualPredicate <T> implements Predicate<T>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "EqualPredicate.equalPredicate(final, T)": [
            2,
            2,
            2
          ],
          "EqualPredicate.equalPredicate(final, T, final, Equator<T>)": [
            2,
            2,
            2
          ],
          "EqualPredicate.evaluate(final, T)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/functors/EqualPredicateTest.java"
    },
    {
      "src_name": "PredicatedSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/PredicatedSet.java",
      "class_declaration": "public class PredicatedSet <E> extends PredicatedCollection<E> implements Set<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java"
    },
    {
      "src_name": "PredicateUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/PredicateUtils.java",
      "class_declaration": "public class PredicateUtils ",
      "methods_under_test": {
        "=1": {
          "PredicateUtils.exceptionPredicate()": [
            1,
            1,
            1
          ],
          "PredicateUtils.truePredicate()": [
            1,
            1,
            1
          ],
          "PredicateUtils.falsePredicate()": [
            1,
            1,
            1
          ],
          "PredicateUtils.nullPredicate()": [
            1,
            1,
            1
          ],
          "PredicateUtils.notNullPredicate()": [
            1,
            1,
            1
          ],
          "PredicateUtils.equalPredicate(final, T)": [
            1,
            1,
            1
          ],
          "PredicateUtils.identityPredicate(final, T)": [
            1,
            1,
            1
          ],
          "PredicateUtils.instanceofPredicate(final, Class<?>)": [
            1,
            1,
            1
          ],
          "PredicateUtils.uniquePredicate()": [
            1,
            1,
            1
          ],
          "PredicateUtils.invokerPredicate(final, String)": [
            1,
            1,
            1
          ],
          "PredicateUtils.invokerPredicate(final, String, final, Class<?>[], final, Object[])": [
            1,
            1,
            1
          ],
          "PredicateUtils.andPredicate(final, Predicate<? super T>, final, Predicate<? super T>)": [
            1,
            1,
            1
          ],
          "PredicateUtils.allPredicate()": [
            1,
            1,
            1
          ],
          "PredicateUtils.allPredicate(final, Collection<? extends Predicate<? super T>>)": [
            1,
            1,
            1
          ],
          "PredicateUtils.orPredicate(final, Predicate<? super T>, final, Predicate<? super T>)": [
            1,
            1,
            1
          ],
          "PredicateUtils.anyPredicate()": [
            1,
            1,
            1
          ],
          "PredicateUtils.anyPredicate(final, Collection<? extends Predicate<? super T>>)": [
            1,
            1,
            1
          ],
          "PredicateUtils.eitherPredicate(final, Predicate<? super T>, final, Predicate<? super T>)": [
            1,
            1,
            1
          ],
          "PredicateUtils.onePredicate()": [
            1,
            1,
            1
          ],
          "PredicateUtils.onePredicate(final, Collection<? extends Predicate<? super T>>)": [
            1,
            1,
            1
          ],
          "PredicateUtils.neitherPredicate(final, Predicate<? super T>, final, Predicate<? super T>)": [
            1,
            1,
            1
          ],
          "PredicateUtils.nonePredicate()": [
            1,
            1,
            1
          ],
          "PredicateUtils.nonePredicate(final, Collection<? extends Predicate<? super T>>)": [
            1,
            1,
            1
          ],
          "PredicateUtils.notPredicate(final, Predicate<? super T>)": [
            1,
            1,
            1
          ],
          "PredicateUtils.asPredicate(final, Transformer<? super T, Boolean>)": [
            1,
            1,
            1
          ],
          "PredicateUtils.nullIsExceptionPredicate(final, Predicate<? super T>)": [
            1,
            1,
            1
          ],
          "PredicateUtils.nullIsFalsePredicate(final, Predicate<? super T>)": [
            1,
            1,
            1
          ],
          "PredicateUtils.nullIsTruePredicate(final, Predicate<? super T>)": [
            1,
            1,
            1
          ],
          "PredicateUtils.transformedPredicate(final, Transformer<? super T, ? extends T>, final, Predicate<? super T>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java"
    },
    {
      "src_name": "ObjectGraphIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/ObjectGraphIterator.java",
      "class_declaration": "public class ObjectGraphIterator <E> implements Iterator<E> ",
      "methods_under_test": {
        "=1": {
          "ObjectGraphIterator.hasNext()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ObjectGraphIterator.updateCurrentIterator()": [
            6,
            6,
            6
          ],
          "ObjectGraphIterator.findNext(final, E)": [
            3,
            3,
            3
          ],
          "ObjectGraphIterator.findNextByIterator(final, Iterator<? extends E>)": [
            6,
            6,
            6
          ],
          "ObjectGraphIterator.next()": [
            2,
            2,
            2
          ],
          "ObjectGraphIterator.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java"
    },
    {
      "src_name": "AbstractOrderedBidiMapDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapDecorator.java",
      "class_declaration": "public abstract class AbstractOrderedBidiMapDecorator <K, V> extends AbstractBidiMapDecorator<K, V> implements OrderedBidiMap<K, V> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapDecoratorTest.java"
    },
    {
      "src_name": "TransformedNavigableSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/TransformedNavigableSet.java",
      "class_declaration": "public class TransformedNavigableSet <E> extends TransformedSortedSet<E> implements NavigableSet<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/TransformedNavigableSetTest.java"
    },
    {
      "src_name": "UnmodifiableListIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java",
      "class_declaration": "public final class UnmodifiableListIterator <E> implements ListIterator<E>, Unmodifiable ",
      "methods_under_test": {
        "=1": {
          "UnmodifiableListIterator.hasNext()": [
            1,
            1,
            1
          ],
          "UnmodifiableListIterator.next()": [
            1,
            1,
            1
          ],
          "UnmodifiableListIterator.nextIndex()": [
            1,
            1,
            1
          ],
          "UnmodifiableListIterator.hasPrevious()": [
            1,
            1,
            1
          ],
          "UnmodifiableListIterator.previous()": [
            1,
            1,
            1
          ],
          "UnmodifiableListIterator.previousIndex()": [
            1,
            1,
            1
          ],
          "UnmodifiableListIterator.remove()": [
            1,
            1,
            1
          ],
          "UnmodifiableListIterator.set(final, E)": [
            1,
            1,
            1
          ],
          "UnmodifiableListIterator.add(final, E)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnmodifiableListIterator.umodifiableListIterator(final, ListIterator<? extends E>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIteratorTest.java"
    },
    {
      "src_name": "PredicatedBag",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/PredicatedBag.java",
      "class_declaration": "public class PredicatedBag <E> extends PredicatedCollection<E> implements Bag<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java"
    },
    {
      "src_name": "SingletonMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/SingletonMap.java",
      "class_declaration": "public class SingletonMap <K, V> implements OrderedMap<K, V>, BoundedMap<K, V>, KeyValue<K, V>, Serializable, Cloneable ",
      "methods_under_test": {
        "=1": {
          "SingletonMap.setValue(final, V)": [
            1,
            1,
            1
          ],
          "SingletonMap.maxSize()": [
            1,
            1,
            1
          ],
          "SingletonMap.size()": [
            1,
            1,
            1
          ],
          "SingletonMap.containsKey(final, Object)": [
            1,
            1,
            1
          ],
          "SingletonMap.containsValue(final, Object)": [
            1,
            1,
            1
          ],
          "SingletonMap.remove(final, Object)": [
            1,
            1,
            1
          ],
          "SingletonMap.clear()": [
            1,
            1,
            1
          ],
          "SingletonMap.entrySet()": [
            1,
            1,
            1
          ],
          "SingletonMap.keySet()": [
            1,
            1,
            1
          ],
          "SingletonMap.values()": [
            1,
            1,
            1
          ],
          "SingletonMap.mapIterator()": [
            1,
            1,
            1
          ],
          "SingletonMap.firstKey()": [
            1,
            1,
            1
          ],
          "SingletonMap.lastKey()": [
            1,
            1,
            1
          ],
          "SingletonMap.nextKey(final, K)": [
            1,
            1,
            1
          ],
          "SingletonMap.previousKey(final, K)": [
            1,
            1,
            1
          ],
          "SingletonMap.isEqualKey(final, Object)": [
            1,
            1,
            1
          ],
          "SingletonMap.isEqualValue(final, Object)": [
            1,
            1,
            1
          ],
          "SingletonMapIterator.hasNext()": [
            1,
            1,
            1
          ],
          "SingletonMapIterator.hasPrevious()": [
            1,
            1,
            1
          ],
          "SingletonMapIterator.remove()": [
            1,
            1,
            1
          ],
          "SingletonMapIterator.reset()": [
            1,
            1,
            1
          ],
          "SingletonMap.hashCode()": [
            1,
            1,
            1
          ],
          "SingletonMap.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SingletonMap.get(final, Object)": [
            2,
            2,
            2
          ],
          "SingletonMap.put(final, K, final, V)": [
            2,
            2,
            2
          ],
          "SingletonMap.putAll(final, Map<? extends K, ? extends V>)": [
            3,
            3,
            3
          ],
          "SingletonMapIterator.next()": [
            2,
            2,
            2
          ],
          "SingletonMapIterator.previous()": [
            2,
            2,
            2
          ],
          "SingletonMapIterator.getKey()": [
            2,
            2,
            2
          ],
          "SingletonMapIterator.getValue()": [
            2,
            2,
            2
          ],
          "SingletonMapIterator.setValue(final, V)": [
            2,
            2,
            2
          ],
          "SingletonMapIterator.toString()": [
            2,
            2,
            2
          ],
          "SingletonMap.clone()": [
            2,
            2,
            2
          ],
          "SingletonMap.equals(final, Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java"
    },
    {
      "src_name": "TransformingComparator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/comparators/TransformingComparator.java",
      "class_declaration": "public class TransformingComparator <I, O> implements Comparator<I>, Serializable ",
      "methods_under_test": {
        "=1": {
          "TransformingComparator.compare(final, I, final, I)": [
            1,
            1,
            1
          ],
          "TransformingComparator.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TransformingComparator.equals(final, Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/comparators/TransformingComparatorTest.java"
    },
    {
      "src_name": "AbstractLinkedList",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/list/AbstractLinkedList.java",
      "class_declaration": "public abstract class AbstractLinkedList <E> implements List<E> ",
      "methods_under_test": {
        "=1": {
          "AbstractLinkedList.init()": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.size()": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.get(final, int)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.iterator()": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.listIterator()": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.listIterator(final, int)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.contains(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.toArray()": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.subList(final, int, final, int)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.add(final, E)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.add(final, int, final, E)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.addAll(final, Collection<? extends E>)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.remove(final, int)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.set(final, int, final, E)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.clear()": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.addFirst(final, E)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.addLast(final, E)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.isEqualValue(final, Object, final, Object)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.updateNode(final, Node<E>, final, E)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.createHeaderNode()": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.createNode(final, E)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.addNodeBefore(final, Node<E>, final, E)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.addNodeAfter(final, Node<E>, final, E)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.addNode(final, Node<E>, final, Node<E>)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.removeNode(final, Node<E>)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.removeAllNodes()": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.createSubListIterator(final, LinkedSubList<E>)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.createSubListListIterator(final, LinkedSubList<E>, final, int)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.doWriteObject(final, ObjectOutputStream)": [
            1,
            1,
            1
          ],
          "AbstractLinkedList.doReadObject(final, ObjectInputStream)": [
            1,
            1,
            1
          ],
          "Node.setValue(final, E)": [
            1,
            1,
            1
          ],
          "Node.setPreviousNode(final, Node<E>)": [
            1,
            1,
            1
          ],
          "Node.setNextNode(final, Node<E>)": [
            1,
            1,
            1
          ],
          "LinkedListIterator.checkModCount()": [
            1,
            1,
            1
          ],
          "LinkedListIterator.hasNext()": [
            1,
            1,
            1
          ],
          "LinkedListIterator.hasPrevious()": [
            1,
            1,
            1
          ],
          "LinkedListIterator.nextIndex()": [
            1,
            1,
            1
          ],
          "LinkedListIterator.previousIndex()": [
            1,
            1,
            1
          ],
          "LinkedListIterator.set(final, E)": [
            1,
            1,
            1
          ],
          "LinkedListIterator.add(final, E)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractLinkedList.indexOf(final, Object)": [
            3,
            3,
            3
          ],
          "AbstractLinkedList.lastIndexOf(final, Object)": [
            3,
            3,
            3
          ],
          "AbstractLinkedList.containsAll(final, Collection<?>)": [
            3,
            3,
            3
          ],
          "AbstractLinkedList.toArray(T[])": [
            4,
            4,
            4
          ],
          "AbstractLinkedList.addAll(final, int, final, Collection<? extends E>)": [
            2,
            2,
            2
          ],
          "AbstractLinkedList.remove(final, Object)": [
            3,
            3,
            3
          ],
          "AbstractLinkedList.removeAll(final, Collection<?>)": [
            3,
            3,
            3
          ],
          "AbstractLinkedList.retainAll(final, Collection<?>)": [
            3,
            3,
            3
          ],
          "AbstractLinkedList.getFirst()": [
            2,
            2,
            2
          ],
          "AbstractLinkedList.getLast()": [
            2,
            2,
            2
          ],
          "AbstractLinkedList.removeFirst()": [
            2,
            2,
            2
          ],
          "AbstractLinkedList.removeLast()": [
            2,
            2,
            2
          ],
          "AbstractLinkedList.equals(final, Object)": [
            6,
            6,
            6
          ],
          "AbstractLinkedList.hashCode()": [
            2,
            2,
            2
          ],
          "AbstractLinkedList.toString()": [
            4,
            4,
            4
          ],
          "AbstractLinkedList.getNode(final, int, final, boolean)": [
            7,
            7,
            7
          ],
          "LinkedListIterator.getLastNodeReturned()": [
            2,
            2,
            2
          ],
          "LinkedListIterator.next()": [
            2,
            2,
            2
          ],
          "LinkedListIterator.previous()": [
            2,
            2,
            2
          ],
          "LinkedListIterator.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java"
    },
    {
      "src_name": "BagUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/BagUtils.java",
      "class_declaration": "public class BagUtils ",
      "methods_under_test": {
        "=1": {
          "BagUtils.synchronizedBag(final, Bag<E>)": [
            1,
            1,
            1
          ],
          "BagUtils.unmodifiableBag(final, Bag<? extends E>)": [
            1,
            1,
            1
          ],
          "BagUtils.predicatedBag(final, Bag<E>, final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "BagUtils.transformingBag(final, Bag<E>, final, Transformer<? super E, ? extends E>)": [
            1,
            1,
            1
          ],
          "BagUtils.collectionBag(final, Bag<E>)": [
            1,
            1,
            1
          ],
          "BagUtils.synchronizedSortedBag(final, SortedBag<E>)": [
            1,
            1,
            1
          ],
          "BagUtils.unmodifiableSortedBag(final, SortedBag<E>)": [
            1,
            1,
            1
          ],
          "BagUtils.predicatedSortedBag(final, SortedBag<E>, final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "BagUtils.transformingSortedBag(final, SortedBag<E>, final, Transformer<? super E, ? extends E>)": [
            1,
            1,
            1
          ],
          "BagUtils.emptyBag()": [
            1,
            1,
            1
          ],
          "BagUtils.emptySortedBag()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/BagUtilsTest.java"
    },
    {
      "src_name": "UnmodifiableCollection",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/collection/UnmodifiableCollection.java",
      "class_declaration": "public final class UnmodifiableCollection <E> extends AbstractCollectionDecorator<E> implements Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java"
    },
    {
      "src_name": "PredicatedSortedBag",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/PredicatedSortedBag.java",
      "class_declaration": "public class PredicatedSortedBag <E> extends PredicatedBag<E> implements SortedBag<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java"
    },
    {
      "src_name": "AbstractMultiSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multiset/AbstractMultiSet.java",
      "class_declaration": "public abstract class AbstractMultiSet <E> extends AbstractCollection<E> implements MultiSet<E> ",
      "methods_under_test": {
        "=1": {
          "MultiSetIterator.hasNext()": [
            1,
            1,
            1
          ],
          "AbstractEntry.hashCode()": [
            1,
            1,
            1
          ],
          "AbstractEntry.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MultiSetIterator.next()": [
            2,
            2,
            2
          ],
          "MultiSetIterator.remove()": [
            3,
            3,
            3
          ],
          "AbstractEntry.equals(Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java"
    },
    {
      "src_name": "UnmodifiableMultiSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSet.java",
      "class_declaration": "public final class UnmodifiableMultiSet <E> extends AbstractMultiSetDecorator<E> implements Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java"
    },
    {
      "src_name": "SetUniqueList",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java",
      "class_declaration": "public class SetUniqueList <E> extends AbstractSerializableListDecorator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java"
    },
    {
      "src_name": "TransformedSortedBag",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/TransformedSortedBag.java",
      "class_declaration": "public class TransformedSortedBag <E> extends TransformedBag<E> implements SortedBag<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bag/TransformedSortedBagTest.java"
    },
    {
      "src_name": "TransformedSortedSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java",
      "class_declaration": "public class TransformedSortedSet <E> extends TransformedSet<E> implements SortedSet<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/TransformedSortedSetTest.java"
    },
    {
      "src_name": "HashMultiSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multiset/HashMultiSet.java",
      "class_declaration": "public class HashMultiSet <E> extends AbstractMapMultiSet<E> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/multiset/HashMultiSetTest.java"
    },
    {
      "src_name": "Flat3Map",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/Flat3Map.java",
      "class_declaration": "public class Flat3Map <K, V> implements IterableMap<K, V>, Serializable, Cloneable ",
      "methods_under_test": {
        "=1": {
          "Flat3Map.createDelegateMap()": [
            1,
            1,
            1
          ],
          "FlatMapIterator.hasNext()": [
            1,
            1,
            1
          ],
          "FlatMapIterator.reset()": [
            1,
            1,
            1
          ],
          "FlatMapEntry.setRemoved(final, boolean)": [
            1,
            1,
            1
          ],
          "EntryIterator.hasNext()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Flat3Map.size()": [
            2,
            2,
            2
          ],
          "Flat3Map.putAll(final, Map<? extends K, ? extends V>)": [
            6,
            6,
            6
          ],
          "Flat3Map.clear()": [
            3,
            3,
            3
          ],
          "Flat3Map.mapIterator()": [
            3,
            3,
            3
          ],
          "FlatMapIterator.next()": [
            2,
            2,
            2
          ],
          "FlatMapIterator.remove()": [
            2,
            2,
            2
          ],
          "FlatMapIterator.getKey()": [
            5,
            5,
            5
          ],
          "FlatMapIterator.getValue()": [
            5,
            5,
            5
          ],
          "FlatMapIterator.setValue(final, V)": [
            5,
            5,
            5
          ],
          "FlatMapIterator.toString()": [
            2,
            2,
            2
          ],
          "Flat3Map.entrySet()": [
            2,
            2,
            2
          ],
          "FlatMapEntry.getKey()": [
            5,
            5,
            5
          ],
          "FlatMapEntry.getValue()": [
            5,
            5,
            5
          ],
          "FlatMapEntry.setValue(final, V)": [
            5,
            5,
            5
          ],
          "FlatMapEntry.equals(final, Object)": [
            3,
            3,
            3
          ],
          "FlatMapEntry.hashCode()": [
            2,
            2,
            2
          ],
          "FlatMapEntry.toString()": [
            2,
            2,
            2
          ],
          "EntryIterator.nextEntry()": [
            2,
            2,
            2
          ],
          "EntryIterator.remove()": [
            2,
            2,
            2
          ],
          "Flat3Map.keySet()": [
            2,
            2,
            2
          ],
          "Flat3Map.values()": [
            2,
            2,
            2
          ],
          "Flat3Map.readObject(final, ObjectInputStream)": [
            2,
            2,
            2
          ],
          "Flat3Map.clone()": [
            3,
            3,
            3
          ],
          "Flat3Map.hashCode()": [
            6,
            6,
            6
          ],
          "Flat3Map.toString()": [
            6,
            6,
            6
          ]
        },
        "11-20": {
          "Flat3Map.get(final, Object)": [
            16,
            16,
            16
          ],
          "Flat3Map.containsKey(final, Object)": [
            16,
            16,
            16
          ],
          "Flat3Map.containsValue(final, Object)": [
            15,
            15,
            15
          ],
          "Flat3Map.put(final, K, final, V)": [
            19,
            19,
            19
          ],
          "Flat3Map.equals(final, Object)": [
            15,
            15,
            15
          ]
        },
        ">20": {
          "Flat3Map.remove(final, Object)": [
            23,
            23,
            23
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java"
    },
    {
      "src_name": "UnmodifiableBidiMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMap.java",
      "class_declaration": "public final class UnmodifiableBidiMap <K, V> extends AbstractBidiMapDecorator<K, V> implements Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java"
    },
    {
      "src_name": "MultiKey",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java",
      "class_declaration": "public class MultiKey <K> implements Serializable ",
      "methods_under_test": {
        "=1": {
          "MultiKey.getKey(final, int)": [
            1,
            1,
            1
          ],
          "MultiKey.size()": [
            1,
            1,
            1
          ],
          "MultiKey.hashCode()": [
            1,
            1,
            1
          ],
          "MultiKey.toString()": [
            1,
            1,
            1
          ],
          "MultiKey.readResolve()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MultiKey.equals(final, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java"
    },
    {
      "src_name": "PatriciaTrie",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/trie/PatriciaTrie.java",
      "class_declaration": "public class PatriciaTrie <E> extends AbstractPatriciaTrie<String, E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java"
    },
    {
      "src_name": "IteratorEnumeration",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/IteratorEnumeration.java",
      "class_declaration": "public class IteratorEnumeration <E> implements Enumeration<E> ",
      "methods_under_test": {
        "=1": {
          "IteratorEnumeration.hasMoreElements()": [
            1,
            1,
            1
          ],
          "IteratorEnumeration.nextElement()": [
            1,
            1,
            1
          ],
          "IteratorEnumeration.setIterator(final, Iterator<? extends E>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/IteratorEnumerationTest.java"
    },
    {
      "src_name": "ComparatorChain",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/comparators/ComparatorChain.java",
      "class_declaration": "public class ComparatorChain <E> implements Comparator<E>, Serializable ",
      "methods_under_test": {
        "=1": {
          "ComparatorChain.addComparator(final, Comparator<E>)": [
            1,
            1,
            1
          ],
          "ComparatorChain.setComparator(final, int, final, Comparator<E>)": [
            1,
            1,
            1
          ],
          "ComparatorChain.setForwardSort(final, int)": [
            1,
            1,
            1
          ],
          "ComparatorChain.setReverseSort(final, int)": [
            1,
            1,
            1
          ],
          "ComparatorChain.size()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ComparatorChain.addComparator(final, Comparator<E>, final, boolean)": [
            2,
            2,
            2
          ],
          "ComparatorChain.setComparator(final, int, final, Comparator<E>, final, boolean)": [
            3,
            3,
            3
          ],
          "ComparatorChain.compare(final, E, final, E)": [
            6,
            6,
            6
          ],
          "ComparatorChain.hashCode()": [
            3,
            3,
            3
          ],
          "ComparatorChain.equals(final, Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java"
    },
    {
      "src_name": "UnmodifiableSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/UnmodifiableSet.java",
      "class_declaration": "public final class UnmodifiableSet <E> extends AbstractSerializableSetDecorator<E> implements Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java"
    },
    {
      "src_name": "TransformedSortedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/TransformedSortedMap.java",
      "class_declaration": "public class TransformedSortedMap <K, V> extends TransformedMap<K, V> implements SortedMap<K, V> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java"
    },
    {
      "src_name": "LoopingIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/LoopingIterator.java",
      "class_declaration": "public class LoopingIterator <E> implements ResettableIterator<E> ",
      "methods_under_test": {
        "=1": {
          "LoopingIterator.hasNext()": [
            1,
            1,
            1
          ],
          "LoopingIterator.remove()": [
            1,
            1,
            1
          ],
          "LoopingIterator.reset()": [
            1,
            1,
            1
          ],
          "LoopingIterator.size()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LoopingIterator.next()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java"
    },
    {
      "src_name": "HashBag",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/HashBag.java",
      "class_declaration": "public class HashBag <E> extends AbstractMapBag<E> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bag/HashBagTest.java"
    },
    {
      "src_name": "SplitMapUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/SplitMapUtils.java",
      "class_declaration": "public class SplitMapUtils ",
      "methods_under_test": {
        "=1": {
          "WrappedGet.clear()": [
            1,
            1,
            1
          ],
          "WrappedGet.containsKey(final, Object)": [
            1,
            1,
            1
          ],
          "WrappedGet.containsValue(final, Object)": [
            1,
            1,
            1
          ],
          "WrappedGet.entrySet()": [
            1,
            1,
            1
          ],
          "WrappedGet.get(final, Object)": [
            1,
            1,
            1
          ],
          "WrappedGet.hashCode()": [
            1,
            1,
            1
          ],
          "WrappedGet.keySet()": [
            1,
            1,
            1
          ],
          "WrappedGet.put(final, K, final, V)": [
            1,
            1,
            1
          ],
          "WrappedGet.putAll(final, Map<? extends K, ? extends V>)": [
            1,
            1,
            1
          ],
          "WrappedGet.remove(final, Object)": [
            1,
            1,
            1
          ],
          "WrappedGet.size()": [
            1,
            1,
            1
          ],
          "WrappedGet.values()": [
            1,
            1,
            1
          ],
          "WrappedPut.clear()": [
            1,
            1,
            1
          ],
          "WrappedPut.containsKey(final, Object)": [
            1,
            1,
            1
          ],
          "WrappedPut.containsValue(final, Object)": [
            1,
            1,
            1
          ],
          "WrappedPut.entrySet()": [
            1,
            1,
            1
          ],
          "WrappedPut.get(final, Object)": [
            1,
            1,
            1
          ],
          "WrappedPut.hashCode()": [
            1,
            1,
            1
          ],
          "WrappedPut.keySet()": [
            1,
            1,
            1
          ],
          "WrappedPut.put(final, K, final, V)": [
            1,
            1,
            1
          ],
          "WrappedPut.putAll(final, Map<? extends K, ? extends V>)": [
            1,
            1,
            1
          ],
          "WrappedPut.remove(final, Object)": [
            1,
            1,
            1
          ],
          "WrappedPut.size()": [
            1,
            1,
            1
          ],
          "WrappedPut.values()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "WrappedGet.equals(final, Object)": [
            2,
            2,
            2
          ],
          "WrappedGet.mapIterator()": [
            2,
            2,
            2
          ],
          "WrappedPut.equals(final, Object)": [
            2,
            2,
            2
          ],
          "SplitMapUtils.readableMap(final, Get<K, V>)": [
            3,
            3,
            3
          ],
          "SplitMapUtils.writableMap(final, Put<K, V>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java"
    },
    {
      "src_name": "FilterListIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/FilterListIterator.java",
      "class_declaration": "public class FilterListIterator <E> implements ListIterator<E> ",
      "methods_under_test": {
        "=1": {
          "FilterListIterator.add(final, E)": [
            1,
            1,
            1
          ],
          "FilterListIterator.hasNext()": [
            1,
            1,
            1
          ],
          "FilterListIterator.hasPrevious()": [
            1,
            1,
            1
          ],
          "FilterListIterator.nextIndex()": [
            1,
            1,
            1
          ],
          "FilterListIterator.previousIndex()": [
            1,
            1,
            1
          ],
          "FilterListIterator.remove()": [
            1,
            1,
            1
          ],
          "FilterListIterator.set(final, E)": [
            1,
            1,
            1
          ],
          "FilterListIterator.setListIterator(final, ListIterator<? extends E>)": [
            1,
            1,
            1
          ],
          "FilterListIterator.setPredicate(final, Predicate<? super E>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FilterListIterator.next()": [
            3,
            3,
            3
          ],
          "FilterListIterator.previous()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java"
    },
    {
      "src_name": "MapUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/MapUtils.java",
      "class_declaration": "@SuppressWarnings(\"deprecation\")\npublic class MapUtils ",
      "methods_under_test": {
        "=1": {
          "MapUtils.getBooleanValue(final, Map<? super K, ?>, final, K)": [
            1,
            1,
            1
          ],
          "MapUtils.verbosePrint(final, PrintStream, final, Object, final, Map<?, ?>)": [
            1,
            1,
            1
          ],
          "MapUtils.debugPrint(final, PrintStream, final, Object, final, Map<?, ?>)": [
            1,
            1,
            1
          ],
          "MapUtils.safeAddToMap(final, Map<? super K, Object>, final, K, final, Object)": [
            1,
            1,
            1
          ],
          "MapUtils.emptyIfNull(final, Map<K,V>)": [
            1,
            1,
            1
          ],
          "MapUtils.isEmpty(final, Map<?,?>)": [
            1,
            1,
            1
          ],
          "MapUtils.isNotEmpty(final, Map<?,?>)": [
            1,
            1,
            1
          ],
          "MapUtils.synchronizedMap(final, Map<K, V>)": [
            1,
            1,
            1
          ],
          "MapUtils.unmodifiableMap(final, Map<? extends K, ? extends V>)": [
            1,
            1,
            1
          ],
          "MapUtils.predicatedMap(final, Map<K, V>, final, Predicate<? super K>, final, Predicate<? super V>)": [
            1,
            1,
            1
          ],
          "MapUtils.transformedMap(final, Map<K, V>, final, Transformer<? super K, ? extends K>, final, Transformer<? super V, ? extends V>)": [
            1,
            1,
            1
          ],
          "MapUtils.fixedSizeMap(final, Map<K, V>)": [
            1,
            1,
            1
          ],
          "MapUtils.lazyMap(final, Map<K, V>, final, Factory<? extends V>)": [
            1,
            1,
            1
          ],
          "MapUtils.lazyMap(final, Map<K, V>, final, Transformer<? super K, ? extends V>)": [
            1,
            1,
            1
          ],
          "MapUtils.orderedMap(final, Map<K, V>)": [
            1,
            1,
            1
          ],
          "MapUtils.multiValueMap(final, Map<K, ? super Collection<V>>)": [
            1,
            1,
            1
          ],
          "MapUtils.multiValueMap(final, Map<K, C>, final, Class<C>)": [
            1,
            1,
            1
          ],
          "MapUtils.multiValueMap(final, Map<K, C>, final, Factory<C>)": [
            1,
            1,
            1
          ],
          "MapUtils.synchronizedSortedMap(final, SortedMap<K, V>)": [
            1,
            1,
            1
          ],
          "MapUtils.unmodifiableSortedMap(final, SortedMap<K, ? extends V>)": [
            1,
            1,
            1
          ],
          "MapUtils.predicatedSortedMap(final, SortedMap<K, V>, final, Predicate<? super K>, final, Predicate<? super V>)": [
            1,
            1,
            1
          ],
          "MapUtils.transformedSortedMap(final, SortedMap<K, V>, final, Transformer<? super K, ? extends K>, final, Transformer<? super V, ? extends V>)": [
            1,
            1,
            1
          ],
          "MapUtils.fixedSizeSortedMap(final, SortedMap<K, V>)": [
            1,
            1,
            1
          ],
          "MapUtils.lazySortedMap(final, SortedMap<K, V>, final, Factory<? extends V>)": [
            1,
            1,
            1
          ],
          "MapUtils.lazySortedMap(final, SortedMap<K, V>, final, Transformer<? super K, ? extends V>)": [
            1,
            1,
            1
          ],
          "MapUtils.populateMap(final, Map<K, V>, final, Iterable<? extends V>, final, Transformer<V, K>)": [
            1,
            1,
            1
          ],
          "MapUtils.populateMap(final, Map<K, V>, final, Iterable<? extends E>, final, Transformer<E, K>, final, Transformer<E, V>)": [
            1,
            1,
            1
          ],
          "MapUtils.populateMap(final, MultiMap<K, V>, final, Iterable<? extends V>, final, Transformer<V, K>)": [
            1,
            1,
            1
          ],
          "MapUtils.populateMap(final, MultiMap<K, V>, final, Iterable<? extends E>, final, Transformer<E, K>, final, Transformer<E, V>)": [
            1,
            1,
            1
          ],
          "MapUtils.size(Map<?, ?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MapUtils.getObject(final, Map<? super K, V>, final, K)": [
            2,
            2,
            2
          ],
          "MapUtils.getString(final, Map<? super K, ?>, final, K)": [
            3,
            3,
            3
          ],
          "MapUtils.getBoolean(final, Map<? super K, ?>, final, K)": [
            6,
            6,
            6
          ],
          "MapUtils.getNumber(final, Map<? super K, ?>, final, K)": [
            8,
            8,
            8
          ],
          "MapUtils.getByte(final, Map<? super K, ?>, final, K)": [
            3,
            3,
            3
          ],
          "MapUtils.getShort(final, Map<? super K, ?>, final, K)": [
            3,
            3,
            3
          ],
          "MapUtils.getInteger(final, Map<? super K, ?>, final, K)": [
            3,
            3,
            3
          ],
          "MapUtils.getLong(final, Map<? super K, ?>, final, K)": [
            3,
            3,
            3
          ],
          "MapUtils.getFloat(final, Map<? super K, ?>, final, K)": [
            3,
            3,
            3
          ],
          "MapUtils.getDouble(final, Map<? super K, ?>, final, K)": [
            3,
            3,
            3
          ],
          "MapUtils.getMap(final, Map<? super K, ?>, final, K)": [
            3,
            3,
            3
          ],
          "MapUtils.getObject(final, Map<K, V>, final, K, final, V)": [
            3,
            3,
            3
          ],
          "MapUtils.getString(final, Map<? super K, ?>, final, K, final, String)": [
            2,
            2,
            2
          ],
          "MapUtils.getBoolean(final, Map<? super K, ?>, final, K, final, Boolean)": [
            2,
            2,
            2
          ],
          "MapUtils.getNumber(final, Map<? super K, ?>, final, K, final, Number)": [
            2,
            2,
            2
          ],
          "MapUtils.getByte(final, Map<? super K, ?>, final, K, final, Byte)": [
            2,
            2,
            2
          ],
          "MapUtils.getShort(final, Map<? super K, ?>, final, K, final, Short)": [
            2,
            2,
            2
          ],
          "MapUtils.getInteger(final, Map<? super K, ?>, final, K, final, Integer)": [
            2,
            2,
            2
          ],
          "MapUtils.getLong(final, Map<? super K, ?>, final, K, final, Long)": [
            2,
            2,
            2
          ],
          "MapUtils.getFloat(final, Map<? super K, ?>, final, K, final, Float)": [
            2,
            2,
            2
          ],
          "MapUtils.getDouble(final, Map<? super K, ?>, final, K, final, Double)": [
            2,
            2,
            2
          ],
          "MapUtils.getMap(final, Map<? super K, ?>, final, K, final, Map<?, ?>)": [
            2,
            2,
            2
          ],
          "MapUtils.getByteValue(final, Map<? super K, ?>, final, K)": [
            2,
            2,
            2
          ],
          "MapUtils.getShortValue(final, Map<? super K, ?>, final, K)": [
            2,
            2,
            2
          ],
          "MapUtils.getIntValue(final, Map<? super K, ?>, final, K)": [
            2,
            2,
            2
          ],
          "MapUtils.getLongValue(final, Map<? super K, ?>, final, K)": [
            2,
            2,
            2
          ],
          "MapUtils.getFloatValue(final, Map<? super K, ?>, final, K)": [
            2,
            2,
            2
          ],
          "MapUtils.getDoubleValue(final, Map<? super K, ?>, final, K)": [
            2,
            2,
            2
          ],
          "MapUtils.getBooleanValue(final, Map<? super K, ?>, final, K, final, boolean)": [
            2,
            2,
            2
          ],
          "MapUtils.getByteValue(final, Map<? super K, ?>, final, K, final, byte)": [
            2,
            2,
            2
          ],
          "MapUtils.getShortValue(final, Map<? super K, ?>, final, K, final, short)": [
            2,
            2,
            2
          ],
          "MapUtils.getIntValue(final, Map<? super K, ?>, final, K, final, int)": [
            2,
            2,
            2
          ],
          "MapUtils.getLongValue(final, Map<? super K, ?>, final, K, final, long)": [
            2,
            2,
            2
          ],
          "MapUtils.getFloatValue(final, Map<? super K, ?>, final, K, final, float)": [
            2,
            2,
            2
          ],
          "MapUtils.getDoubleValue(final, Map<? super K, ?>, final, K, final, double)": [
            2,
            2,
            2
          ],
          "MapUtils.toProperties(final, Map<K, V>)": [
            3,
            3,
            3
          ],
          "MapUtils.toMap(final, ResourceBundle)": [
            2,
            2,
            2
          ],
          "MapUtils.invertMap(final, Map<K, V>)": [
            2,
            2,
            2
          ],
          "MapUtils.iterableMap(final, Map<K, V>)": [
            2,
            2,
            2
          ],
          "MapUtils.iterableSortedMap(final, SortedMap<K, V>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "MapUtils.putAll(final, Map<K, V>, final, Object[])": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/MapUtilsTest.java"
    },
    {
      "src_name": "CompositeMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/CompositeMap.java",
      "class_declaration": "public class CompositeMap <K, V> extends AbstractIterableMap<K, V> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java"
    },
    {
      "src_name": "PredicatedSortedSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/PredicatedSortedSet.java",
      "class_declaration": "public class PredicatedSortedSet <E> extends PredicatedSet<E> implements SortedSet<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java"
    },
    {
      "src_name": "ClosureUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/ClosureUtils.java",
      "class_declaration": "public class ClosureUtils ",
      "methods_under_test": {
        "=1": {
          "ClosureUtils.exceptionClosure()": [
            1,
            1,
            1
          ],
          "ClosureUtils.nopClosure()": [
            1,
            1,
            1
          ],
          "ClosureUtils.asClosure(final, Transformer<? super E, ?>)": [
            1,
            1,
            1
          ],
          "ClosureUtils.forClosure(final, int, final, Closure<? super E>)": [
            1,
            1,
            1
          ],
          "ClosureUtils.whileClosure(final, Predicate<? super E>, final, Closure<? super E>)": [
            1,
            1,
            1
          ],
          "ClosureUtils.doWhileClosure(final, Closure<? super E>, final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "ClosureUtils.invokerClosure(final, String)": [
            1,
            1,
            1
          ],
          "ClosureUtils.invokerClosure(final, String, final, Class<?>[], final, Object[])": [
            1,
            1,
            1
          ],
          "ClosureUtils.chainedClosure()": [
            1,
            1,
            1
          ],
          "ClosureUtils.chainedClosure(final, Collection<? extends Closure<? super E>>)": [
            1,
            1,
            1
          ],
          "ClosureUtils.ifClosure(final, Predicate<? super E>, final, Closure<? super E>)": [
            1,
            1,
            1
          ],
          "ClosureUtils.ifClosure(final, Predicate<? super E>, final, Closure<? super E>, final, Closure<? super E>)": [
            1,
            1,
            1
          ],
          "ClosureUtils.switchClosure(final, Predicate<? super E>[], final, Closure<? super E>[])": [
            1,
            1,
            1
          ],
          "ClosureUtils.switchClosure(final, Predicate<? super E>[], final, Closure<? super E>[], final, Closure<? super E>)": [
            1,
            1,
            1
          ],
          "ClosureUtils.switchClosure(final, Map<Predicate<E>, Closure<E>>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ClosureUtils.switchMapClosure(final, Map<? extends E, Closure<E>>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java"
    },
    {
      "src_name": "UniqueFilterIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/UniqueFilterIterator.java",
      "class_declaration": "public class UniqueFilterIterator <E> extends FilterIterator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/UniqueFilterIteratorTest.java"
    },
    {
      "src_name": "ObjectArrayListIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator.java",
      "class_declaration": "public class ObjectArrayListIterator <E> extends ObjectArrayIterator<E> implements ResettableListIterator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/ObjectArrayListIteratorTest.java"
    },
    {
      "src_name": "ObjectArrayIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayIterator.java",
      "class_declaration": "public class ObjectArrayIterator <E> implements ResettableIterator<E> ",
      "methods_under_test": {
        "=1": {
          "ObjectArrayIterator.hasNext()": [
            1,
            1,
            1
          ],
          "ObjectArrayIterator.remove()": [
            1,
            1,
            1
          ],
          "ObjectArrayIterator.reset()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ObjectArrayIterator.next()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java"
    },
    {
      "src_name": "CollectionSortedBag",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/CollectionSortedBag.java",
      "class_declaration": "public final class CollectionSortedBag <E> extends AbstractSortedBagDecorator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bag/CollectionSortedBagTest.java"
    },
    {
      "src_name": "MapBackedSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/MapBackedSet.java",
      "class_declaration": "public final class MapBackedSet <E, V> implements Set<E>, Serializable ",
      "methods_under_test": {
        "=1": {
          "MapBackedSet.mapBackedSet(final, Map<E, ? super V>)": [
            1,
            1,
            1
          ],
          "MapBackedSet.mapBackedSet(final, Map<E, ? super V>, final, V)": [
            1,
            1,
            1
          ],
          "MapBackedSet.size()": [
            1,
            1,
            1
          ],
          "MapBackedSet.iterator()": [
            1,
            1,
            1
          ],
          "MapBackedSet.contains(final, Object)": [
            1,
            1,
            1
          ],
          "MapBackedSet.containsAll(final, Collection<?>)": [
            1,
            1,
            1
          ],
          "MapBackedSet.add(final, E)": [
            1,
            1,
            1
          ],
          "MapBackedSet.remove(final, Object)": [
            1,
            1,
            1
          ],
          "MapBackedSet.removeAll(final, Collection<?>)": [
            1,
            1,
            1
          ],
          "MapBackedSet.retainAll(final, Collection<?>)": [
            1,
            1,
            1
          ],
          "MapBackedSet.clear()": [
            1,
            1,
            1
          ],
          "MapBackedSet.toArray()": [
            1,
            1,
            1
          ],
          "MapBackedSet.toArray(final, T[])": [
            1,
            1,
            1
          ],
          "MapBackedSet.equals(final, Object)": [
            1,
            1,
            1
          ],
          "MapBackedSet.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MapBackedSet.addAll(final, Collection<? extends E>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/MapBackedSetTest.java"
    },
    {
      "src_name": "ArrayListIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/ArrayListIterator.java",
      "class_declaration": "public class ArrayListIterator <E> extends ArrayIterator<E> implements ResettableListIterator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/ArrayListIteratorTest.java"
    },
    {
      "src_name": "FactoryUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/FactoryUtils.java",
      "class_declaration": "public class FactoryUtils ",
      "methods_under_test": {
        "=1": {
          "FactoryUtils.exceptionFactory()": [
            1,
            1,
            1
          ],
          "FactoryUtils.nullFactory()": [
            1,
            1,
            1
          ],
          "FactoryUtils.constantFactory(final, T)": [
            1,
            1,
            1
          ],
          "FactoryUtils.prototypeFactory(final, T)": [
            1,
            1,
            1
          ],
          "FactoryUtils.instantiateFactory(final, Class<T>)": [
            1,
            1,
            1
          ],
          "FactoryUtils.instantiateFactory(final, Class<T>, final, Class<?>[], final, Object[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java"
    },
    {
      "src_name": "DualLinkedHashBidiMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bidimap/DualLinkedHashBidiMap.java",
      "class_declaration": "public class DualLinkedHashBidiMap <K, V> extends AbstractDualBidiMap<K, V> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bidimap/DualLinkedHashBidiMapTest.java"
    },
    {
      "src_name": "UnmodifiableMapIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java",
      "class_declaration": "public final class UnmodifiableMapIterator <K, V> implements MapIterator<K, V>, Unmodifiable ",
      "methods_under_test": {
        "=1": {
          "UnmodifiableMapIterator.hasNext()": [
            1,
            1,
            1
          ],
          "UnmodifiableMapIterator.next()": [
            1,
            1,
            1
          ],
          "UnmodifiableMapIterator.setValue(final, V)": [
            1,
            1,
            1
          ],
          "UnmodifiableMapIterator.remove()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnmodifiableMapIterator.unmodifiableMapIterator(final, MapIterator<? extends K, ? extends V>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIteratorTest.java"
    },
    {
      "src_name": "UnmodifiableQueue",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/queue/UnmodifiableQueue.java",
      "class_declaration": "public final class UnmodifiableQueue <E> extends AbstractQueueDecorator<E> implements Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java"
    },
    {
      "src_name": "NodeCachingLinkedList",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/list/NodeCachingLinkedList.java",
      "class_declaration": "public class NodeCachingLinkedList <E> extends AbstractLinkedList<E> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/list/NodeCachingLinkedListTest.java"
    },
    {
      "src_name": "SingletonIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/SingletonIterator.java",
      "class_declaration": "public class SingletonIterator <E> implements ResettableIterator<E> ",
      "methods_under_test": {
        "=1": {
          "SingletonIterator.hasNext()": [
            1,
            1,
            1
          ],
          "SingletonIterator.reset()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SingletonIterator.next()": [
            2,
            2,
            2
          ],
          "SingletonIterator.remove()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/SingletonIteratorTest.java"
    },
    {
      "src_name": "ListOrderedSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java",
      "class_declaration": "public class ListOrderedSet <E> extends AbstractSerializableSetDecorator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java"
    },
    {
      "src_name": "SynchronizedBag",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/SynchronizedBag.java",
      "class_declaration": "public class SynchronizedBag <E> extends SynchronizedCollection<E> implements Bag<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bag/SynchronizedBagTest.java"
    },
    {
      "src_name": "CollatingIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/CollatingIterator.java",
      "class_declaration": "public class CollatingIterator <E> implements Iterator<E> ",
      "methods_under_test": {
        "=1": {
          "CollatingIterator.setComparator(final, Comparator<? super E>)": [
            1,
            1,
            1
          ],
          "CollatingIterator.hasNext()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CollatingIterator.addIterator(final, Iterator<? extends E>)": [
            2,
            2,
            2
          ],
          "CollatingIterator.setIterator(final, int, final, Iterator<? extends E>)": [
            2,
            2,
            2
          ],
          "CollatingIterator.next()": [
            3,
            3,
            3
          ],
          "CollatingIterator.remove()": [
            2,
            2,
            2
          ],
          "CollatingIterator.getIteratorIndex()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java"
    },
    {
      "src_name": "UnmodifiableSortedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/UnmodifiableSortedMap.java",
      "class_declaration": "public final class UnmodifiableSortedMap <K, V> extends AbstractSortedMapDecorator<K, V> implements Unmodifiable, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java"
    },
    {
      "src_name": "LRUMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/LRUMap.java",
      "class_declaration": "public class LRUMap <K, V> extends AbstractLinkedMap<K, V> implements BoundedMap<K, V>, Serializable, Cloneable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/LRUMapTest.java"
    },
    {
      "src_name": "ReverseComparator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/comparators/ReverseComparator.java",
      "class_declaration": "public class ReverseComparator <E> implements Comparator<E>, Serializable ",
      "methods_under_test": {
        "=1": {
          "ReverseComparator.compare(final, E, final, E)": [
            1,
            1,
            1
          ],
          "ReverseComparator.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ReverseComparator.equals(final, Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/comparators/ReverseComparatorTest.java"
    },
    {
      "src_name": "IterableUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/IterableUtils.java",
      "class_declaration": "public class IterableUtils ",
      "methods_under_test": {
        "=1": {
          "IterableUtils.emptyIterable()": [
            1,
            1,
            1
          ],
          "IterableUtils.chainedIterable(final, Iterable<? extends E>, final, Iterable<? extends E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.chainedIterable(final, Iterable<? extends E>, final, Iterable<? extends E>, final, Iterable<? extends E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.chainedIterable(final, Iterable<? extends E>, final, Iterable<? extends E>, final, Iterable<? extends E>, final, Iterable<? extends E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.chainedIterable()": [
            1,
            1,
            1
          ],
          "IterableUtils.collatedIterable(final, Iterable<? extends E>, final, Iterable<? extends E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.collatedIterable(final, Comparator<? super E>, final, Iterable<? extends E>, final, Iterable<? extends E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.loopingIterable(final, Iterable<E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.reversedIterable(final, Iterable<E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.uniqueIterable(final, Iterable<E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.zippingIterable(final, Iterable<? extends E>, final, Iterable<? extends E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.zippingIterable(final, Iterable<? extends E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.emptyIfNull(final, Iterable<E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.forEach(final, Iterable<E>, final, Closure<? super E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.forEachButLast(final, Iterable<E>, final, Closure<? super E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.find(final, Iterable<E>, final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.indexOf(final, Iterable<E>, final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.matchesAll(final, Iterable<E>, final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.matchesAny(final, Iterable<E>, final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.partition(final, Iterable<? extends O>)": [
            1,
            1,
            1
          ],
          "IterableUtils.toList(final, Iterable<E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.toString(final, Iterable<E>)": [
            1,
            1,
            1
          ],
          "IterableUtils.toString(final, Iterable<E>, final, Transformer<? super E, String>, final, String, final, String, final, String)": [
            1,
            1,
            1
          ],
          "IterableUtils.checkNotNull(final, Iterable<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "IterableUtils.filteredIterable(final, Iterable<E>, final, Predicate<? super E>)": [
            2,
            2,
            2
          ],
          "IterableUtils.boundedIterable(final, Iterable<E>, final, long)": [
            2,
            2,
            2
          ],
          "IterableUtils.skippingIterable(final, Iterable<E>, final, long)": [
            2,
            2,
            2
          ],
          "IterableUtils.transformedIterable(final, Iterable<I>, final, Transformer<? super I, ? extends O>)": [
            2,
            2,
            2
          ],
          "IterableUtils.unmodifiableIterable(final, Iterable<E>)": [
            2,
            2,
            2
          ],
          "IterableUtils.countMatches(final, Iterable<E>, final, Predicate<? super E>)": [
            2,
            2,
            2
          ],
          "IterableUtils.isEmpty(final, Iterable<?>)": [
            3,
            3,
            3
          ],
          "IterableUtils.contains(final, Iterable<E>, final, Object)": [
            3,
            3,
            3
          ],
          "IterableUtils.contains(final, Iterable<? extends E>, final, E, final, Equator<? super E>)": [
            2,
            2,
            2
          ],
          "IterableUtils.frequency(final, Iterable<E>, final, T)": [
            3,
            3,
            3
          ],
          "IterableUtils.get(final, Iterable<T>, final, int)": [
            2,
            2,
            2
          ],
          "IterableUtils.size(final, Iterable<?>)": [
            3,
            3,
            3
          ],
          "IterableUtils.partition(final, Iterable<? extends O>, final, Predicate<? super O>)": [
            2,
            2,
            2
          ],
          "IterableUtils.toString(final, Iterable<E>, final, Transformer<? super E, String>)": [
            2,
            2,
            2
          ],
          "IterableUtils.checkNotNull()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "IterableUtils.partition(final, Iterable<? extends O>, final, Factory<R>)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/IterableUtilsTest.java"
    },
    {
      "src_name": "CaseInsensitiveMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/CaseInsensitiveMap.java",
      "class_declaration": "public class CaseInsensitiveMap <K, V> extends AbstractHashedMap<K, V> implements Serializable, Cloneable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java"
    },
    {
      "src_name": "PushbackIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/PushbackIterator.java",
      "class_declaration": "public class PushbackIterator <E> implements Iterator<E> ",
      "methods_under_test": {
        "=1": {
          "PushbackIterator.pushback(final, E)": [
            1,
            1,
            1
          ],
          "PushbackIterator.hasNext()": [
            1,
            1,
            1
          ],
          "PushbackIterator.next()": [
            1,
            1,
            1
          ],
          "PushbackIterator.remove()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PushbackIterator.pushbackIterator(final, Iterator<? extends E>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java"
    }
  ],
  "src_test_fuzz_match": [
    {
      "src_name": "ChainedClosure",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java",
      "class_declaration": "public class ChainedClosure <E> implements Closure<E>, Serializable ",
      "methods_under_test": {
        "=1": {
          "ChainedClosure.execute(final, E)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ChainedClosure.chainedClosure()": [
            2,
            2,
            2
          ],
          "ChainedClosure.chainedClosure(final, Collection<? extends Closure<? super E>>)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/functors/AbstractClosureTest.java"
    },
    {
      "src_name": "AbstractSortedSetDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/AbstractSortedSetDecorator.java",
      "class_declaration": "public abstract class AbstractSortedSetDecorator <E> extends AbstractSetDecorator<E> implements SortedSet<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/AbstractSortedSetTest.java"
    },
    {
      "src_name": "NullComparator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/comparators/NullComparator.java",
      "class_declaration": "public class NullComparator <E> implements Comparator<E>, Serializable ",
      "methods_under_test": {
        "=1": {
          "NullComparator.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NullComparator.compare(final, E, final, E)": [
            4,
            4,
            4
          ],
          "NullComparator.equals(final, Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/comparators/AbstractNullComparatorTest.java"
    },
    {
      "src_name": "TransformerPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/TransformerPredicate.java",
      "class_declaration": "public final class TransformerPredicate <T> implements Predicate<T>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "TransformerPredicate.transformerPredicate(final, Transformer<? super T, Boolean>)": [
            2,
            2,
            2
          ],
          "TransformerPredicate.evaluate(final, T)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/functors/AbstractMockPredicateTest.java"
    },
    {
      "src_name": "AbstractQueueDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/queue/AbstractQueueDecorator.java",
      "class_declaration": "public abstract class AbstractQueueDecorator <E> extends AbstractCollectionDecorator<E> implements Queue<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java"
    },
    {
      "src_name": "AbstractCollectionDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java",
      "class_declaration": "public abstract class AbstractCollectionDecorator <E> implements Collection<E>, Serializable ",
      "methods_under_test": {
        "=1": {
          "AbstractCollectionDecorator.decorated()": [
            1,
            1,
            1
          ],
          "AbstractCollectionDecorator.setCollection(final, Collection<E>)": [
            1,
            1,
            1
          ],
          "AbstractCollectionDecorator.add(final, E)": [
            1,
            1,
            1
          ],
          "AbstractCollectionDecorator.addAll(final, Collection<? extends E>)": [
            1,
            1,
            1
          ],
          "AbstractCollectionDecorator.clear()": [
            1,
            1,
            1
          ],
          "AbstractCollectionDecorator.contains(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractCollectionDecorator.iterator()": [
            1,
            1,
            1
          ],
          "AbstractCollectionDecorator.remove(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractCollectionDecorator.size()": [
            1,
            1,
            1
          ],
          "AbstractCollectionDecorator.toArray()": [
            1,
            1,
            1
          ],
          "AbstractCollectionDecorator.toArray(final, T[])": [
            1,
            1,
            1
          ],
          "AbstractCollectionDecorator.containsAll(final, Collection<?>)": [
            1,
            1,
            1
          ],
          "AbstractCollectionDecorator.removeAll(final, Collection<?>)": [
            1,
            1,
            1
          ],
          "AbstractCollectionDecorator.retainAll(final, Collection<?>)": [
            1,
            1,
            1
          ],
          "AbstractCollectionDecorator.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java"
    },
    {
      "src_name": "AbstractPatriciaTrie",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java",
      "class_declaration": "abstract class AbstractPatriciaTrie <K, V> extends AbstractBitwiseTrie<K, V> ",
      "methods_under_test": {
        "=1": {
          "Reference.set(final, E)": [
            1,
            1,
            1
          ],
          "TrieIterator.findNext(final, TrieEntry<K, V>)": [
            1,
            1,
            1
          ],
          "TrieIterator.hasNext()": [
            1,
            1,
            1
          ],
          "RangeEntryMap.createEntrySet()": [
            1,
            1,
            1
          ],
          "RangeEntryMap.createRangeMap(final, K, final, boolean, final, K, final, boolean)": [
            1,
            1,
            1
          ],
          "RangeMap.inRange(final, K)": [
            1,
            1,
            1
          ],
          "RangeMap.inRange2(final, K)": [
            1,
            1,
            1
          ],
          "RangeMap.inFromRange(final, K, final, boolean)": [
            1,
            1,
            1
          ],
          "RangeMap.inToRange(final, K, final, boolean)": [
            1,
            1,
            1
          ],
          "PrefixRangeMap.createEntrySet()": [
            1,
            1,
            1
          ],
          "PrefixRangeMap.createRangeMap(final, K, final, boolean, final, K, final, boolean)": [
            1,
            1,
            1
          ],
          "RangeMap.clear()": [
            1,
            1,
            1
          ],
          "RangeEntrySet.size()": [
            1,
            1,
            1
          ],
          "SingletonIterator.hasNext()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TrieIterator.nextEntry()": [
            3,
            3,
            3
          ],
          "TrieIterator.remove()": [
            3,
            3,
            3
          ],
          "RangeEntryMap.firstKey()": [
            4,
            4,
            4
          ],
          "RangeEntryMap.lastKey()": [
            4,
            4,
            4
          ],
          "PrefixRangeMap.firstKey()": [
            3,
            3,
            3
          ],
          "PrefixRangeMap.lastKey()": [
            3,
            3,
            3
          ],
          "RangeEntrySet.iterator()": [
            5,
            5,
            5
          ],
          "SingletonIterator.next()": [
            2,
            2,
            2
          ],
          "SingletonIterator.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/trie/PatriciaTrie2Test.java"
    },
    {
      "src_name": "AbstractListIteratorDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java",
      "class_declaration": "public class AbstractListIteratorDecorator <E> implements ListIterator<E> ",
      "methods_under_test": {
        "=1": {
          "AbstractListIteratorDecorator.set(final, E)": [
            1,
            1,
            1
          ],
          "AbstractListIteratorDecorator.add(final, E)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractListIteratorDecorator.hasNext()": [
            2,
            2,
            2
          ],
          "AbstractListIteratorDecorator.next()": [
            2,
            2,
            2
          ],
          "AbstractListIteratorDecorator.nextIndex()": [
            2,
            2,
            2
          ],
          "AbstractListIteratorDecorator.hasPrevious()": [
            2,
            2,
            2
          ],
          "AbstractListIteratorDecorator.previous()": [
            2,
            2,
            2
          ],
          "AbstractListIteratorDecorator.previousIndex()": [
            2,
            2,
            2
          ],
          "AbstractListIteratorDecorator.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java"
    },
    {
      "src_name": "OrderedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/OrderedMap.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorTest.java"
    },
    {
      "src_name": "SortedBag",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/SortedBag.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bag/AbstractSortedBagTest.java"
    },
    {
      "src_name": "AbstractIteratorDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/AbstractIteratorDecorator.java",
      "class_declaration": "public abstract class AbstractIteratorDecorator <E> extends AbstractUntypedIteratorDecorator<E, E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/AbstractIteratorTest.java"
    },
    {
      "src_name": "AbstractMapEntryDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java",
      "class_declaration": "public abstract class AbstractMapEntryDecorator <K, V> implements Map.Entry<K, V>, KeyValue<K, V> ",
      "methods_under_test": {
        "=1": {
          "AbstractMapEntryDecorator.setValue(final, V)": [
            1,
            1,
            1
          ],
          "AbstractMapEntryDecorator.hashCode()": [
            1,
            1,
            1
          ],
          "AbstractMapEntryDecorator.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractMapEntryDecorator.equals(final, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java"
    },
    {
      "src_name": "AbstractNavigableSetDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/AbstractNavigableSetDecorator.java",
      "class_declaration": "public abstract class AbstractNavigableSetDecorator <E> extends AbstractSortedSetDecorator<E> implements NavigableSet<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/AbstractNavigableSetTest.java"
    },
    {
      "src_name": "OnePredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/OnePredicate.java",
      "class_declaration": "public final class OnePredicate <T> extends AbstractQuantifierPredicate<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/functors/AbstractAnyAllOnePredicateTest.java"
    },
    {
      "src_name": "AbstractSetDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/AbstractSetDecorator.java",
      "class_declaration": "public abstract class AbstractSetDecorator <E> extends AbstractCollectionDecorator<E> implements\n        Set<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/AbstractSetTest.java"
    },
    {
      "src_name": "AbstractSortedMapDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/AbstractSortedMapDecorator.java",
      "class_declaration": "public abstract class AbstractSortedMapDecorator <K, V> extends AbstractMapDecorator<K, V> implements\n        IterableSortedMap<K, V> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/AbstractSortedMapTest.java"
    }
  ],
  "src_without_tests": [
    {
      "src_name": "DeleteCommand",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/sequence/DeleteCommand.java",
      "class_declaration": "public class DeleteCommand <T> extends EditCommand<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ReplacementsHandler",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/sequence/ReplacementsHandler.java",
      "error": "list index out of range"
    },
    {
      "src_name": "WhileClosure",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/WhileClosure.java",
      "class_declaration": "public class WhileClosure <E> implements Closure<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "WhileClosure.whileClosure(final, Predicate<? super E>, final, Closure<? super E>, final, boolean)": [
            3,
            3,
            3
          ],
          "WhileClosure.execute(final, E)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnmodifiableEntrySet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/UnmodifiableEntrySet.java",
      "class_declaration": "public final class UnmodifiableEntrySet <K, V> extends AbstractSetDecorator<Map.Entry<K, V>> implements Unmodifiable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CloneTransformer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/CloneTransformer.java",
      "class_declaration": "public class CloneTransformer <T> implements Transformer<T, T> ",
      "methods_under_test": {
        "=1": {
          "CloneTransformer.cloneTransformer()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CloneTransformer.transform(final, T)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ExceptionTransformer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/ExceptionTransformer.java",
      "class_declaration": "public final class ExceptionTransformer <I, O> implements Transformer<I, O>, Serializable ",
      "methods_under_test": {
        "=1": {
          "ExceptionTransformer.exceptionTransformer()": [
            1,
            1,
            1
          ],
          "ExceptionTransformer.transform(final, I)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ChainedTransformer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java",
      "class_declaration": "public class ChainedTransformer <T> implements Transformer<T, T>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ChainedTransformer.chainedTransformer()": [
            2,
            2,
            2
          ],
          "ChainedTransformer.chainedTransformer(final, Collection<? extends Transformer<? super T, ? extends T>>)": [
            3,
            3,
            3
          ],
          "ChainedTransformer.transform(T)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FunctorUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/FunctorUtils.java",
      "class_declaration": "class FunctorUtils ",
      "methods_under_test": {
        "=1": {
          "FunctorUtils.coerce(final, Predicate<? super T>)": [
            1,
            1,
            1
          ],
          "FunctorUtils.coerce(final, Closure<? super T>)": [
            1,
            1,
            1
          ],
          "FunctorUtils.coerce(final, Transformer<? super I, ? extends O>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FunctorUtils.validate(final, Collection<? extends Predicate<? super T>>)": [
            4,
            4,
            4
          ],
          "FunctorUtils.copy()": [
            2,
            2,
            2
          ],
          "FunctorUtils.validate()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ClosureTransformer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java",
      "class_declaration": "public class ClosureTransformer <T> implements Transformer<T, T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "ClosureTransformer.transform(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ClosureTransformer.closureTransformer(final, Closure<? super T>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ForClosure",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/ForClosure.java",
      "class_declaration": "public class ForClosure <E> implements Closure<E> ",
      "methods_under_test": {
        "=1": {
          "ForClosure.execute(final, E)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ForClosure.forClosure(final, int, final, Closure<? super E>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BoundedCollection",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/BoundedCollection.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractMapBag",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/AbstractMapBag.java",
      "class_declaration": "public abstract class AbstractMapBag <E> implements Bag<E> ",
      "methods_under_test": {
        "=1": {
          "AbstractMapBag.size()": [
            1,
            1,
            1
          ],
          "AbstractMapBag.contains(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractMapBag.iterator()": [
            1,
            1,
            1
          ],
          "BagIterator.hasNext()": [
            1,
            1,
            1
          ],
          "AbstractMapBag.add(final, E)": [
            1,
            1,
            1
          ],
          "AbstractMapBag.clear()": [
            1,
            1,
            1
          ],
          "MutableInteger.hashCode()": [
            1,
            1,
            1
          ],
          "AbstractMapBag.doWriteObject(final, ObjectOutputStream)": [
            1,
            1,
            1
          ],
          "AbstractMapBag.doReadObject(final, Map<E, MutableInteger>, final, ObjectInputStream)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractMapBag.getCount(final, Object)": [
            2,
            2,
            2
          ],
          "AbstractMapBag.containsAll(final, Collection<?>)": [
            2,
            2,
            2
          ],
          "AbstractMapBag.containsAll(final, Bag<?>)": [
            3,
            3,
            3
          ],
          "BagIterator.next()": [
            3,
            3,
            3
          ],
          "BagIterator.remove()": [
            4,
            4,
            4
          ],
          "AbstractMapBag.add(final, E, final, int)": [
            3,
            3,
            3
          ],
          "AbstractMapBag.addAll(final, Collection<? extends E>)": [
            2,
            2,
            2
          ],
          "AbstractMapBag.remove(final, Object)": [
            2,
            2,
            2
          ],
          "AbstractMapBag.remove(final, Object, final, int)": [
            4,
            4,
            4
          ],
          "AbstractMapBag.removeAll(final, Collection<?>)": [
            3,
            3,
            3
          ],
          "AbstractMapBag.retainAll(final, Collection<?>)": [
            2,
            2,
            2
          ],
          "AbstractMapBag.retainAll(final, Bag<?>)": [
            4,
            4,
            4
          ],
          "MutableInteger.equals(final, Object)": [
            2,
            2,
            2
          ],
          "AbstractMapBag.toArray()": [
            3,
            3,
            3
          ],
          "AbstractMapBag.toArray(T[])": [
            5,
            5,
            5
          ],
          "AbstractMapBag.uniqueSet()": [
            2,
            2,
            2
          ],
          "AbstractMapBag.equals(final, Object)": [
            6,
            6,
            6
          ],
          "AbstractMapBag.hashCode()": [
            2,
            2,
            2
          ],
          "AbstractMapBag.toString()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/trie/analyzer/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NOPTransformer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/NOPTransformer.java",
      "class_declaration": "public class NOPTransformer <T> implements Transformer<T, T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "NOPTransformer.nopTransformer()": [
            1,
            1,
            1
          ],
          "NOPTransformer.transform(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/collection/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "KeyValue",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/KeyValue.java",
      "error": "list index out of range"
    },
    {
      "src_name": "InstanceofPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/InstanceofPredicate.java",
      "class_declaration": "public final class InstanceofPredicate implements Predicate<Object>, Serializable ",
      "methods_under_test": {
        "=1": {
          "InstanceofPredicate.evaluate(final, Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "InstanceofPredicate.instanceOfPredicate(final, Class<?>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "EnumerationIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/EnumerationIterator.java",
      "class_declaration": "public class EnumerationIterator <E> implements Iterator<E> ",
      "methods_under_test": {
        "=1": {
          "EnumerationIterator.hasNext()": [
            1,
            1,
            1
          ],
          "EnumerationIterator.next()": [
            1,
            1,
            1
          ],
          "EnumerationIterator.setEnumeration(final, Enumeration<? extends E>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EnumerationIterator.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractSortedBidiMapDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapDecorator.java",
      "class_declaration": "public abstract class AbstractSortedBidiMapDecorator <K, V> extends AbstractOrderedBidiMapDecorator<K, V> implements SortedBidiMap<K, V> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractSetValuedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multimap/AbstractSetValuedMap.java",
      "class_declaration": "public abstract class AbstractSetValuedMap <K, V> extends AbstractMultiValuedMap<K, V> implements SetValuedMap<K, V> ",
      "methods_under_test": {
        "=1": {
          "WrappedSet.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "WrappedSet.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractSerializableSetDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/AbstractSerializableSetDecorator.java",
      "class_declaration": "public abstract class AbstractSerializableSetDecorator <E> extends AbstractSetDecorator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractSerializableListDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/list/AbstractSerializableListDecorator.java",
      "class_declaration": "public abstract class AbstractSerializableListDecorator <E> extends AbstractListDecorator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractEmptyIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/AbstractEmptyIterator.java",
      "class_declaration": "abstract class AbstractEmptyIterator <E> ",
      "methods_under_test": {
        "=1": {
          "AbstractEmptyIterator.hasNext()": [
            1,
            1,
            1
          ],
          "AbstractEmptyIterator.next()": [
            1,
            1,
            1
          ],
          "AbstractEmptyIterator.hasPrevious()": [
            1,
            1,
            1
          ],
          "AbstractEmptyIterator.previous()": [
            1,
            1,
            1
          ],
          "AbstractEmptyIterator.nextIndex()": [
            1,
            1,
            1
          ],
          "AbstractEmptyIterator.previousIndex()": [
            1,
            1,
            1
          ],
          "AbstractEmptyIterator.add(final, E)": [
            1,
            1,
            1
          ],
          "AbstractEmptyIterator.set(final, E)": [
            1,
            1,
            1
          ],
          "AbstractEmptyIterator.remove()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/splitmap/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "EditScript",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/sequence/EditScript.java",
      "class_declaration": "public class EditScript <T> ",
      "methods_under_test": {
        "=1": {
          "EditScript.append(final, KeepCommand<T>)": [
            1,
            1,
            1
          ],
          "EditScript.append(final, InsertCommand<T>)": [
            1,
            1,
            1
          ],
          "EditScript.append(final, DeleteCommand<T>)": [
            1,
            1,
            1
          ],
          "EditScript.visit(final, CommandVisitor<T>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractReferenceMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/AbstractReferenceMap.java",
      "class_declaration": "public abstract class AbstractReferenceMap <K, V> extends AbstractHashedMap<K, V> ",
      "methods_under_test": {
        "=1": {
          "ReferenceBaseIterator.currentEntry()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ReferenceBaseIterator.hasNext()": [
            5,
            5,
            5
          ],
          "ReferenceBaseIterator.nextEntry()": [
            2,
            2,
            2
          ],
          "ReferenceBaseIterator.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CommandVisitor",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/sequence/CommandVisitor.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NOPClosure",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/NOPClosure.java",
      "class_declaration": "public final class NOPClosure <E> implements Closure<E>, Serializable ",
      "methods_under_test": {
        "=1": {
          "NOPClosure.nopClosure()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractMapMultiSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multiset/AbstractMapMultiSet.java",
      "class_declaration": "public abstract class AbstractMapMultiSet <E> extends AbstractMultiSet<E> ",
      "methods_under_test": {
        "=1": {
          "MapBasedMultiSetIterator.hasNext()": [
            1,
            1,
            1
          ],
          "MutableInteger.hashCode()": [
            1,
            1,
            1
          ],
          "EntrySetIterator.hasNext()": [
            1,
            1,
            1
          ],
          "EntrySetIterator.next()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MapBasedMultiSetIterator.next()": [
            3,
            3,
            3
          ],
          "MapBasedMultiSetIterator.remove()": [
            4,
            4,
            4
          ],
          "MutableInteger.equals(final, Object)": [
            2,
            2,
            2
          ],
          "EntrySetIterator.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "EmptyIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/EmptyIterator.java",
      "class_declaration": "public class EmptyIterator <E> extends AbstractEmptyIterator<E> implements ResettableIterator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractQuantifierPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/AbstractQuantifierPredicate.java",
      "class_declaration": "public abstract class AbstractQuantifierPredicate <T> implements PredicateDecorator<T>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Trie",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/Trie.java",
      "error": "list index out of range"
    },
    {
      "src_name": "EmptyOrderedIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/EmptyOrderedIterator.java",
      "class_declaration": "public class EmptyOrderedIterator <E> extends AbstractEmptyIterator<E> implements OrderedIterator<E>, ResettableIterator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractDualBidiMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bidimap/AbstractDualBidiMap.java",
      "class_declaration": "public abstract class AbstractDualBidiMap <K, V> implements BidiMap<K, V> ",
      "methods_under_test": {
        "=1": {
          "AbstractDualBidiMap.get(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractDualBidiMap.size()": [
            1,
            1,
            1
          ],
          "AbstractDualBidiMap.containsKey(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractDualBidiMap.equals(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractDualBidiMap.hashCode()": [
            1,
            1,
            1
          ],
          "AbstractDualBidiMap.toString()": [
            1,
            1,
            1
          ],
          "AbstractDualBidiMap.putAll(final, Map<? extends K, ? extends V>)": [
            1,
            1,
            1
          ],
          "AbstractDualBidiMap.clear()": [
            1,
            1,
            1
          ],
          "AbstractDualBidiMap.containsValue(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractDualBidiMap.mapIterator()": [
            1,
            1,
            1
          ],
          "AbstractDualBidiMap.getKey(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractDualBidiMap.createKeySetIterator(final, Iterator<K>)": [
            1,
            1,
            1
          ],
          "AbstractDualBidiMap.createValuesIterator(final, Iterator<V>)": [
            1,
            1,
            1
          ],
          "AbstractDualBidiMap.createEntrySetIterator(final, Iterator<Map.Entry<K, V>>)": [
            1,
            1,
            1
          ],
          "BidiMapIterator.hasNext()": [
            1,
            1,
            1
          ],
          "BidiMapIterator.next()": [
            1,
            1,
            1
          ],
          "BidiMapIterator.reset()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractDualBidiMap.put(final, K, final, V)": [
            3,
            3,
            3
          ],
          "AbstractDualBidiMap.remove(final, Object)": [
            2,
            2,
            2
          ],
          "AbstractDualBidiMap.removeValue(final, Object)": [
            2,
            2,
            2
          ],
          "AbstractDualBidiMap.inverseBidiMap()": [
            2,
            2,
            2
          ],
          "AbstractDualBidiMap.keySet()": [
            2,
            2,
            2
          ],
          "AbstractDualBidiMap.values()": [
            2,
            2,
            2
          ],
          "AbstractDualBidiMap.entrySet()": [
            2,
            2,
            2
          ],
          "BidiMapIterator.remove()": [
            2,
            2,
            2
          ],
          "BidiMapIterator.getKey()": [
            2,
            2,
            2
          ],
          "BidiMapIterator.getValue()": [
            2,
            2,
            2
          ],
          "BidiMapIterator.setValue(final, V)": [
            3,
            3,
            3
          ],
          "BidiMapIterator.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractLinkedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/AbstractLinkedMap.java",
      "class_declaration": "public abstract class AbstractLinkedMap <K, V> extends AbstractHashedMap<K, V> implements OrderedMap<K, V> ",
      "methods_under_test": {
        "=1": {
          "LinkIterator.hasNext()": [
            1,
            1,
            1
          ],
          "LinkIterator.hasPrevious()": [
            1,
            1,
            1
          ],
          "LinkIterator.currentEntry()": [
            1,
            1,
            1
          ],
          "LinkIterator.reset()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LinkIterator.nextEntry()": [
            3,
            3,
            3
          ],
          "LinkIterator.previousEntry()": [
            3,
            3,
            3
          ],
          "LinkIterator.remove()": [
            3,
            3,
            3
          ],
          "LinkIterator.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DefaultEquator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/DefaultEquator.java",
      "class_declaration": "public class DefaultEquator <T> implements Equator<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "DefaultEquator.defaultEquator()": [
            1,
            1,
            1
          ],
          "DefaultEquator.equate(final, T, final, T)": [
            1,
            1,
            1
          ],
          "DefaultEquator.hash(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractEmptyMapIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/AbstractEmptyMapIterator.java",
      "class_declaration": "public abstract class AbstractEmptyMapIterator <K, V> extends AbstractEmptyIterator<K> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ExceptionPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/ExceptionPredicate.java",
      "class_declaration": "public final class ExceptionPredicate <T> implements Predicate<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "ExceptionPredicate.exceptionPredicate()": [
            1,
            1,
            1
          ],
          "ExceptionPredicate.evaluate(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FactoryTransformer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java",
      "class_declaration": "public class FactoryTransformer <I, O> implements Transformer<I, O>, Serializable ",
      "methods_under_test": {
        "=1": {
          "FactoryTransformer.transform(final, I)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FactoryTransformer.factoryTransformer(final, Factory<? extends O>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "InsertCommand",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/sequence/InsertCommand.java",
      "class_declaration": "public class InsertCommand <T> extends EditCommand<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NotNullPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/NotNullPredicate.java",
      "class_declaration": "public final class NotNullPredicate <T> implements Predicate<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "NotNullPredicate.notNullPredicate()": [
            1,
            1,
            1
          ],
          "NotNullPredicate.evaluate(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "OrderedIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/OrderedIterator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractIterableGetMapDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/splitmap/AbstractIterableGetMapDecorator.java",
      "class_declaration": "public class AbstractIterableGetMapDecorator <K, V> implements IterableGet<K, V> ",
      "methods_under_test": {
        "=1": {
          "AbstractIterableGetMapDecorator.decorated()": [
            1,
            1,
            1
          ],
          "AbstractIterableGetMapDecorator.containsKey(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractIterableGetMapDecorator.containsValue(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractIterableGetMapDecorator.entrySet()": [
            1,
            1,
            1
          ],
          "AbstractIterableGetMapDecorator.get(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractIterableGetMapDecorator.remove(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractIterableGetMapDecorator.keySet()": [
            1,
            1,
            1
          ],
          "AbstractIterableGetMapDecorator.size()": [
            1,
            1,
            1
          ],
          "AbstractIterableGetMapDecorator.values()": [
            1,
            1,
            1
          ],
          "AbstractIterableGetMapDecorator.mapIterator()": [
            1,
            1,
            1
          ],
          "AbstractIterableGetMapDecorator.hashCode()": [
            1,
            1,
            1
          ],
          "AbstractIterableGetMapDecorator.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractIterableGetMapDecorator.equals(final, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NotPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/NotPredicate.java",
      "class_declaration": "public final class NotPredicate <T> implements PredicateDecorator<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "NotPredicate.evaluate(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NotPredicate.notPredicate(final, Predicate<? super T>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "TransformedPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/TransformedPredicate.java",
      "class_declaration": "public final class TransformedPredicate <T> implements PredicateDecorator<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "TransformedPredicate.evaluate(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TransformedPredicate.transformedPredicate(final, Transformer<? super T, ? extends T>, final, Predicate<? super T>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SynchronizedSortedBag",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/SynchronizedSortedBag.java",
      "class_declaration": "public class SynchronizedSortedBag <E> extends SynchronizedBag<E> implements SortedBag<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "IterableGet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/IterableGet.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multimap/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ConstantTransformer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/ConstantTransformer.java",
      "class_declaration": "public class ConstantTransformer <I, O> implements Transformer<I, O>, Serializable ",
      "methods_under_test": {
        "=1": {
          "ConstantTransformer.nullTransformer()": [
            1,
            1,
            1
          ],
          "ConstantTransformer.transform(final, I)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ConstantTransformer.constantTransformer(final, O)": [
            2,
            2,
            2
          ],
          "ConstantTransformer.equals(final, Object)": [
            3,
            3,
            3
          ],
          "ConstantTransformer.hashCode()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MultiValuedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/MultiValuedMap.java",
      "error": "list index out of range"
    },
    {
      "src_name": "IterableSortedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/IterableSortedMap.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NullIsFalsePredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/NullIsFalsePredicate.java",
      "class_declaration": "public final class NullIsFalsePredicate <T> implements PredicateDecorator<T>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "NullIsFalsePredicate.nullIsFalsePredicate(final, Predicate<? super T>)": [
            2,
            2,
            2
          ],
          "NullIsFalsePredicate.evaluate(final, T)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ConstantFactory",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/ConstantFactory.java",
      "class_declaration": "public class ConstantFactory <T> implements Factory<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "ConstantFactory.create()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ConstantFactory.constantFactory(final, T)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractBitwiseTrie",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/trie/AbstractBitwiseTrie.java",
      "class_declaration": "public abstract class AbstractBitwiseTrie <K, V> extends AbstractMap<K, V> implements Trie<K, V>, Serializable ",
      "methods_under_test": {
        "=1": {
          "BasicEntry.setKeyValue(final, K, final, V)": [
            1,
            1,
            1
          ],
          "BasicEntry.setValue(final, V)": [
            1,
            1,
            1
          ],
          "BasicEntry.hashCode()": [
            1,
            1,
            1
          ],
          "BasicEntry.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasicEntry.equals(final, Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractListValuedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multimap/AbstractListValuedMap.java",
      "class_declaration": "public abstract class AbstractListValuedMap <K, V> extends AbstractMultiValuedMap<K, V> implements ListValuedMap<K, V> ",
      "methods_under_test": {
        "=1": {
          "WrappedList.listIterator()": [
            1,
            1,
            1
          ],
          "WrappedList.listIterator(int)": [
            1,
            1,
            1
          ],
          "WrappedList.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "WrappedList.add(int, V)": [
            3,
            3,
            3
          ],
          "WrappedList.addAll(int, Collection<? extends V>)": [
            8,
            8,
            8
          ],
          "WrappedList.get(int)": [
            2,
            2,
            2
          ],
          "WrappedList.indexOf(Object)": [
            2,
            2,
            2
          ],
          "WrappedList.lastIndexOf(Object)": [
            2,
            2,
            2
          ],
          "WrappedList.remove(int)": [
            4,
            4,
            4
          ],
          "WrappedList.set(int, V)": [
            2,
            2,
            2
          ],
          "WrappedList.subList(int, int)": [
            2,
            2,
            2
          ],
          "WrappedList.equals(Object)": [
            3,
            3,
            3
          ],
          "ValuesListIterator.add(V)": [
            2,
            2,
            2
          ],
          "ValuesListIterator.hasNext()": [
            2,
            2,
            2
          ],
          "ValuesListIterator.hasPrevious()": [
            2,
            2,
            2
          ],
          "ValuesListIterator.next()": [
            2,
            2,
            2
          ],
          "ValuesListIterator.nextIndex()": [
            2,
            2,
            2
          ],
          "ValuesListIterator.previous()": [
            2,
            2,
            2
          ],
          "ValuesListIterator.previousIndex()": [
            2,
            2,
            2
          ],
          "ValuesListIterator.remove()": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FalsePredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/FalsePredicate.java",
      "class_declaration": "public final class FalsePredicate <T> implements Predicate<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "FalsePredicate.falsePredicate()": [
            1,
            1,
            1
          ],
          "FalsePredicate.evaluate(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ExceptionFactory",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/ExceptionFactory.java",
      "class_declaration": "public final class ExceptionFactory <T> implements Factory<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "ExceptionFactory.exceptionFactory()": [
            1,
            1,
            1
          ],
          "ExceptionFactory.create()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ExceptionClosure",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/ExceptionClosure.java",
      "class_declaration": "public final class ExceptionClosure <E> implements Closure<E>, Serializable ",
      "methods_under_test": {
        "=1": {
          "ExceptionClosure.exceptionClosure()": [
            1,
            1,
            1
          ],
          "ExceptionClosure.execute(final, E)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/trie/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "EntrySetToMapIteratorAdapter",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/EntrySetToMapIteratorAdapter.java",
      "class_declaration": "public class EntrySetToMapIteratorAdapter <K, V> implements MapIterator<K, V>, ResettableIterator<K> ",
      "methods_under_test": {
        "=1": {
          "EntrySetToMapIteratorAdapter.setValue(final, V)": [
            1,
            1,
            1
          ],
          "EntrySetToMapIteratorAdapter.hasNext()": [
            1,
            1,
            1
          ],
          "EntrySetToMapIteratorAdapter.next()": [
            1,
            1,
            1
          ],
          "EntrySetToMapIteratorAdapter.reset()": [
            1,
            1,
            1
          ],
          "EntrySetToMapIteratorAdapter.remove()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EntrySetToMapIteratorAdapter.current()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PredicateTransformer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/PredicateTransformer.java",
      "class_declaration": "public class PredicateTransformer <T> implements Transformer<T, Boolean>, Serializable ",
      "methods_under_test": {
        "=1": {
          "PredicateTransformer.transform(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PredicateTransformer.predicateTransformer(final, Predicate<? super T>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AnyPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/AnyPredicate.java",
      "class_declaration": "public final class AnyPredicate <T> extends AbstractQuantifierPredicate<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MapTransformer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/MapTransformer.java",
      "class_declaration": "public final class MapTransformer <I, O> implements Transformer<I, O>, Serializable ",
      "methods_under_test": {
        "=1": {
          "MapTransformer.transform(final, I)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MapTransformer.mapTransformer(final, Map<? super I, ? extends O>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "OrPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/OrPredicate.java",
      "class_declaration": "public final class OrPredicate <T> implements PredicateDecorator<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "OrPredicate.evaluate(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "OrPredicate.orPredicate(final, Predicate<? super T>, final, Predicate<? super T>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractOrderedMapDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/AbstractOrderedMapDecorator.java",
      "class_declaration": "public abstract class AbstractOrderedMapDecorator <K, V> extends AbstractMapDecorator<K, V> implements OrderedMap<K, V> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractUntypedIteratorDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java",
      "class_declaration": "public abstract class AbstractUntypedIteratorDecorator <I, O> implements Iterator<O> ",
      "methods_under_test": {
        "=1": {
          "AbstractUntypedIteratorDecorator.hasNext()": [
            1,
            1,
            1
          ],
          "AbstractUntypedIteratorDecorator.remove()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractSortedBagDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/AbstractSortedBagDecorator.java",
      "class_declaration": "public abstract class AbstractSortedBagDecorator <E> extends AbstractBagDecorator<E> implements SortedBag<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractMultiSetDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multiset/AbstractMultiSetDecorator.java",
      "class_declaration": "public abstract class AbstractMultiSetDecorator <E> extends AbstractCollectionDecorator<E> implements MultiSet<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "EmptyMapIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/EmptyMapIterator.java",
      "class_declaration": "public class EmptyMapIterator <K, V> extends AbstractEmptyMapIterator<K, V> implements\n        MapIterator<K, V>, ResettableIterator<K> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ResettableIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/ResettableIterator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BoundedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/BoundedMap.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MultiMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/MultiMap.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/set/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NullIsExceptionPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java",
      "class_declaration": "public final class NullIsExceptionPredicate <T> implements PredicateDecorator<T>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "NullIsExceptionPredicate.nullIsExceptionPredicate(final, Predicate<? super T>)": [
            2,
            2,
            2
          ],
          "NullIsExceptionPredicate.evaluate(final, T)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "LazyList",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/list/LazyList.java",
      "class_declaration": "public class LazyList <E> extends AbstractSerializableListDecorator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MapIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/MapIterator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "FunctorException",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/FunctorException.java",
      "class_declaration": "public class FunctorException extends RuntimeException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "KeyAnalyzer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/trie/KeyAnalyzer.java",
      "class_declaration": "public abstract class KeyAnalyzer <K> implements Comparator<K>, Serializable ",
      "methods_under_test": {
        "=1": {
          "KeyAnalyzer.isOutOfBoundsIndex(final, int)": [
            1,
            1,
            1
          ],
          "KeyAnalyzer.isEqualBitKey(final, int)": [
            1,
            1,
            1
          ],
          "KeyAnalyzer.isNullBitKey(final, int)": [
            1,
            1,
            1
          ],
          "KeyAnalyzer.isValidBitIndex(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "KeyAnalyzer.compare(final, K, final, K)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractListDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/list/AbstractListDecorator.java",
      "class_declaration": "public abstract class AbstractListDecorator <E> extends AbstractCollectionDecorator<E> implements List<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractOrderedMapIteratorDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java",
      "class_declaration": "public class AbstractOrderedMapIteratorDecorator <K, V> implements OrderedMapIterator<K, V> ",
      "methods_under_test": {
        "=1": {
          "AbstractOrderedMapIteratorDecorator.setValue(final, V)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractOrderedMapIteratorDecorator.hasNext()": [
            2,
            2,
            2
          ],
          "AbstractOrderedMapIteratorDecorator.next()": [
            2,
            2,
            2
          ],
          "AbstractOrderedMapIteratorDecorator.hasPrevious()": [
            2,
            2,
            2
          ],
          "AbstractOrderedMapIteratorDecorator.previous()": [
            2,
            2,
            2
          ],
          "AbstractOrderedMapIteratorDecorator.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/queue/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "EditCommand",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/sequence/EditCommand.java",
      "class_declaration": "public abstract class EditCommand <T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SwitchTransformer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java",
      "class_declaration": "public class SwitchTransformer <I, O> implements Transformer<I, O>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SwitchTransformer.switchTransformer(final, Predicate<? super I>[], final, Transformer<? super I, ? extends O>[], final, Transformer<? super I, ? extends O>)": [
            3,
            3,
            3
          ],
          "SwitchTransformer.switchTransformer(final, Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>>)": [
            5,
            5,
            5
          ],
          "SwitchTransformer.transform(final, I)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Unmodifiable",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/Unmodifiable.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multiset/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Bag",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/Bag.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BidiMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/BidiMap.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SetValuedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/SetValuedMap.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Put",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/Put.java",
      "error": "list index out of range"
    },
    {
      "src_name": "StringValueTransformer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/StringValueTransformer.java",
      "class_declaration": "public final class StringValueTransformer <T> implements Transformer<T, String>, Serializable ",
      "methods_under_test": {
        "=1": {
          "StringValueTransformer.stringValueTransformer()": [
            1,
            1,
            1
          ],
          "StringValueTransformer.transform(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SwitchClosure",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java",
      "class_declaration": "public class SwitchClosure <E> implements Closure<E>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SwitchClosure.switchClosure(final, Predicate<? super E>[], final, Closure<? super E>[], final, Closure<? super E>)": [
            3,
            3,
            3
          ],
          "SwitchClosure.switchClosure(final, Map<Predicate<E>, Closure<E>>)": [
            4,
            4,
            4
          ],
          "SwitchClosure.execute(final, E)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TransformIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/TransformIterator.java",
      "class_declaration": "public class TransformIterator <I, O> implements Iterator<O> ",
      "methods_under_test": {
        "=1": {
          "TransformIterator.hasNext()": [
            1,
            1,
            1
          ],
          "TransformIterator.next()": [
            1,
            1,
            1
          ],
          "TransformIterator.remove()": [
            1,
            1,
            1
          ],
          "TransformIterator.setIterator(final, Iterator<? extends I>)": [
            1,
            1,
            1
          ],
          "TransformIterator.setTransformer(final, Transformer<? super I, ? extends O>)": [
            1,
            1,
            1
          ],
          "TransformIterator.transform(final, I)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UniquePredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/UniquePredicate.java",
      "class_declaration": "public final class UniquePredicate <T> implements Predicate<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "UniquePredicate.uniquePredicate()": [
            1,
            1,
            1
          ],
          "UniquePredicate.evaluate(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "InstantiateTransformer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/InstantiateTransformer.java",
      "class_declaration": "public class InstantiateTransformer <T> implements Transformer<Class<? extends T>, T> ",
      "methods_under_test": {
        "=1": {
          "InstantiateTransformer.instantiateTransformer()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "InstantiateTransformer.instantiateTransformer(final, Class<?>[], final, Object[])": [
            3,
            3,
            3
          ],
          "InstantiateTransformer.transform(final, Class<? extends T>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractBidiMapDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bidimap/AbstractBidiMapDecorator.java",
      "class_declaration": "public abstract class AbstractBidiMapDecorator <K, V> extends AbstractMapDecorator<K, V> implements BidiMap<K, V> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "IfClosure",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/IfClosure.java",
      "class_declaration": "public class IfClosure <E> implements Closure<E>, Serializable ",
      "methods_under_test": {
        "=1": {
          "IfClosure.ifClosure(final, Predicate<? super E>, final, Closure<? super E>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "IfClosure.ifClosure(final, Predicate<? super E>, final, Closure<? super E>, final, Closure<? super E>)": [
            3,
            3,
            3
          ],
          "IfClosure.execute(final, E)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "OrderedMapIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/OrderedMapIterator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "EntrySetMapIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/EntrySetMapIterator.java",
      "class_declaration": "public class EntrySetMapIterator <K, V> implements MapIterator<K, V>, ResettableIterator<K> ",
      "methods_under_test": {
        "=1": {
          "EntrySetMapIterator.hasNext()": [
            1,
            1,
            1
          ],
          "EntrySetMapIterator.next()": [
            1,
            1,
            1
          ],
          "EntrySetMapIterator.reset()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EntrySetMapIterator.remove()": [
            2,
            2,
            2
          ],
          "EntrySetMapIterator.getKey()": [
            2,
            2,
            2
          ],
          "EntrySetMapIterator.getValue()": [
            2,
            2,
            2
          ],
          "EntrySetMapIterator.setValue(final, V)": [
            2,
            2,
            2
          ],
          "EntrySetMapIterator.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MultiSet",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/MultiSet.java",
      "error": "list index out of range"
    },
    {
      "src_name": "OrderedBidiMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/OrderedBidiMap.java",
      "error": "list index out of range"
    },
    {
      "src_name": "TruePredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/TruePredicate.java",
      "class_declaration": "public final class TruePredicate <T> implements Predicate<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "TruePredicate.truePredicate()": [
            1,
            1,
            1
          ],
          "TruePredicate.evaluate(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Closure",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/Closure.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractMultiValuedMapDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapDecorator.java",
      "class_declaration": "public abstract class AbstractMultiValuedMapDecorator <K, V> implements MultiValuedMap<K, V>, Serializable ",
      "methods_under_test": {
        "=1": {
          "AbstractMultiValuedMapDecorator.decorated()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.size()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.containsKey(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.containsValue(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.containsMapping(final, Object, final, Object)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.get(final, K)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.remove(final, Object)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.removeMapping(final, Object, final, Object)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.clear()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.put(K, V)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.keySet()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.entries()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.keys()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.values()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.asMap()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.putAll(K, Iterable<? extends V>)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.putAll(Map<? extends K, ? extends V>)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.putAll(MultiValuedMap<? extends K, ? extends V>)": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.mapIterator()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.hashCode()": [
            1,
            1,
            1
          ],
          "AbstractMultiValuedMapDecorator.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractMultiValuedMapDecorator.equals(final, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractMapIteratorDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java",
      "class_declaration": "public class AbstractMapIteratorDecorator <K, V> implements MapIterator<K, V> ",
      "methods_under_test": {
        "=1": {
          "AbstractMapIteratorDecorator.setValue(final, V)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractMapIteratorDecorator.hasNext()": [
            2,
            2,
            2
          ],
          "AbstractMapIteratorDecorator.next()": [
            2,
            2,
            2
          ],
          "AbstractMapIteratorDecorator.remove()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/list/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "InstantiateFactory",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java",
      "class_declaration": "public class InstantiateFactory <T> implements Factory<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "InstantiateFactory.instantiateFactory(final, Class<T>, final, Class<?>[], final, Object[])": [
            4,
            4,
            4
          ],
          "InstantiateFactory.create()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/keyvalue/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "TransformerClosure",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/TransformerClosure.java",
      "class_declaration": "public class TransformerClosure <E> implements Closure<E>, Serializable ",
      "methods_under_test": {
        "=1": {
          "TransformerClosure.execute(final, E)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TransformerClosure.transformerClosure(final, Transformer<? super E, ?>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Factory",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/Factory.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NullIsTruePredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java",
      "class_declaration": "public final class NullIsTruePredicate <T> implements PredicateDecorator<T>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "NullIsTruePredicate.nullIsTruePredicate(final, Predicate<? super T>)": [
            2,
            2,
            2
          ],
          "NullIsTruePredicate.evaluate(final, T)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ListValuedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/ListValuedMap.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractHashedMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/AbstractHashedMap.java",
      "class_declaration": "public class AbstractHashedMap <K, V> extends AbstractMap<K, V> implements IterableMap<K, V> ",
      "methods_under_test": {
        "=1": {
          "HashEntry.setValue(final, V)": [
            1,
            1,
            1
          ],
          "HashEntry.hashCode()": [
            1,
            1,
            1
          ],
          "HashEntry.toString()": [
            1,
            1,
            1
          ],
          "HashIterator.hasNext()": [
            1,
            1,
            1
          ],
          "HashIterator.currentEntry()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "HashEntry.getKey()": [
            2,
            2,
            2
          ],
          "HashEntry.equals(final, Object)": [
            3,
            3,
            3
          ],
          "HashIterator.nextEntry()": [
            4,
            4,
            4
          ],
          "HashIterator.remove()": [
            3,
            3,
            3
          ],
          "HashIterator.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "IterableMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/IterableMap.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractMapDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/AbstractMapDecorator.java",
      "class_declaration": "public abstract class AbstractMapDecorator <K, V> extends AbstractIterableMap<K, V> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "PredicateDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/PredicateDecorator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SortedBidiMap",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/SortedBidiMap.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/comparators/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractInputCheckedMapDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/AbstractInputCheckedMapDecorator.java",
      "class_declaration": "abstract class AbstractInputCheckedMapDecorator <K, V> extends AbstractMapDecorator<K, V> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ResettableListIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/ResettableListIterator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "EmptyListIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/EmptyListIterator.java",
      "class_declaration": "public class EmptyListIterator <E> extends AbstractEmptyIterator<E> implements\n        ResettableListIterator<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "IdentityPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/IdentityPredicate.java",
      "class_declaration": "public final class IdentityPredicate <T> implements Predicate<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "IdentityPredicate.evaluate(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "IdentityPredicate.identityPredicate(final, T)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "EmptyOrderedMapIterator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/iterators/EmptyOrderedMapIterator.java",
      "class_declaration": "public class EmptyOrderedMapIterator <K, V> extends AbstractEmptyMapIterator<K, V> implements OrderedMapIterator<K, V>, ResettableIterator<K> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "KeepCommand",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/sequence/KeepCommand.java",
      "class_declaration": "public class KeepCommand <T> extends EditCommand<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Get",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/Get.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MultiSetUtils",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/MultiSetUtils.java",
      "class_declaration": "public class MultiSetUtils ",
      "methods_under_test": {
        "=1": {
          "MultiSetUtils.synchronizedMultiSet(final, MultiSet<E>)": [
            1,
            1,
            1
          ],
          "MultiSetUtils.unmodifiableMultiSet(final, MultiSet<? extends E>)": [
            1,
            1,
            1
          ],
          "MultiSetUtils.predicatedMultiSet(final, MultiSet<E>, final, Predicate<? super E>)": [
            1,
            1,
            1
          ],
          "MultiSetUtils.emptyMultiSet()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PrototypeFactory",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/PrototypeFactory.java",
      "class_declaration": "public class PrototypeFactory ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "PrototypeFactory.prototypeFactory(final, T)": [
            9,
            9,
            9
          ],
          "PrototypeCloneFactory.create()": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "PrototypeSerializationFactory.create()": [
            16,
            16,
            16
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/map/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Transformer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/Transformer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractBagDecorator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bag/AbstractBagDecorator.java",
      "class_declaration": "public abstract class AbstractBagDecorator <E> extends AbstractCollectionDecorator<E> implements Bag<E> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ReplacementsFinder",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/sequence/ReplacementsFinder.java",
      "class_declaration": "public class ReplacementsFinder <T> implements CommandVisitor<T> ",
      "methods_under_test": {
        "=1": {
          "ReplacementsFinder.visitInsertCommand(final, T)": [
            1,
            1,
            1
          ],
          "ReplacementsFinder.visitDeleteCommand(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ReplacementsFinder.visitKeepCommand(final, T)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Predicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/Predicate.java",
      "error": "list index out of range"
    },
    {
      "src_name": "StringKeyAnalyzer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/trie/analyzer/StringKeyAnalyzer.java",
      "class_declaration": "public class StringKeyAnalyzer extends KeyAnalyzer<String> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "IfTransformer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/IfTransformer.java",
      "class_declaration": "public class IfTransformer <I, O> implements Transformer<I, O>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "IfTransformer.ifTransformer(final, Predicate<? super I>, final, Transformer<? super I, ? extends O>, final, Transformer<? super I, ? extends O>)": [
            3,
            3,
            3
          ],
          "IfTransformer.ifTransformer(final, Predicate<? super T>, final, Transformer<? super T, ? extends T>)": [
            3,
            3,
            3
          ],
          "IfTransformer.transform(final, I)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "InvokerTransformer",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java",
      "class_declaration": "public class InvokerTransformer <I, O> implements Transformer<I, O> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "InvokerTransformer.invokerTransformer(final, String)": [
            2,
            2,
            2
          ],
          "InvokerTransformer.invokerTransformer(final, String, final, Class<?>[], final, Object[])": [
            4,
            4,
            4
          ],
          "InvokerTransformer.transform(final, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/bidimap/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NonePredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/NonePredicate.java",
      "class_declaration": "public final class NonePredicate <T> extends AbstractQuantifierPredicate<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/sequence/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AndPredicate",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/functors/AndPredicate.java",
      "class_declaration": "public final class AndPredicate <T> implements PredicateDecorator<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "AndPredicate.evaluate(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AndPredicate.andPredicate(final, Predicate<? super T>, final, Predicate<? super T>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractKeyValue",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/keyvalue/AbstractKeyValue.java",
      "class_declaration": "public abstract class AbstractKeyValue <K, V> implements KeyValue<K, V> ",
      "methods_under_test": {
        "=1": {
          "AbstractKeyValue.setKey(K)": [
            1,
            1,
            1
          ],
          "AbstractKeyValue.setValue(V)": [
            1,
            1,
            1
          ],
          "AbstractKeyValue.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Equator",
      "src_path": "../../defects4j-subjects/Collections-28f/src/main/java/org/apache/commons/collections4/Equator.java",
      "error": "list index out of range"
    }
  ],
  "test_unpaired": [
    {
      "TestUtils": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/TestUtils.java"
    },
    {
      "AbstractLinkedListTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java"
    },
    {
      "EmptySetMutator": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/EmptySetMutator.java"
    },
    {
      "AbstractOrderedMapTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/AbstractOrderedMapTest.java"
    },
    {
      "BulkTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/BulkTest.java"
    },
    {
      "AbstractComparatorTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java"
    },
    {
      "AbstractBidiMapTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java"
    },
    {
      "MockTestCase": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/MockTestCase.java"
    },
    {
      "IdentityMap": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/IdentityMap.java"
    },
    {
      "DualTreeBidiMap2Test": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java"
    },
    {
      "AbstractMapIteratorTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java"
    },
    {
      "AbstractObjectTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/AbstractObjectTest.java"
    },
    {
      "EmptyMapMutator": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/EmptyMapMutator.java"
    },
    {
      "PredicatedCollectionBuilderTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java"
    },
    {
      "AbstractListTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/list/AbstractListTest.java"
    },
    {
      "AbstractBagTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java"
    },
    {
      "ListOrderedMap2Test": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java"
    },
    {
      "SingletonIterator2Test": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/SingletonIterator2Test.java"
    },
    {
      "AbstractOrderedBidiMapTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapTest.java"
    },
    {
      "AbstractSortedBidiMapTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java"
    },
    {
      "ListOrderedSet2Test": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java"
    },
    {
      "MapPerformance": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/MapPerformance.java"
    },
    {
      "AbstractCompositePredicateTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java"
    },
    {
      "ObjectArrayListIterator2Test": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator2Test.java"
    },
    {
      "AbstractPredicateTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/functors/AbstractPredicateTest.java"
    },
    {
      "ArrayIterator2Test": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java"
    },
    {
      "MapBackedSet2Test": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/set/MapBackedSet2Test.java"
    },
    {
      "AbstractArrayListTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/AbstractArrayListTest.java"
    },
    {
      "ListIteratorWrapper2Test": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapper2Test.java"
    },
    {
      "AbstractTreeMapTest": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/AbstractTreeMapTest.java"
    },
    {
      "ArrayListIterator2Test": "../../defects4j-subjects/Collections-28f/src/test/java/org/apache/commons/collections4/iterators/ArrayListIterator2Test.java"
    }
  ]
}