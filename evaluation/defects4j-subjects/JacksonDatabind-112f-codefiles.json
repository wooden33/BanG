{
  "src_test_exact_match": [
    {
      "src_name": "SimpleModule",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java",
      "class_declaration": "public class SimpleModule extends com.fasterxml.jackson.databind.Module implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/module/SimpleModuleTest.java"
    },
    {
      "src_name": "BeanUtil",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/BeanUtil.java",
      "class_declaration": "public class BeanUtil ",
      "methods_under_test": {
        "=1": {
          "BeanUtil.isGroovyMetaClassSetter(AnnotatedMethod)": [
            1,
            1,
            1
          ],
          "BeanUtil.isGroovyMetaClassGetter(AnnotatedMethod)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BeanUtil.okNameForGetter(AnnotatedMethod, boolean)": [
            2,
            2,
            2
          ],
          "BeanUtil.okNameForRegularGetter(AnnotatedMethod, String, boolean)": [
            6,
            6,
            6
          ],
          "BeanUtil.okNameForIsGetter(AnnotatedMethod, String, boolean)": [
            3,
            3,
            3
          ],
          "BeanUtil.okNameForSetter(AnnotatedMethod, boolean)": [
            2,
            2,
            2
          ],
          "BeanUtil.okNameForMutator(AnnotatedMethod, String, boolean)": [
            2,
            2,
            2
          ],
          "BeanUtil.getDefaultValue(JavaType)": [
            6,
            6,
            6
          ],
          "BeanUtil.isCglibGetCallbacks(AnnotatedMethod)": [
            4,
            4,
            4
          ],
          "BeanUtil.legacyManglePropertyName(final, String, final, int)": [
            5,
            5,
            5
          ],
          "BeanUtil.stdManglePropertyName(final, String, final, int)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/util/BeanUtilTest.java"
    },
    {
      "src_name": "JSONPObject",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/JSONPObject.java",
      "class_declaration": "public class JSONPObject implements JsonSerializable ",
      "methods_under_test": {
        "=1": {
          "JSONPObject.serializeWithType(JsonGenerator, SerializerProvider, TypeSerializer)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JSONPObject.serialize(JsonGenerator, SerializerProvider)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/util/JSONPObjectTest.java"
    },
    {
      "src_name": "POJONode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java",
      "class_declaration": "public class POJONode extends ValueNode ",
      "methods_under_test": {
        "=1": {
          "POJONode.asToken()": [
            1,
            1,
            1
          ],
          "POJONode.asText()": [
            1,
            1,
            1
          ],
          "POJONode.asText(String)": [
            1,
            1,
            1
          ],
          "POJONode.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "POJONode.binaryValue()": [
            2,
            2,
            2
          ],
          "POJONode.asBoolean(boolean)": [
            2,
            2,
            2
          ],
          "POJONode.asInt(int)": [
            2,
            2,
            2
          ],
          "POJONode.asLong(long)": [
            2,
            2,
            2
          ],
          "POJONode.asDouble(double)": [
            2,
            2,
            2
          ],
          "POJONode.serialize(JsonGenerator, SerializerProvider)": [
            4,
            4,
            4
          ],
          "POJONode.equals(Object)": [
            4,
            4,
            4
          ],
          "POJONode._pojoEquals(POJONode)": [
            2,
            2,
            2
          ],
          "POJONode.toString()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/POJONodeTest.java"
    },
    {
      "src_name": "NameTransformer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/NameTransformer.java",
      "class_declaration": "public abstract class NameTransformer ",
      "methods_under_test": {
        "=1": {
          "NopTransformer.transform(String)": [
            1,
            1,
            1
          ],
          "NopTransformer.reverse(String)": [
            1,
            1,
            1
          ],
          "NameTransformer.chainedTransformer(NameTransformer, NameTransformer)": [
            1,
            1,
            1
          ],
          "Chained.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Chained.transform(String)": [
            2,
            2,
            2
          ],
          "Chained.reverse(String)": [
            6,
            6,
            6
          ]
        },
        "11-20": {
          "NameTransformer.simpleTransformer(final, String, final, String)": [
            14,
            0,
            0
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/util/NameTransformerTest.java"
    },
    {
      "src_name": "RawValue",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/RawValue.java",
      "class_declaration": "public class RawValue implements JsonSerializable ",
      "methods_under_test": {
        "=1": {
          "RawValue.rawValue()": [
            1,
            1,
            1
          ],
          "RawValue.hashCode()": [
            1,
            1,
            1
          ],
          "RawValue.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "RawValue.serialize(JsonGenerator, SerializerProvider)": [
            3,
            3,
            3
          ],
          "RawValue.serializeWithType(JsonGenerator, SerializerProvider, TypeSerializer)": [
            4,
            4,
            4
          ],
          "RawValue.serialize(JsonGenerator)": [
            3,
            3,
            3
          ],
          "RawValue._serialize(JsonGenerator)": [
            3,
            3,
            3
          ],
          "RawValue.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/util/RawValueTest.java"
    },
    {
      "src_name": "AnnotatedClass",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "class_declaration": "public final class AnnotatedClass extends Annotated implements TypeResolutionContext ",
      "methods_under_test": {
        "=1": {
          "AnnotatedClass.construct(JavaType, MapperConfig<?>)": [
            1,
            1,
            1
          ],
          "AnnotatedClass.construct(JavaType, MapperConfig<?>, MixInResolver)": [
            1,
            1,
            1
          ],
          "AnnotatedClass.constructWithoutSuperTypes(Class<?>, MapperConfig<?>)": [
            1,
            1,
            1
          ],
          "AnnotatedClass.constructWithoutSuperTypes(Class<?>, MapperConfig<?>, MixInResolver)": [
            1,
            1,
            1
          ],
          "AnnotatedClass.resolveType(Type)": [
            1,
            1,
            1
          ],
          "AnnotatedClass.getAnnotation(Class<A>)": [
            1,
            1,
            1
          ],
          "AnnotatedClass.hasAnnotation(Class<?>)": [
            1,
            1,
            1
          ],
          "AnnotatedClass.hasOneOf(Class<? extends Annotation>[])": [
            1,
            1,
            1
          ],
          "AnnotatedClass.hasAnnotations()": [
            1,
            1,
            1
          ],
          "AnnotatedClass.memberMethods()": [
            1,
            1,
            1
          ],
          "AnnotatedClass.findMethod(String, Class<?>[])": [
            1,
            1,
            1
          ],
          "AnnotatedClass.fields()": [
            1,
            1,
            1
          ],
          "AnnotatedClass.toString()": [
            1,
            1,
            1
          ],
          "AnnotatedClass.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AnnotatedClass.annotations()": [
            3,
            3,
            3
          ],
          "AnnotatedClass.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/TestAnnotatedClass.java"
    },
    {
      "src_name": "ClassUtil",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java",
      "class_declaration": "public final class ClassUtil ",
      "methods_under_test": {
        "=1": {
          "ClassUtil.emptyIterator()": [
            1,
            1,
            1
          ],
          "ClassUtil.findSuperTypes(Class<?>, Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtil.findSuperTypes(Class<?>, Class<?>, List<Class<?>>)": [
            1,
            1,
            1
          ],
          "ClassUtil.isConcrete(Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtil.isConcrete(Member)": [
            1,
            1,
            1
          ],
          "ClassUtil.isBogusClass(Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtil.isNonStaticInnerClass(Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtil.isObjectOrPrimitive(Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtil.hasClass(Object, Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtil.verifyMustOverride(Class<?>, Object, String)": [
            1,
            1,
            1
          ],
          "ClassUtil.throwRootCauseIfIOE(Throwable)": [
            1,
            1,
            1
          ],
          "ClassUtil.throwAsIAE(Throwable)": [
            1,
            1,
            1
          ],
          "ClassUtil.throwAsIAE(Throwable, String)": [
            1,
            1,
            1
          ],
          "ClassUtil.unwrapAndThrowAsIAE(Throwable)": [
            1,
            1,
            1
          ],
          "ClassUtil.unwrapAndThrowAsIAE(Throwable, String)": [
            1,
            1,
            1
          ],
          "ClassUtil.nonNull(T, T)": [
            1,
            1,
            1
          ],
          "ClassUtil.checkAndFixAccess(Member)": [
            1,
            1,
            1
          ],
          "ClassUtil.isJacksonStdImpl(Object)": [
            1,
            1,
            1
          ],
          "ClassUtil.isJacksonStdImpl(Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtil.getPackageName(Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtil.hasEnclosingMethod(Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtil.getDeclaredFields(Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtil.getDeclaredMethods(Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtil.getDeclaringClass(Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtil.getGenericSuperclass(Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtil.getGenericInterfaces(Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtil.getEnclosingClass(Class<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ClassUtil.findSuperTypes(JavaType, Class<?>, boolean)": [
            2,
            2,
            2
          ],
          "ClassUtil.findRawSuperTypes(Class<?>, Class<?>, boolean)": [
            2,
            2,
            2
          ],
          "ClassUtil.findSuperClasses(Class<?>, Class<?>, boolean)": [
            5,
            5,
            5
          ],
          "ClassUtil.canBeABeanType(Class<?>)": [
            5,
            5,
            5
          ],
          "ClassUtil.getOuterClass(Class<?>)": [
            7,
            7,
            7
          ],
          "ClassUtil.isProxyType(Class<?>)": [
            2,
            2,
            2
          ],
          "ClassUtil.isCollectionMapOrArray(Class<?>)": [
            4,
            4,
            4
          ],
          "ClassUtil.hasGetterSignature(Method)": [
            4,
            4,
            4
          ],
          "ClassUtil.throwIfError(Throwable)": [
            2,
            2,
            2
          ],
          "ClassUtil.throwIfRTE(Throwable)": [
            2,
            2,
            2
          ],
          "ClassUtil.throwIfIOE(Throwable)": [
            2,
            2,
            2
          ],
          "ClassUtil.getRootCause(Throwable)": [
            2,
            2,
            2
          ],
          "ClassUtil.throwAsMappingException(DeserializationContext, IOException)": [
            2,
            2,
            2
          ],
          "ClassUtil.closeOnFailAndThrowAsIOE(JsonGenerator, Exception)": [
            2,
            2,
            2
          ],
          "ClassUtil.closeOnFailAndThrowAsIOE(JsonGenerator, Closeable, Exception)": [
            5,
            5,
            5
          ],
          "ClassUtil.createInstance(Class<T>, boolean)": [
            4,
            4,
            4
          ],
          "ClassUtil.classOf(Object)": [
            2,
            2,
            2
          ],
          "ClassUtil.rawClass(JavaType)": [
            2,
            2,
            2
          ],
          "ClassUtil.nullOrToString(Object)": [
            2,
            2,
            2
          ],
          "ClassUtil.nonNullString(String)": [
            2,
            2,
            2
          ],
          "ClassUtil.quotedOr(Object, String)": [
            2,
            2,
            2
          ],
          "ClassUtil.getClassDescription(Object)": [
            2,
            2,
            2
          ],
          "ClassUtil.classNameOf(Object)": [
            2,
            2,
            2
          ],
          "ClassUtil.nameOf(Class<?>)": [
            5,
            5,
            5
          ],
          "ClassUtil.nameOf(Named)": [
            2,
            2,
            2
          ],
          "ClassUtil.backticked(String)": [
            2,
            2,
            2
          ],
          "ClassUtil.exceptionMessage(Throwable)": [
            2,
            2,
            2
          ],
          "ClassUtil.defaultValue(Class<?>)": [
            9,
            9,
            9
          ],
          "ClassUtil.wrapperType(Class<?>)": [
            9,
            9,
            9
          ],
          "ClassUtil.primitiveType(Class<?>)": [
            10,
            10,
            10
          ],
          "ClassUtil.checkAndFixAccess(Member, boolean)": [
            4,
            4,
            4
          ],
          "ClassUtil.findEnumType(EnumSet<?>)": [
            2,
            2,
            2
          ],
          "ClassUtil.findEnumType(EnumMap<?,?>)": [
            2,
            2,
            2
          ],
          "ClassUtil.findEnumType(Enum<?>)": [
            2,
            2,
            2
          ],
          "ClassUtil.findEnumType(Class<?>)": [
            2,
            2,
            2
          ],
          "ClassUtil.findFirstAnnotatedEnumValue(Class<Enum<?>>, Class<T>)": [
            6,
            6,
            6
          ],
          "ClassUtil.findClassAnnotations(Class<?>)": [
            2,
            2,
            2
          ],
          "ClassUtil.getClassMethods(Class<?>)": [
            5,
            5,
            5
          ],
          "ClassUtil.getConstructors(Class<?>)": [
            3,
            3,
            3
          ],
          "EnumTypeLocator.enumTypeFor(EnumSet<?>)": [
            2,
            2,
            2
          ],
          "EnumTypeLocator.enumTypeFor(EnumMap<?,?>)": [
            2,
            2,
            2
          ],
          "Ctor.getParamCount()": [
            2,
            2,
            2
          ],
          "Ctor.getDeclaredAnnotations()": [
            2,
            2,
            2
          ],
          "Ctor.getParameterAnnotations()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "ClassUtil.isLocalType(Class<?>, boolean)": [
            15,
            15,
            15
          ],
          "ClassUtil.findConstructor(Class<T>, boolean)": [
            15,
            15,
            15
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/util/ClassUtilTest.java"
    },
    {
      "src_name": "ObjectMapper",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
      "class_declaration": "public class ObjectMapper extends ObjectCodec implements Versioned,\n        java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "DefaultTypeResolverBuilder.buildTypeDeserializer(DeserializationConfig, JavaType, Collection<NamedType>)": [
            1,
            1,
            1
          ],
          "DefaultTypeResolverBuilder.buildTypeSerializer(SerializationConfig, JavaType, Collection<NamedType>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.defaultClassIntrospector()": [
            1,
            1,
            1
          ],
          "ObjectMapper.copy()": [
            1,
            1,
            1
          ],
          "ObjectMapper._checkInvalidCopy(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper._newReader(DeserializationConfig)": [
            1,
            1,
            1
          ],
          "ObjectMapper._newReader(DeserializationConfig, JavaType, Object, FormatSchema, InjectableValues)": [
            1,
            1,
            1
          ],
          "ObjectMapper._newWriter(SerializationConfig)": [
            1,
            1,
            1
          ],
          "ObjectMapper._newWriter(SerializationConfig, FormatSchema)": [
            1,
            1,
            1
          ],
          "ObjectMapper._newWriter(SerializationConfig, JavaType, PrettyPrinter)": [
            1,
            1,
            1
          ],
          "ObjectMapper.version()": [
            1,
            1,
            1
          ],
          "ObjectMapper.findModules()": [
            1,
            1,
            1
          ],
          "ObjectMapper.findAndRegisterModules()": [
            1,
            1,
            1
          ],
          "ObjectMapper.setSerializerFactory(SerializerFactory)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setSerializerProvider(DefaultSerializerProvider)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setMixIns(Map<Class<?>, Class<?>>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.addMixIn(Class<?>, Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.findMixInClassFor(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.mixInCount()": [
            1,
            1,
            1
          ],
          "ObjectMapper.addMixInAnnotations(Class<?>, Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setVisibility(VisibilityChecker<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setVisibility(PropertyAccessor, JsonAutoDetect.Visibility)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setSubtypeResolver(SubtypeResolver)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setAnnotationIntrospector(AnnotationIntrospector)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setAnnotationIntrospectors(AnnotationIntrospector, AnnotationIntrospector)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setPropertyNamingStrategy(PropertyNamingStrategy)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setDefaultPrettyPrinter(PrettyPrinter)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setSerializationInclusion(JsonInclude.Include)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setPropertyInclusion(JsonInclude.Value)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setDefaultPropertyInclusion(JsonInclude.Value)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setDefaultPropertyInclusion(JsonInclude.Include)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setDefaultSetterInfo(JsonSetter.Value)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setDefaultVisibility(JsonAutoDetect.Value)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setDefaultMergeable(Boolean)": [
            1,
            1,
            1
          ],
          "ObjectMapper.enableDefaultTyping()": [
            1,
            1,
            1
          ],
          "ObjectMapper.enableDefaultTyping(DefaultTyping)": [
            1,
            1,
            1
          ],
          "ObjectMapper.enableDefaultTypingAsProperty(DefaultTyping, String)": [
            1,
            1,
            1
          ],
          "ObjectMapper.disableDefaultTyping()": [
            1,
            1,
            1
          ],
          "ObjectMapper.setDefaultTyping(TypeResolverBuilder<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.registerSubtypes()": [
            1,
            1,
            1
          ],
          "ObjectMapper.registerSubtypes(Collection<Class<?>>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.configOverride(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setTypeFactory(TypeFactory)": [
            1,
            1,
            1
          ],
          "ObjectMapper.constructType(Type)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setNodeFactory(JsonNodeFactory)": [
            1,
            1,
            1
          ],
          "ObjectMapper.addHandler(DeserializationProblemHandler)": [
            1,
            1,
            1
          ],
          "ObjectMapper.clearProblemHandlers()": [
            1,
            1,
            1
          ],
          "ObjectMapper.setConfig(DeserializationConfig)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setFilterProvider(FilterProvider)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setBase64Variant(Base64Variant)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setConfig(SerializationConfig)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setDateFormat(DateFormat)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setHandlerInstantiator(HandlerInstantiator)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setInjectableValues(InjectableValues)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setLocale(Locale)": [
            1,
            1,
            1
          ],
          "ObjectMapper.setTimeZone(TimeZone)": [
            1,
            1,
            1
          ],
          "ObjectMapper.isEnabled(MapperFeature)": [
            1,
            1,
            1
          ],
          "ObjectMapper.configure(MapperFeature, boolean)": [
            1,
            1,
            1
          ],
          "ObjectMapper.isEnabled(SerializationFeature)": [
            1,
            1,
            1
          ],
          "ObjectMapper.configure(SerializationFeature, boolean)": [
            1,
            1,
            1
          ],
          "ObjectMapper.enable(SerializationFeature)": [
            1,
            1,
            1
          ],
          "ObjectMapper.disable(SerializationFeature)": [
            1,
            1,
            1
          ],
          "ObjectMapper.isEnabled(DeserializationFeature)": [
            1,
            1,
            1
          ],
          "ObjectMapper.configure(DeserializationFeature, boolean)": [
            1,
            1,
            1
          ],
          "ObjectMapper.enable(DeserializationFeature)": [
            1,
            1,
            1
          ],
          "ObjectMapper.disable(DeserializationFeature)": [
            1,
            1,
            1
          ],
          "ObjectMapper.isEnabled(JsonParser.Feature)": [
            1,
            1,
            1
          ],
          "ObjectMapper.configure(JsonParser.Feature, boolean)": [
            1,
            1,
            1
          ],
          "ObjectMapper.isEnabled(JsonGenerator.Feature)": [
            1,
            1,
            1
          ],
          "ObjectMapper.configure(JsonGenerator.Feature, boolean)": [
            1,
            1,
            1
          ],
          "ObjectMapper.isEnabled(JsonFactory.Feature)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(JsonParser, Class<T>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(JsonParser, TypeReference<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(JsonParser, ResolvedType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(JsonParser, JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValues(JsonParser, ResolvedType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValues(JsonParser, JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValues(JsonParser, Class<T>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValues(JsonParser, TypeReference<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readTree(InputStream)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readTree(Reader)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readTree(String)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readTree(byte[])": [
            1,
            1,
            1
          ],
          "ObjectMapper.readTree(File)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readTree(URL)": [
            1,
            1,
            1
          ],
          "ObjectMapper.createObjectNode()": [
            1,
            1,
            1
          ],
          "ObjectMapper.createArrayNode()": [
            1,
            1,
            1
          ],
          "ObjectMapper.treeAsTokens(TreeNode)": [
            1,
            1,
            1
          ],
          "ObjectMapper.canSerialize(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.canSerialize(Class<?>, AtomicReference<Throwable>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.canDeserialize(JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.canDeserialize(JavaType, AtomicReference<Throwable>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(File, Class<T>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(File, TypeReference)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(File, JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(URL, Class<T>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(URL, TypeReference)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(URL, JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(String, Class<T>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(String, TypeReference)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(String, JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(Reader, Class<T>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(Reader, TypeReference)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(Reader, JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(InputStream, Class<T>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(InputStream, TypeReference)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(InputStream, JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(byte[], Class<T>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(byte[], int, int, Class<T>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(byte[], TypeReference)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(byte[], int, int, TypeReference)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(byte[], JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(byte[], int, int, JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(DataInput, Class<T>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readValue(DataInput, JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writeValue(File, Object)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writeValue(OutputStream, Object)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writeValue(DataOutput, Object)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writeValue(Writer, Object)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writer()": [
            1,
            1,
            1
          ],
          "ObjectMapper.writer(SerializationFeature)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writer(DateFormat)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writerWithView(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writerFor(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writerFor(TypeReference<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writerFor(JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writerWithDefaultPrettyPrinter()": [
            1,
            1,
            1
          ],
          "ObjectMapper.writer(FilterProvider)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writer(FormatSchema)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writer(Base64Variant)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writer(CharacterEscapes)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writer(ContextAttributes)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writerWithType(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writerWithType(TypeReference<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.writerWithType(JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.reader()": [
            1,
            1,
            1
          ],
          "ObjectMapper.reader(DeserializationFeature)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readerForUpdating(Object)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readerFor(JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readerFor(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readerFor(TypeReference<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.reader(JsonNodeFactory)": [
            1,
            1,
            1
          ],
          "ObjectMapper.reader(FormatSchema)": [
            1,
            1,
            1
          ],
          "ObjectMapper.reader(InjectableValues)": [
            1,
            1,
            1
          ],
          "ObjectMapper.readerWithView(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.reader(Base64Variant)": [
            1,
            1,
            1
          ],
          "ObjectMapper.reader(ContextAttributes)": [
            1,
            1,
            1
          ],
          "ObjectMapper.reader(JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.reader(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.reader(TypeReference<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.convertValue(Object, Class<T>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.convertValue(Object, TypeReference<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.convertValue(Object, JavaType)": [
            1,
            1,
            1
          ],
          "ObjectMapper.generateJsonSchema(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectMapper.acceptJsonFormatVisitor(Class<?>, JsonFormatVisitorWrapper)": [
            1,
            1,
            1
          ],
          "ObjectMapper._serializerProvider(SerializationConfig)": [
            1,
            1,
            1
          ],
          "ObjectMapper.createDeserializationContext(JsonParser, DeserializationConfig)": [
            1,
            1,
            1
          ],
          "ObjectMapper._initForReading(JsonParser)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DefaultTypeResolverBuilder.useForType(JavaType)": [
            10,
            10,
            10
          ],
          "ObjectMapper.registerModules()": [
            2,
            2,
            2
          ],
          "ObjectMapper.registerModules(Iterable<? extends Module>)": [
            2,
            2,
            2
          ],
          "ObjectMapper.findModules(ClassLoader)": [
            2,
            2,
            2
          ],
          "ObjectMapper.setMixInResolver(ClassIntrospector.MixInResolver)": [
            2,
            2,
            2
          ],
          "ObjectMapper.enableDefaultTyping(DefaultTyping, JsonTypeInfo.As)": [
            2,
            2,
            2
          ],
          "ObjectMapper.enable()": [
            2,
            2,
            2
          ],
          "ObjectMapper.disable()": [
            2,
            2,
            2
          ],
          "ObjectMapper.readTree(JsonParser)": [
            4,
            4,
            4
          ],
          "ObjectMapper.writeValue(JsonGenerator, Object)": [
            6,
            6,
            6
          ],
          "ObjectMapper.writeTree(JsonGenerator, TreeNode)": [
            2,
            2,
            2
          ],
          "ObjectMapper.writeTree(JsonGenerator, JsonNode)": [
            2,
            2,
            2
          ],
          "ObjectMapper.treeToValue(TreeNode, Class<T>)": [
            6,
            6,
            6
          ],
          "ObjectMapper.valueToTree(Object)": [
            7,
            7,
            7
          ],
          "ObjectMapper.writeValueAsString(Object)": [
            3,
            3,
            3
          ],
          "ObjectMapper.writeValueAsBytes(Object)": [
            3,
            3,
            3
          ],
          "ObjectMapper.writer(PrettyPrinter)": [
            2,
            2,
            2
          ],
          "ObjectMapper._convert(Object, JavaType)": [
            7,
            7,
            7
          ],
          "ObjectMapper.updateValue(T, Object)": [
            9,
            9,
            9
          ],
          "ObjectMapper.acceptJsonFormatVisitor(JavaType, JsonFormatVisitorWrapper)": [
            2,
            2,
            2
          ],
          "ObjectMapper._configAndWriteValue(JsonGenerator, Object)": [
            3,
            3,
            3
          ],
          "ObjectMapper._readValue(DeserializationConfig, JsonParser, JavaType)": [
            5,
            5,
            5
          ],
          "ObjectMapper._readMapAndClose(JsonParser, JavaType)": [
            6,
            6,
            6
          ],
          "ObjectMapper._readTreeAndClose(JsonParser)": [
            7,
            7,
            7
          ],
          "ObjectMapper._unwrapAndDeserialize(JsonParser, DeserializationContext, DeserializationConfig, JavaType, JsonDeserializer<Object>)": [
            6,
            6,
            6
          ],
          "ObjectMapper._initForReading(JsonParser, JavaType)": [
            3,
            3,
            3
          ],
          "ObjectMapper._verifyNoTrailingTokens(JsonParser, DeserializationContext, JavaType)": [
            2,
            2,
            2
          ],
          "ObjectMapper._findRootDeserializer(DeserializationContext, JavaType)": [
            3,
            3,
            3
          ],
          "ObjectMapper._verifySchemaType(FormatSchema)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "ObjectMapper.registerModule(Module)": [
            17,
            0,
            0
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ObjectMapperTest.java"
    },
    {
      "src_name": "MissingNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java",
      "class_declaration": "public final class MissingNode extends ValueNode ",
      "methods_under_test": {
        "=1": {
          "MissingNode.deepCopy()": [
            1,
            1,
            1
          ],
          "MissingNode.asToken()": [
            1,
            1,
            1
          ],
          "MissingNode.asText()": [
            1,
            1,
            1
          ],
          "MissingNode.asText(String)": [
            1,
            1,
            1
          ],
          "MissingNode.serialize(JsonGenerator, SerializerProvider)": [
            1,
            1,
            1
          ],
          "MissingNode.serializeWithType(JsonGenerator, SerializerProvider, TypeSerializer)": [
            1,
            1,
            1
          ],
          "MissingNode.equals(Object)": [
            1,
            1,
            1
          ],
          "MissingNode.toString()": [
            1,
            1,
            1
          ],
          "MissingNode.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/TestMissingNode.java"
    },
    {
      "src_name": "ObjectWriter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java",
      "class_declaration": "public class ObjectWriter implements Versioned,\n        java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "ObjectWriter.version()": [
            1,
            1,
            1
          ],
          "ObjectWriter._new(ObjectWriter, JsonFactory)": [
            1,
            1,
            1
          ],
          "ObjectWriter._newSequenceWriter(boolean, JsonGenerator, boolean)": [
            1,
            1,
            1
          ],
          "ObjectWriter.with(SerializationFeature)": [
            1,
            1,
            1
          ],
          "ObjectWriter.without(SerializationFeature)": [
            1,
            1,
            1
          ],
          "ObjectWriter.with(JsonGenerator.Feature)": [
            1,
            1,
            1
          ],
          "ObjectWriter.without(JsonGenerator.Feature)": [
            1,
            1,
            1
          ],
          "ObjectWriter.with(FormatFeature)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withFeatures()": [
            1,
            1,
            1
          ],
          "ObjectWriter.without(FormatFeature)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withoutFeatures()": [
            1,
            1,
            1
          ],
          "ObjectWriter.forType(JavaType)": [
            1,
            1,
            1
          ],
          "ObjectWriter.forType(TypeReference<?>)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withType(JavaType)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withType(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withType(TypeReference<?>)": [
            1,
            1,
            1
          ],
          "ObjectWriter.with(DateFormat)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withDefaultPrettyPrinter()": [
            1,
            1,
            1
          ],
          "ObjectWriter.with(PrettyPrinter)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withRootName(String)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withRootName(PropertyName)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withoutRootName()": [
            1,
            1,
            1
          ],
          "ObjectWriter.with(FormatSchema)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withSchema(FormatSchema)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withView(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectWriter.with(Locale)": [
            1,
            1,
            1
          ],
          "ObjectWriter.with(TimeZone)": [
            1,
            1,
            1
          ],
          "ObjectWriter.with(Base64Variant)": [
            1,
            1,
            1
          ],
          "ObjectWriter.with(CharacterEscapes)": [
            1,
            1,
            1
          ],
          "ObjectWriter.with(JsonFactory)": [
            1,
            1,
            1
          ],
          "ObjectWriter.with(ContextAttributes)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withAttributes(Map<?,?>)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withAttribute(Object, Object)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withoutAttribute(Object)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withRootValueSeparator(String)": [
            1,
            1,
            1
          ],
          "ObjectWriter.withRootValueSeparator(SerializableString)": [
            1,
            1,
            1
          ],
          "ObjectWriter.writeValues(File)": [
            1,
            1,
            1
          ],
          "ObjectWriter.writeValues(JsonGenerator)": [
            1,
            1,
            1
          ],
          "ObjectWriter.writeValues(Writer)": [
            1,
            1,
            1
          ],
          "ObjectWriter.writeValues(OutputStream)": [
            1,
            1,
            1
          ],
          "ObjectWriter.writeValues(DataOutput)": [
            1,
            1,
            1
          ],
          "ObjectWriter.writeValuesAsArray(File)": [
            1,
            1,
            1
          ],
          "ObjectWriter.writeValuesAsArray(JsonGenerator)": [
            1,
            1,
            1
          ],
          "ObjectWriter.writeValuesAsArray(Writer)": [
            1,
            1,
            1
          ],
          "ObjectWriter.writeValuesAsArray(OutputStream)": [
            1,
            1,
            1
          ],
          "ObjectWriter.writeValuesAsArray(DataOutput)": [
            1,
            1,
            1
          ],
          "ObjectWriter.isEnabled(SerializationFeature)": [
            1,
            1,
            1
          ],
          "ObjectWriter.isEnabled(MapperFeature)": [
            1,
            1,
            1
          ],
          "ObjectWriter.isEnabled(JsonParser.Feature)": [
            1,
            1,
            1
          ],
          "ObjectWriter.isEnabled(JsonGenerator.Feature)": [
            1,
            1,
            1
          ],
          "ObjectWriter.hasPrefetchedSerializer()": [
            1,
            1,
            1
          ],
          "ObjectWriter.writeValue(File, Object)": [
            1,
            1,
            1
          ],
          "ObjectWriter.writeValue(OutputStream, Object)": [
            1,
            1,
            1
          ],
          "ObjectWriter.writeValue(Writer, Object)": [
            1,
            1,
            1
          ],
          "ObjectWriter.writeValue(DataOutput, Object)": [
            1,
            1,
            1
          ],
          "ObjectWriter.acceptJsonFormatVisitor(Class<?>, JsonFormatVisitorWrapper)": [
            1,
            1,
            1
          ],
          "ObjectWriter.canSerialize(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectWriter.canSerialize(Class<?>, AtomicReference<Throwable>)": [
            1,
            1,
            1
          ],
          "ObjectWriter._serializerProvider()": [
            1,
            1,
            1
          ],
          "ObjectWriter._configureGenerator(JsonGenerator)": [
            1,
            1,
            1
          ],
          "GeneratorSettings.with(FormatSchema)": [
            1,
            1,
            1
          ],
          "GeneratorSettings.with(CharacterEscapes)": [
            1,
            1,
            1
          ],
          "Prefetch.hasSerializer()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ObjectWriter._new(ObjectWriter, SerializationConfig)": [
            2,
            2,
            2
          ],
          "ObjectWriter._new(GeneratorSettings, Prefetch)": [
            2,
            2,
            2
          ],
          "ObjectWriter.forType(Class<?>)": [
            2,
            2,
            2
          ],
          "ObjectWriter.with(FilterProvider)": [
            2,
            2,
            2
          ],
          "ObjectWriter.writeValue(JsonGenerator, Object)": [
            7,
            7,
            7
          ],
          "ObjectWriter.writeValueAsString(Object)": [
            3,
            3,
            3
          ],
          "ObjectWriter.writeValueAsBytes(Object)": [
            3,
            3,
            3
          ],
          "ObjectWriter.acceptJsonFormatVisitor(JavaType, JsonFormatVisitorWrapper)": [
            2,
            2,
            2
          ],
          "ObjectWriter._verifySchemaType(FormatSchema)": [
            2,
            2,
            2
          ],
          "ObjectWriter._configAndWriteValue(JsonGenerator, Object)": [
            3,
            3,
            3
          ],
          "GeneratorSettings.with(PrettyPrinter)": [
            2,
            2,
            2
          ],
          "GeneratorSettings.withRootValueSeparator(String)": [
            4,
            4,
            4
          ],
          "GeneratorSettings.withRootValueSeparator(SerializableString)": [
            4,
            4,
            4
          ],
          "GeneratorSettings.initialize(JsonGenerator)": [
            7,
            7,
            7
          ],
          "Prefetch.serialize(JsonGenerator, Object, DefaultSerializerProvider)": [
            5,
            5,
            5
          ]
        },
        "11-20": {
          "Prefetch.forRootType(ObjectWriter, JavaType)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ObjectWriterTest.java"
    },
    {
      "src_name": "ArrayBuilders",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java",
      "class_declaration": "public final class ArrayBuilders ",
      "methods_under_test": {
        "=1": {
          "ArrayBuilders.getArrayComparator(final, Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArrayBuilders.getBooleanBuilder()": [
            2,
            2,
            2
          ],
          "ArrayBuilders.getByteBuilder()": [
            2,
            2,
            2
          ],
          "ArrayBuilders.getShortBuilder()": [
            2,
            2,
            2
          ],
          "ArrayBuilders.getIntBuilder()": [
            2,
            2,
            2
          ],
          "ArrayBuilders.getLongBuilder()": [
            2,
            2,
            2
          ],
          "ArrayBuilders.getFloatBuilder()": [
            2,
            2,
            2
          ],
          "ArrayBuilders.getDoubleBuilder()": [
            2,
            2,
            2
          ],
          "ArrayBuilders.arrayToSet(T[])": [
            3,
            3,
            3
          ],
          "ArrayBuilders.insertInListNoDup(T[], T)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/util/ArrayBuildersTest.java"
    },
    {
      "src_name": "KeyDeserializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/KeyDeserializers.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/module/TestKeyDeserializers.java"
    },
    {
      "src_name": "TreeTraversingParser",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java",
      "class_declaration": "public class TreeTraversingParser extends ParserMinimalBase ",
      "methods_under_test": {
        "=1": {
          "TreeTraversingParser.version()": [
            1,
            1,
            1
          ],
          "TreeTraversingParser.hasTextCharacters()": [
            1,
            1,
            1
          ],
          "TreeTraversingParser.getNumberType()": [
            1,
            1,
            1
          ],
          "TreeTraversingParser._handleEOF()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TreeTraversingParser.close()": [
            2,
            2,
            2
          ],
          "TreeTraversingParser.nextToken()": [
            8,
            8,
            8
          ],
          "TreeTraversingParser.skipChildren()": [
            3,
            3,
            3
          ],
          "TreeTraversingParser.overrideCurrentName(String)": [
            2,
            2,
            2
          ],
          "TreeTraversingParser.getText()": [
            9,
            9,
            9
          ],
          "TreeTraversingParser.getEmbeddedObject()": [
            5,
            5,
            5
          ],
          "TreeTraversingParser.getBinaryValue(Base64Variant)": [
            3,
            3,
            3
          ],
          "TreeTraversingParser.readBinaryValue(Base64Variant, OutputStream)": [
            2,
            2,
            2
          ],
          "TreeTraversingParser.currentNode()": [
            2,
            2,
            2
          ],
          "TreeTraversingParser.currentNumericNode()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/TestTreeTraversingParser.java"
    },
    {
      "src_name": "EnumValues",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/EnumValues.java",
      "class_declaration": "public final class EnumValues implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "EnumValues.serializedValueFor(Enum<?>)": [
            1,
            1,
            1
          ],
          "EnumValues.values()": [
            1,
            1,
            1
          ],
          "EnumValues.enums()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EnumValues.construct(SerializationConfig, Class<Enum<?>>)": [
            2,
            2,
            2
          ],
          "EnumValues.constructFromName(MapperConfig<?>, Class<Enum<?>>)": [
            4,
            4,
            4
          ],
          "EnumValues.constructFromToString(MapperConfig<?>, Class<Enum<?>>)": [
            3,
            3,
            3
          ],
          "EnumValues.internalMap()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/util/EnumValuesTest.java"
    },
    {
      "src_name": "BeanSerializerModifier",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifier.java",
      "class_declaration": "public abstract class BeanSerializerModifier ",
      "methods_under_test": {
        "=1": {
          "BeanSerializerModifier.changeProperties(SerializationConfig, BeanDescription, List<BeanPropertyWriter>)": [
            1,
            1,
            1
          ],
          "BeanSerializerModifier.orderProperties(SerializationConfig, BeanDescription, List<BeanPropertyWriter>)": [
            1,
            1,
            1
          ],
          "BeanSerializerModifier.updateBuilder(SerializationConfig, BeanDescription, BeanSerializerBuilder)": [
            1,
            1,
            1
          ],
          "BeanSerializerModifier.modifySerializer(SerializationConfig, BeanDescription, JsonSerializer<?>)": [
            1,
            1,
            1
          ],
          "BeanSerializerModifier.modifyArraySerializer(SerializationConfig, ArrayType, BeanDescription, JsonSerializer<?>)": [
            1,
            1,
            1
          ],
          "BeanSerializerModifier.modifyCollectionSerializer(SerializationConfig, CollectionType, BeanDescription, JsonSerializer<?>)": [
            1,
            1,
            1
          ],
          "BeanSerializerModifier.modifyCollectionLikeSerializer(SerializationConfig, CollectionLikeType, BeanDescription, JsonSerializer<?>)": [
            1,
            1,
            1
          ],
          "BeanSerializerModifier.modifyMapSerializer(SerializationConfig, MapType, BeanDescription, JsonSerializer<?>)": [
            1,
            1,
            1
          ],
          "BeanSerializerModifier.modifyMapLikeSerializer(SerializationConfig, MapLikeType, BeanDescription, JsonSerializer<?>)": [
            1,
            1,
            1
          ],
          "BeanSerializerModifier.modifyEnumSerializer(SerializationConfig, JavaType, BeanDescription, JsonSerializer<?>)": [
            1,
            1,
            1
          ],
          "BeanSerializerModifier.modifyKeySerializer(SerializationConfig, JavaType, BeanDescription, JsonSerializer<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifierTest.java"
    },
    {
      "src_name": "TypeFactory",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
      "class_declaration": "@SuppressWarnings({\"rawtypes\" })\npublic final class TypeFactory implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "TypeFactory.withClassLoader(ClassLoader)": [
            1,
            1,
            1
          ],
          "TypeFactory.withCache(LRUMap<Object,JavaType>)": [
            1,
            1,
            1
          ],
          "TypeFactory.defaultInstance()": [
            1,
            1,
            1
          ],
          "TypeFactory.clearCache()": [
            1,
            1,
            1
          ],
          "TypeFactory.unknownType()": [
            1,
            1,
            1
          ],
          "TypeFactory.classForName(String, boolean, ClassLoader)": [
            1,
            1,
            1
          ],
          "TypeFactory.classForName(String)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructFromCanonical(String)": [
            1,
            1,
            1
          ],
          "TypeFactory.findTypeParameters(Class<?>, Class<?>, TypeBindings)": [
            1,
            1,
            1
          ],
          "TypeFactory.findTypeParameters(Class<?>, Class<?>)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructType(Type)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructType(Type, TypeBindings)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructType(TypeReference<?>)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructType(Type, Class<?>)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructArrayType(Class<?>)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructArrayType(JavaType)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructCollectionType(Class<? extends Collection>, Class<?>)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructCollectionLikeType(Class<?>, Class<?>)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructMapLikeType(Class<?>, Class<?>, Class<?>)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructSimpleType(Class<?>, JavaType[])": [
            1,
            1,
            1
          ],
          "TypeFactory.constructSimpleType(Class<?>, Class<?>, JavaType[])": [
            1,
            1,
            1
          ],
          "TypeFactory.constructReferenceType(Class<?>, JavaType)": [
            1,
            1,
            1
          ],
          "TypeFactory.uncheckedSimpleType(Class<?>)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructParametricType(Class<?>)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructParametrizedType(Class<?>, Class<?>)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructRawCollectionType(Class<? extends Collection>)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructRawCollectionLikeType(Class<?>)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructRawMapType(Class<? extends Map>)": [
            1,
            1,
            1
          ],
          "TypeFactory.constructRawMapLikeType(Class<?>)": [
            1,
            1,
            1
          ],
          "TypeFactory._newSimpleType(Class<?>, TypeBindings, JavaType, JavaType[])": [
            1,
            1,
            1
          ],
          "TypeFactory._unknownType()": [
            1,
            1,
            1
          ],
          "TypeFactory._fromArrayType(ClassStack, GenericArrayType, TypeBindings)": [
            1,
            1,
            1
          ],
          "TypeFactory._fromWildcard(ClassStack, WildcardType, TypeBindings)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TypeFactory.withModifier(TypeModifier)": [
            3,
            3,
            3
          ],
          "TypeFactory.rawClass(Type)": [
            2,
            2,
            2
          ],
          "TypeFactory.findClass(String)": [
            10,
            10,
            10
          ],
          "TypeFactory._findPrimitive(String)": [
            10,
            10,
            10
          ],
          "TypeFactory.constructGeneralizedType(JavaType, Class<?>)": [
            4,
            4,
            4
          ],
          "TypeFactory.findTypeParameters(JavaType, Class<?>)": [
            2,
            2,
            2
          ],
          "TypeFactory.moreSpecificType(JavaType, JavaType)": [
            5,
            5,
            5
          ],
          "TypeFactory.constructType(Type, JavaType)": [
            5,
            5,
            5
          ],
          "TypeFactory.constructCollectionType(Class<? extends Collection>, JavaType)": [
            3,
            3,
            3
          ],
          "TypeFactory.constructCollectionLikeType(Class<?>, JavaType)": [
            2,
            2,
            2
          ],
          "TypeFactory.constructMapType(Class<? extends Map>, Class<?>, Class<?>)": [
            2,
            2,
            2
          ],
          "TypeFactory.constructMapType(Class<? extends Map>, JavaType, JavaType)": [
            4,
            4,
            4
          ],
          "TypeFactory.constructMapLikeType(Class<?>, JavaType, JavaType)": [
            2,
            2,
            2
          ],
          "TypeFactory._constructSimple(Class<?>, TypeBindings, JavaType, JavaType[])": [
            3,
            3,
            3
          ],
          "TypeFactory._findWellKnownSimple(Class<?>)": [
            7,
            7,
            7
          ],
          "TypeFactory._resolveSuperClass(ClassStack, Class<?>, TypeBindings)": [
            2,
            2,
            2
          ],
          "TypeFactory._resolveSuperInterfaces(ClassStack, Class<?>, TypeBindings)": [
            3,
            3,
            3
          ],
          "TypeFactory._fromWellKnownClass(ClassStack, Class<?>, TypeBindings, JavaType, JavaType[])": [
            5,
            5,
            5
          ],
          "TypeFactory._fromWellKnownInterface(ClassStack, Class<?>, TypeBindings, JavaType, JavaType[])": [
            3,
            3,
            3
          ],
          "TypeFactory._fromParamType(ClassStack, ParameterizedType, TypeBindings)": [
            6,
            6,
            6
          ],
          "TypeFactory._fromVariable(ClassStack, TypeVariable<?>, TypeBindings)": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "TypeFactory.constructSpecializedType(JavaType, Class<?>)": [
            13,
            13,
            13
          ],
          "TypeFactory._fromAny(ClassStack, Type, TypeBindings)": [
            11,
            11,
            11
          ],
          "TypeFactory._fromClass(ClassStack, Class<?>, TypeBindings)": [
            14,
            14,
            14
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java"
    },
    {
      "src_name": "BeanDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "class_declaration": "public class BeanDeserializer extends BeanDeserializerBase implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "BeanDeserializer.withObjectIdReader(ObjectIdReader)": [
            1,
            1,
            1
          ],
          "BeanDeserializer.withIgnorableProperties(Set<String>)": [
            1,
            1,
            1
          ],
          "BeanDeserializer.withBeanProperties(BeanPropertyMap)": [
            1,
            1,
            1
          ],
          "BeanDeserializer.asArrayDeserializer()": [
            1,
            1,
            1
          ],
          "BeanDeserializer._missingToken(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BeanDeserializer.unwrappingDeserializer(NameTransformer)": [
            5,
            5,
            5
          ],
          "BeanDeserializer.deserialize(JsonParser, DeserializationContext)": [
            4,
            4,
            4
          ],
          "BeanDeserializer._deserializeWithErrorWrapping(JsonParser, DeserializationContext, SettableBeanProperty)": [
            3,
            3,
            3
          ],
          "BeanDeserializer.deserializeFromNull(JsonParser, DeserializationContext)": [
            2,
            2,
            2
          ],
          "BeanDeserializer.deserializeWithView(JsonParser, DeserializationContext, Object, Class<?>)": [
            6,
            6,
            6
          ],
          "BeanDeserializer.deserializeWithUnwrapped(JsonParser, DeserializationContext, Object)": [
            9,
            9,
            9
          ],
          "BeanDeserializer.deserializeWithExternalTypeId(JsonParser, DeserializationContext)": [
            3,
            3,
            3
          ],
          "BeanDeserializer.deserializeWithExternalTypeId(JsonParser, DeserializationContext, Object)": [
            10,
            10,
            10
          ],
          "BeanDeserializer._creatorReturnedNullException()": [
            2,
            2,
            2
          ],
          "BeanReferring.handleResolvedForwardReference(Object, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "BeanDeserializer._deserializeOther(JsonParser, DeserializationContext, JsonToken)": [
            14,
            14,
            14
          ],
          "BeanDeserializer.deserialize(JsonParser, DeserializationContext, Object)": [
            12,
            12,
            12
          ],
          "BeanDeserializer.deserializeFromObject(JsonParser, DeserializationContext)": [
            16,
            16,
            16
          ],
          "BeanDeserializer.deserializeWithUnwrapped(JsonParser, DeserializationContext)": [
            11,
            11,
            11
          ],
          "BeanDeserializer.deserializeUsingPropertyBasedWithUnwrapped(JsonParser, DeserializationContext)": [
            14,
            14,
            14
          ],
          "BeanDeserializer.deserializeUsingPropertyBasedWithExternalTypeId(JsonParser, DeserializationContext)": [
            15,
            15,
            15
          ]
        },
        ">20": {
          "BeanDeserializer._deserializeUsingPropertyBased(final, JsonParser, final, DeserializationContext)": [
            22,
            22,
            22
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java"
    },
    {
      "src_name": "JsonNodeFactory",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
      "class_declaration": "public class JsonNodeFactory implements java.io.Serializable, \n        JsonNodeCreator ",
      "methods_under_test": {
        "=1": {
          "JsonNodeFactory.withExactBigDecimals(boolean)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.booleanNode(boolean)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.nullNode()": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.numberNode(byte)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.numberNode(Byte)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.numberNode(short)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.numberNode(Short)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.numberNode(int)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.numberNode(Integer)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.numberNode(long)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.numberNode(float)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.numberNode(Float)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.numberNode(double)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.numberNode(Double)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.textNode(String)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.binaryNode(byte[])": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.binaryNode(byte[], int, int)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.arrayNode()": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.arrayNode(int)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.objectNode()": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.pojoNode(Object)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory.rawValueNode(RawValue)": [
            1,
            1,
            1
          ],
          "JsonNodeFactory._inIntRange(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonNodeFactory.numberNode(Long)": [
            2,
            2,
            2
          ],
          "JsonNodeFactory.numberNode(BigInteger)": [
            2,
            2,
            2
          ],
          "JsonNodeFactory.numberNode(BigDecimal)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/JsonNodeFactoryTest.java"
    },
    {
      "src_name": "JsonNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/JsonNode.java",
      "class_declaration": "public abstract class JsonNode extends JsonSerializable.Base implements TreeNode, Iterable<JsonNode> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java"
    },
    {
      "src_name": "ObjectReader",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
      "class_declaration": "public class ObjectReader extends ObjectCodec implements Versioned, java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "ObjectReader.version()": [
            1,
            1,
            1
          ],
          "ObjectReader._new(ObjectReader, JsonFactory)": [
            1,
            1,
            1
          ],
          "ObjectReader._new(ObjectReader, DeserializationConfig)": [
            1,
            1,
            1
          ],
          "ObjectReader._new(ObjectReader, DeserializationConfig, JavaType, JsonDeserializer<Object>, Object, FormatSchema, InjectableValues, DataFormatReaders)": [
            1,
            1,
            1
          ],
          "ObjectReader._newIterator(JsonParser, DeserializationContext, JsonDeserializer<?>, boolean)": [
            1,
            1,
            1
          ],
          "ObjectReader.with(DeserializationFeature)": [
            1,
            1,
            1
          ],
          "ObjectReader.without(DeserializationFeature)": [
            1,
            1,
            1
          ],
          "ObjectReader.with(JsonParser.Feature)": [
            1,
            1,
            1
          ],
          "ObjectReader.without(JsonParser.Feature)": [
            1,
            1,
            1
          ],
          "ObjectReader.with(FormatFeature)": [
            1,
            1,
            1
          ],
          "ObjectReader.withFeatures()": [
            1,
            1,
            1
          ],
          "ObjectReader.without(FormatFeature)": [
            1,
            1,
            1
          ],
          "ObjectReader.withoutFeatures()": [
            1,
            1,
            1
          ],
          "ObjectReader.at(final, String)": [
            1,
            1,
            1
          ],
          "ObjectReader.at(final, JsonPointer)": [
            1,
            1,
            1
          ],
          "ObjectReader.with(DeserializationConfig)": [
            1,
            1,
            1
          ],
          "ObjectReader.with(JsonNodeFactory)": [
            1,
            1,
            1
          ],
          "ObjectReader.withRootName(String)": [
            1,
            1,
            1
          ],
          "ObjectReader.withRootName(PropertyName)": [
            1,
            1,
            1
          ],
          "ObjectReader.withoutRootName()": [
            1,
            1,
            1
          ],
          "ObjectReader.forType(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectReader.forType(TypeReference<?>)": [
            1,
            1,
            1
          ],
          "ObjectReader.withType(JavaType)": [
            1,
            1,
            1
          ],
          "ObjectReader.withType(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectReader.withType(java.lang.reflect.Type)": [
            1,
            1,
            1
          ],
          "ObjectReader.withType(TypeReference<?>)": [
            1,
            1,
            1
          ],
          "ObjectReader.withView(Class<?>)": [
            1,
            1,
            1
          ],
          "ObjectReader.with(Locale)": [
            1,
            1,
            1
          ],
          "ObjectReader.with(TimeZone)": [
            1,
            1,
            1
          ],
          "ObjectReader.withHandler(DeserializationProblemHandler)": [
            1,
            1,
            1
          ],
          "ObjectReader.with(Base64Variant)": [
            1,
            1,
            1
          ],
          "ObjectReader.withFormatDetection()": [
            1,
            1,
            1
          ],
          "ObjectReader.withFormatDetection(DataFormatReaders)": [
            1,
            1,
            1
          ],
          "ObjectReader.with(ContextAttributes)": [
            1,
            1,
            1
          ],
          "ObjectReader.withAttributes(Map<?,?>)": [
            1,
            1,
            1
          ],
          "ObjectReader.withAttribute(Object, Object)": [
            1,
            1,
            1
          ],
          "ObjectReader.withoutAttribute(Object)": [
            1,
            1,
            1
          ],
          "ObjectReader.isEnabled(DeserializationFeature)": [
            1,
            1,
            1
          ],
          "ObjectReader.isEnabled(MapperFeature)": [
            1,
            1,
            1
          ],
          "ObjectReader.isEnabled(JsonParser.Feature)": [
            1,
            1,
            1
          ],
          "ObjectReader.readValue(JsonParser)": [
            1,
            1,
            1
          ],
          "ObjectReader.readValue(JsonParser, Class<T>)": [
            1,
            1,
            1
          ],
          "ObjectReader.readValue(JsonParser, TypeReference<?>)": [
            1,
            1,
            1
          ],
          "ObjectReader.readValue(JsonParser, ResolvedType)": [
            1,
            1,
            1
          ],
          "ObjectReader.readValue(JsonParser, JavaType)": [
            1,
            1,
            1
          ],
          "ObjectReader.readValues(JsonParser, Class<T>)": [
            1,
            1,
            1
          ],
          "ObjectReader.readValues(JsonParser, TypeReference<?>)": [
            1,
            1,
            1
          ],
          "ObjectReader.readValues(JsonParser, ResolvedType)": [
            1,
            1,
            1
          ],
          "ObjectReader.readValues(JsonParser, JavaType)": [
            1,
            1,
            1
          ],
          "ObjectReader.createArrayNode()": [
            1,
            1,
            1
          ],
          "ObjectReader.createObjectNode()": [
            1,
            1,
            1
          ],
          "ObjectReader.treeAsTokens(TreeNode)": [
            1,
            1,
            1
          ],
          "ObjectReader.readTree(JsonParser)": [
            1,
            1,
            1
          ],
          "ObjectReader.writeTree(JsonGenerator, TreeNode)": [
            1,
            1,
            1
          ],
          "ObjectReader.readValues(JsonParser)": [
            1,
            1,
            1
          ],
          "ObjectReader.readValues(byte[])": [
            1,
            1,
            1
          ],
          "ObjectReader.writeValue(JsonGenerator, Object)": [
            1,
            1,
            1
          ],
          "ObjectReader._bindAndReadValues(JsonParser)": [
            1,
            1,
            1
          ],
          "ObjectReader._considerFilter(final, JsonParser, boolean)": [
            1,
            1,
            1
          ],
          "ObjectReader._reportUnkownFormat(DataFormatReaders, DataFormatReaders.Match)": [
            1,
            1,
            1
          ],
          "ObjectReader.createDeserializationContext(JsonParser)": [
            1,
            1,
            1
          ],
          "ObjectReader._inputStream(URL)": [
            1,
            1,
            1
          ],
          "ObjectReader._inputStream(File)": [
            1,
            1,
            1
          ],
          "ObjectReader._reportUndetectableSource(Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ObjectReader._initForReading(DeserializationContext, JsonParser)": [
            4,
            4,
            4
          ],
          "ObjectReader._initForMultiRead(DeserializationContext, JsonParser)": [
            2,
            2,
            2
          ],
          "ObjectReader.with(InjectableValues)": [
            2,
            2,
            2
          ],
          "ObjectReader.with(JsonFactory)": [
            3,
            3,
            3
          ],
          "ObjectReader.with(FormatSchema)": [
            2,
            2,
            2
          ],
          "ObjectReader.forType(JavaType)": [
            3,
            3,
            3
          ],
          "ObjectReader.withValueToUpdate(Object)": [
            4,
            4,
            4
          ],
          "ObjectReader._with(DeserializationConfig)": [
            3,
            3,
            3
          ],
          "ObjectReader.readValue(InputStream)": [
            2,
            2,
            2
          ],
          "ObjectReader.readValue(Reader)": [
            2,
            2,
            2
          ],
          "ObjectReader.readValue(String)": [
            2,
            2,
            2
          ],
          "ObjectReader.readValue(byte[])": [
            2,
            2,
            2
          ],
          "ObjectReader.readValue(byte[], int, int)": [
            2,
            2,
            2
          ],
          "ObjectReader.readValue(File)": [
            2,
            2,
            2
          ],
          "ObjectReader.readValue(URL)": [
            2,
            2,
            2
          ],
          "ObjectReader.readValue(JsonNode)": [
            2,
            2,
            2
          ],
          "ObjectReader.readValue(DataInput)": [
            2,
            2,
            2
          ],
          "ObjectReader.readTree(InputStream)": [
            2,
            2,
            2
          ],
          "ObjectReader.readTree(Reader)": [
            2,
            2,
            2
          ],
          "ObjectReader.readTree(String)": [
            2,
            2,
            2
          ],
          "ObjectReader.readTree(DataInput)": [
            2,
            2,
            2
          ],
          "ObjectReader.readValues(InputStream)": [
            2,
            2,
            2
          ],
          "ObjectReader.readValues(Reader)": [
            2,
            2,
            2
          ],
          "ObjectReader.readValues(String)": [
            2,
            2,
            2
          ],
          "ObjectReader.readValues(byte[], int, int)": [
            2,
            2,
            2
          ],
          "ObjectReader.readValues(File)": [
            2,
            2,
            2
          ],
          "ObjectReader.readValues(URL)": [
            2,
            2,
            2
          ],
          "ObjectReader.readValues(DataInput)": [
            2,
            2,
            2
          ],
          "ObjectReader.treeToValue(TreeNode, Class<T>)": [
            2,
            2,
            2
          ],
          "ObjectReader._bind(JsonParser, Object)": [
            7,
            7,
            7
          ],
          "ObjectReader._bindAndClose(JsonParser)": [
            8,
            8,
            8
          ],
          "ObjectReader._bindAndCloseAsTree(JsonParser)": [
            2,
            2,
            2
          ],
          "ObjectReader._bindAsTree(JsonParser)": [
            7,
            7,
            7
          ],
          "ObjectReader._unwrapAndDeserialize(JsonParser, DeserializationContext, JavaType, JsonDeserializer<Object>)": [
            7,
            7,
            7
          ],
          "ObjectReader._verifyNoTrailingTokens(JsonParser, DeserializationContext, JavaType)": [
            4,
            4,
            4
          ],
          "ObjectReader._detectBindAndClose(byte[], int, int)": [
            2,
            2,
            2
          ],
          "ObjectReader._detectBindAndClose(DataFormatReaders.Match, boolean)": [
            3,
            3,
            3
          ],
          "ObjectReader._detectBindAndReadValues(DataFormatReaders.Match, boolean)": [
            3,
            3,
            3
          ],
          "ObjectReader._detectBindAndCloseAsTree(InputStream)": [
            2,
            2,
            2
          ],
          "ObjectReader._verifySchemaType(FormatSchema)": [
            2,
            2,
            2
          ],
          "ObjectReader._findRootDeserializer(DeserializationContext)": [
            5,
            5,
            5
          ],
          "ObjectReader._findTreeDeserializer(DeserializationContext)": [
            3,
            3,
            3
          ],
          "ObjectReader._prefetchRootDeserializer(JavaType)": [
            10,
            10,
            10
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ObjectReaderTest.java"
    },
    {
      "src_name": "CompactStringObjectMap",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/CompactStringObjectMap.java",
      "class_declaration": "public final class CompactStringObjectMap implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "CompactStringObjectMap.construct(Map<String,T>)": [
            6,
            6,
            6
          ],
          "CompactStringObjectMap.find(String)": [
            2,
            2,
            2
          ],
          "CompactStringObjectMap.findCaseInsensitive(String)": [
            4,
            4,
            4
          ],
          "CompactStringObjectMap.keys()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/util/CompactStringObjectMapTest.java"
    },
    {
      "src_name": "Annotations",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/Annotations.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestAnnotations.java"
    },
    {
      "src_name": "DatabindContext",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/DatabindContext.java",
      "class_declaration": "public abstract class DatabindContext ",
      "methods_under_test": {
        "=1": {
          "DatabindContext.reportBadDefinition(Class<?>, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DatabindContext.constructType(Type)": [
            2,
            2,
            2
          ],
          "DatabindContext.constructSpecializedType(JavaType, Class<?>)": [
            2,
            2,
            2
          ],
          "DatabindContext.resolveSubType(JavaType, String)": [
            6,
            6,
            6
          ],
          "DatabindContext.objectIdGeneratorInstance(Annotated, ObjectIdInfo)": [
            2,
            2,
            2
          ],
          "DatabindContext.objectIdResolverInstance(Annotated, ObjectIdInfo)": [
            2,
            2,
            2
          ],
          "DatabindContext.converterInstance(Annotated, Object)": [
            7,
            7,
            7
          ],
          "DatabindContext._format(String)": [
            2,
            2,
            2
          ],
          "DatabindContext._truncate(String)": [
            3,
            3,
            3
          ],
          "DatabindContext._quotedString(String)": [
            2,
            2,
            2
          ],
          "DatabindContext._colonConcat(String, String)": [
            2,
            2,
            2
          ],
          "DatabindContext._desc(String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/cfg/DatabindContextTest.java"
    },
    {
      "src_name": "PropertyMetadata",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/PropertyMetadata.java",
      "class_declaration": "public class PropertyMetadata implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "MergeInfo.createForDefaults(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "MergeInfo.createForTypeOverride(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "MergeInfo.createForPropertyOverride(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "PropertyMetadata.withDescription(String)": [
            1,
            1,
            1
          ],
          "PropertyMetadata.withMergeInfo(MergeInfo)": [
            1,
            1,
            1
          ],
          "PropertyMetadata.withNulls(Nulls, Nulls)": [
            1,
            1,
            1
          ],
          "PropertyMetadata.withIndex(Integer)": [
            1,
            1,
            1
          ],
          "PropertyMetadata.hasDefaultValue()": [
            1,
            1,
            1
          ],
          "PropertyMetadata.hasIndex()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PropertyMetadata.construct(Boolean, String, Integer, String)": [
            3,
            3,
            3
          ],
          "PropertyMetadata.construct(boolean, String, Integer, String)": [
            2,
            2,
            2
          ],
          "PropertyMetadata.readResolve()": [
            3,
            3,
            3
          ],
          "PropertyMetadata.withDefaultValue(String)": [
            4,
            4,
            4
          ],
          "PropertyMetadata.withRequired(Boolean)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/PropertyMetadataTest.java"
    },
    {
      "src_name": "BeanPropertyMap",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
      "class_declaration": "public class BeanPropertyMap implements Iterable<SettableBeanProperty>,\n        java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "BeanPropertyMap.construct(Collection<SettableBeanProperty>, boolean, Map<String,List<PropertyName>>)": [
            1,
            1,
            1
          ],
          "BeanPropertyMap.construct(Collection<SettableBeanProperty>, boolean)": [
            1,
            1,
            1
          ],
          "BeanPropertyMap.size()": [
            1,
            1,
            1
          ],
          "BeanPropertyMap.hasAliases()": [
            1,
            1,
            1
          ],
          "BeanPropertyMap.iterator()": [
            1,
            1,
            1
          ],
          "BeanPropertyMap.getPropertyName(SettableBeanProperty)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BeanPropertyMap.withCaseInsensitivity(boolean)": [
            2,
            2,
            2
          ],
          "BeanPropertyMap.init(Collection<SettableBeanProperty>)": [
            6,
            6,
            6
          ],
          "BeanPropertyMap.withProperty(SettableBeanProperty)": [
            3,
            3,
            3
          ],
          "BeanPropertyMap.assignIndexes()": [
            3,
            3,
            3
          ],
          "BeanPropertyMap.renameAll(NameTransformer)": [
            4,
            4,
            4
          ],
          "BeanPropertyMap.withoutProperties(Collection<String>)": [
            5,
            5,
            5
          ],
          "BeanPropertyMap.replace(SettableBeanProperty)": [
            2,
            2,
            2
          ],
          "BeanPropertyMap.replace(SettableBeanProperty, SettableBeanProperty)": [
            4,
            4,
            4
          ],
          "BeanPropertyMap.remove(SettableBeanProperty)": [
            6,
            6,
            6
          ],
          "BeanPropertyMap.find(int)": [
            3,
            3,
            3
          ],
          "BeanPropertyMap.find(String)": [
            4,
            4,
            4
          ],
          "BeanPropertyMap.findDeserializeAndSet(JsonParser, DeserializationContext, Object, String)": [
            3,
            3,
            3
          ],
          "BeanPropertyMap.toString()": [
            4,
            4,
            4
          ],
          "BeanPropertyMap._rename(SettableBeanProperty, NameTransformer)": [
            4,
            4,
            4
          ],
          "BeanPropertyMap.wrapAndThrow(Throwable, Object, String, DeserializationContext)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/misc/BeanPropertyMapTest.java"
    },
    {
      "src_name": "ObjectBuffer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/ObjectBuffer.java",
      "class_declaration": "public final class ObjectBuffer ",
      "methods_under_test": {
        "=1": {
          "ObjectBuffer.completeAndClearBuffer(Object[], int)": [
            1,
            1,
            1
          ],
          "ObjectBuffer.completeAndClearBuffer(Object[], int, Class<T>)": [
            1,
            1,
            1
          ],
          "ObjectBuffer.initialCapacity()": [
            1,
            1,
            1
          ],
          "ObjectBuffer.bufferedSize()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ObjectBuffer.resetAndStart()": [
            2,
            2,
            2
          ],
          "ObjectBuffer.resetAndStart(Object[], int)": [
            2,
            2,
            2
          ],
          "ObjectBuffer.appendCompletedChunk(Object[])": [
            4,
            4,
            4
          ],
          "ObjectBuffer.completeAndClearBuffer(Object[], int, List<Object>)": [
            4,
            4,
            4
          ],
          "ObjectBuffer._reset()": [
            2,
            2,
            2
          ],
          "ObjectBuffer._copyTo(Object, int, Object[], int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/util/TestObjectBuffer.java"
    },
    {
      "src_name": "BeanDescription",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java",
      "class_declaration": "public abstract class BeanDescription ",
      "methods_under_test": {
        "=1": {
          "BeanDescription.findClassDescription()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BeanDescription.findAnySetter()": [
            2,
            2,
            2
          ],
          "BeanDescription.findAnySetterField()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/BeanDescriptionTest.java"
    },
    {
      "src_name": "SerializerProvider",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
      "class_declaration": "public abstract class SerializerProvider extends DatabindContext ",
      "methods_under_test": {
        "=1": {
          "SerializerProvider.canOverrideAccessModifiers()": [
            1,
            1,
            1
          ],
          "SerializerProvider.isEnabled(MapperFeature)": [
            1,
            1,
            1
          ],
          "SerializerProvider.getDefaultPropertyFormat(Class<?>)": [
            1,
            1,
            1
          ],
          "SerializerProvider.getDefaultPropertyInclusion(Class<?>)": [
            1,
            1,
            1
          ],
          "SerializerProvider.getAttribute(Object)": [
            1,
            1,
            1
          ],
          "SerializerProvider.setAttribute(Object, Object)": [
            1,
            1,
            1
          ],
          "SerializerProvider.isEnabled(SerializationFeature)": [
            1,
            1,
            1
          ],
          "SerializerProvider.hasSerializationFeatures(int)": [
            1,
            1,
            1
          ],
          "SerializerProvider.findTypeSerializer(JavaType)": [
            1,
            1,
            1
          ],
          "SerializerProvider.findKeySerializer(JavaType, BeanProperty)": [
            1,
            1,
            1
          ],
          "SerializerProvider.findKeySerializer(Class<?>, BeanProperty)": [
            1,
            1,
            1
          ],
          "SerializerProvider.findNullKeySerializer(JavaType, BeanProperty)": [
            1,
            1,
            1
          ],
          "SerializerProvider.findNullValueSerializer(BeanProperty)": [
            1,
            1,
            1
          ],
          "SerializerProvider.reportMappingProblem(String)": [
            1,
            1,
            1
          ],
          "SerializerProvider.reportBadDefinition(JavaType, String)": [
            1,
            1,
            1
          ],
          "SerializerProvider.reportBadDefinition(JavaType, String, Throwable)": [
            1,
            1,
            1
          ],
          "SerializerProvider.reportBadDefinition(Class<?>, String, Throwable)": [
            1,
            1,
            1
          ],
          "SerializerProvider.reportMappingProblem(Throwable, String)": [
            1,
            1,
            1
          ],
          "SerializerProvider.invalidTypeIdException(JavaType, String, String)": [
            1,
            1,
            1
          ],
          "SerializerProvider.mappingException(String)": [
            1,
            1,
            1
          ],
          "SerializerProvider.mappingException(Throwable, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SerializerProvider.setDefaultKeySerializer(JsonSerializer<Object>)": [
            2,
            2,
            2
          ],
          "SerializerProvider.setNullValueSerializer(JsonSerializer<Object>)": [
            2,
            2,
            2
          ],
          "SerializerProvider.setNullKeySerializer(JsonSerializer<Object>)": [
            2,
            2,
            2
          ],
          "SerializerProvider.findValueSerializer(Class<?>, BeanProperty)": [
            6,
            6,
            6
          ],
          "SerializerProvider.findValueSerializer(JavaType, BeanProperty)": [
            6,
            6,
            6
          ],
          "SerializerProvider.findValueSerializer(Class<?>)": [
            6,
            6,
            6
          ],
          "SerializerProvider.findValueSerializer(JavaType)": [
            5,
            5,
            5
          ],
          "SerializerProvider.findPrimaryPropertySerializer(JavaType, BeanProperty)": [
            5,
            5,
            5
          ],
          "SerializerProvider.findPrimaryPropertySerializer(Class<?>, BeanProperty)": [
            6,
            6,
            6
          ],
          "SerializerProvider.findTypedValueSerializer(Class<?>, boolean, BeanProperty)": [
            5,
            5,
            5
          ],
          "SerializerProvider.findTypedValueSerializer(JavaType, boolean, BeanProperty)": [
            5,
            5,
            5
          ],
          "SerializerProvider.getUnknownTypeSerializer(Class<?>)": [
            2,
            2,
            2
          ],
          "SerializerProvider.isUnknownTypeSerializer(JsonSerializer<?>)": [
            4,
            4,
            4
          ],
          "SerializerProvider.handlePrimaryContextualization(JsonSerializer<?>, BeanProperty)": [
            3,
            3,
            3
          ],
          "SerializerProvider.handleSecondaryContextualization(JsonSerializer<?>, BeanProperty)": [
            3,
            3,
            3
          ],
          "SerializerProvider.defaultSerializeValue(Object, JsonGenerator)": [
            4,
            4,
            4
          ],
          "SerializerProvider.defaultSerializeField(String, Object, JsonGenerator)": [
            4,
            4,
            4
          ],
          "SerializerProvider.defaultSerializeDateValue(long, JsonGenerator)": [
            3,
            3,
            3
          ],
          "SerializerProvider.defaultSerializeDateValue(Date, JsonGenerator)": [
            3,
            3,
            3
          ],
          "SerializerProvider.defaultSerializeDateKey(long, JsonGenerator)": [
            3,
            3,
            3
          ],
          "SerializerProvider.defaultSerializeDateKey(Date, JsonGenerator)": [
            3,
            3,
            3
          ],
          "SerializerProvider.defaultSerializeNull(JsonGenerator)": [
            3,
            3,
            3
          ],
          "SerializerProvider.reportBadTypeDefinition(BeanDescription, String)": [
            2,
            2,
            2
          ],
          "SerializerProvider.reportBadPropertyDefinition(BeanDescription, BeanPropertyDefinition, String)": [
            3,
            3,
            3
          ],
          "SerializerProvider._reportIncompatibleRootType(Object, JavaType)": [
            3,
            3,
            3
          ],
          "SerializerProvider._findExplicitUntypedSerializer(Class<?>)": [
            4,
            4,
            4
          ],
          "SerializerProvider._createAndCacheUntypedSerializer(Class<?>)": [
            3,
            3,
            3
          ],
          "SerializerProvider._createAndCacheUntypedSerializer(JavaType)": [
            3,
            3,
            3
          ],
          "SerializerProvider._createUntypedSerializer(JavaType)": [
            2,
            2,
            2
          ],
          "SerializerProvider._handleContextualResolvable(JsonSerializer<?>, BeanProperty)": [
            2,
            2,
            2
          ],
          "SerializerProvider._handleResolvable(JsonSerializer<?>)": [
            2,
            2,
            2
          ],
          "SerializerProvider._dateFormat()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestSerializerProvider.java"
    },
    {
      "src_name": "TextNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/TextNode.java",
      "class_declaration": "public class TextNode extends ValueNode ",
      "methods_under_test": {
        "=1": {
          "TextNode.asToken()": [
            1,
            1,
            1
          ],
          "TextNode.textValue()": [
            1,
            1,
            1
          ],
          "TextNode.binaryValue()": [
            1,
            1,
            1
          ],
          "TextNode.asText()": [
            1,
            1,
            1
          ],
          "TextNode.asText(String)": [
            1,
            1,
            1
          ],
          "TextNode.asInt(int)": [
            1,
            1,
            1
          ],
          "TextNode.asLong(long)": [
            1,
            1,
            1
          ],
          "TextNode.asDouble(double)": [
            1,
            1,
            1
          ],
          "TextNode.hashCode()": [
            1,
            1,
            1
          ],
          "TextNode.toString()": [
            1,
            1,
            1
          ],
          "TextNode.appendQuoted(StringBuilder, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TextNode.valueOf(String)": [
            3,
            3,
            3
          ],
          "TextNode.getBinaryValue(Base64Variant)": [
            2,
            2,
            2
          ],
          "TextNode.asBoolean(boolean)": [
            4,
            4,
            4
          ],
          "TextNode.serialize(JsonGenerator, SerializerProvider)": [
            3,
            3,
            3
          ],
          "TextNode.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/TextNodeTest.java"
    },
    {
      "src_name": "POJOPropertiesCollector",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "class_declaration": "public class POJOPropertiesCollector ",
      "methods_under_test": {
        "=1": {
          "POJOPropertiesCollector.getProperties()": [
            1,
            1,
            1
          ],
          "POJOPropertiesCollector.findPOJOBuilderClass()": [
            1,
            1,
            1
          ],
          "POJOPropertiesCollector._addFields(Map<String, POJOPropertyBuilder>)": [
            1,
            1,
            1
          ],
          "POJOPropertiesCollector._addMethods(Map<String, POJOPropertyBuilder>)": [
            1,
            1,
            1
          ],
          "POJOPropertiesCollector._removeUnwantedProperties(Map<String, POJOPropertyBuilder>)": [
            1,
            1,
            1
          ],
          "POJOPropertiesCollector._removeUnwantedAccessor(Map<String, POJOPropertyBuilder>)": [
            1,
            1,
            1
          ],
          "POJOPropertiesCollector._renameUsing(Map<String, POJOPropertyBuilder>, PropertyNamingStrategy)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "POJOPropertiesCollector.getInjectables()": [
            2,
            2,
            2
          ],
          "POJOPropertiesCollector.getJsonValueMethod()": [
            2,
            2,
            2
          ],
          "POJOPropertiesCollector.getJsonValueAccessor()": [
            4,
            4,
            4
          ],
          "POJOPropertiesCollector.getAnyGetter()": [
            4,
            4,
            4
          ],
          "POJOPropertiesCollector.getAnySetterField()": [
            4,
            4,
            4
          ],
          "POJOPropertiesCollector.getAnySetterMethod()": [
            4,
            4,
            4
          ],
          "POJOPropertiesCollector.getObjectIdInfo()": [
            2,
            2,
            2
          ],
          "POJOPropertiesCollector.getPropertyMap()": [
            2,
            2,
            2
          ],
          "POJOPropertiesCollector.collectAll()": [
            6,
            6,
            6
          ],
          "POJOPropertiesCollector._addCreators(Map<String, POJOPropertyBuilder>)": [
            5,
            5,
            5
          ],
          "POJOPropertiesCollector._addCreatorParam(Map<String, POJOPropertyBuilder>, AnnotatedParameter)": [
            5,
            5,
            5
          ],
          "POJOPropertiesCollector._addSetterMethod(Map<String, POJOPropertyBuilder>, AnnotatedMethod, AnnotationIntrospector)": [
            7,
            7,
            7
          ],
          "POJOPropertiesCollector._addInjectables(Map<String, POJOPropertyBuilder>)": [
            2,
            2,
            2
          ],
          "POJOPropertiesCollector._doAddInjectable(JacksonInject.Value, AnnotatedMember)": [
            4,
            4,
            4
          ],
          "POJOPropertiesCollector._renameProperties(Map<String, POJOPropertyBuilder>)": [
            6,
            6,
            6
          ],
          "POJOPropertiesCollector._renameWithWrappers(Map<String, POJOPropertyBuilder>)": [
            7,
            7,
            7
          ],
          "POJOPropertiesCollector.reportProblem(String)": [
            2,
            2,
            2
          ],
          "POJOPropertiesCollector._property(Map<String, POJOPropertyBuilder>, PropertyName)": [
            2,
            2,
            2
          ],
          "POJOPropertiesCollector._property(Map<String, POJOPropertyBuilder>, String)": [
            2,
            2,
            2
          ],
          "POJOPropertiesCollector._updateCreatorProperty(POJOPropertyBuilder, List<POJOPropertyBuilder>)": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "POJOPropertiesCollector._addGetterMethod(Map<String, POJOPropertyBuilder>, AnnotatedMethod, AnnotationIntrospector)": [
            13,
            13,
            13
          ],
          "POJOPropertiesCollector._sortProperties(Map<String, POJOPropertyBuilder>)": [
            16,
            16,
            16
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollectorTest.java"
    },
    {
      "src_name": "DeserializationConfig",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
      "class_declaration": "public final class DeserializationConfig extends MapperConfigBase<DeserializationFeature, DeserializationConfig> implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/cfg/DeserializationConfigTest.java"
    },
    {
      "src_name": "ValueInstantiator",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
      "class_declaration": "public abstract class ValueInstantiator ",
      "methods_under_test": {
        "=1": {
          "ValueInstantiator.canInstantiate()": [
            1,
            1,
            1
          ],
          "ValueInstantiator.canCreateFromString()": [
            1,
            1,
            1
          ],
          "ValueInstantiator.canCreateFromInt()": [
            1,
            1,
            1
          ],
          "ValueInstantiator.canCreateFromLong()": [
            1,
            1,
            1
          ],
          "ValueInstantiator.canCreateFromDouble()": [
            1,
            1,
            1
          ],
          "ValueInstantiator.canCreateFromBoolean()": [
            1,
            1,
            1
          ],
          "ValueInstantiator.canCreateUsingDefault()": [
            1,
            1,
            1
          ],
          "ValueInstantiator.canCreateUsingDelegate()": [
            1,
            1,
            1
          ],
          "ValueInstantiator.canCreateUsingArrayDelegate()": [
            1,
            1,
            1
          ],
          "ValueInstantiator.canCreateFromObjectWith()": [
            1,
            1,
            1
          ],
          "ValueInstantiator.getFromObjectArguments(DeserializationConfig)": [
            1,
            1,
            1
          ],
          "ValueInstantiator.getDelegateType(DeserializationConfig)": [
            1,
            1,
            1
          ],
          "ValueInstantiator.getArrayDelegateType(DeserializationConfig)": [
            1,
            1,
            1
          ],
          "ValueInstantiator.createUsingDefault(DeserializationContext)": [
            1,
            1,
            1
          ],
          "ValueInstantiator.createFromObjectWith(DeserializationContext, Object[])": [
            1,
            1,
            1
          ],
          "ValueInstantiator.createFromObjectWith(DeserializationContext, SettableBeanProperty[], PropertyValueBuffer)": [
            1,
            1,
            1
          ],
          "ValueInstantiator.createUsingDelegate(DeserializationContext, Object)": [
            1,
            1,
            1
          ],
          "ValueInstantiator.createUsingArrayDelegate(DeserializationContext, Object)": [
            1,
            1,
            1
          ],
          "ValueInstantiator.createFromString(DeserializationContext, String)": [
            1,
            1,
            1
          ],
          "ValueInstantiator.createFromInt(DeserializationContext, int)": [
            1,
            1,
            1
          ],
          "ValueInstantiator.createFromLong(DeserializationContext, long)": [
            1,
            1,
            1
          ],
          "ValueInstantiator.createFromDouble(DeserializationContext, double)": [
            1,
            1,
            1
          ],
          "ValueInstantiator.createFromBoolean(DeserializationContext, boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ValueInstantiator._createFromStringFallbacks(DeserializationContext, String)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/TestValueInstantiator.java"
    },
    {
      "src_name": "ISO8601Utils",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils.java",
      "class_declaration": "@Deprecated \npublic class ISO8601Utils ",
      "methods_under_test": {
        "=1": {
          "ISO8601Utils.format(Date)": [
            1,
            1,
            1
          ],
          "ISO8601Utils.format(Date, boolean)": [
            1,
            1,
            1
          ],
          "ISO8601Utils.format(Date, boolean, TimeZone)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ISO8601Utils.format(Date, boolean, TimeZone, Locale)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {
          "ISO8601Utils.parse(String, ParsePosition)": [
            94,
            94,
            94
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/util/ISO8601UtilsTest.java"
    },
    {
      "src_name": "ISO8601DateFormat",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/ISO8601DateFormat.java",
      "class_declaration": "@Deprecated \npublic class ISO8601DateFormat extends DateFormat ",
      "methods_under_test": {
        "=1": {
          "ISO8601DateFormat.format(Date, StringBuffer, FieldPosition)": [
            1,
            1,
            1
          ],
          "ISO8601DateFormat.parse(String)": [
            1,
            1,
            1
          ],
          "ISO8601DateFormat.clone()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ISO8601DateFormat.parse(String, ParsePosition)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/util/ISO8601DateFormatTest.java"
    },
    {
      "src_name": "TypeDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java",
      "class_declaration": "public abstract class TypeDeserializer ",
      "methods_under_test": {
        "=1": {
          "TypeDeserializer.deserializeIfNatural(JsonParser, DeserializationContext, JavaType)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {
          "TypeDeserializer.deserializeIfNatural(JsonParser, DeserializationContext, Class<?>)": [
            12,
            12,
            12
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TypeDeserializerTest.java"
    },
    {
      "src_name": "JavaType",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/JavaType.java",
      "class_declaration": "public abstract class JavaType extends ResolvedType implements java.io.Serializable, \n        java.lang.reflect.Type ",
      "methods_under_test": {
        "=1": {
          "JavaType.hasRawClass(Class<?>)": [
            1,
            1,
            1
          ],
          "JavaType.hasContentType()": [
            1,
            1,
            1
          ],
          "JavaType.isTypeOrSubTypeOf(Class<?>)": [
            1,
            1,
            1
          ],
          "JavaType.isTypeOrSuperTypeOf(Class<?>)": [
            1,
            1,
            1
          ],
          "JavaType.useStaticType()": [
            1,
            1,
            1
          ],
          "JavaType.hasGenericTypes()": [
            1,
            1,
            1
          ],
          "JavaType.containedTypeOrUnknown(int)": [
            1,
            1,
            1
          ],
          "JavaType.hasValueHandler()": [
            1,
            1,
            1
          ],
          "JavaType.hasHandlers()": [
            1,
            1,
            1
          ],
          "JavaType.getGenericSignature()": [
            1,
            1,
            1
          ],
          "JavaType.getErasedSignature()": [
            1,
            1,
            1
          ],
          "JavaType.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JavaType.withHandlersFrom(JavaType)": [
            3,
            3,
            3
          ],
          "JavaType.forcedNarrowBy(Class<?>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java"
    },
    {
      "src_name": "JacksonAnnotationIntrospector",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
      "class_declaration": "public class JacksonAnnotationIntrospector extends AnnotationIntrospector implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "JacksonAnnotationIntrospector.version()": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.setConstructorPropertiesImpliesCreator(boolean)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findDefaultEnumValue(Class<Enum<?>>)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.isIgnorableType(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findNamingStrategy(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findClassDescription(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findAutoDetectVisibility(AnnotatedClass, VisibilityChecker<?>)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findImplicitPropertyName(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.hasIgnoreMarker(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findPropertyDescription(Annotated)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findFormat(Annotated)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findInjectableValueId(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findViews(Annotated)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findTypeResolver(MapperConfig<?>, AnnotatedClass, JavaType)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findTypeName(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.isTypeId(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findSerializationTyping(Annotated)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findSerializationConverter(Annotated)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findSerializationContentConverter(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findSerializationType(Annotated)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findSerializationKeyType(Annotated, JavaType)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findSerializationContentType(Annotated, JavaType)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findSerializationPropertyOrder(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findSerializationSortAlphabetically(Annotated)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.hasAnyGetterAnnotation(AnnotatedMethod)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.hasAsValueAnnotation(AnnotatedMethod)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findDeserializationConverter(Annotated)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findDeserializationContentConverter(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findDeserializationContentType(Annotated, JavaType)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findDeserializationType(Annotated, JavaType)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findDeserializationKeyType(Annotated, JavaType)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findValueInstantiator(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findPOJOBuilder(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findPOJOBuilderConfig(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.hasAnySetter(Annotated)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findSetterInfo(Annotated)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findMergeInfo(Annotated)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.hasAnySetterAnnotation(AnnotatedMethod)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector.findCreatorBinding(Annotated)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector._classIfExplicit(Class<?>, Class<?>)": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector._constructStdTypeResolverBuilder()": [
            1,
            1,
            1
          ],
          "JacksonAnnotationIntrospector._constructNoTypeResolverBuilder()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JacksonAnnotationIntrospector.readResolve()": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector.isAnnotationBundle(Annotation)": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector.findEnumValues(Class<?>, Enum<?>[], String[])": [
            9,
            9,
            9
          ],
          "JacksonAnnotationIntrospector.findRootName(AnnotatedClass)": [
            3,
            3,
            3
          ],
          "JacksonAnnotationIntrospector.findPropertyIgnorals(Annotated)": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector.findFilterId(Annotated)": [
            3,
            3,
            3
          ],
          "JacksonAnnotationIntrospector.findPropertyAliases(Annotated)": [
            4,
            4,
            4
          ],
          "JacksonAnnotationIntrospector.hasRequiredMarker(AnnotatedMember)": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector.findPropertyAccess(Annotated)": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector.findPropertyIndex(Annotated)": [
            3,
            3,
            3
          ],
          "JacksonAnnotationIntrospector.findPropertyDefaultValue(Annotated)": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector.findReferenceType(AnnotatedMember)": [
            3,
            3,
            3
          ],
          "JacksonAnnotationIntrospector.findUnwrappingNameTransformer(AnnotatedMember)": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector.findInjectableValue(AnnotatedMember)": [
            5,
            5,
            5
          ],
          "JacksonAnnotationIntrospector.resolveSetterConflict(MapperConfig<?>, AnnotatedMethod, AnnotatedMethod)": [
            7,
            7,
            7
          ],
          "JacksonAnnotationIntrospector.findPropertyTypeResolver(MapperConfig<?>, AnnotatedMember, JavaType)": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector.findPropertyContentTypeResolver(MapperConfig<?>, AnnotatedMember, JavaType)": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector.findSubtypes(Annotated)": [
            3,
            3,
            3
          ],
          "JacksonAnnotationIntrospector.findObjectIdInfo(Annotated)": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector.findObjectReferenceInfo(Annotated, ObjectIdInfo)": [
            3,
            3,
            3
          ],
          "JacksonAnnotationIntrospector.findSerializer(Annotated)": [
            4,
            4,
            4
          ],
          "JacksonAnnotationIntrospector.findKeySerializer(Annotated)": [
            3,
            3,
            3
          ],
          "JacksonAnnotationIntrospector.findContentSerializer(Annotated)": [
            3,
            3,
            3
          ],
          "JacksonAnnotationIntrospector.findNullSerializer(Annotated)": [
            3,
            3,
            3
          ],
          "JacksonAnnotationIntrospector.findPropertyInclusion(Annotated)": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector._refinePropertyInclusion(Annotated, JsonInclude.Value)": [
            7,
            7,
            7
          ],
          "JacksonAnnotationIntrospector.findAndAddVirtualProperties(MapperConfig<?>, AnnotatedClass, List<BeanPropertyWriter>)": [
            5,
            5,
            5
          ],
          "JacksonAnnotationIntrospector._constructVirtualProperty(JsonAppend.Attr, MapperConfig<?>, AnnotatedClass, JavaType)": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector._constructVirtualProperty(JsonAppend.Prop, MapperConfig<?>, AnnotatedClass)": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector.findNameForSerialization(Annotated)": [
            5,
            5,
            5
          ],
          "JacksonAnnotationIntrospector.hasAsValue(Annotated)": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector.hasAnyGetter(Annotated)": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector.findDeserializer(Annotated)": [
            3,
            3,
            3
          ],
          "JacksonAnnotationIntrospector.findKeyDeserializer(Annotated)": [
            3,
            3,
            3
          ],
          "JacksonAnnotationIntrospector.findContentDeserializer(Annotated)": [
            3,
            3,
            3
          ],
          "JacksonAnnotationIntrospector.findNameForDeserialization(Annotated)": [
            5,
            5,
            5
          ],
          "JacksonAnnotationIntrospector.hasCreatorAnnotation(Annotated)": [
            6,
            6,
            6
          ],
          "JacksonAnnotationIntrospector.findCreatorAnnotation(MapperConfig<?>, Annotated)": [
            6,
            6,
            6
          ],
          "JacksonAnnotationIntrospector._isIgnorable(Annotated)": [
            4,
            4,
            4
          ],
          "JacksonAnnotationIntrospector._classIfExplicit(Class<?>)": [
            2,
            2,
            2
          ],
          "JacksonAnnotationIntrospector._propertyName(String, String)": [
            3,
            3,
            3
          ],
          "JacksonAnnotationIntrospector._findConstructorName(Annotated)": [
            5,
            5,
            5
          ],
          "JacksonAnnotationIntrospector._findTypeResolver(MapperConfig<?>, Annotated, JavaType)": [
            8,
            8,
            8
          ]
        },
        "11-20": {
          "JacksonAnnotationIntrospector.findEnumValue(Enum<?>)": [
            16,
            16,
            16
          ],
          "JacksonAnnotationIntrospector.refineDeserializationType(final, MapperConfig<?>, final, Annotated, final, JavaType)": [
            11,
            11,
            11
          ]
        },
        ">20": {
          "JacksonAnnotationIntrospector.refineSerializationType(final, MapperConfig<?>, final, Annotated, final, JavaType)": [
            30,
            30,
            30
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/TestJacksonAnnotationIntrospector.java"
    },
    {
      "src_name": "ArrayNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java",
      "class_declaration": "public class ArrayNode extends ContainerNode<ArrayNode> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/ArrayNodeTest.java"
    },
    {
      "src_name": "JsonSerialize",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize.java"
    },
    {
      "src_name": "StdDateFormat",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class StdDateFormat extends DateFormat ",
      "methods_under_test": {
        "=1": {
          "StdDateFormat.clone()": [
            1,
            1,
            1
          ],
          "StdDateFormat.getISO8601Format(TimeZone, Locale)": [
            1,
            1,
            1
          ],
          "StdDateFormat.getRFC1123Format(TimeZone, Locale)": [
            1,
            1,
            1
          ],
          "StdDateFormat.toString()": [
            1,
            1,
            1
          ],
          "StdDateFormat.toPattern()": [
            1,
            1,
            1
          ],
          "StdDateFormat.equals(Object)": [
            1,
            1,
            1
          ],
          "StdDateFormat.hashCode()": [
            1,
            1,
            1
          ],
          "StdDateFormat._clearFormats()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StdDateFormat.withTimeZone(TimeZone)": [
            3,
            3,
            3
          ],
          "StdDateFormat.withLocale(Locale)": [
            2,
            2,
            2
          ],
          "StdDateFormat.withLenient(Boolean)": [
            2,
            2,
            2
          ],
          "StdDateFormat.withColonInTimeZone(boolean)": [
            2,
            2,
            2
          ],
          "StdDateFormat.setTimeZone(TimeZone)": [
            2,
            2,
            2
          ],
          "StdDateFormat.setLenient(boolean)": [
            2,
            2,
            2
          ],
          "StdDateFormat.parse(String)": [
            4,
            4,
            4
          ],
          "StdDateFormat.parse(String, ParsePosition)": [
            3,
            3,
            3
          ],
          "StdDateFormat._parseDate(String, ParsePosition)": [
            6,
            6,
            6
          ],
          "StdDateFormat.format(Date, StringBuffer, FieldPosition)": [
            2,
            2,
            2
          ],
          "StdDateFormat._format(TimeZone, Locale, Date, StringBuffer)": [
            7,
            7,
            7
          ],
          "StdDateFormat._formatBCEYear(StringBuffer, int)": [
            2,
            2,
            2
          ],
          "StdDateFormat.looksLikeISO8601(String)": [
            2,
            2,
            2
          ],
          "StdDateFormat.parseAsISO8601(String, ParsePosition)": [
            2,
            2,
            2
          ],
          "StdDateFormat.parseAsRFC1123(String, ParsePosition)": [
            2,
            2,
            2
          ],
          "StdDateFormat._getCalendar(TimeZone)": [
            3,
            3,
            3
          ],
          "StdDateFormat._equals(T, T)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "StdDateFormat._parseAsISO8601(String, ParsePosition)": [
            15,
            15,
            15
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/util/TestStdDateFormat.java"
    },
    {
      "src_name": "SequenceWriter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/SequenceWriter.java",
      "class_declaration": "public class SequenceWriter implements Versioned, java.io.Closeable, java.io.Flushable ",
      "methods_under_test": {
        "=1": {
          "SequenceWriter.version()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SequenceWriter.init(boolean)": [
            2,
            2,
            2
          ],
          "SequenceWriter.write(Object)": [
            6,
            6,
            6
          ],
          "SequenceWriter.write(Object, JavaType)": [
            5,
            5,
            5
          ],
          "SequenceWriter.writeAll(Object[])": [
            2,
            2,
            2
          ],
          "SequenceWriter.writeAll(C)": [
            2,
            2,
            2
          ],
          "SequenceWriter.writeAll(Iterable<?>)": [
            2,
            2,
            2
          ],
          "SequenceWriter.flush()": [
            2,
            2,
            2
          ],
          "SequenceWriter.close()": [
            4,
            4,
            4
          ],
          "SequenceWriter._writeCloseableValue(Object)": [
            6,
            6,
            6
          ],
          "SequenceWriter._writeCloseableValue(Object, JavaType)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/seq/SequenceWriterTest.java"
    },
    {
      "src_name": "TypeBindings",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java",
      "class_declaration": "public class TypeBindings implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "TypeBindings.emptyBindings()": [
            1,
            1,
            1
          ],
          "TypeBindings.create(Class<?>, List<JavaType>)": [
            1,
            1,
            1
          ],
          "TypeBindings.withUnboundVariable(String)": [
            1,
            1,
            1
          ],
          "TypeBindings.size()": [
            1,
            1,
            1
          ],
          "TypeBindings.asKey(Class<?>)": [
            1,
            1,
            1
          ],
          "TypeBindings.hashCode()": [
            1,
            1,
            1
          ],
          "TypeBindings.typeParameterArray()": [
            1,
            1,
            1
          ],
          "AsKey.hashCode()": [
            1,
            1,
            1
          ],
          "AsKey.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TypeBindings.readResolve()": [
            2,
            2,
            2
          ],
          "TypeBindings.create(Class<?>, JavaType[])": [
            7,
            7,
            7
          ],
          "TypeBindings.create(Class<?>, JavaType)": [
            2,
            2,
            2
          ],
          "TypeBindings.create(Class<?>, JavaType, JavaType)": [
            2,
            2,
            2
          ],
          "TypeBindings.createIfNeeded(Class<?>, JavaType)": [
            3,
            3,
            3
          ],
          "TypeBindings.createIfNeeded(Class<?>, JavaType[])": [
            5,
            5,
            5
          ],
          "TypeBindings.findBoundType(String)": [
            4,
            4,
            4
          ],
          "TypeBindings.getBoundName(int)": [
            2,
            2,
            2
          ],
          "TypeBindings.getBoundType(int)": [
            2,
            2,
            2
          ],
          "TypeBindings.getTypeParameters()": [
            2,
            2,
            2
          ],
          "TypeBindings.hasUnbound(String)": [
            4,
            4,
            4
          ],
          "TypeBindings.toString()": [
            4,
            4,
            4
          ],
          "TypeBindings.equals(Object)": [
            6,
            6,
            6
          ],
          "TypeParamStash.paramsFor1(Class<?>)": [
            6,
            6,
            6
          ],
          "TypeParamStash.paramsFor2(Class<?>)": [
            4,
            4,
            4
          ],
          "AsKey.equals(Object)": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/TestTypeBindings.java"
    },
    {
      "src_name": "TokenBuffer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
      "error": "1659 is not in list",
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/util/TestTokenBuffer.java"
    },
    {
      "src_name": "NullNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/NullNode.java",
      "class_declaration": "public final class NullNode extends ValueNode ",
      "methods_under_test": {
        "=1": {
          "NullNode.asToken()": [
            1,
            1,
            1
          ],
          "NullNode.asText(String)": [
            1,
            1,
            1
          ],
          "NullNode.asText()": [
            1,
            1,
            1
          ],
          "NullNode.serialize(JsonGenerator, SerializerProvider)": [
            1,
            1,
            1
          ],
          "NullNode.equals(Object)": [
            1,
            1,
            1
          ],
          "NullNode.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/TestNullNode.java"
    },
    {
      "src_name": "ObjectNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java",
      "class_declaration": "public class ObjectNode extends ContainerNode<ObjectNode> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/ObjectNodeTest.java"
    }
  ],
  "src_test_fuzz_match": [
    {
      "src_name": "StringCollectionSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java",
      "class_declaration": "@JacksonStdImpl\n@SuppressWarnings(\"serial\")\npublic class StringCollectionSerializer extends StaticListSerializerBase<Collection<String>> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/jdk/CollectionSerializationTest.java"
    },
    {
      "src_name": "PrimitiveArrayDeserializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class PrimitiveArrayDeserializers <T> extends StdDeserializer<T> implements ContextualDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java"
    },
    {
      "src_name": "DeserializationFeature",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
      "error": "local variable 'class_name' referenced before assignment",
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/SerializationFeaturesTest.java"
    },
    {
      "src_name": "ReferenceTypeDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/ReferenceTypeDeserializer.java",
      "class_declaration": "public abstract class ReferenceTypeDeserializer <T> extends StdDeserializer<T> implements ContextualDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedDeserialization.java"
    },
    {
      "src_name": "TypeResolutionContext",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/TypeResolutionContext.java",
      "class_declaration": "public static class Basic implements TypeResolutionContext ",
      "methods_under_test": {
        "=1": {
          "Basic.resolveType(Type)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/TestTypeResolution.java"
    },
    {
      "src_name": "NullSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java",
      "class_declaration": "@JacksonStdImpl\n@SuppressWarnings(\"serial\")\npublic class NullSerializer extends StdSerializer<Object> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/filter/NullSerializationTest.java"
    },
    {
      "src_name": "EnumMapDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java",
      "class_declaration": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) \npublic class EnumMapDeserializer extends ContainerDeserializerBase<EnumMap<?,?>> implements ContextualDeserializer, ResolvableDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/MapDeserializerCachingTest.java"
    },
    {
      "src_name": "StdScalarSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class StdScalarSerializer <T> extends StdSerializer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestScalars.java"
    },
    {
      "src_name": "StringCollectionDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java",
      "class_declaration": "@JacksonStdImpl\npublic final class StringCollectionDeserializer extends ContainerDeserializerBase<Collection<String>> implements ContextualDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/CollectionDeserTest.java"
    },
    {
      "src_name": "AsExistingPropertyTypeSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExistingPropertyTypeSerializer.java",
      "class_declaration": "public class AsExistingPropertyTypeSerializer extends AsPropertyTypeSerializer ",
      "methods_under_test": {
        "=1": {
          "AsExistingPropertyTypeSerializer.forProperty(BeanProperty)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/ExistingPropertyTest.java"
    },
    {
      "src_name": "StackTraceElementDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java",
      "class_declaration": "public class StackTraceElementDeserializer extends StdScalarDeserializer<StackTraceElement> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/exc/StackTraceElementTest.java"
    },
    {
      "src_name": "Named",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/Named.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/TestPropertyRename.java"
    },
    {
      "src_name": "HandlerInstantiator",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/cfg/HandlerInstantiator.java",
      "class_declaration": "public abstract class HandlerInstantiator ",
      "methods_under_test": {
        "=1": {
          "HandlerInstantiator.valueInstantiatorInstance(MapperConfig<?>, Annotated, Class<?>)": [
            1,
            1,
            1
          ],
          "HandlerInstantiator.objectIdGeneratorInstance(MapperConfig<?>, Annotated, Class<?>)": [
            1,
            1,
            1
          ],
          "HandlerInstantiator.resolverIdGeneratorInstance(MapperConfig<?>, Annotated, Class<?>)": [
            1,
            1,
            1
          ],
          "HandlerInstantiator.namingStrategyInstance(MapperConfig<?>, Annotated, Class<?>)": [
            1,
            1,
            1
          ],
          "HandlerInstantiator.converterInstance(MapperConfig<?>, Annotated, Class<?>)": [
            1,
            1,
            1
          ],
          "HandlerInstantiator.virtualPropertyWriterInstance(MapperConfig<?>, Class<?>)": [
            1,
            1,
            1
          ],
          "HandlerInstantiator.includeFilterInstance(SerializationConfig, BeanPropertyDefinition, Class<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation.java"
    },
    {
      "src_name": "ReadableObjectId",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/ReadableObjectId.java",
      "class_declaration": "public class ReadableObjectId ",
      "methods_under_test": {
        "=1": {
          "ReadableObjectId.resolve()": [
            1,
            1,
            1
          ],
          "ReadableObjectId.hasReferringProperties()": [
            1,
            1,
            1
          ],
          "ReadableObjectId.tryToResolveUnresolved(DeserializationContext)": [
            1,
            1,
            1
          ],
          "ReadableObjectId.toString()": [
            1,
            1,
            1
          ],
          "Referring.hasId(Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ReadableObjectId.appendReferring(Referring)": [
            2,
            2,
            2
          ],
          "ReadableObjectId.bindItem(Object)": [
            2,
            2,
            2
          ],
          "ReadableObjectId.referringProperties()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectId.java"
    },
    {
      "src_name": "DeserializationProblemHandler",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
      "class_declaration": "public abstract class DeserializationProblemHandler ",
      "methods_under_test": {
        "=1": {
          "DeserializationProblemHandler.handleUnknownProperty(DeserializationContext, JsonParser, JsonDeserializer<?>, Object, String)": [
            1,
            1,
            1
          ],
          "DeserializationProblemHandler.handleWeirdKey(DeserializationContext, Class<?>, String, String)": [
            1,
            1,
            1
          ],
          "DeserializationProblemHandler.handleWeirdStringValue(DeserializationContext, Class<?>, String, String)": [
            1,
            1,
            1
          ],
          "DeserializationProblemHandler.handleWeirdNumberValue(DeserializationContext, Class<?>, Number, String)": [
            1,
            1,
            1
          ],
          "DeserializationProblemHandler.handleWeirdNativeValue(DeserializationContext, JavaType, Object, JsonParser)": [
            1,
            1,
            1
          ],
          "DeserializationProblemHandler.handleUnexpectedToken(DeserializationContext, Class<?>, JsonToken, JsonParser, String)": [
            1,
            1,
            1
          ],
          "DeserializationProblemHandler.handleInstantiationProblem(DeserializationContext, Class<?>, Object, Throwable)": [
            1,
            1,
            1
          ],
          "DeserializationProblemHandler.handleMissingInstantiator(DeserializationContext, Class<?>, ValueInstantiator, JsonParser, String)": [
            1,
            1,
            1
          ],
          "DeserializationProblemHandler.handleUnknownTypeId(DeserializationContext, JavaType, String, TypeIdResolver, String)": [
            1,
            1,
            1
          ],
          "DeserializationProblemHandler.handleMissingTypeId(DeserializationContext, JavaType, TypeIdResolver, String)": [
            1,
            1,
            1
          ],
          "DeserializationProblemHandler.handleMissingInstantiator(DeserializationContext, Class<?>, JsonParser, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/filter/ProblemHandlerTest.java"
    },
    {
      "src_name": "ContextualDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualDeserialization.java"
    },
    {
      "src_name": "AnyGetterWriter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
      "class_declaration": "public class AnyGetterWriter ",
      "methods_under_test": {
        "=1": {
          "AnyGetterWriter.fixAccess(SerializationConfig)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AnyGetterWriter.getAndSerialize(Object, JsonGenerator, SerializerProvider)": [
            4,
            4,
            4
          ],
          "AnyGetterWriter.getAndFilter(Object, JsonGenerator, SerializerProvider, PropertyFilter)": [
            4,
            4,
            4
          ],
          "AnyGetterWriter.resolve(SerializerProvider)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/filter/TestAnyGetterFiltering.java"
    },
    {
      "src_name": "UnresolvedForwardReference",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/UnresolvedForwardReference.java",
      "class_declaration": "public class UnresolvedForwardReference extends JsonMappingException ",
      "methods_under_test": {
        "=1": {
          "UnresolvedForwardReference.addUnresolvedId(Object, Class<?>, JsonLocation)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnresolvedForwardReference.getMessage()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/TestForwardReference.java"
    },
    {
      "src_name": "KeyDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/KeyDeserializer.java",
      "class_declaration": "public abstract class KeyDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/module/TestCustomEnumKeyDeserializer.java"
    },
    {
      "src_name": "DefaultDeserializationContext",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
      "class_declaration": "public abstract class DefaultDeserializationContext extends DeserializationContext implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "DefaultDeserializationContext.createReadableObjectId(IdKey)": [
            1,
            1,
            1
          ],
          "DefaultDeserializationContext.tryToResolveUnresolvedObjectId(ReadableObjectId)": [
            1,
            1,
            1
          ],
          "Impl.copy()": [
            1,
            1,
            1
          ],
          "DefaultDeserializationContext.createInstance(DeserializationConfig, JsonParser, InjectableValues)": [
            1,
            1,
            1
          ],
          "DefaultDeserializationContext.with(DeserializerFactory)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DefaultDeserializationContext.findObjectId(Object, ObjectIdGenerator<?>, ObjectIdResolver)": [
            8,
            8,
            8
          ],
          "DefaultDeserializationContext.checkUnresolvedObjectId()": [
            8,
            8,
            8
          ],
          "DefaultDeserializationContext.deserializerInstance(Annotated, Object)": [
            8,
            8,
            8
          ],
          "DefaultDeserializationContext.keyDeserializerInstance(Annotated, Object)": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/UntypedDeserializationTest.java"
    },
    {
      "src_name": "NopAnnotationIntrospector",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java",
      "class_declaration": "public abstract class NopAnnotationIntrospector extends AnnotationIntrospector implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "NopAnnotationIntrospector.version()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/CustomAnnotationIntrospector1756Test.java"
    },
    {
      "src_name": "TypeBase",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/TypeBase.java",
      "class_declaration": "public abstract class TypeBase extends JavaType implements JsonSerializable ",
      "methods_under_test": {
        "=1": {
          "TypeBase.buildCanonicalName()": [
            1,
            1,
            1
          ],
          "TypeBase.containedTypeCount()": [
            1,
            1,
            1
          ],
          "TypeBase.containedType(int)": [
            1,
            1,
            1
          ],
          "TypeBase.containedTypeName(int)": [
            1,
            1,
            1
          ],
          "TypeBase.serializeWithType(JsonGenerator, SerializerProvider, TypeSerializer)": [
            1,
            1,
            1
          ],
          "TypeBase.serialize(JsonGenerator, SerializerProvider)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TypeBase.toCanonical()": [
            2,
            2,
            2
          ],
          "TypeBase.getInterfaces()": [
            4,
            4,
            4
          ],
          "TypeBase.findTypeParameters(Class<?>)": [
            2,
            2,
            2
          ],
          "TypeBase._bogusSuperClass(Class<?>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "TypeBase.findSuperType(Class<?>)": [
            12,
            12,
            12
          ],
          "TypeBase._classSignature(Class<?>, StringBuilder, boolean)": [
            14,
            14,
            14
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestBaseTypeAsDefault.java"
    },
    {
      "src_name": "TypeIdResolver",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeIdResolver.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver.java"
    },
    {
      "src_name": "AnnotationIntrospectorPair",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java",
      "class_declaration": "public class AnnotationIntrospectorPair extends AnnotationIntrospector implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "AnnotationIntrospectorPair.allIntrospectors()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AnnotationIntrospectorPair.version()": [
            2,
            2,
            2
          ],
          "AnnotationIntrospectorPair.create(AnnotationIntrospector, AnnotationIntrospector)": [
            3,
            3,
            3
          ],
          "AnnotationIntrospectorPair.allIntrospectors(Collection<AnnotationIntrospector>)": [
            5,
            5,
            5
          ],
          "AnnotationIntrospectorPair.isAnnotationBundle(Annotation)": [
            2,
            2,
            2
          ],
          "AnnotationIntrospectorPair.findPropertyIgnorals(Annotated)": [
            5,
            5,
            5
          ],
          "AnnotationIntrospectorPair.isIgnorableType(AnnotatedClass)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.findFilterId(Annotated)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.findNamingStrategy(AnnotatedClass)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.findClassDescription(AnnotatedClass)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.findPropertiesToIgnore(Annotated)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.findPropertiesToIgnore(Annotated, boolean)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.findIgnoreUnknownProperties(AnnotatedClass)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.findAutoDetectVisibility(AnnotatedClass, VisibilityChecker<?>)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findTypeResolver(MapperConfig<?>, AnnotatedClass, JavaType)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.findPropertyTypeResolver(MapperConfig<?>, AnnotatedMember, JavaType)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.findPropertyContentTypeResolver(MapperConfig<?>, AnnotatedMember, JavaType)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.findTypeName(AnnotatedClass)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.findReferenceType(AnnotatedMember)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findUnwrappingNameTransformer(AnnotatedMember)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findInjectableValue(AnnotatedMember)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.hasIgnoreMarker(AnnotatedMember)": [
            2,
            2,
            2
          ],
          "AnnotationIntrospectorPair.hasRequiredMarker(AnnotatedMember)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findInjectableValueId(AnnotatedMember)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findSerializer(Annotated)": [
            7,
            7,
            7
          ],
          "AnnotationIntrospectorPair.findKeySerializer(Annotated)": [
            7,
            7,
            7
          ],
          "AnnotationIntrospectorPair.findContentSerializer(Annotated)": [
            7,
            7,
            7
          ],
          "AnnotationIntrospectorPair.findNullSerializer(Annotated)": [
            7,
            7,
            7
          ],
          "AnnotationIntrospectorPair.findSerializationInclusion(Annotated, JsonInclude.Include)": [
            5,
            5,
            5
          ],
          "AnnotationIntrospectorPair.findSerializationInclusionForContent(Annotated, JsonInclude.Include)": [
            5,
            5,
            5
          ],
          "AnnotationIntrospectorPair.findPropertyInclusion(Annotated)": [
            8,
            8,
            8
          ],
          "AnnotationIntrospectorPair.findSerializationTyping(Annotated)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findSerializationConverter(Annotated)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findSerializationContentConverter(AnnotatedMember)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findViews(Annotated)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.isTypeId(AnnotatedMember)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findObjectIdInfo(Annotated)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findObjectReferenceInfo(Annotated, ObjectIdInfo)": [
            5,
            5,
            5
          ],
          "AnnotationIntrospectorPair.findFormat(Annotated)": [
            8,
            8,
            8
          ],
          "AnnotationIntrospectorPair.findWrapperName(Annotated)": [
            10,
            10,
            10
          ],
          "AnnotationIntrospectorPair.findPropertyDefaultValue(Annotated)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findPropertyDescription(Annotated)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findPropertyIndex(Annotated)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findImplicitPropertyName(AnnotatedMember)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findPropertyAliases(Annotated)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.resolveSetterConflict(MapperConfig<?>, AnnotatedMethod, AnnotatedMethod)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.refineSerializationType(MapperConfig<?>, Annotated, JavaType)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findSerializationType(Annotated)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findSerializationKeyType(Annotated, JavaType)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findSerializationContentType(Annotated, JavaType)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findSerializationPropertyOrder(AnnotatedClass)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findSerializationSortAlphabetically(Annotated)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findAndAddVirtualProperties(MapperConfig<?>, AnnotatedClass, List<BeanPropertyWriter>)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findNameForSerialization(Annotated)": [
            10,
            10,
            10
          ],
          "AnnotationIntrospectorPair.hasAsValue(Annotated)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.hasAnyGetter(Annotated)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.findEnumValues(Class<?>, Enum<?>[], String[])": [
            5,
            5,
            5
          ],
          "AnnotationIntrospectorPair.findDefaultEnumValue(Class<Enum<?>>)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findEnumValue(Enum<?>)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.hasAsValueAnnotation(AnnotatedMethod)": [
            2,
            2,
            2
          ],
          "AnnotationIntrospectorPair.hasAnyGetterAnnotation(AnnotatedMethod)": [
            2,
            2,
            2
          ],
          "AnnotationIntrospectorPair.findDeserializer(Annotated)": [
            7,
            7,
            7
          ],
          "AnnotationIntrospectorPair.findKeyDeserializer(Annotated)": [
            7,
            7,
            7
          ],
          "AnnotationIntrospectorPair.findContentDeserializer(Annotated)": [
            7,
            7,
            7
          ],
          "AnnotationIntrospectorPair.findDeserializationConverter(Annotated)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findDeserializationContentConverter(AnnotatedMember)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.refineDeserializationType(MapperConfig<?>, Annotated, JavaType)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findDeserializationType(Annotated, JavaType)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findDeserializationKeyType(Annotated, JavaType)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findDeserializationContentType(Annotated, JavaType)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findValueInstantiator(AnnotatedClass)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findPOJOBuilder(AnnotatedClass)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findPOJOBuilderConfig(AnnotatedClass)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.findNameForDeserialization(Annotated)": [
            10,
            10,
            10
          ],
          "AnnotationIntrospectorPair.hasAnySetter(Annotated)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.findSetterInfo(Annotated)": [
            5,
            5,
            5
          ],
          "AnnotationIntrospectorPair.findMergeInfo(Annotated)": [
            6,
            6,
            6
          ],
          "AnnotationIntrospectorPair.hasCreatorAnnotation(Annotated)": [
            2,
            2,
            2
          ],
          "AnnotationIntrospectorPair.findCreatorBinding(Annotated)": [
            7,
            7,
            7
          ],
          "AnnotationIntrospectorPair.findCreatorAnnotation(MapperConfig<?>, Annotated)": [
            4,
            4,
            4
          ],
          "AnnotationIntrospectorPair.hasAnySetterAnnotation(AnnotatedMethod)": [
            2,
            2,
            2
          ],
          "AnnotationIntrospectorPair._isExplicitClassOrOb(Object, Class<?>)": [
            3,
            3,
            3
          ],
          "AnnotationIntrospectorPair._explicitClassOrOb(Object, Class<?>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "AnnotationIntrospectorPair.findRootName(AnnotatedClass)": [
            14,
            14,
            14
          ],
          "AnnotationIntrospectorPair.findSubtypes(Annotated)": [
            11,
            11,
            11
          ],
          "AnnotationIntrospectorPair.findPropertyAccess(Annotated)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/IntrospectorPairTest.java"
    },
    {
      "src_name": "JsonDeserialize",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/annotation/JsonDeserialize.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/JSOGDeserialize622Test.java"
    },
    {
      "src_name": "CreatorProperty",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java",
      "class_declaration": "public class CreatorProperty extends SettableBeanProperty ",
      "methods_under_test": {
        "=1": {
          "CreatorProperty.withName(PropertyName)": [
            1,
            1,
            1
          ],
          "CreatorProperty.withNullProvider(NullValueProvider)": [
            1,
            1,
            1
          ],
          "CreatorProperty.markAsIgnorable()": [
            1,
            1,
            1
          ],
          "CreatorProperty.inject(DeserializationContext, Object)": [
            1,
            1,
            1
          ],
          "CreatorProperty.deserializeAndSet(JsonParser, DeserializationContext, Object)": [
            1,
            1,
            1
          ],
          "CreatorProperty.deserializeSetAndReturn(JsonParser, DeserializationContext, Object)": [
            1,
            1,
            1
          ],
          "CreatorProperty.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CreatorProperty.withValueDeserializer(JsonDeserializer<?>)": [
            2,
            2,
            2
          ],
          "CreatorProperty.fixAccess(DeserializationConfig)": [
            3,
            3,
            3
          ],
          "CreatorProperty.findInjectableValue(DeserializationContext, Object)": [
            2,
            2,
            2
          ],
          "CreatorProperty.getAnnotation(Class<A>)": [
            2,
            2,
            2
          ],
          "CreatorProperty.set(Object, Object)": [
            2,
            2,
            2
          ],
          "CreatorProperty.setAndReturn(Object, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/IgnoredFieldPresentInCreatorProperty2001Test.java"
    },
    {
      "src_name": "JsonSchema",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonschema/JsonSchema.java",
      "class_declaration": "@Deprecated\npublic class JsonSchema ",
      "methods_under_test": {
        "=1": {
          "JsonSchema.toString()": [
            1,
            1,
            1
          ],
          "JsonSchema.hashCode()": [
            1,
            1,
            1
          ],
          "JsonSchema.getDefaultSchemaNode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonSchema.equals(Object)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestReadJsonSchema.java"
    },
    {
      "src_name": "DateDeserializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class DateDeserializers ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "DateDeserializers.find(Class<?>, String)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/DateDeserializationTZTest.java"
    },
    {
      "src_name": "FactoryBasedEnumDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/FactoryBasedEnumDeserializer.java",
      "class_declaration": "class FactoryBasedEnumDeserializer extends StdDeserializer<Object> implements ContextualDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/EnumDeserialization1626Test.java"
    },
    {
      "src_name": "TypeModifier",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/TypeModifier.java",
      "class_declaration": "public abstract class TypeModifier ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java"
    },
    {
      "src_name": "PropertyName",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/PropertyName.java",
      "class_declaration": "public class PropertyName implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "PropertyName.hasSimpleName()": [
            1,
            1,
            1
          ],
          "PropertyName.hasSimpleName(String)": [
            1,
            1,
            1
          ],
          "PropertyName.hasNamespace()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PropertyName.readResolve()": [
            3,
            3,
            3
          ],
          "PropertyName.construct(String)": [
            2,
            2,
            2
          ],
          "PropertyName.construct(String, String)": [
            3,
            3,
            3
          ],
          "PropertyName.internSimpleName()": [
            3,
            3,
            3
          ],
          "PropertyName.withSimpleName(String)": [
            3,
            3,
            3
          ],
          "PropertyName.withNamespace(String)": [
            4,
            4,
            4
          ],
          "PropertyName.simpleAsEncoded(MapperConfig<?>)": [
            3,
            3,
            3
          ],
          "PropertyName.equals(Object)": [
            8,
            8,
            8
          ],
          "PropertyName.hashCode()": [
            2,
            2,
            2
          ],
          "PropertyName.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/merge/PropertyMergeTest.java"
    },
    {
      "src_name": "JsonSerializable",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java",
      "class_declaration": "public abstract static class Base implements JsonSerializable ",
      "methods_under_test": {
        "=1": {
          "Base.isEmpty(SerializerProvider)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/interop/ExceptionSerializableTest1195.java"
    },
    {
      "src_name": "NoClass",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/annotation/NoClass.java",
      "class_declaration": "public final class NoClass ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/NoClassDefFoundWorkaroundTest.java"
    },
    {
      "src_name": "NumericNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/NumericNode.java",
      "class_declaration": "public abstract class NumericNode extends ValueNode ",
      "methods_under_test": {
        "=1": {
          "NumericNode.asInt()": [
            1,
            1,
            1
          ],
          "NumericNode.asInt(int)": [
            1,
            1,
            1
          ],
          "NumericNode.asLong()": [
            1,
            1,
            1
          ],
          "NumericNode.asLong(long)": [
            1,
            1,
            1
          ],
          "NumericNode.asDouble()": [
            1,
            1,
            1
          ],
          "NumericNode.asDouble(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/NumberNodesTest.java"
    },
    {
      "src_name": "EnumSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java",
      "class_declaration": "@JacksonStdImpl\npublic class EnumSerializer extends StdScalarSerializer<Enum<?>> implements ContextualSerializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java"
    },
    {
      "src_name": "SqlDateSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java",
      "class_declaration": "@JacksonStdImpl\n@SuppressWarnings(\"serial\")\npublic class SqlDateSerializer extends DateTimeSerializerBase<java.sql.Date> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/jdk/SqlDateSerializationTest.java"
    },
    {
      "src_name": "SetterlessProperty",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java",
      "class_declaration": "public final class SetterlessProperty extends SettableBeanProperty ",
      "methods_under_test": {
        "=1": {
          "SetterlessProperty.withName(PropertyName)": [
            1,
            1,
            1
          ],
          "SetterlessProperty.withNullProvider(NullValueProvider)": [
            1,
            1,
            1
          ],
          "SetterlessProperty.fixAccess(DeserializationConfig)": [
            1,
            1,
            1
          ],
          "SetterlessProperty.getAnnotation(Class<A>)": [
            1,
            1,
            1
          ],
          "SetterlessProperty.deserializeSetAndReturn(JsonParser, DeserializationContext, Object)": [
            1,
            1,
            1
          ],
          "SetterlessProperty.set(Object, Object)": [
            1,
            1,
            1
          ],
          "SetterlessProperty.setAndReturn(Object, Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SetterlessProperty.withValueDeserializer(JsonDeserializer<?>)": [
            2,
            2,
            2
          ],
          "SetterlessProperty.deserializeAndSet(JsonParser, DeserializationContext, Object)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestSetterlessProperties.java"
    },
    {
      "src_name": "JsonValueSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\n@JacksonStdImpl\npublic class JsonValueSerializer extends StdSerializer<Object> implements ContextualSerializer, JsonFormatVisitable, SchemaAware ",
      "methods_under_test": {
        "=1": {
          "TypeSerializerRerouter.forProperty(BeanProperty)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TypeSerializerRerouter.writeTypePrefix(JsonGenerator, WritableTypeId)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeTypeSuffix(JsonGenerator, WritableTypeId)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeTypePrefixForScalar(Object, JsonGenerator)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeTypePrefixForObject(Object, JsonGenerator)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeTypePrefixForArray(Object, JsonGenerator)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeTypeSuffixForScalar(Object, JsonGenerator)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeTypeSuffixForObject(Object, JsonGenerator)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeTypeSuffixForArray(Object, JsonGenerator)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeTypePrefixForScalar(Object, JsonGenerator, Class<?>)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeTypePrefixForObject(Object, JsonGenerator, Class<?>)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeTypePrefixForArray(Object, JsonGenerator, Class<?>)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeCustomTypePrefixForScalar(Object, JsonGenerator, String)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeCustomTypePrefixForObject(Object, JsonGenerator, String)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeCustomTypePrefixForArray(Object, JsonGenerator, String)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeCustomTypeSuffixForScalar(Object, JsonGenerator, String)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeCustomTypeSuffixForObject(Object, JsonGenerator, String)": [
            2,
            2,
            2
          ],
          "TypeSerializerRerouter.writeCustomTypeSuffixForArray(Object, JsonGenerator, String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/JsonValueTest.java"
    },
    {
      "src_name": "StdSubtypeResolver",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
      "class_declaration": "public class StdSubtypeResolver extends SubtypeResolver implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "StdSubtypeResolver.registerSubtypes()": [
            2,
            2,
            2
          ],
          "StdSubtypeResolver.registerSubtypes(Collection<Class<?>>)": [
            2,
            2,
            2
          ],
          "StdSubtypeResolver.collectAndResolveSubtypesByClass(MapperConfig<?>, AnnotatedMember, JavaType)": [
            7,
            7,
            7
          ],
          "StdSubtypeResolver.collectAndResolveSubtypesByClass(MapperConfig<?>, AnnotatedClass)": [
            4,
            4,
            4
          ],
          "StdSubtypeResolver.collectAndResolveSubtypesByTypeId(MapperConfig<?>, AnnotatedMember, JavaType)": [
            7,
            7,
            7
          ],
          "StdSubtypeResolver.collectAndResolveSubtypesByTypeId(MapperConfig<?>, AnnotatedClass)": [
            4,
            4,
            4
          ],
          "StdSubtypeResolver._collectAndResolve(AnnotatedClass, NamedType, MapperConfig<?>, AnnotationIntrospector, HashMap<NamedType, NamedType>)": [
            7,
            7,
            7
          ],
          "StdSubtypeResolver._collectAndResolveByTypeId(AnnotatedClass, NamedType, MapperConfig<?>, Set<Class<?>>, Map<String,NamedType>)": [
            6,
            6,
            6
          ],
          "StdSubtypeResolver._combineNamedAndUnnamed(Class<?>, Set<Class<?>>, Map<String,NamedType>)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/SubTypeResolution1964Test.java"
    },
    {
      "src_name": "ResolvedRecursiveType",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java",
      "class_declaration": "public class ResolvedRecursiveType extends TypeBase ",
      "methods_under_test": {
        "=1": {
          "ResolvedRecursiveType.getGenericSignature(StringBuilder)": [
            1,
            1,
            1
          ],
          "ResolvedRecursiveType.getErasedSignature(StringBuilder)": [
            1,
            1,
            1
          ],
          "ResolvedRecursiveType.withContentType(JavaType)": [
            1,
            1,
            1
          ],
          "ResolvedRecursiveType.withTypeHandler(Object)": [
            1,
            1,
            1
          ],
          "ResolvedRecursiveType.withContentTypeHandler(Object)": [
            1,
            1,
            1
          ],
          "ResolvedRecursiveType.withValueHandler(Object)": [
            1,
            1,
            1
          ],
          "ResolvedRecursiveType.withContentValueHandler(Object)": [
            1,
            1,
            1
          ],
          "ResolvedRecursiveType.withStaticTyping()": [
            1,
            1,
            1
          ],
          "ResolvedRecursiveType._narrow(Class<?>)": [
            1,
            1,
            1
          ],
          "ResolvedRecursiveType.refine(Class<?>, TypeBindings, JavaType, JavaType[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ResolvedRecursiveType.setReference(JavaType)": [
            2,
            2,
            2
          ],
          "ResolvedRecursiveType.getSuperClass()": [
            2,
            2,
            2
          ],
          "ResolvedRecursiveType.toString()": [
            2,
            2,
            2
          ],
          "ResolvedRecursiveType.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/RecursiveTypeTest.java"
    },
    {
      "src_name": "ObjectIdWriter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/ObjectIdWriter.java",
      "class_declaration": "public final class ObjectIdWriter ",
      "methods_under_test": {
        "=1": {
          "ObjectIdWriter.construct(JavaType, PropertyName, ObjectIdGenerator<?>, boolean)": [
            1,
            1,
            1
          ],
          "ObjectIdWriter.withSerializer(JsonSerializer<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ObjectIdWriter.withAlwaysAsId(boolean)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/ObjectIdWithInjectable639Test.java"
    },
    {
      "src_name": "CollectionType",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/CollectionType.java",
      "class_declaration": "public final class CollectionType extends CollectionLikeType ",
      "methods_under_test": {
        "=1": {
          "CollectionType.construct(Class<?>, TypeBindings, JavaType, JavaType[], JavaType)": [
            1,
            1,
            1
          ],
          "CollectionType._narrow(Class<?>)": [
            1,
            1,
            1
          ],
          "CollectionType.withTypeHandler(Object)": [
            1,
            1,
            1
          ],
          "CollectionType.withContentTypeHandler(Object)": [
            1,
            1,
            1
          ],
          "CollectionType.withValueHandler(Object)": [
            1,
            1,
            1
          ],
          "CollectionType.withContentValueHandler(Object)": [
            1,
            1,
            1
          ],
          "CollectionType.refine(Class<?>, TypeBindings, JavaType, JavaType[])": [
            1,
            1,
            1
          ],
          "CollectionType.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CollectionType.construct(Class<?>, JavaType)": [
            2,
            2,
            2
          ],
          "CollectionType.withContentType(JavaType)": [
            2,
            2,
            2
          ],
          "CollectionType.withStaticTyping()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/UtilCollectionsTypesTest.java"
    },
    {
      "src_name": "ContainerSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class ContainerSerializer <T> extends StdSerializer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedContainerSerialization.java"
    },
    {
      "src_name": "PropertyValue",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValue.java",
      "class_declaration": "public abstract class PropertyValue ",
      "methods_under_test": {
        "=1": {
          "Regular.assign(Object)": [
            1,
            1,
            1
          ],
          "Any.assign(Object)": [
            1,
            1,
            1
          ],
          "Map.assign(Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/PropertyAliasTest.java"
    },
    {
      "src_name": "ContextAttributes",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
      "class_declaration": "public abstract class ContextAttributes ",
      "methods_under_test": {
        "=1": {
          "ContextAttributes.withSharedAttributes(Map<?,?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ContextAttributes.withSharedAttribute(Object, Object)": [
            2,
            2,
            2
          ],
          "ContextAttributes.withoutSharedAttribute(Object)": [
            4,
            4,
            4
          ],
          "ContextAttributes.getAttribute(Object)": [
            4,
            4,
            4
          ],
          "ContextAttributes.withPerCallAttribute(Object, Object)": [
            5,
            5,
            5
          ],
          "ContextAttributes.nonSharedInstance(Object, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithSer.java"
    },
    {
      "src_name": "ObjectIdReader",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReader.java",
      "class_declaration": "public class ObjectIdReader implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "ObjectIdReader.construct(JavaType, PropertyName, ObjectIdGenerator<?>, JsonDeserializer<?>, SettableBeanProperty, ObjectIdResolver)": [
            1,
            1,
            1
          ],
          "ObjectIdReader.maySerializeAsObject()": [
            1,
            1,
            1
          ],
          "ObjectIdReader.isValidReferencePropertyName(String, JsonParser)": [
            1,
            1,
            1
          ],
          "ObjectIdReader.readObjectReference(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectIdReordering1388Test.java"
    },
    {
      "src_name": "AsExternalTypeDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeDeserializer.java",
      "class_declaration": "public class AsExternalTypeDeserializer extends AsArrayTypeDeserializer ",
      "methods_under_test": {
        "=1": {
          "AsExternalTypeDeserializer._usesExternalId()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AsExternalTypeDeserializer.forProperty(BeanProperty)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest.java"
    },
    {
      "src_name": "SimpleType",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java",
      "class_declaration": "public class SimpleType extends TypeBase ",
      "methods_under_test": {
        "=1": {
          "SimpleType.constructUnsafe(Class<?>)": [
            1,
            1,
            1
          ],
          "SimpleType.withContentType(JavaType)": [
            1,
            1,
            1
          ],
          "SimpleType.withContentTypeHandler(Object)": [
            1,
            1,
            1
          ],
          "SimpleType.withContentValueHandler(Object)": [
            1,
            1,
            1
          ],
          "SimpleType.withStaticTyping()": [
            1,
            1,
            1
          ],
          "SimpleType.refine(Class<?>, TypeBindings, JavaType, JavaType[])": [
            1,
            1,
            1
          ],
          "SimpleType.hasContentType()": [
            1,
            1,
            1
          ],
          "SimpleType.getErasedSignature(StringBuilder)": [
            1,
            1,
            1
          ],
          "SimpleType.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SimpleType.construct(Class<?>)": [
            4,
            4,
            4
          ],
          "SimpleType.withTypeHandler(Object)": [
            2,
            2,
            2
          ],
          "SimpleType.withValueHandler(Object)": [
            2,
            2,
            2
          ],
          "SimpleType.buildCanonicalName()": [
            4,
            4,
            4
          ],
          "SimpleType.getGenericSignature(StringBuilder)": [
            3,
            3,
            3
          ],
          "SimpleType.equals(Object)": [
            5,
            5,
            5
          ]
        },
        "11-20": {
          "SimpleType._narrow(Class<?>)": [
            16,
            16,
            16
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestSimpleTypes.java"
    },
    {
      "src_name": "ContextualSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualSerialization.java"
    },
    {
      "src_name": "ByteBufferBackedOutputStream",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/ByteBufferBackedOutputStream.java",
      "class_declaration": "public class ByteBufferBackedOutputStream extends OutputStream ",
      "methods_under_test": {
        "=1": {
          "ByteBufferBackedOutputStream.write(int)": [
            1,
            1,
            1
          ],
          "ByteBufferBackedOutputStream.write(byte[], int, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/NopOutputStream.java"
    },
    {
      "src_name": "ObjectArrayDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java",
      "class_declaration": "@JacksonStdImpl\npublic class ObjectArrayDeserializer extends ContainerDeserializerBase<Object[]> implements ContextualDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestObjectOrArrayDeserialization.java"
    }
  ],
  "src_without_tests": [
    {
      "src_name": "ConfigOverrides",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
      "class_declaration": "public class ConfigOverrides implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "ConfigOverrides._newMap()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ConfigOverrides.copy()": [
            3,
            3,
            3
          ],
          "ConfigOverrides.findOverride(Class<?>)": [
            2,
            2,
            2
          ],
          "ConfigOverrides.findOrCreateOverride(Class<?>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StaticListSerializerBase",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class StaticListSerializerBase <T extends Collection<?>> extends StdSerializer<T> implements ContextualSerializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ValueInjector",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/ValueInjector.java",
      "class_declaration": "public class ValueInjector extends BeanProperty.Std ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DOMSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class DOMSerializer extends StdSerializer<Node> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonObjectFormatVisitor",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor.java",
      "class_declaration": "public static class Base implements JsonObjectFormatVisitor ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AsArraySerializerBase",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class AsArraySerializerBase <T> extends ContainerSerializer<T> implements ContextualSerializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SimpleBeanPropertyDefinition",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java",
      "class_declaration": "public class SimpleBeanPropertyDefinition extends BeanPropertyDefinition ",
      "methods_under_test": {
        "=1": {
          "SimpleBeanPropertyDefinition.construct(MapperConfig<?>, AnnotatedMember)": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyDefinition.construct(MapperConfig<?>, AnnotatedMember, PropertyName)": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyDefinition.construct(MapperConfig<?>, AnnotatedMember, PropertyName, PropertyMetadata, JsonInclude.Include)": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyDefinition.construct(MapperConfig<?>, AnnotatedMember, PropertyName, PropertyMetadata, JsonInclude.Value)": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyDefinition.hasName(PropertyName)": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyDefinition.findInclusion()": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyDefinition.hasGetter()": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyDefinition.hasSetter()": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyDefinition.hasField()": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyDefinition.hasConstructorParameter()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SimpleBeanPropertyDefinition.withSimpleName(String)": [
            2,
            2,
            2
          ],
          "SimpleBeanPropertyDefinition.withName(PropertyName)": [
            2,
            2,
            2
          ],
          "SimpleBeanPropertyDefinition.withMetadata(PropertyMetadata)": [
            2,
            2,
            2
          ],
          "SimpleBeanPropertyDefinition.withInclusion(JsonInclude.Value)": [
            2,
            2,
            2
          ],
          "SimpleBeanPropertyDefinition.getWrapperName()": [
            2,
            2,
            2
          ],
          "SimpleBeanPropertyDefinition.getPrimaryType()": [
            2,
            2,
            2
          ],
          "SimpleBeanPropertyDefinition.getRawPrimaryType()": [
            2,
            2,
            2
          ],
          "SimpleBeanPropertyDefinition.getGetter()": [
            2,
            2,
            2
          ],
          "SimpleBeanPropertyDefinition.getSetter()": [
            2,
            2,
            2
          ],
          "SimpleBeanPropertyDefinition.getConstructorParameters()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "IndexedListSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedListSerializer.java",
      "class_declaration": "@JacksonStdImpl\npublic final class IndexedListSerializer extends AsArraySerializerBase<List<?>> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FailingDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/FailingDeserializer.java",
      "class_declaration": "public class FailingDeserializer extends StdDeserializer<Object> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonMapFormatVisitor",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonMapFormatVisitor.java",
      "class_declaration": "public static class Base implements JsonMapFormatVisitor ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PropertySerializerMap",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertySerializerMap.java",
      "class_declaration": "public abstract class PropertySerializerMap ",
      "methods_under_test": {
        "=1": {
          "PropertySerializerMap.findAndAddPrimarySerializer(Class<?>, SerializerProvider, BeanProperty)": [
            1,
            1,
            1
          ],
          "PropertySerializerMap.findAndAddPrimarySerializer(JavaType, SerializerProvider, BeanProperty)": [
            1,
            1,
            1
          ],
          "PropertySerializerMap.findAndAddSecondarySerializer(Class<?>, SerializerProvider, BeanProperty)": [
            1,
            1,
            1
          ],
          "PropertySerializerMap.findAndAddSecondarySerializer(JavaType, SerializerProvider, BeanProperty)": [
            1,
            1,
            1
          ],
          "PropertySerializerMap.findAndAddRootValueSerializer(Class<?>, SerializerProvider)": [
            1,
            1,
            1
          ],
          "PropertySerializerMap.findAndAddRootValueSerializer(JavaType, SerializerProvider)": [
            1,
            1,
            1
          ],
          "PropertySerializerMap.findAndAddKeySerializer(Class<?>, SerializerProvider, BeanProperty)": [
            1,
            1,
            1
          ],
          "PropertySerializerMap.addSerializer(Class<?>, JsonSerializer<Object>)": [
            1,
            1,
            1
          ],
          "PropertySerializerMap.addSerializer(JavaType, JsonSerializer<Object>)": [
            1,
            1,
            1
          ],
          "PropertySerializerMap.emptyMap()": [
            1,
            1,
            1
          ],
          "PropertySerializerMap.emptyForProperties()": [
            1,
            1,
            1
          ],
          "PropertySerializerMap.emptyForRootValues()": [
            1,
            1,
            1
          ],
          "Empty.serializerFor(Class<?>)": [
            1,
            1,
            1
          ],
          "Empty.newWith(Class<?>, JsonSerializer<Object>)": [
            1,
            1,
            1
          ],
          "Single.newWith(Class<?>, JsonSerializer<Object>)": [
            1,
            1,
            1
          ],
          "Double.newWith(Class<?>, JsonSerializer<Object>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Single.serializerFor(Class<?>)": [
            2,
            2,
            2
          ],
          "Double.serializerFor(Class<?>)": [
            3,
            3,
            3
          ],
          "Multi.serializerFor(Class<?>)": [
            3,
            3,
            3
          ],
          "Multi.newWith(Class<?>, JsonSerializer<Object>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MapProperty",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/MapProperty.java",
      "class_declaration": "public class MapProperty extends PropertyWriter ",
      "methods_under_test": {
        "=1": {
          "MapProperty.reset(Object, Object, JsonSerializer<Object>, JsonSerializer<Object>)": [
            1,
            1,
            1
          ],
          "MapProperty.reset(Object, JsonSerializer<Object>, JsonSerializer<Object>)": [
            1,
            1,
            1
          ],
          "MapProperty.getAnnotation(Class<A>)": [
            1,
            1,
            1
          ],
          "MapProperty.getContextAnnotation(Class<A>)": [
            1,
            1,
            1
          ],
          "MapProperty.serializeAsPlaceholder(Object, JsonGenerator, SerializerProvider)": [
            1,
            1,
            1
          ],
          "MapProperty.depositSchemaProperty(JsonObjectFormatVisitor, SerializerProvider)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MapProperty.getName()": [
            2,
            2,
            2
          ],
          "MapProperty.serializeAsField(Object, JsonGenerator, SerializerProvider)": [
            3,
            3,
            3
          ],
          "MapProperty.serializeAsOmittedField(Object, JsonGenerator, SerializerProvider)": [
            2,
            2,
            2
          ],
          "MapProperty.serializeAsElement(Object, JsonGenerator, SerializerProvider)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AnnotatedMethod",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
      "class_declaration": "public final class AnnotatedMethod extends AnnotatedWithParams implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "AnnotatedMethod.withAnnotations(AnnotationMap)": [
            1,
            1,
            1
          ],
          "AnnotatedMethod.call()": [
            1,
            1,
            1
          ],
          "AnnotatedMethod.call(Object[])": [
            1,
            1,
            1
          ],
          "AnnotatedMethod.call1(Object)": [
            1,
            1,
            1
          ],
          "AnnotatedMethod.callOn(Object)": [
            1,
            1,
            1
          ],
          "AnnotatedMethod.callOnWith(Object)": [
            1,
            1,
            1
          ],
          "AnnotatedMethod.getRawParameterType(int)": [
            1,
            1,
            1
          ],
          "AnnotatedMethod.hasReturnType()": [
            1,
            1,
            1
          ],
          "AnnotatedMethod.toString()": [
            1,
            1,
            1
          ],
          "AnnotatedMethod.hashCode()": [
            1,
            1,
            1
          ],
          "AnnotatedMethod.writeReplace()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AnnotatedMethod.getParameterType(int)": [
            2,
            2,
            2
          ],
          "AnnotatedMethod.getGenericParameterType(int)": [
            2,
            2,
            2
          ],
          "AnnotatedMethod.setValue(Object, Object)": [
            2,
            2,
            2
          ],
          "AnnotatedMethod.getValue(Object)": [
            2,
            2,
            2
          ],
          "AnnotatedMethod.getRawParameterTypes()": [
            2,
            2,
            2
          ],
          "AnnotatedMethod.equals(Object)": [
            2,
            2,
            2
          ],
          "AnnotatedMethod.readResolve()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DecimalNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java",
      "class_declaration": "public class DecimalNode extends NumericNode ",
      "methods_under_test": {
        "=1": {
          "DecimalNode.valueOf(BigDecimal)": [
            1,
            1,
            1
          ],
          "DecimalNode.asToken()": [
            1,
            1,
            1
          ],
          "DecimalNode.numberType()": [
            1,
            1,
            1
          ],
          "DecimalNode.canConvertToInt()": [
            1,
            1,
            1
          ],
          "DecimalNode.canConvertToLong()": [
            1,
            1,
            1
          ],
          "DecimalNode.numberValue()": [
            1,
            1,
            1
          ],
          "DecimalNode.shortValue()": [
            1,
            1,
            1
          ],
          "DecimalNode.intValue()": [
            1,
            1,
            1
          ],
          "DecimalNode.longValue()": [
            1,
            1,
            1
          ],
          "DecimalNode.bigIntegerValue()": [
            1,
            1,
            1
          ],
          "DecimalNode.floatValue()": [
            1,
            1,
            1
          ],
          "DecimalNode.doubleValue()": [
            1,
            1,
            1
          ],
          "DecimalNode.decimalValue()": [
            1,
            1,
            1
          ],
          "DecimalNode.asText()": [
            1,
            1,
            1
          ],
          "DecimalNode.serialize(JsonGenerator, SerializerProvider)": [
            1,
            1,
            1
          ],
          "DecimalNode.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DecimalNode.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AnnotationCollector",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
      "class_declaration": "public abstract class AnnotationCollector ",
      "methods_under_test": {
        "=1": {
          "AnnotationCollector.emptyAnnotations()": [
            1,
            1,
            1
          ],
          "AnnotationCollector.emptyCollector()": [
            1,
            1,
            1
          ],
          "AnnotationCollector.emptyCollector(Object)": [
            1,
            1,
            1
          ],
          "EmptyCollector.asAnnotations()": [
            1,
            1,
            1
          ],
          "EmptyCollector.asAnnotationMap()": [
            1,
            1,
            1
          ],
          "EmptyCollector.isPresent(Annotation)": [
            1,
            1,
            1
          ],
          "EmptyCollector.addOrOverride(Annotation)": [
            1,
            1,
            1
          ],
          "OneCollector.asAnnotations()": [
            1,
            1,
            1
          ],
          "OneCollector.asAnnotationMap()": [
            1,
            1,
            1
          ],
          "OneCollector.isPresent(Annotation)": [
            1,
            1,
            1
          ],
          "NCollector.isPresent(Annotation)": [
            1,
            1,
            1
          ],
          "NCollector.addOrOverride(Annotation)": [
            1,
            1,
            1
          ],
          "NoAnnotations.get(Class<A>)": [
            1,
            1,
            1
          ],
          "NoAnnotations.has(Class<?>)": [
            1,
            1,
            1
          ],
          "NoAnnotations.hasOneOf(Class<? extends Annotation>[])": [
            1,
            1,
            1
          ],
          "NoAnnotations.size()": [
            1,
            1,
            1
          ],
          "OneAnnotation.has(Class<?>)": [
            1,
            1,
            1
          ],
          "OneAnnotation.size()": [
            1,
            1,
            1
          ],
          "TwoAnnotations.has(Class<?>)": [
            1,
            1,
            1
          ],
          "TwoAnnotations.size()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "OneCollector.addOrOverride(Annotation)": [
            2,
            2,
            2
          ],
          "NCollector.asAnnotations()": [
            2,
            2,
            2
          ],
          "NCollector.asAnnotationMap()": [
            2,
            2,
            2
          ],
          "OneAnnotation.get(Class<A>)": [
            2,
            2,
            2
          ],
          "OneAnnotation.hasOneOf(Class<? extends Annotation>[])": [
            3,
            3,
            3
          ],
          "TwoAnnotations.get(Class<A>)": [
            3,
            3,
            3
          ],
          "TwoAnnotations.hasOneOf(Class<? extends Annotation>[])": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseSettings",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
      "class_declaration": "public final class BaseSettings implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "BaseSettings.copy()": [
            1,
            1,
            1
          ],
          "BaseSettings.withInsertedAnnotationIntrospector(AnnotationIntrospector)": [
            1,
            1,
            1
          ],
          "BaseSettings.withAppendedAnnotationIntrospector(AnnotationIntrospector)": [
            1,
            1,
            1
          ],
          "BaseSettings.getTimeZone()": [
            1,
            1,
            1
          ],
          "BaseSettings.hasExplicitTimeZone()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BaseSettings.withClassIntrospector(ClassIntrospector)": [
            2,
            2,
            2
          ],
          "BaseSettings.withAnnotationIntrospector(AnnotationIntrospector)": [
            2,
            2,
            2
          ],
          "BaseSettings.withPropertyNamingStrategy(PropertyNamingStrategy)": [
            2,
            2,
            2
          ],
          "BaseSettings.withTypeFactory(TypeFactory)": [
            2,
            2,
            2
          ],
          "BaseSettings.withTypeResolverBuilder(TypeResolverBuilder<?>)": [
            2,
            2,
            2
          ],
          "BaseSettings.withDateFormat(DateFormat)": [
            3,
            3,
            3
          ],
          "BaseSettings.withHandlerInstantiator(HandlerInstantiator)": [
            2,
            2,
            2
          ],
          "BaseSettings.with(Locale)": [
            2,
            2,
            2
          ],
          "BaseSettings.with(TimeZone)": [
            3,
            3,
            3
          ],
          "BaseSettings.with(Base64Variant)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StdDelegatingSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class StdDelegatingSerializer extends StdSerializer<Object> implements ContextualSerializer, ResolvableSerializer,\n        JsonFormatVisitable, SchemaAware ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PropertyFilter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/PropertyFilter.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BasicClassIntrospector",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
      "class_declaration": "public class BasicClassIntrospector extends ClassIntrospector implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "BasicClassIntrospector.copy()": [
            1,
            1,
            1
          ],
          "BasicClassIntrospector.forDeserializationWithBuilder(DeserializationConfig, JavaType, MixInResolver)": [
            1,
            1,
            1
          ],
          "BasicClassIntrospector.collectProperties(MapperConfig<?>, JavaType, MixInResolver, boolean, String)": [
            1,
            1,
            1
          ],
          "BasicClassIntrospector.collectPropertiesWithBuilder(MapperConfig<?>, JavaType, MixInResolver, boolean)": [
            1,
            1,
            1
          ],
          "BasicClassIntrospector.constructPropertyCollector(MapperConfig<?>, AnnotatedClass, JavaType, boolean, String)": [
            1,
            1,
            1
          ],
          "BasicClassIntrospector._resolveAnnotatedClass(MapperConfig<?>, JavaType, MixInResolver)": [
            1,
            1,
            1
          ],
          "BasicClassIntrospector._resolveAnnotatedWithoutSuperTypes(MapperConfig<?>, JavaType, MixInResolver)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasicClassIntrospector.forSerialization(SerializationConfig, JavaType, MixInResolver)": [
            3,
            3,
            3
          ],
          "BasicClassIntrospector.forDeserialization(DeserializationConfig, JavaType, MixInResolver)": [
            3,
            3,
            3
          ],
          "BasicClassIntrospector.forCreation(DeserializationConfig, JavaType, MixInResolver)": [
            3,
            3,
            3
          ],
          "BasicClassIntrospector.forClassAnnotations(MapperConfig<?>, JavaType, MixInResolver)": [
            3,
            3,
            3
          ],
          "BasicClassIntrospector.forDirectClassAnnotations(MapperConfig<?>, JavaType, MixInResolver)": [
            2,
            2,
            2
          ],
          "BasicClassIntrospector._findStdTypeDesc(JavaType)": [
            6,
            6,
            6
          ],
          "BasicClassIntrospector._isStdJDKCollection(JavaType)": [
            5,
            5,
            5
          ],
          "BasicClassIntrospector._findStdJdkCollectionDesc(MapperConfig<?>, JavaType)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PropertyBuilder",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
      "class_declaration": "public class PropertyBuilder ",
      "methods_under_test": {
        "=1": {
          "PropertyBuilder.getDefaultValue(JavaType)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PropertyBuilder.findSerializationType(Annotated, boolean, JavaType)": [
            6,
            6,
            6
          ],
          "PropertyBuilder.getDefaultBean()": [
            3,
            3,
            3
          ],
          "PropertyBuilder.getPropertyDefaultValue(String, AnnotatedMember, JavaType)": [
            4,
            4,
            4
          ],
          "PropertyBuilder._throwWrapped(Exception, String, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {
          "PropertyBuilder.buildWriter(SerializerProvider, BeanPropertyDefinition, JavaType, JsonSerializer<?>, TypeSerializer, TypeSerializer, AnnotatedMember, boolean)": [
            25,
            25,
            25
          ]
        },
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AnnotatedWithParams",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
      "class_declaration": "public abstract class AnnotatedWithParams extends AnnotatedMember ",
      "methods_under_test": {
        "=1": {
          "AnnotatedWithParams.replaceParameterAnnotations(int, AnnotationMap)": [
            1,
            1,
            1
          ],
          "AnnotatedWithParams.getParameter(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AnnotatedWithParams.addOrOverrideParam(int, Annotation)": [
            2,
            2,
            2
          ],
          "AnnotatedWithParams.getParameterAnnotations(int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnresolvedId",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/UnresolvedId.java",
      "class_declaration": "public class UnresolvedId ",
      "methods_under_test": {
        "=1": {
          "UnresolvedId.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StdDelegatingDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java",
      "class_declaration": "public class StdDelegatingDeserializer <T> extends StdDeserializer<T> implements ContextualDeserializer, ResolvableDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AnnotatedParameter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
      "class_declaration": "public final class AnnotatedParameter extends AnnotatedMember ",
      "methods_under_test": {
        "=1": {
          "AnnotatedParameter.setValue(Object, Object)": [
            1,
            1,
            1
          ],
          "AnnotatedParameter.getValue(Object)": [
            1,
            1,
            1
          ],
          "AnnotatedParameter.hashCode()": [
            1,
            1,
            1
          ],
          "AnnotatedParameter.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AnnotatedParameter.withAnnotations(AnnotationMap)": [
            2,
            2,
            2
          ],
          "AnnotatedParameter.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ValueInstantiators",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiators.java",
      "class_declaration": "public static class Base implements ValueInstantiators ",
      "methods_under_test": {
        "=1": {
          "Base.findValueInstantiator(DeserializationConfig, BeanDescription, ValueInstantiator)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NonTypedScalarSerializerBase",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/NonTypedScalarSerializerBase.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\n@Deprecated \npublic abstract class NonTypedScalarSerializerBase <T> extends StdScalarSerializer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonMappingException",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java",
      "class_declaration": "public class JsonMappingException extends JsonProcessingException ",
      "methods_under_test": {
        "=1": {
          "Reference.toString()": [
            1,
            1,
            1
          ],
          "Reference.writeReplace()": [
            1,
            1,
            1
          ],
          "JsonMappingException.from(JsonParser, String)": [
            1,
            1,
            1
          ],
          "JsonMappingException.from(JsonParser, String, Throwable)": [
            1,
            1,
            1
          ],
          "JsonMappingException.from(JsonGenerator, String)": [
            1,
            1,
            1
          ],
          "JsonMappingException.from(JsonGenerator, String, Throwable)": [
            1,
            1,
            1
          ],
          "JsonMappingException.from(DeserializationContext, String)": [
            1,
            1,
            1
          ],
          "JsonMappingException.from(DeserializationContext, String, Throwable)": [
            1,
            1,
            1
          ],
          "JsonMappingException.from(SerializerProvider, String)": [
            1,
            1,
            1
          ],
          "JsonMappingException.from(SerializerProvider, String, Throwable)": [
            1,
            1,
            1
          ],
          "JsonMappingException.fromUnexpectedIOE(IOException)": [
            1,
            1,
            1
          ],
          "JsonMappingException.wrapWithPath(Throwable, Object, String)": [
            1,
            1,
            1
          ],
          "JsonMappingException.wrapWithPath(Throwable, Object, int)": [
            1,
            1,
            1
          ],
          "JsonMappingException.getPathReference(StringBuilder)": [
            1,
            1,
            1
          ],
          "JsonMappingException.prependPath(Object, String)": [
            1,
            1,
            1
          ],
          "JsonMappingException.prependPath(Object, int)": [
            1,
            1,
            1
          ],
          "JsonMappingException.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Reference.getDescription()": [
            7,
            7,
            7
          ],
          "JsonMappingException.wrapWithPath(Throwable, Reference)": [
            5,
            5,
            5
          ],
          "JsonMappingException.getPath()": [
            2,
            2,
            2
          ],
          "JsonMappingException.prependPath(Reference)": [
            3,
            3,
            3
          ],
          "JsonMappingException._buildMessage()": [
            2,
            2,
            2
          ],
          "JsonMappingException._appendPathDesc(StringBuilder)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ClassIntrospector",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
      "class_declaration": "public abstract class ClassIntrospector ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SerializerFactory",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java",
      "class_declaration": "public abstract class SerializerFactory ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "VisibilityChecker",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
      "class_declaration": "public static class Std implements VisibilityChecker<Std>,\n            java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "Std.defaultInstance()": [
            1,
            1,
            1
          ],
          "Std.construct(JsonAutoDetect.Value)": [
            1,
            1,
            1
          ],
          "Std.isCreatorVisible(Member)": [
            1,
            1,
            1
          ],
          "Std.isCreatorVisible(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "Std.isFieldVisible(Field)": [
            1,
            1,
            1
          ],
          "Std.isFieldVisible(AnnotatedField)": [
            1,
            1,
            1
          ],
          "Std.isGetterVisible(Method)": [
            1,
            1,
            1
          ],
          "Std.isGetterVisible(AnnotatedMethod)": [
            1,
            1,
            1
          ],
          "Std.isIsGetterVisible(Method)": [
            1,
            1,
            1
          ],
          "Std.isIsGetterVisible(AnnotatedMethod)": [
            1,
            1,
            1
          ],
          "Std.isSetterVisible(Method)": [
            1,
            1,
            1
          ],
          "Std.isSetterVisible(AnnotatedMethod)": [
            1,
            1,
            1
          ],
          "Std.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Std._with(Visibility, Visibility, Visibility, Visibility, Visibility)": [
            2,
            2,
            2
          ],
          "Std.with(JsonAutoDetect)": [
            2,
            2,
            2
          ],
          "Std.withOverrides(JsonAutoDetect.Value)": [
            2,
            2,
            2
          ],
          "Std.with(Visibility)": [
            2,
            2,
            2
          ],
          "Std.withVisibility(PropertyAccessor, Visibility)": [
            8,
            8,
            8
          ],
          "Std.withGetterVisibility(Visibility)": [
            3,
            3,
            3
          ],
          "Std.withIsGetterVisibility(Visibility)": [
            3,
            3,
            3
          ],
          "Std.withSetterVisibility(Visibility)": [
            3,
            3,
            3
          ],
          "Std.withCreatorVisibility(Visibility)": [
            3,
            3,
            3
          ],
          "Std.withFieldVisibility(Visibility)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "StdConverter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/StdConverter.java",
      "class_declaration": "public abstract class StdConverter <IN,OUT> implements Converter<IN,OUT> ",
      "methods_under_test": {
        "=1": {
          "StdConverter.getInputType(TypeFactory)": [
            1,
            1,
            1
          ],
          "StdConverter.getOutputType(TypeFactory)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StdConverter._findConverterType(TypeFactory)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CollectionLikeType",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
      "class_declaration": "public class CollectionLikeType extends TypeBase ",
      "methods_under_test": {
        "=1": {
          "CollectionLikeType.construct(Class<?>, TypeBindings, JavaType, JavaType[], JavaType)": [
            1,
            1,
            1
          ],
          "CollectionLikeType._narrow(Class<?>)": [
            1,
            1,
            1
          ],
          "CollectionLikeType.withTypeHandler(Object)": [
            1,
            1,
            1
          ],
          "CollectionLikeType.withContentTypeHandler(Object)": [
            1,
            1,
            1
          ],
          "CollectionLikeType.withValueHandler(Object)": [
            1,
            1,
            1
          ],
          "CollectionLikeType.withContentValueHandler(Object)": [
            1,
            1,
            1
          ],
          "CollectionLikeType.refine(Class<?>, TypeBindings, JavaType, JavaType[])": [
            1,
            1,
            1
          ],
          "CollectionLikeType.hasHandlers()": [
            1,
            1,
            1
          ],
          "CollectionLikeType.getErasedSignature(StringBuilder)": [
            1,
            1,
            1
          ],
          "CollectionLikeType.getGenericSignature(StringBuilder)": [
            1,
            1,
            1
          ],
          "CollectionLikeType.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CollectionLikeType.construct(Class<?>, JavaType)": [
            2,
            2,
            2
          ],
          "CollectionLikeType.upgradeFrom(JavaType, JavaType)": [
            2,
            2,
            2
          ],
          "CollectionLikeType.withContentType(JavaType)": [
            2,
            2,
            2
          ],
          "CollectionLikeType.withHandlersFrom(JavaType)": [
            3,
            3,
            3
          ],
          "CollectionLikeType.withStaticTyping()": [
            2,
            2,
            2
          ],
          "CollectionLikeType.buildCanonicalName()": [
            2,
            2,
            2
          ],
          "CollectionLikeType.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonPOJOBuilder",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/annotation/JsonPOJOBuilder.java",
      "class_declaration": "public class Value ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StdScalarDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java",
      "class_declaration": "public abstract class StdScalarDeserializer <T> extends StdDeserializer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DeserializerFactory",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
      "class_declaration": "public abstract class DeserializerFactory ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Serializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/Serializers.java",
      "class_declaration": "public static class Base implements Serializers ",
      "methods_under_test": {
        "=1": {
          "Base.findSerializer(SerializationConfig, JavaType, BeanDescription)": [
            1,
            1,
            1
          ],
          "Base.findReferenceSerializer(SerializationConfig, ReferenceType, BeanDescription, TypeSerializer, JsonSerializer<Object>)": [
            1,
            1,
            1
          ],
          "Base.findArraySerializer(SerializationConfig, ArrayType, BeanDescription, TypeSerializer, JsonSerializer<Object>)": [
            1,
            1,
            1
          ],
          "Base.findCollectionSerializer(SerializationConfig, CollectionType, BeanDescription, TypeSerializer, JsonSerializer<Object>)": [
            1,
            1,
            1
          ],
          "Base.findCollectionLikeSerializer(SerializationConfig, CollectionLikeType, BeanDescription, TypeSerializer, JsonSerializer<Object>)": [
            1,
            1,
            1
          ],
          "Base.findMapSerializer(SerializationConfig, MapType, BeanDescription, JsonSerializer<Object>, TypeSerializer, JsonSerializer<Object>)": [
            1,
            1,
            1
          ],
          "Base.findMapLikeSerializer(SerializationConfig, MapLikeType, BeanDescription, JsonSerializer<Object>, TypeSerializer, JsonSerializer<Object>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "VirtualBeanPropertyWriter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/VirtualBeanPropertyWriter.java",
      "class_declaration": "public abstract class VirtualBeanPropertyWriter extends BeanPropertyWriter implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "VirtualBeanPropertyWriter._suppressNulls(JsonInclude.Value)": [
            2,
            2,
            2
          ],
          "VirtualBeanPropertyWriter._suppressableValue(JsonInclude.Value)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "VirtualBeanPropertyWriter.serializeAsField(Object, JsonGenerator, SerializerProvider)": [
            13,
            13,
            13
          ],
          "VirtualBeanPropertyWriter.serializeAsElement(Object, JsonGenerator, SerializerProvider)": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DeserializerCache",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "class_declaration": "public final class DeserializerCache implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "DeserializerCache.writeReplace()": [
            1,
            1,
            1
          ],
          "DeserializerCache.cachedDeserializersCount()": [
            1,
            1,
            1
          ],
          "DeserializerCache.flushCachedDeserializers()": [
            1,
            1,
            1
          ],
          "DeserializerCache._handleUnknownKeyDeserializer(DeserializationContext, JavaType)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DeserializerCache.findValueDeserializer(DeserializationContext, DeserializerFactory, JavaType)": [
            3,
            3,
            3
          ],
          "DeserializerCache.findKeyDeserializer(DeserializationContext, DeserializerFactory, JavaType)": [
            3,
            3,
            3
          ],
          "DeserializerCache.hasValueDeserializerFor(DeserializationContext, DeserializerFactory, JavaType)": [
            2,
            2,
            2
          ],
          "DeserializerCache._findCachedDeserializer(JavaType)": [
            3,
            3,
            3
          ],
          "DeserializerCache._createAndCacheValueDeserializer(DeserializationContext, DeserializerFactory, JavaType)": [
            7,
            7,
            7
          ],
          "DeserializerCache._createAndCache2(DeserializationContext, DeserializerFactory, JavaType)": [
            5,
            5,
            5
          ],
          "DeserializerCache._createDeserializer(DeserializationContext, DeserializerFactory, JavaType)": [
            7,
            7,
            7
          ],
          "DeserializerCache.findDeserializerFromAnnotation(DeserializationContext, Annotated)": [
            2,
            2,
            2
          ],
          "DeserializerCache.findConvertingDeserializer(DeserializationContext, Annotated, JsonDeserializer<Object>)": [
            2,
            2,
            2
          ],
          "DeserializerCache.findConverter(DeserializationContext, Annotated)": [
            2,
            2,
            2
          ],
          "DeserializerCache._handleUnknownValueDeserializer(DeserializationContext, JavaType)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "DeserializerCache._createDeserializer2(DeserializationContext, DeserializerFactory, JavaType, BeanDescription)": [
            12,
            12,
            12
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SettableBeanProperty",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class SettableBeanProperty extends ConcreteBeanPropertyBase implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "SettableBeanProperty.withSimpleName(String)": [
            1,
            1,
            1
          ],
          "SettableBeanProperty.getContextAnnotation(Class<A>)": [
            1,
            1,
            1
          ],
          "SettableBeanProperty._throwAsIOE(JsonParser, Exception)": [
            1,
            1,
            1
          ],
          "SettableBeanProperty._throwAsIOE(Exception)": [
            1,
            1,
            1
          ],
          "SettableBeanProperty._throwAsIOE(Exception, Object)": [
            1,
            1,
            1
          ],
          "SettableBeanProperty.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SettableBeanProperty.setViews(Class<?>[])": [
            3,
            3,
            3
          ],
          "SettableBeanProperty.depositSchemaProperty(JsonObjectFormatVisitor, SerializerProvider)": [
            3,
            3,
            3
          ],
          "SettableBeanProperty.deserialize(JsonParser, DeserializationContext)": [
            4,
            4,
            4
          ],
          "SettableBeanProperty.deserializeWith(JsonParser, DeserializationContext, Object)": [
            6,
            6,
            6
          ],
          "SettableBeanProperty._throwAsIOE(JsonParser, Exception, Object)": [
            3,
            3,
            3
          ],
          "SettableBeanProperty._with(SettableBeanProperty)": [
            2,
            2,
            2
          ],
          "SettableBeanProperty.withValueDeserializer(JsonDeserializer<?>)": [
            2,
            2,
            2
          ],
          "SettableBeanProperty.withName(PropertyName)": [
            2,
            2,
            2
          ],
          "SettableBeanProperty.withNullProvider(NullValueProvider)": [
            2,
            2,
            2
          ],
          "Delegating.assignIndex(int)": [
            2,
            2,
            2
          ],
          "Delegating.fixAccess(DeserializationConfig)": [
            2,
            2,
            2
          ],
          "Delegating.hasValueDeserializer()": [
            2,
            2,
            2
          ],
          "Delegating.hasValueTypeDeserializer()": [
            2,
            2,
            2
          ],
          "Delegating.visibleInView(Class<?>)": [
            2,
            2,
            2
          ],
          "Delegating.hasViews()": [
            2,
            2,
            2
          ],
          "SettableBeanProperty.getAnnotation(Class<A>)": [
            2,
            2,
            2
          ],
          "SettableBeanProperty.deserializeAndSet(JsonParser, DeserializationContext, Object)": [
            2,
            2,
            2
          ],
          "SettableBeanProperty.deserializeSetAndReturn(JsonParser, DeserializationContext, Object)": [
            2,
            2,
            2
          ],
          "SettableBeanProperty.set(Object, Object)": [
            2,
            2,
            2
          ],
          "SettableBeanProperty.setAndReturn(Object, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PropertyBindingException",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/exc/PropertyBindingException.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class PropertyBindingException extends MismatchedInputException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "PropertyBindingException.getMessageSuffix()": [
            6,
            6,
            6
          ],
          "PropertyBindingException.getKnownPropertyIds()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ArrayIterator",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/ArrayIterator.java",
      "class_declaration": "public class ArrayIterator <T> implements Iterator<T>, Iterable<T> ",
      "methods_under_test": {
        "=1": {
          "ArrayIterator.hasNext()": [
            1,
            1,
            1
          ],
          "ArrayIterator.remove()": [
            1,
            1,
            1
          ],
          "ArrayIterator.iterator()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArrayIterator.next()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ConfigFeature",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigFeature.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ResolvableSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "InvalidTypeIdException",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/exc/InvalidTypeIdException.java",
      "class_declaration": "public class InvalidTypeIdException extends MismatchedInputException ",
      "methods_under_test": {
        "=1": {
          "InvalidTypeIdException.from(JsonParser, String, JavaType, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ArrayBlockingQueueDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/ArrayBlockingQueueDeserializer.java",
      "class_declaration": "public class ArrayBlockingQueueDeserializer extends CollectionDeserializer ",
      "methods_under_test": {
        "=1": {
          "ArrayBlockingQueueDeserializer.withResolved(JsonDeserializer<?>, JsonDeserializer<?>, TypeDeserializer, NullValueProvider, Boolean)": [
            1,
            1,
            1
          ],
          "ArrayBlockingQueueDeserializer.createDefaultInstance(DeserializationContext)": [
            1,
            1,
            1
          ],
          "ArrayBlockingQueueDeserializer.deserializeWithType(JsonParser, DeserializationContext, TypeDeserializer)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArrayBlockingQueueDeserializer.deserialize(JsonParser, DeserializationContext, Collection<Object>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonSerializableSchema",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonschema/JsonSerializableSchema.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ErrorThrowingDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/ErrorThrowingDeserializer.java",
      "class_declaration": "public class ErrorThrowingDeserializer extends JsonDeserializer<Object> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ConfigOverride",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
      "class_declaration": "public abstract class ConfigOverride ",
      "methods_under_test": {
        "=1": {
          "ConfigOverride.empty()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SimpleValueInstantiators",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/module/SimpleValueInstantiators.java",
      "class_declaration": "public class SimpleValueInstantiators extends ValueInstantiators.Base implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "WithMember",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/WithMember.java",
      "error": "list index out of range"
    },
    {
      "src_name": "JsonNodeDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class JsonNodeDeserializer extends BaseNodeDeserializer<JsonNode> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DOMDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ext/DOMDeserializer.java",
      "class_declaration": "public abstract class DOMDeserializer <T> extends FromStringDeserializer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonFormatTypes",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes.java",
      "error": "local variable 'class_name' referenced before assignment"
    },
    {
      "src_name": "JsonValueFormatVisitor",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonValueFormatVisitor.java",
      "class_declaration": "public static class Base implements JsonValueFormatVisitor ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Deserializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java",
      "class_declaration": "public static class Base implements Deserializers ",
      "methods_under_test": {
        "=1": {
          "Base.findEnumDeserializer(Class<?>, DeserializationConfig, BeanDescription)": [
            1,
            1,
            1
          ],
          "Base.findTreeNodeDeserializer(Class<? extends JsonNode>, DeserializationConfig, BeanDescription)": [
            1,
            1,
            1
          ],
          "Base.findReferenceDeserializer(ReferenceType, DeserializationConfig, BeanDescription, TypeDeserializer, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "Base.findBeanDeserializer(JavaType, DeserializationConfig, BeanDescription)": [
            1,
            1,
            1
          ],
          "Base.findArrayDeserializer(ArrayType, DeserializationConfig, BeanDescription, TypeDeserializer, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "Base.findCollectionDeserializer(CollectionType, DeserializationConfig, BeanDescription, TypeDeserializer, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "Base.findCollectionLikeDeserializer(CollectionLikeType, DeserializationConfig, BeanDescription, TypeDeserializer, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "Base.findMapDeserializer(MapType, DeserializationConfig, BeanDescription, KeyDeserializer, TypeDeserializer, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "Base.findMapLikeDeserializer(MapLikeType, DeserializationConfig, BeanDescription, KeyDeserializer, TypeDeserializer, JsonDeserializer<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AsPropertyTypeDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
      "class_declaration": "public class AsPropertyTypeDeserializer extends AsArrayTypeDeserializer ",
      "methods_under_test": {
        "=1": {
          "AsPropertyTypeDeserializer.forProperty(BeanProperty)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AsPropertyTypeDeserializer.deserializeTypedFromObject(JsonParser, DeserializationContext)": [
            8,
            8,
            8
          ],
          "AsPropertyTypeDeserializer._deserializeTypedForId(JsonParser, DeserializationContext, TokenBuffer)": [
            4,
            4,
            4
          ],
          "AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(JsonParser, DeserializationContext, TokenBuffer)": [
            10,
            10,
            10
          ],
          "AsPropertyTypeDeserializer.deserializeTypedFromAny(JsonParser, DeserializationContext)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonNodeType",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeType.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AnnotatedMethodMap",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethodMap.java",
      "class_declaration": "public final class AnnotatedMethodMap implements Iterable<AnnotatedMethod> ",
      "methods_under_test": {
        "=1": {
          "AnnotatedMethodMap.size()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AnnotatedMethodMap.find(String, Class<?>[])": [
            2,
            2,
            2
          ],
          "AnnotatedMethodMap.find(Method)": [
            2,
            2,
            2
          ],
          "AnnotatedMethodMap.iterator()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "LinkedNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/LinkedNode.java",
      "class_declaration": "public final class LinkedNode <T> ",
      "methods_under_test": {
        "=1": {
          "LinkedNode.next()": [
            1,
            1,
            1
          ],
          "LinkedNode.value()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LinkedNode.linkNext(LinkedNode<T>)": [
            2,
            2,
            2
          ],
          "LinkedNode.contains(LinkedNode<ST>, ST)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NioPathSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ext/NioPathSerializer.java",
      "class_declaration": "public class NioPathSerializer extends StdScalarSerializer<Path> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AsArrayTypeDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
      "class_declaration": "public class AsArrayTypeDeserializer extends TypeDeserializerBase implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "AsArrayTypeDeserializer.forProperty(BeanProperty)": [
            1,
            1,
            1
          ],
          "AsArrayTypeDeserializer.deserializeTypedFromArray(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ],
          "AsArrayTypeDeserializer.deserializeTypedFromObject(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ],
          "AsArrayTypeDeserializer.deserializeTypedFromScalar(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ],
          "AsArrayTypeDeserializer.deserializeTypedFromAny(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ],
          "AsArrayTypeDeserializer._usesExternalId()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AsArrayTypeDeserializer._deserialize(JsonParser, DeserializationContext)": [
            5,
            5,
            5
          ],
          "AsArrayTypeDeserializer._locateTypeId(JsonParser, DeserializationContext)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonNaming",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/annotation/JsonNaming.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SettableAnyProperty",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java",
      "class_declaration": "public class SettableAnyProperty implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "SettableAnyProperty.withValueDeserializer(JsonDeserializer<Object>)": [
            1,
            1,
            1
          ],
          "SettableAnyProperty.fixAccess(DeserializationConfig)": [
            1,
            1,
            1
          ],
          "SettableAnyProperty.hasValueDeserializer()": [
            1,
            1,
            1
          ],
          "SettableAnyProperty.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SettableAnyProperty.readResolve()": [
            2,
            2,
            2
          ],
          "SettableAnyProperty.deserializeAndSet(JsonParser, DeserializationContext, Object, String)": [
            5,
            5,
            5
          ],
          "SettableAnyProperty.deserialize(JsonParser, DeserializationContext)": [
            3,
            3,
            3
          ],
          "SettableAnyProperty.set(Object, Object, Object)": [
            8,
            8,
            8
          ],
          "SettableAnyProperty._throwAsIOE(Exception, Object, Object)": [
            3,
            3,
            3
          ],
          "AnySetterReferring.handleResolvedForwardReference(Object, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BeanSerializerBase",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class BeanSerializerBase extends StdSerializer<Object> implements ContextualSerializer, ResolvableSerializer,\n        JsonFormatVisitable, SchemaAware ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StdJdkSerializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class StdJdkSerializers ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "StdJdkSerializers.all()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PrimitiveArrayBuilder",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/PrimitiveArrayBuilder.java",
      "class_declaration": "public abstract class PrimitiveArrayBuilder <T> ",
      "methods_under_test": {
        "=1": {
          "PrimitiveArrayBuilder.bufferedSize()": [
            1,
            1,
            1
          ],
          "PrimitiveArrayBuilder.resetAndStart()": [
            1,
            1,
            1
          ],
          "Node.copyData(T, int)": [
            1,
            1,
            1
          ],
          "Node.next()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PrimitiveArrayBuilder.appendCompletedChunk(T, int)": [
            3,
            3,
            3
          ],
          "PrimitiveArrayBuilder.completeAndClearBuffer(T, int)": [
            3,
            3,
            3
          ],
          "PrimitiveArrayBuilder._reset()": [
            2,
            2,
            2
          ],
          "Node.linkNext(Node<T>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SimpleKeyDeserializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java",
      "class_declaration": "public class SimpleKeyDeserializers implements KeyDeserializers, java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SimpleKeyDeserializers.addDeserializer(Class<?>, KeyDeserializer)": [
            2,
            2,
            2
          ],
          "SimpleKeyDeserializers.findKeyDeserializer(JavaType, DeserializationConfig, BeanDescription)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PropertyBasedObjectIdGenerator",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertyBasedObjectIdGenerator.java",
      "class_declaration": "public class PropertyBasedObjectIdGenerator extends ObjectIdGenerators.PropertyGenerator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonNullFormatVisitor",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonNullFormatVisitor.java",
      "class_declaration": "public static class Base implements JsonNullFormatVisitor ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CreatorCandidate",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
      "class_declaration": "public final class CreatorCandidate ",
      "methods_under_test": {
        "=1": {
          "CreatorCandidate.creator()": [
            1,
            1,
            1
          ],
          "CreatorCandidate.paramCount()": [
            1,
            1,
            1
          ],
          "CreatorCandidate.injection(int)": [
            1,
            1,
            1
          ],
          "CreatorCandidate.parameter(int)": [
            1,
            1,
            1
          ],
          "CreatorCandidate.propertyDef(int)": [
            1,
            1,
            1
          ],
          "CreatorCandidate.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CreatorCandidate.construct(AnnotationIntrospector, AnnotatedWithParams, BeanPropertyDefinition[])": [
            2,
            2,
            2
          ],
          "CreatorCandidate.paramName(int)": [
            2,
            2,
            2
          ],
          "CreatorCandidate.explicitParamName(int)": [
            3,
            3,
            3
          ],
          "CreatorCandidate.findImplicitParamName(int)": [
            2,
            2,
            2
          ],
          "CreatorCandidate.findOnlyParamWithoutInjection()": [
            4,
            4,
            4
          ],
          "Param.fullName()": [
            2,
            2,
            2
          ],
          "Param.hasFullName()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java",
      "class_declaration": "public class AbstractDeserializer extends JsonDeserializer<Object> implements ContextualDeserializer, \n        java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ReferenceTypeSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/ReferenceTypeSerializer.java",
      "class_declaration": "public abstract class ReferenceTypeSerializer <T> extends StdSerializer<T> implements ContextualSerializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ToStringSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
      "class_declaration": "@JacksonStdImpl\n@SuppressWarnings(\"serial\")\npublic class ToStringSerializer extends StdSerializer<Object> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FileSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/FileSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class FileSerializer extends StdScalarSerializer<File> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CollectionDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
      "class_declaration": "@JacksonStdImpl\npublic class CollectionDeserializer extends ContainerDeserializerBase<Collection<Object>> implements ContextualDeserializer ",
      "methods_under_test": {
        "=1": {
          "CollectionReferringAccumulator.handleUnresolvedReference(UnresolvedForwardReference)": [
            1,
            1,
            1
          ],
          "CollectionReferring.handleResolvedForwardReference(Object, Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CollectionReferringAccumulator.add(Object)": [
            3,
            3,
            3
          ],
          "CollectionReferringAccumulator.resolveForwardReference(Object, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "InjectableValues",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/InjectableValues.java",
      "class_declaration": "public abstract class InjectableValues ",
      "methods_under_test": {
        "=1": {
          "InjectableValues.addValue(String, Object)": [
            1,
            1,
            1
          ],
          "InjectableValues.addValue(Class<?>, Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "InjectableValues.findInjectableValue(Object, DeserializationContext, BeanProperty, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AnnotationMap",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
      "class_declaration": "public final class AnnotationMap implements Annotations ",
      "methods_under_test": {
        "=1": {
          "AnnotationMap.of(Class<?>, Annotation)": [
            1,
            1,
            1
          ],
          "AnnotationMap.size()": [
            1,
            1,
            1
          ],
          "AnnotationMap.add(Annotation)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AnnotationMap.get(Class<A>)": [
            2,
            2,
            2
          ],
          "AnnotationMap.has(Class<?>)": [
            2,
            2,
            2
          ],
          "AnnotationMap.hasOneOf(Class<? extends Annotation>[])": [
            4,
            4,
            4
          ],
          "AnnotationMap.annotations()": [
            2,
            2,
            2
          ],
          "AnnotationMap.merge(AnnotationMap, AnnotationMap)": [
            5,
            5,
            5
          ],
          "AnnotationMap.addIfNotPresent(Annotation)": [
            2,
            2,
            2
          ],
          "AnnotationMap.toString()": [
            2,
            2,
            2
          ],
          "AnnotationMap._add(Annotation)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MutableConfigOverride",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/cfg/MutableConfigOverride.java",
      "class_declaration": "public class MutableConfigOverride extends ConfigOverride implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "MutableConfigOverride.copy()": [
            1,
            1,
            1
          ],
          "MutableConfigOverride.setFormat(JsonFormat.Value)": [
            1,
            1,
            1
          ],
          "MutableConfigOverride.setInclude(JsonInclude.Value)": [
            1,
            1,
            1
          ],
          "MutableConfigOverride.setIncludeAsProperty(JsonInclude.Value)": [
            1,
            1,
            1
          ],
          "MutableConfigOverride.setIgnorals(JsonIgnoreProperties.Value)": [
            1,
            1,
            1
          ],
          "MutableConfigOverride.setIsIgnoredType(Boolean)": [
            1,
            1,
            1
          ],
          "MutableConfigOverride.setSetterInfo(JsonSetter.Value)": [
            1,
            1,
            1
          ],
          "MutableConfigOverride.setVisibility(JsonAutoDetect.Value)": [
            1,
            1,
            1
          ],
          "MutableConfigOverride.setMergeable(Boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ValueNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java",
      "class_declaration": "public abstract class ValueNode extends BaseJsonNode ",
      "methods_under_test": {
        "=1": {
          "ValueNode._at(JsonPointer)": [
            1,
            1,
            1
          ],
          "ValueNode.deepCopy()": [
            1,
            1,
            1
          ],
          "ValueNode.serializeWithType(JsonGenerator, SerializerProvider, TypeSerializer)": [
            1,
            1,
            1
          ],
          "ValueNode.toString()": [
            1,
            1,
            1
          ],
          "ValueNode.get(int)": [
            1,
            1,
            1
          ],
          "ValueNode.path(int)": [
            1,
            1,
            1
          ],
          "ValueNode.has(int)": [
            1,
            1,
            1
          ],
          "ValueNode.hasNonNull(int)": [
            1,
            1,
            1
          ],
          "ValueNode.get(String)": [
            1,
            1,
            1
          ],
          "ValueNode.path(String)": [
            1,
            1,
            1
          ],
          "ValueNode.has(String)": [
            1,
            1,
            1
          ],
          "ValueNode.hasNonNull(String)": [
            1,
            1,
            1
          ],
          "ValueNode.findValue(String)": [
            1,
            1,
            1
          ],
          "ValueNode.findParent(String)": [
            1,
            1,
            1
          ],
          "ValueNode.findValues(String, List<JsonNode>)": [
            1,
            1,
            1
          ],
          "ValueNode.findValuesAsText(String, List<String>)": [
            1,
            1,
            1
          ],
          "ValueNode.findParents(String, List<JsonNode>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonFormatVisitorWrapper",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.java",
      "class_declaration": "public static class Base implements JsonFormatVisitorWrapper ",
      "methods_under_test": {
        "=1": {
          "Base.expectObjectFormat(JavaType)": [
            1,
            1,
            1
          ],
          "Base.expectArrayFormat(JavaType)": [
            1,
            1,
            1
          ],
          "Base.expectStringFormat(JavaType)": [
            1,
            1,
            1
          ],
          "Base.expectNumberFormat(JavaType)": [
            1,
            1,
            1
          ],
          "Base.expectIntegerFormat(JavaType)": [
            1,
            1,
            1
          ],
          "Base.expectBooleanFormat(JavaType)": [
            1,
            1,
            1
          ],
          "Base.expectNullFormat(JavaType)": [
            1,
            1,
            1
          ],
          "Base.expectAnyFormat(JavaType)": [
            1,
            1,
            1
          ],
          "Base.expectMapFormat(JavaType)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonArrayFormatVisitor",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.java",
      "class_declaration": "public static class Base implements JsonArrayFormatVisitor ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TypeDeserializerBase",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
      "class_declaration": "public abstract class TypeDeserializerBase extends TypeDeserializer implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "TypeDeserializerBase.baseTypeName()": [
            1,
            1,
            1
          ],
          "TypeDeserializerBase.baseType()": [
            1,
            1,
            1
          ],
          "TypeDeserializerBase.toString()": [
            1,
            1,
            1
          ],
          "TypeDeserializerBase._deserializeWithNativeTypeId(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ],
          "TypeDeserializerBase._handleMissingTypeId(DeserializationContext, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TypeDeserializerBase._findDeserializer(DeserializationContext, String)": [
            7,
            7,
            7
          ],
          "TypeDeserializerBase._findDefaultImplDeserializer(DeserializationContext)": [
            6,
            6,
            6
          ],
          "TypeDeserializerBase._deserializeWithNativeTypeId(JsonParser, DeserializationContext, Object)": [
            3,
            3,
            3
          ],
          "TypeDeserializerBase._handleUnknownTypeId(DeserializationContext, String)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TypeWrappedDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java",
      "class_declaration": "public final class TypeWrappedDeserializer extends JsonDeserializer<Object> implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TypeWrappedSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/TypeWrappedSerializer.java",
      "class_declaration": "public final class TypeWrappedSerializer extends JsonSerializer<Object> implements ContextualSerializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TokenBufferReadContext",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/TokenBufferReadContext.java",
      "class_declaration": "public class TokenBufferReadContext extends JsonStreamContext ",
      "methods_under_test": {
        "=1": {
          "TokenBufferReadContext.createChildArrayContext()": [
            1,
            1,
            1
          ],
          "TokenBufferReadContext.createChildObjectContext()": [
            1,
            1,
            1
          ],
          "TokenBufferReadContext.hasCurrentName()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TokenBufferReadContext.createRootContext(JsonStreamContext)": [
            2,
            2,
            2
          ],
          "TokenBufferReadContext.parentOrCopy()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MappingIterator",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java",
      "class_declaration": "public class MappingIterator <T> implements Iterator<T>, Closeable ",
      "methods_under_test": {
        "=1": {
          "MappingIterator.emptyIterator()": [
            1,
            1,
            1
          ],
          "MappingIterator.remove()": [
            1,
            1,
            1
          ],
          "MappingIterator.readAll()": [
            1,
            1,
            1
          ],
          "MappingIterator._throwNoSuchElement()": [
            1,
            1,
            1
          ],
          "MappingIterator._handleMappingException(JsonMappingException)": [
            1,
            1,
            1
          ],
          "MappingIterator._handleIOException(IOException)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MappingIterator.hasNext()": [
            4,
            4,
            4
          ],
          "MappingIterator.next()": [
            2,
            2,
            2
          ],
          "MappingIterator.close()": [
            3,
            3,
            3
          ],
          "MappingIterator.hasNextValue()": [
            8,
            8,
            8
          ],
          "MappingIterator.nextValue()": [
            9,
            9,
            9
          ],
          "MappingIterator.readAll(L)": [
            2,
            2,
            2
          ],
          "MappingIterator.readAll(C)": [
            2,
            2,
            2
          ],
          "MappingIterator._resync()": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BuilderBasedDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java",
      "class_declaration": "public class BuilderBasedDeserializer extends BeanDeserializerBase ",
      "methods_under_test": {
        "=1": {
          "BuilderBasedDeserializer.unwrappingDeserializer(NameTransformer)": [
            1,
            1,
            1
          ],
          "BuilderBasedDeserializer.withObjectIdReader(ObjectIdReader)": [
            1,
            1,
            1
          ],
          "BuilderBasedDeserializer.withIgnorableProperties(Set<String>)": [
            1,
            1,
            1
          ],
          "BuilderBasedDeserializer.withBeanProperties(BeanPropertyMap)": [
            1,
            1,
            1
          ],
          "BuilderBasedDeserializer.asArrayDeserializer()": [
            1,
            1,
            1
          ],
          "BuilderBasedDeserializer.supportsUpdate(DeserializationConfig)": [
            1,
            1,
            1
          ],
          "BuilderBasedDeserializer.deserializeUsingPropertyBasedWithExternalTypeId(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BuilderBasedDeserializer.finishBuild(DeserializationContext, Object)": [
            4,
            4,
            4
          ],
          "BuilderBasedDeserializer.deserialize(JsonParser, DeserializationContext, Object)": [
            2,
            2,
            2
          ],
          "BuilderBasedDeserializer.deserializeFromObject(JsonParser, DeserializationContext)": [
            10,
            10,
            10
          ],
          "BuilderBasedDeserializer.deserializeWithView(JsonParser, DeserializationContext, Object, Class<?>)": [
            5,
            5,
            5
          ],
          "BuilderBasedDeserializer.deserializeWithUnwrapped(JsonParser, DeserializationContext, Object, TokenBuffer)": [
            7,
            7,
            7
          ],
          "BuilderBasedDeserializer.deserializeWithExternalTypeId(JsonParser, DeserializationContext)": [
            2,
            2,
            2
          ],
          "BuilderBasedDeserializer.deserializeWithExternalTypeId(JsonParser, DeserializationContext, Object)": [
            10,
            10,
            10
          ]
        },
        "11-20": {
          "BuilderBasedDeserializer.deserialize(JsonParser, DeserializationContext)": [
            12,
            12,
            12
          ],
          "BuilderBasedDeserializer._deserializeUsingPropertyBased(final, JsonParser, final, DeserializationContext)": [
            16,
            16,
            16
          ],
          "BuilderBasedDeserializer._deserialize(JsonParser, DeserializationContext, Object)": [
            11,
            11,
            11
          ],
          "BuilderBasedDeserializer.deserializeWithUnwrapped(JsonParser, DeserializationContext)": [
            11,
            11,
            11
          ],
          "BuilderBasedDeserializer.deserializeUsingPropertyBasedWithUnwrapped(JsonParser, DeserializationContext)": [
            12,
            12,
            12
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/annotation/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MapSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java",
      "class_declaration": "@JacksonStdImpl\npublic class MapSerializer extends ContainerSerializer<Map<?,?>> implements ContextualSerializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NamedType",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/NamedType.java",
      "class_declaration": "public final class NamedType implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "NamedType.hasName()": [
            1,
            1,
            1
          ],
          "NamedType.hashCode()": [
            1,
            1,
            1
          ],
          "NamedType.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NamedType.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ArrayType",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/ArrayType.java",
      "class_declaration": "public final class ArrayType extends TypeBase ",
      "methods_under_test": {
        "=1": {
          "ArrayType.construct(JavaType, TypeBindings)": [
            1,
            1,
            1
          ],
          "ArrayType.construct(JavaType, TypeBindings, Object, Object)": [
            1,
            1,
            1
          ],
          "ArrayType.withContentType(JavaType)": [
            1,
            1,
            1
          ],
          "ArrayType._narrow(Class<?>)": [
            1,
            1,
            1
          ],
          "ArrayType.refine(Class<?>, TypeBindings, JavaType, JavaType[])": [
            1,
            1,
            1
          ],
          "ArrayType.hasGenericTypes()": [
            1,
            1,
            1
          ],
          "ArrayType.hasHandlers()": [
            1,
            1,
            1
          ],
          "ArrayType.getGenericSignature(StringBuilder)": [
            1,
            1,
            1
          ],
          "ArrayType.getErasedSignature(StringBuilder)": [
            1,
            1,
            1
          ],
          "ArrayType.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArrayType.withTypeHandler(Object)": [
            2,
            2,
            2
          ],
          "ArrayType.withContentTypeHandler(Object)": [
            2,
            2,
            2
          ],
          "ArrayType.withValueHandler(Object)": [
            2,
            2,
            2
          ],
          "ArrayType.withContentValueHandler(Object)": [
            2,
            2,
            2
          ],
          "ArrayType.withStaticTyping()": [
            2,
            2,
            2
          ],
          "ArrayType.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "VirtualAnnotatedMember",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/VirtualAnnotatedMember.java",
      "class_declaration": "public class VirtualAnnotatedMember extends AnnotatedMember implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "VirtualAnnotatedMember.withAnnotations(AnnotationMap)": [
            1,
            1,
            1
          ],
          "VirtualAnnotatedMember.setValue(Object, Object)": [
            1,
            1,
            1
          ],
          "VirtualAnnotatedMember.getValue(Object)": [
            1,
            1,
            1
          ],
          "VirtualAnnotatedMember.hashCode()": [
            1,
            1,
            1
          ],
          "VirtualAnnotatedMember.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "VirtualAnnotatedMember.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AsExternalTypeSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java",
      "class_declaration": "public class AsExternalTypeSerializer extends TypeSerializerBase ",
      "methods_under_test": {
        "=1": {
          "AsExternalTypeSerializer.forProperty(BeanProperty)": [
            1,
            1,
            1
          ],
          "AsExternalTypeSerializer._writeObjectPrefix(Object, JsonGenerator)": [
            1,
            1,
            1
          ],
          "AsExternalTypeSerializer._writeArrayPrefix(Object, JsonGenerator)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AsExternalTypeSerializer._writeScalarSuffix(Object, JsonGenerator, String)": [
            2,
            2,
            2
          ],
          "AsExternalTypeSerializer._writeObjectSuffix(Object, JsonGenerator, String)": [
            2,
            2,
            2
          ],
          "AsExternalTypeSerializer._writeArraySuffix(Object, JsonGenerator, String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "RuntimeJsonMappingException",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/RuntimeJsonMappingException.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class RuntimeJsonMappingException extends RuntimeException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FieldProperty",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java",
      "class_declaration": "public final class FieldProperty extends SettableBeanProperty ",
      "methods_under_test": {
        "=1": {
          "FieldProperty.withName(PropertyName)": [
            1,
            1,
            1
          ],
          "FieldProperty.withNullProvider(NullValueProvider)": [
            1,
            1,
            1
          ],
          "FieldProperty.fixAccess(DeserializationConfig)": [
            1,
            1,
            1
          ],
          "FieldProperty.getAnnotation(Class<A>)": [
            1,
            1,
            1
          ],
          "FieldProperty.readResolve()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FieldProperty.withValueDeserializer(JsonDeserializer<?>)": [
            2,
            2,
            2
          ],
          "FieldProperty.deserializeAndSet(JsonParser, DeserializationContext, Object)": [
            8,
            8,
            8
          ],
          "FieldProperty.deserializeSetAndReturn(JsonParser, DeserializationContext, Object)": [
            7,
            7,
            7
          ],
          "FieldProperty.set(Object, Object)": [
            3,
            3,
            3
          ],
          "FieldProperty.setAndReturn(Object, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MapEntrySerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/MapEntrySerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\n@JacksonStdImpl\npublic class MapEntrySerializer extends ContainerSerializer<Map.Entry<?,?>> implements ContextualSerializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BeanSerializerBuilder",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java",
      "class_declaration": "public class BeanSerializerBuilder ",
      "methods_under_test": {
        "=1": {
          "BeanSerializerBuilder.hasProperties()": [
            1,
            1,
            1
          ],
          "BeanSerializerBuilder.createDummy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BeanSerializerBuilder.setFilteredProperties(BeanPropertyWriter[])": [
            3,
            3,
            3
          ],
          "BeanSerializerBuilder.setTypeId(AnnotatedMember)": [
            2,
            2,
            2
          ],
          "BeanSerializerBuilder.build()": [
            10,
            10,
            10
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SimpleMixInResolver",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
      "class_declaration": "public class SimpleMixInResolver implements ClassIntrospector.MixInResolver,\n        java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "SimpleMixInResolver.withOverrides(ClassIntrospector.MixInResolver)": [
            1,
            1,
            1
          ],
          "SimpleMixInResolver.withoutLocalDefinitions()": [
            1,
            1,
            1
          ],
          "SimpleMixInResolver.copy()": [
            1,
            1,
            1
          ],
          "SimpleMixInResolver.localSize()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SimpleMixInResolver.setLocalDefinitions(Map<Class<?>, Class<?>>)": [
            4,
            4,
            4
          ],
          "SimpleMixInResolver.addLocalDefinition(Class<?>, Class<?>)": [
            2,
            2,
            2
          ],
          "SimpleMixInResolver.findMixInClassFor(Class<?>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BigIntegerNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/BigIntegerNode.java",
      "class_declaration": "public class BigIntegerNode extends NumericNode ",
      "methods_under_test": {
        "=1": {
          "BigIntegerNode.valueOf(BigInteger)": [
            1,
            1,
            1
          ],
          "BigIntegerNode.asToken()": [
            1,
            1,
            1
          ],
          "BigIntegerNode.numberType()": [
            1,
            1,
            1
          ],
          "BigIntegerNode.canConvertToInt()": [
            1,
            1,
            1
          ],
          "BigIntegerNode.canConvertToLong()": [
            1,
            1,
            1
          ],
          "BigIntegerNode.numberValue()": [
            1,
            1,
            1
          ],
          "BigIntegerNode.shortValue()": [
            1,
            1,
            1
          ],
          "BigIntegerNode.intValue()": [
            1,
            1,
            1
          ],
          "BigIntegerNode.longValue()": [
            1,
            1,
            1
          ],
          "BigIntegerNode.bigIntegerValue()": [
            1,
            1,
            1
          ],
          "BigIntegerNode.floatValue()": [
            1,
            1,
            1
          ],
          "BigIntegerNode.doubleValue()": [
            1,
            1,
            1
          ],
          "BigIntegerNode.decimalValue()": [
            1,
            1,
            1
          ],
          "BigIntegerNode.asText()": [
            1,
            1,
            1
          ],
          "BigIntegerNode.asBoolean(boolean)": [
            1,
            1,
            1
          ],
          "BigIntegerNode.serialize(JsonGenerator, SerializerProvider)": [
            1,
            1,
            1
          ],
          "BigIntegerNode.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BigIntegerNode.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AnnotatedClassResolver",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
      "class_declaration": "public class AnnotatedClassResolver ",
      "methods_under_test": {
        "=1": {
          "AnnotatedClassResolver.resolveWithoutSuperTypes(MapperConfig<?>, Class<?>)": [
            1,
            1,
            1
          ],
          "AnnotatedClassResolver.createPrimordial(Class<?>)": [
            1,
            1,
            1
          ],
          "AnnotatedClassResolver.createArrayType(MapperConfig<?>, Class<?>)": [
            1,
            1,
            1
          ],
          "AnnotatedClassResolver.resolveFully()": [
            1,
            1,
            1
          ],
          "AnnotatedClassResolver.resolveWithoutSuperTypes()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AnnotatedClassResolver.resolve(MapperConfig<?>, JavaType, MixInResolver)": [
            2,
            2,
            2
          ],
          "AnnotatedClassResolver.resolveWithoutSuperTypes(MapperConfig<?>, JavaType, MixInResolver)": [
            2,
            2,
            2
          ],
          "AnnotatedClassResolver.resolveWithoutSuperTypes(MapperConfig<?>, Class<?>, MixInResolver)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BeanPropertyWriter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
      "class_declaration": "@JacksonStdImpl\npublic class BeanPropertyWriter extends PropertyWriter implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "BeanPropertyWriter._new(PropertyName)": [
            1,
            1,
            1
          ],
          "BeanPropertyWriter.assignTypeSerializer(TypeSerializer)": [
            1,
            1,
            1
          ],
          "BeanPropertyWriter.unwrappingWriter(NameTransformer)": [
            1,
            1,
            1
          ],
          "BeanPropertyWriter.fixAccess(SerializationConfig)": [
            1,
            1,
            1
          ],
          "BeanPropertyWriter.getAnnotation(Class<A>)": [
            1,
            1,
            1
          ],
          "BeanPropertyWriter.getContextAnnotation(Class<A>)": [
            1,
            1,
            1
          ],
          "BeanPropertyWriter._depositSchemaProperty(ObjectNode, JsonNode)": [
            1,
            1,
            1
          ],
          "BeanPropertyWriter.getInternalSetting(Object)": [
            1,
            1,
            1
          ],
          "BeanPropertyWriter.hasSerializer()": [
            1,
            1,
            1
          ],
          "BeanPropertyWriter.hasNullSerializer()": [
            1,
            1,
            1
          ],
          "BeanPropertyWriter.willSuppressNulls()": [
            1,
            1,
            1
          ],
          "BeanPropertyWriter.get(Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BeanPropertyWriter.rename(NameTransformer)": [
            2,
            2,
            2
          ],
          "BeanPropertyWriter.assignSerializer(JsonSerializer<Object>)": [
            2,
            2,
            2
          ],
          "BeanPropertyWriter.assignNullSerializer(JsonSerializer<Object>)": [
            2,
            2,
            2
          ],
          "BeanPropertyWriter.readResolve()": [
            4,
            4,
            4
          ],
          "BeanPropertyWriter.setInternalSetting(Object, Object)": [
            2,
            2,
            2
          ],
          "BeanPropertyWriter.removeInternalSetting(Object)": [
            3,
            3,
            3
          ],
          "BeanPropertyWriter.wouldConflictWithName(PropertyName)": [
            2,
            2,
            2
          ],
          "BeanPropertyWriter.getPropertyType()": [
            3,
            3,
            3
          ],
          "BeanPropertyWriter.getGenericPropertyType()": [
            3,
            3,
            3
          ],
          "BeanPropertyWriter.serializeAsOmittedField(Object, JsonGenerator, SerializerProvider)": [
            2,
            2,
            2
          ],
          "BeanPropertyWriter.serializeAsPlaceholder(Object, JsonGenerator, SerializerProvider)": [
            3,
            3,
            3
          ],
          "BeanPropertyWriter.depositSchemaProperty(JsonObjectFormatVisitor, SerializerProvider)": [
            3,
            3,
            3
          ],
          "BeanPropertyWriter.depositSchemaProperty(ObjectNode, SerializerProvider)": [
            3,
            3,
            3
          ],
          "BeanPropertyWriter._findAndAddDynamic(PropertySerializerMap, Class<?>, SerializerProvider)": [
            3,
            3,
            3
          ],
          "BeanPropertyWriter._handleSelfReference(Object, JsonGenerator, SerializerProvider, JsonSerializer<?>)": [
            3,
            3,
            3
          ],
          "BeanPropertyWriter.toString()": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "BeanPropertyWriter.serializeAsField(Object, JsonGenerator, SerializerProvider)": [
            13,
            13,
            13
          ],
          "BeanPropertyWriter.serializeAsElement(Object, JsonGenerator, SerializerProvider)": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CoreXMLSerializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java",
      "class_declaration": "public class CoreXMLSerializers extends Serializers.Base ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AccessPattern",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/AccessPattern.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SerializationFeature",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java",
      "error": "local variable 'class_name' referenced before assignment"
    },
    {
      "src_name": "AsArrayTypeSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java",
      "class_declaration": "public class AsArrayTypeSerializer extends TypeSerializerBase ",
      "methods_under_test": {
        "=1": {
          "AsArrayTypeSerializer.forProperty(BeanProperty)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SimpleDeserializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java",
      "class_declaration": "public class SimpleDeserializers implements Deserializers, java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "SimpleDeserializers.addDeserializers(Map<Class<?>,JsonDeserializer<?>>)": [
            1,
            1,
            1
          ],
          "SimpleDeserializers.findArrayDeserializer(ArrayType, DeserializationConfig, BeanDescription, TypeDeserializer, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "SimpleDeserializers.findBeanDeserializer(JavaType, DeserializationConfig, BeanDescription)": [
            1,
            1,
            1
          ],
          "SimpleDeserializers.findCollectionDeserializer(CollectionType, DeserializationConfig, BeanDescription, TypeDeserializer, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "SimpleDeserializers.findCollectionLikeDeserializer(CollectionLikeType, DeserializationConfig, BeanDescription, TypeDeserializer, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "SimpleDeserializers.findReferenceDeserializer(ReferenceType, DeserializationConfig, BeanDescription, TypeDeserializer, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "SimpleDeserializers.findMapDeserializer(MapType, DeserializationConfig, BeanDescription, KeyDeserializer, TypeDeserializer, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "SimpleDeserializers.findMapLikeDeserializer(MapLikeType, DeserializationConfig, BeanDescription, KeyDeserializer, TypeDeserializer, JsonDeserializer<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SimpleDeserializers.addDeserializer(Class<T>, JsonDeserializer<? extends T>)": [
            3,
            3,
            3
          ],
          "SimpleDeserializers.findEnumDeserializer(Class<?>, DeserializationConfig, BeanDescription)": [
            4,
            4,
            4
          ],
          "SimpleDeserializers.findTreeNodeDeserializer(Class<? extends JsonNode>, DeserializationConfig, BeanDescription)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "InetSocketAddressSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/InetSocketAddressSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class InetSocketAddressSerializer extends StdScalarSerializer<InetSocketAddress> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BeanSerializerFactory",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "class_declaration": "public class BeanSerializerFactory extends BasicSerializerFactory implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "BeanSerializerFactory.customSerializers()": [
            1,
            1,
            1
          ],
          "BeanSerializerFactory.constructFilteredBeanWriter(BeanPropertyWriter, Class<?>[])": [
            1,
            1,
            1
          ],
          "BeanSerializerFactory.constructPropertyBuilder(SerializationConfig, BeanDescription)": [
            1,
            1,
            1
          ],
          "BeanSerializerFactory.constructBeanSerializerBuilder(BeanDescription)": [
            1,
            1,
            1
          ],
          "BeanSerializerFactory.isPotentialBeanType(Class<?>)": [
            1,
            1,
            1
          ],
          "BeanSerializerFactory.removeIgnorableTypes(SerializationConfig, BeanDescription, List<BeanPropertyDefinition>)": [
            1,
            1,
            1
          ],
          "BeanSerializerFactory.removeSetterlessGetters(SerializationConfig, BeanDescription, List<BeanPropertyDefinition>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BeanSerializerFactory.withConfig(SerializerFactoryConfig)": [
            3,
            3,
            3
          ],
          "BeanSerializerFactory.createSerializer(SerializerProvider, JavaType)": [
            9,
            9,
            9
          ],
          "BeanSerializerFactory.findBeanSerializer(SerializerProvider, JavaType, BeanDescription)": [
            3,
            3,
            3
          ],
          "BeanSerializerFactory.findPropertyTypeSerializer(JavaType, SerializationConfig, AnnotatedMember)": [
            2,
            2,
            2
          ],
          "BeanSerializerFactory.findPropertyContentTypeSerializer(JavaType, SerializationConfig, AnnotatedMember)": [
            2,
            2,
            2
          ],
          "BeanSerializerFactory.constructObjectIdHandler(SerializerProvider, BeanDescription, List<BeanPropertyWriter>)": [
            7,
            7,
            7
          ],
          "BeanSerializerFactory.findBeanProperties(SerializerProvider, BeanDescription, BeanSerializerBuilder)": [
            8,
            8,
            8
          ],
          "BeanSerializerFactory.filterBeanProperties(SerializationConfig, BeanDescription, List<BeanPropertyWriter>)": [
            5,
            5,
            5
          ],
          "BeanSerializerFactory.processViews(SerializationConfig, BeanSerializerBuilder)": [
            5,
            5,
            5
          ],
          "BeanSerializerFactory.removeOverlappingTypeIds(SerializerProvider, BeanDescription, BeanSerializerBuilder, List<BeanPropertyWriter>)": [
            5,
            5,
            5
          ],
          "BeanSerializerFactory._constructWriter(SerializerProvider, BeanPropertyDefinition, PropertyBuilder, boolean, AnnotatedMember)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "BeanSerializerFactory._createSerializer2(SerializerProvider, JavaType, BeanDescription, boolean)": [
            16,
            16,
            16
          ],
          "BeanSerializerFactory.constructBeanSerializer(SerializerProvider, BeanDescription)": [
            14,
            14,
            14
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CalendarSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
      "class_declaration": "@JacksonStdImpl\n@SuppressWarnings(\"serial\")\npublic class CalendarSerializer extends DateTimeSerializerBase<Calendar> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BeanSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java",
      "class_declaration": "public class BeanSerializer extends BeanSerializerBase ",
      "methods_under_test": {
        "=1": {
          "BeanSerializer.createDummy(JavaType)": [
            1,
            1,
            1
          ],
          "BeanSerializer.unwrappingSerializer(NameTransformer)": [
            1,
            1,
            1
          ],
          "BeanSerializer.withObjectIdWriter(ObjectIdWriter)": [
            1,
            1,
            1
          ],
          "BeanSerializer.withFilterId(Object)": [
            1,
            1,
            1
          ],
          "BeanSerializer.withIgnorals(Set<String>)": [
            1,
            1,
            1
          ],
          "BeanSerializer.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BeanSerializer.asArraySerializer()": [
            2,
            2,
            2
          ],
          "BeanSerializer.serialize(Object, JsonGenerator, SerializerProvider)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MapperConfigBase",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class MapperConfigBase <CFG extends ConfigFeature,\n    T extends MapperConfigBase<CFG,T>> extends MapperConfig<T> implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "InetAddressSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class InetAddressSerializer extends StdScalarSerializer<InetAddress> implements ContextualSerializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ext/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AtomicBooleanDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicBooleanDeserializer.java",
      "class_declaration": "public class AtomicBooleanDeserializer extends StdScalarDeserializer<AtomicBoolean> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "LRUMap",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/LRUMap.java",
      "class_declaration": "public class LRUMap <K,V> implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "LRUMap.get(Object)": [
            1,
            1,
            1
          ],
          "LRUMap.clear()": [
            1,
            1,
            1
          ],
          "LRUMap.size()": [
            1,
            1,
            1
          ],
          "LRUMap.readResolve()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LRUMap.put(K, V)": [
            4,
            4,
            4
          ],
          "LRUMap.putIfAbsent(K, V)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StringArraySerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java",
      "class_declaration": "@JacksonStdImpl\n@SuppressWarnings(\"serial\")\npublic class StringArraySerializer extends ArraySerializerBase<String[]> implements ContextualSerializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FromStringDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class FromStringDeserializer <T> extends StdScalarDeserializer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MemberKey",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/MemberKey.java",
      "class_declaration": "public final class MemberKey ",
      "methods_under_test": {
        "=1": {
          "MemberKey.argCount()": [
            1,
            1,
            1
          ],
          "MemberKey.toString()": [
            1,
            1,
            1
          ],
          "MemberKey.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MemberKey.equals(Object)": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StdTypeResolverBuilder",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
      "class_declaration": "public class StdTypeResolverBuilder implements TypeResolverBuilder<StdTypeResolverBuilder> ",
      "methods_under_test": {
        "=1": {
          "StdTypeResolverBuilder.noTypeInfoBuilder()": [
            1,
            1,
            1
          ],
          "StdTypeResolverBuilder.defaultImpl(Class<?>)": [
            1,
            1,
            1
          ],
          "StdTypeResolverBuilder.typeIdVisibility(boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StdTypeResolverBuilder.init(JsonTypeInfo.Id, TypeIdResolver)": [
            2,
            2,
            2
          ],
          "StdTypeResolverBuilder.buildTypeSerializer(SerializationConfig, JavaType, Collection<NamedType>)": [
            8,
            8,
            8
          ],
          "StdTypeResolverBuilder.buildTypeDeserializer(DeserializationConfig, JavaType, Collection<NamedType>)": [
            8,
            8,
            8
          ],
          "StdTypeResolverBuilder.defineDefaultImpl(DeserializationConfig, JavaType)": [
            6,
            6,
            6
          ],
          "StdTypeResolverBuilder.inclusion(JsonTypeInfo.As)": [
            2,
            2,
            2
          ],
          "StdTypeResolverBuilder.typeProperty(String)": [
            2,
            2,
            2
          ],
          "StdTypeResolverBuilder.idResolver(MapperConfig<?>, JavaType, Collection<NamedType>, boolean, boolean)": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TypeSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeSerializer.java",
      "class_declaration": "public abstract class TypeSerializer ",
      "methods_under_test": {
        "=1": {
          "TypeSerializer.typeId(Object, JsonToken, Object)": [
            1,
            1,
            1
          ],
          "TypeSerializer.typeId(Object, Class<?>, JsonToken)": [
            1,
            1,
            1
          ],
          "TypeSerializer.writeTypePrefixForScalar(Object, JsonGenerator)": [
            1,
            1,
            1
          ],
          "TypeSerializer.writeTypePrefixForObject(Object, JsonGenerator)": [
            1,
            1,
            1
          ],
          "TypeSerializer.writeTypePrefixForArray(Object, JsonGenerator)": [
            1,
            1,
            1
          ],
          "TypeSerializer.writeTypeSuffixForScalar(Object, JsonGenerator)": [
            1,
            1,
            1
          ],
          "TypeSerializer.writeTypeSuffixForObject(Object, JsonGenerator)": [
            1,
            1,
            1
          ],
          "TypeSerializer.writeTypeSuffixForArray(Object, JsonGenerator)": [
            1,
            1,
            1
          ],
          "TypeSerializer.writeTypePrefixForScalar(Object, JsonGenerator, Class<?>)": [
            1,
            1,
            1
          ],
          "TypeSerializer.writeTypePrefixForObject(Object, JsonGenerator, Class<?>)": [
            1,
            1,
            1
          ],
          "TypeSerializer.writeTypePrefixForArray(Object, JsonGenerator, Class<?>)": [
            1,
            1,
            1
          ],
          "TypeSerializer.writeCustomTypePrefixForScalar(Object, JsonGenerator, String)": [
            1,
            1,
            1
          ],
          "TypeSerializer.writeCustomTypePrefixForObject(Object, JsonGenerator, String)": [
            1,
            1,
            1
          ],
          "TypeSerializer.writeCustomTypePrefixForArray(Object, JsonGenerator, String)": [
            1,
            1,
            1
          ],
          "TypeSerializer.writeCustomTypeSuffixForScalar(Object, JsonGenerator, String)": [
            1,
            1,
            1
          ],
          "TypeSerializer.writeCustomTypeSuffixForObject(Object, JsonGenerator, String)": [
            1,
            1,
            1
          ],
          "TypeSerializer.writeCustomTypeSuffixForArray(Object, JsonGenerator, String)": [
            1,
            1,
            1
          ],
          "TypeSerializer._writeLegacySuffix(JsonGenerator, WritableTypeId)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TypeSerializer.typeId(Object, JsonToken)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TokenBufferSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java",
      "class_declaration": "@JacksonStdImpl\n@SuppressWarnings(\"serial\")\npublic class TokenBufferSerializer extends StdSerializer<TokenBuffer> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BeanPropertyDefinition",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
      "class_declaration": "public abstract class BeanPropertyDefinition implements Named ",
      "methods_under_test": {
        "=1": {
          "BeanPropertyDefinition.hasName(PropertyName)": [
            1,
            1,
            1
          ],
          "BeanPropertyDefinition.couldDeserialize()": [
            1,
            1,
            1
          ],
          "BeanPropertyDefinition.couldSerialize()": [
            1,
            1,
            1
          ],
          "BeanPropertyDefinition.findViews()": [
            1,
            1,
            1
          ],
          "BeanPropertyDefinition.findReferenceType()": [
            1,
            1,
            1
          ],
          "BeanPropertyDefinition.findReferenceName()": [
            1,
            1,
            1
          ],
          "BeanPropertyDefinition.findObjectIdInfo()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BeanPropertyDefinition.getAccessor()": [
            2,
            2,
            2
          ],
          "BeanPropertyDefinition.getMutator()": [
            3,
            3,
            3
          ],
          "BeanPropertyDefinition.getNonConstructorMutator()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StdArraySerializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class StdArraySerializers ",
      "methods_under_test": {
        "=1": {
          "StdArraySerializers.findStandardImpl(Class<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonTypeResolver",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/annotation/JsonTypeResolver.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ClassStack",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/ClassStack.java",
      "class_declaration": "public final class ClassStack ",
      "methods_under_test": {
        "=1": {
          "ClassStack.child(Class<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ClassStack.addSelfReference(ResolvedRecursiveType)": [
            2,
            2,
            2
          ],
          "ClassStack.resolveSelfReferences(JavaType)": [
            2,
            2,
            2
          ],
          "ClassStack.find(Class<?>)": [
            4,
            4,
            4
          ],
          "ClassStack.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DeserializerFactoryConfig",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
      "class_declaration": "public class DeserializerFactoryConfig implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "DeserializerFactoryConfig.hasDeserializers()": [
            1,
            1,
            1
          ],
          "DeserializerFactoryConfig.hasKeyDeserializers()": [
            1,
            1,
            1
          ],
          "DeserializerFactoryConfig.hasDeserializerModifiers()": [
            1,
            1,
            1
          ],
          "DeserializerFactoryConfig.hasAbstractTypeResolvers()": [
            1,
            1,
            1
          ],
          "DeserializerFactoryConfig.hasValueInstantiators()": [
            1,
            1,
            1
          ],
          "DeserializerFactoryConfig.deserializers()": [
            1,
            1,
            1
          ],
          "DeserializerFactoryConfig.keyDeserializers()": [
            1,
            1,
            1
          ],
          "DeserializerFactoryConfig.deserializerModifiers()": [
            1,
            1,
            1
          ],
          "DeserializerFactoryConfig.abstractTypeResolvers()": [
            1,
            1,
            1
          ],
          "DeserializerFactoryConfig.valueInstantiators()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DeserializerFactoryConfig.withAdditionalDeserializers(Deserializers)": [
            2,
            2,
            2
          ],
          "DeserializerFactoryConfig.withAdditionalKeyDeserializers(KeyDeserializers)": [
            2,
            2,
            2
          ],
          "DeserializerFactoryConfig.withDeserializerModifier(BeanDeserializerModifier)": [
            2,
            2,
            2
          ],
          "DeserializerFactoryConfig.withAbstractTypeResolver(AbstractTypeResolver)": [
            2,
            2,
            2
          ],
          "DeserializerFactoryConfig.withValueInstantiators(ValueInstantiators)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JdkDeserializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
      "class_declaration": "public class JdkDeserializers ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "JdkDeserializers.find(Class<?>, String)": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NumberSerializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class NumberSerializers ",
      "methods_under_test": {
        "=1": {
          "NumberSerializers.addAll(Map<String, JsonSerializer<?>>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JavaUtilCollectionsDeserializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java",
      "class_declaration": "public abstract class JavaUtilCollectionsDeserializers ",
      "methods_under_test": {
        "=1": {
          "JavaUtilCollectionsDeserializers.converter(int, JavaType, Class<?>)": [
            1,
            1,
            1
          ],
          "JavaUtilCollectionsConverter.getInputType(TypeFactory)": [
            1,
            1,
            1
          ],
          "JavaUtilCollectionsConverter.getOutputType(TypeFactory)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JavaUtilCollectionsDeserializers.findForCollection(DeserializationContext, JavaType)": [
            6,
            6,
            6
          ],
          "JavaUtilCollectionsDeserializers.findForMap(DeserializationContext, JavaType)": [
            3,
            3,
            3
          ],
          "JavaUtilCollectionsConverter.convert(Object)": [
            10,
            10,
            10
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BeanPropertyFilter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyFilter.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BinaryNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/BinaryNode.java",
      "class_declaration": "public class BinaryNode extends ValueNode ",
      "methods_under_test": {
        "=1": {
          "BinaryNode.asToken()": [
            1,
            1,
            1
          ],
          "BinaryNode.binaryValue()": [
            1,
            1,
            1
          ],
          "BinaryNode.asText()": [
            1,
            1,
            1
          ],
          "BinaryNode.serialize(JsonGenerator, SerializerProvider)": [
            1,
            1,
            1
          ],
          "BinaryNode.hashCode()": [
            1,
            1,
            1
          ],
          "BinaryNode.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BinaryNode.valueOf(byte[])": [
            3,
            3,
            3
          ],
          "BinaryNode.valueOf(byte[], int, int)": [
            3,
            3,
            3
          ],
          "BinaryNode.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AnnotatedCreatorCollector",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
      "class_declaration": "final class AnnotatedCreatorCollector extends CollectorBase ",
      "methods_under_test": {
        "=1": {
          "AnnotatedCreatorCollector.collectCreators(AnnotationIntrospector, TypeResolutionContext, JavaType, Class<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AnnotatedCreatorCollector.collect(JavaType, Class<?>)": [
            8,
            8,
            8
          ],
          "AnnotatedCreatorCollector.constructDefaultConstructor(ClassUtil.Ctor, ClassUtil.Ctor)": [
            2,
            2,
            2
          ],
          "AnnotatedCreatorCollector.constructNonDefaultConstructor(ClassUtil.Ctor, ClassUtil.Ctor)": [
            8,
            8,
            8
          ],
          "AnnotatedCreatorCollector.constructFactoryCreator(Method, Method)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java",
      "class_declaration": "public abstract class JsonSerializer <T> implements JsonFormatVisitable ",
      "methods_under_test": {
        "=1": {
          "JsonSerializer.unwrappingSerializer(NameTransformer)": [
            1,
            1,
            1
          ],
          "JsonSerializer.replaceDelegatee(JsonSerializer<?>)": [
            1,
            1,
            1
          ],
          "JsonSerializer.withFilterId(Object)": [
            1,
            1,
            1
          ],
          "JsonSerializer.handledType()": [
            1,
            1,
            1
          ],
          "JsonSerializer.isEmpty(T)": [
            1,
            1,
            1
          ],
          "JsonSerializer.isEmpty(SerializerProvider, T)": [
            1,
            1,
            1
          ],
          "JsonSerializer.usesObjectId()": [
            1,
            1,
            1
          ],
          "JsonSerializer.properties()": [
            1,
            1,
            1
          ],
          "JsonSerializer.acceptJsonFormatVisitor(JsonFormatVisitorWrapper, JavaType)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonSerializer.serializeWithType(T, JsonGenerator, SerializerProvider, TypeSerializer)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SerializationConfig",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
      "class_declaration": "public final class SerializationConfig extends MapperConfigBase<SerializationFeature, SerializationConfig> implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NullifyingDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/NullifyingDeserializer.java",
      "class_declaration": "public class NullifyingDeserializer extends StdDeserializer<Object> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SchemaAware",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonschema/SchemaAware.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SubTypeValidator",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
      "class_declaration": "public class SubTypeValidator ",
      "methods_under_test": {
        "=1": {
          "SubTypeValidator.instance()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SubTypeValidator.validateSubType(DeserializationContext, JavaType, BeanDescription)": [
            10,
            10,
            10
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FilterProvider",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/FilterProvider.java",
      "class_declaration": "public abstract class FilterProvider ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "FilterProvider.findPropertyFilter(Object, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "FailingSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class FailingSerializer extends StdSerializer<Object> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonNodeCreator",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeCreator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NullsAsEmptyProvider",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/NullsAsEmptyProvider.java",
      "class_declaration": "public class NullsAsEmptyProvider implements NullValueProvider, java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "NullsAsEmptyProvider.getNullValue(DeserializationContext)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonFormatVisitorWithSerializerProvider",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWithSerializerProvider.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NumberDeserializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
      "class_declaration": "public class NumberDeserializers ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {
          "NumberDeserializers.find(Class<?>, String)": [
            22,
            22,
            22
          ]
        },
        "to_be_determined": {}
      }
    },
    {
      "src_name": "IndexedStringListSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java",
      "class_declaration": "@JacksonStdImpl\npublic final class IndexedStringListSerializer extends StaticListSerializerBase<List<String>> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ByteBufferSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/ByteBufferSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class ByteBufferSerializer extends StdScalarSerializer<ByteBuffer> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StdNodeBasedDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/StdNodeBasedDeserializer.java",
      "class_declaration": "public abstract class StdNodeBasedDeserializer <T> extends StdDeserializer<T> implements ResolvableDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MapDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
      "class_declaration": "@JacksonStdImpl\npublic class MapDeserializer extends ContainerDeserializerBase<Map<Object,Object>> implements ContextualDeserializer, ResolvableDeserializer ",
      "methods_under_test": {
        "=1": {
          "MapReferringAccumulator.handleUnresolvedReference(UnresolvedForwardReference, Object)": [
            1,
            1,
            1
          ],
          "MapReferring.handleResolvedForwardReference(Object, Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MapReferringAccumulator.put(Object, Object)": [
            3,
            3,
            3
          ],
          "MapReferringAccumulator.resolveForwardReference(Object, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Annotated",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/Annotated.java",
      "class_declaration": "public abstract class Annotated ",
      "methods_under_test": {
        "=1": {
          "Annotated.getType(TypeBindings)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UUIDSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class UUIDSerializer extends StdScalarSerializer<UUID> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TypeNameIdResolver",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java",
      "class_declaration": "public class TypeNameIdResolver extends TypeIdResolverBase ",
      "methods_under_test": {
        "=1": {
          "TypeNameIdResolver.idFromValue(Object)": [
            1,
            1,
            1
          ],
          "TypeNameIdResolver.typeFromId(DatabindContext, String)": [
            1,
            1,
            1
          ],
          "TypeNameIdResolver._typeFromId(String)": [
            1,
            1,
            1
          ],
          "TypeNameIdResolver.toString()": [
            1,
            1,
            1
          ],
          "TypeNameIdResolver._defaultTypeId(Class<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TypeNameIdResolver.construct(MapperConfig<?>, JavaType, Collection<NamedType>, boolean, boolean)": [
            10,
            10,
            10
          ],
          "TypeNameIdResolver.idFromClass(Class<?>)": [
            6,
            6,
            6
          ],
          "TypeNameIdResolver.idFromValueAndType(Object, Class<?>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TimeZoneSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/TimeZoneSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class TimeZoneSerializer extends StdScalarSerializer<TimeZone> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DelegatingDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java",
      "class_declaration": "public abstract class DelegatingDeserializer extends StdDeserializer<Object> implements ContextualDeserializer, ResolvableDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TypeSerializerBase",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeSerializerBase.java",
      "class_declaration": "public abstract class TypeSerializerBase extends TypeSerializer ",
      "methods_under_test": {
        "=1": {
          "TypeSerializerBase.writeTypePrefix(JsonGenerator, WritableTypeId)": [
            1,
            1,
            1
          ],
          "TypeSerializerBase.writeTypeSuffix(JsonGenerator, WritableTypeId)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TypeSerializerBase._generateTypeId(WritableTypeId)": [
            3,
            3,
            3
          ],
          "TypeSerializerBase.idFromValue(Object)": [
            2,
            2,
            2
          ],
          "TypeSerializerBase.idFromValueAndType(Object, Class<?>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SqlTimeSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java",
      "class_declaration": "@JacksonStdImpl\n@SuppressWarnings(\"serial\")\npublic class SqlTimeSerializer extends StdScalarSerializer<java.sql.Time> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ObjectIdReferenceProperty",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty.java",
      "class_declaration": "public class ObjectIdReferenceProperty extends SettableBeanProperty ",
      "methods_under_test": {
        "=1": {
          "ObjectIdReferenceProperty.withName(PropertyName)": [
            1,
            1,
            1
          ],
          "ObjectIdReferenceProperty.withNullProvider(NullValueProvider)": [
            1,
            1,
            1
          ],
          "ObjectIdReferenceProperty.deserializeAndSet(JsonParser, DeserializationContext, Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ObjectIdReferenceProperty.withValueDeserializer(JsonDeserializer<?>)": [
            2,
            2,
            2
          ],
          "ObjectIdReferenceProperty.fixAccess(DeserializationConfig)": [
            3,
            3,
            3
          ],
          "ObjectIdReferenceProperty.getAnnotation(Class<A>)": [
            2,
            2,
            2
          ],
          "ObjectIdReferenceProperty.deserializeSetAndReturn(JsonParser, DeserializationContext, Object)": [
            4,
            4,
            4
          ],
          "ObjectIdReferenceProperty.set(Object, Object)": [
            2,
            2,
            2
          ],
          "ObjectIdReferenceProperty.setAndReturn(Object, Object)": [
            2,
            2,
            2
          ],
          "PropertyReferring.handleResolvedForwardReference(Object, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnwrappingBeanPropertyWriter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java",
      "class_declaration": "public class UnwrappingBeanPropertyWriter extends BeanPropertyWriter implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "UnwrappingBeanPropertyWriter.rename(NameTransformer)": [
            1,
            1,
            1
          ],
          "UnwrappingBeanPropertyWriter._new(NameTransformer, SerializedString)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnwrappingBeanPropertyWriter.assignSerializer(JsonSerializer<Object>)": [
            3,
            3,
            3
          ],
          "UnwrappingBeanPropertyWriter.depositSchemaProperty(final, JsonObjectFormatVisitor, SerializerProvider)": [
            4,
            4,
            4
          ],
          "UnwrappingBeanPropertyWriter._depositSchemaProperty(ObjectNode, JsonNode)": [
            2,
            2,
            2
          ],
          "UnwrappingBeanPropertyWriter._findAndAddDynamic(PropertySerializerMap, Class<?>, SerializerProvider)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "UnwrappingBeanPropertyWriter.serializeAsField(Object, JsonGenerator, SerializerProvider)": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DoubleNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/DoubleNode.java",
      "class_declaration": "public class DoubleNode extends NumericNode ",
      "methods_under_test": {
        "=1": {
          "DoubleNode.valueOf(double)": [
            1,
            1,
            1
          ],
          "DoubleNode.asToken()": [
            1,
            1,
            1
          ],
          "DoubleNode.numberType()": [
            1,
            1,
            1
          ],
          "DoubleNode.canConvertToInt()": [
            1,
            1,
            1
          ],
          "DoubleNode.canConvertToLong()": [
            1,
            1,
            1
          ],
          "DoubleNode.numberValue()": [
            1,
            1,
            1
          ],
          "DoubleNode.shortValue()": [
            1,
            1,
            1
          ],
          "DoubleNode.intValue()": [
            1,
            1,
            1
          ],
          "DoubleNode.longValue()": [
            1,
            1,
            1
          ],
          "DoubleNode.floatValue()": [
            1,
            1,
            1
          ],
          "DoubleNode.doubleValue()": [
            1,
            1,
            1
          ],
          "DoubleNode.decimalValue()": [
            1,
            1,
            1
          ],
          "DoubleNode.bigIntegerValue()": [
            1,
            1,
            1
          ],
          "DoubleNode.asText()": [
            1,
            1,
            1
          ],
          "DoubleNode.serialize(JsonGenerator, SerializerProvider)": [
            1,
            1,
            1
          ],
          "DoubleNode.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DoubleNode.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonValueFormat",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonValueFormat.java",
      "error": "list index out of range"
    },
    {
      "src_name": "JsonValueInstantiator",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/annotation/JsonValueInstantiator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ResolvableDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/ResolvableDeserializer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NullValueProvider",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/NullValueProvider.java",
      "error": "list index out of range"
    },
    {
      "src_name": "TokenBufferDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/TokenBufferDeserializer.java",
      "class_declaration": "@JacksonStdImpl\npublic class TokenBufferDeserializer extends StdScalarDeserializer<TokenBuffer> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ManagedReferenceProperty",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/ManagedReferenceProperty.java",
      "class_declaration": "public final class ManagedReferenceProperty extends SettableBeanProperty.Delegating ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonLocationInstantiator",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonLocationInstantiator.java",
      "class_declaration": "public class JsonLocationInstantiator extends ValueInstantiator.Base ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MappingIteratorDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/attic/MappingIteratorDeserializer.java",
      "class_declaration": "public class MappingIteratorDeserializer extends StdDeserializer<MappingIterator<Object>> implements ContextualDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AnnotationIntrospector",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class AnnotationIntrospector implements Versioned, java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "ReferenceProperty.managed(String)": [
            1,
            1,
            1
          ],
          "ReferenceProperty.back(String)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.nopInstance()": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.pair(AnnotationIntrospector, AnnotationIntrospector)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.allIntrospectors()": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.allIntrospectors(Collection<AnnotationIntrospector>)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.isAnnotationBundle(Annotation)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findObjectIdInfo(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findObjectReferenceInfo(Annotated, ObjectIdInfo)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findRootName(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findPropertyIgnorals(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.isIgnorableType(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findFilterId(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findNamingStrategy(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findClassDescription(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findPropertiesToIgnore(Annotated, boolean)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findPropertiesToIgnore(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findIgnoreUnknownProperties(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findAutoDetectVisibility(AnnotatedClass, VisibilityChecker<?>)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findTypeResolver(MapperConfig<?>, AnnotatedClass, JavaType)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findPropertyTypeResolver(MapperConfig<?>, AnnotatedMember, JavaType)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findPropertyContentTypeResolver(MapperConfig<?>, AnnotatedMember, JavaType)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findSubtypes(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findTypeName(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.isTypeId(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findReferenceType(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findUnwrappingNameTransformer(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.hasIgnoreMarker(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.hasRequiredMarker(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findViews(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findFormat(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findWrapperName(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findPropertyDefaultValue(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findPropertyDescription(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findPropertyIndex(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findImplicitPropertyName(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findPropertyAliases(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findPropertyAccess(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.resolveSetterConflict(MapperConfig<?>, AnnotatedMethod, AnnotatedMethod)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findInjectableValueId(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findSerializer(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findKeySerializer(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findContentSerializer(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findNullSerializer(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findSerializationTyping(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findSerializationConverter(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findSerializationContentConverter(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findPropertyInclusion(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findSerializationInclusion(Annotated, JsonInclude.Include)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findSerializationInclusionForContent(Annotated, JsonInclude.Include)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.refineSerializationType(final, MapperConfig<?>, final, Annotated, final, JavaType)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findSerializationType(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findSerializationKeyType(Annotated, JavaType)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findSerializationContentType(Annotated, JavaType)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findSerializationPropertyOrder(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findSerializationSortAlphabetically(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findNameForSerialization(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findEnumValues(Class<?>, Enum<?>[], String[])": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findDefaultEnumValue(Class<Enum<?>>)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findEnumValue(Enum<?>)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.hasAsValueAnnotation(AnnotatedMethod)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.hasAnyGetterAnnotation(AnnotatedMethod)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findDeserializer(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findKeyDeserializer(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findContentDeserializer(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findDeserializationConverter(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findDeserializationContentConverter(AnnotatedMember)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.refineDeserializationType(final, MapperConfig<?>, final, Annotated, final, JavaType)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findDeserializationType(Annotated, JavaType)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findDeserializationKeyType(Annotated, JavaType)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findDeserializationContentType(Annotated, JavaType)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findValueInstantiator(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findPOJOBuilder(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findPOJOBuilderConfig(AnnotatedClass)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findNameForDeserialization(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.hasAnySetter(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findSetterInfo(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findMergeInfo(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.hasCreatorAnnotation(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.findCreatorBinding(Annotated)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector.hasAnySetterAnnotation(AnnotatedMethod)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector._findAnnotation(Annotated, Class<A>)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector._hasAnnotation(Annotated, Class<? extends Annotation>)": [
            1,
            1,
            1
          ],
          "AnnotationIntrospector._hasOneOf(Annotated, Class<? extends Annotation>[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AnnotationIntrospector.findInjectableValue(AnnotatedMember)": [
            2,
            2,
            2
          ],
          "AnnotationIntrospector.hasAsValue(Annotated)": [
            3,
            3,
            3
          ],
          "AnnotationIntrospector.hasAnyGetter(Annotated)": [
            3,
            3,
            3
          ],
          "AnnotationIntrospector.findCreatorAnnotation(MapperConfig<?>, Annotated)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractTypeResolver",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/AbstractTypeResolver.java",
      "class_declaration": "public abstract class AbstractTypeResolver ",
      "methods_under_test": {
        "=1": {
          "AbstractTypeResolver.findTypeMapping(DeserializationConfig, JavaType)": [
            1,
            1,
            1
          ],
          "AbstractTypeResolver.resolveAbstractType(DeserializationConfig, JavaType)": [
            1,
            1,
            1
          ],
          "AbstractTypeResolver.resolveAbstractType(DeserializationConfig, BeanDescription)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ViewMatcher",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/ViewMatcher.java",
      "class_declaration": "public class ViewMatcher implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "Single.isVisibleForView(Class<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ViewMatcher.construct(Class<?>[])": [
            4,
            4,
            4
          ],
          "Multi.isVisibleForView(Class<?>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StdKeySerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\n@Deprecated \npublic class StdKeySerializer extends StdSerializer<Object> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonNumberFormatVisitor",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonNumberFormatVisitor.java",
      "class_declaration": "public static class Base extends JsonValueFormatVisitor.Base implements JsonNumberFormatVisitor ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "IterableSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java",
      "class_declaration": "@JacksonStdImpl\n@SuppressWarnings(\"serial\")\npublic class IterableSerializer extends AsArraySerializerBase<Iterable<?>> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AtomicReferenceDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer.java",
      "class_declaration": "public class AtomicReferenceDeserializer extends ReferenceTypeDeserializer<AtomicReference<Object>> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ObjectIdInfo",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java",
      "class_declaration": "public class ObjectIdInfo ",
      "methods_under_test": {
        "=1": {
          "ObjectIdInfo.empty()": [
            1,
            1,
            1
          ],
          "ObjectIdInfo.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ObjectIdInfo.withAlwaysAsId(boolean)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ContextualKeyDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/ContextualKeyDeserializer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "JSONWrappedObject",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/JSONWrappedObject.java",
      "class_declaration": "public class JSONWrappedObject implements JsonSerializable ",
      "methods_under_test": {
        "=1": {
          "JSONWrappedObject.serializeWithType(JsonGenerator, SerializerProvider, TypeSerializer)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JSONWrappedObject.serialize(JsonGenerator, SerializerProvider)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ByteBufferDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/ByteBufferDeserializer.java",
      "class_declaration": "public class ByteBufferDeserializer extends StdScalarDeserializer<ByteBuffer> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MapType",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/MapType.java",
      "class_declaration": "public final class MapType extends MapLikeType ",
      "methods_under_test": {
        "=1": {
          "MapType.construct(Class<?>, TypeBindings, JavaType, JavaType[], JavaType, JavaType)": [
            1,
            1,
            1
          ],
          "MapType._narrow(Class<?>)": [
            1,
            1,
            1
          ],
          "MapType.withTypeHandler(Object)": [
            1,
            1,
            1
          ],
          "MapType.withContentTypeHandler(Object)": [
            1,
            1,
            1
          ],
          "MapType.withValueHandler(Object)": [
            1,
            1,
            1
          ],
          "MapType.withContentValueHandler(Object)": [
            1,
            1,
            1
          ],
          "MapType.refine(Class<?>, TypeBindings, JavaType, JavaType[])": [
            1,
            1,
            1
          ],
          "MapType.withKeyTypeHandler(Object)": [
            1,
            1,
            1
          ],
          "MapType.withKeyValueHandler(Object)": [
            1,
            1,
            1
          ],
          "MapType.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MapType.construct(Class<?>, JavaType, JavaType)": [
            2,
            2,
            2
          ],
          "MapType.withStaticTyping()": [
            2,
            2,
            2
          ],
          "MapType.withContentType(JavaType)": [
            2,
            2,
            2
          ],
          "MapType.withKeyType(JavaType)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "RawSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class RawSerializer <T> extends StdSerializer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CollectorBase",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/CollectorBase.java",
      "class_declaration": "class CollectorBase ",
      "methods_under_test": {
        "=1": {
          "CollectorBase._ignorableAnnotation(Annotation)": [
            1,
            1,
            1
          ],
          "CollectorBase._emptyAnnotationMap()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CollectorBase.collectAnnotations(Annotation[])": [
            3,
            3,
            3
          ],
          "CollectorBase.collectAnnotations(AnnotationCollector, Annotation[])": [
            3,
            3,
            3
          ],
          "CollectorBase.collectFromBundle(AnnotationCollector, Annotation)": [
            7,
            7,
            7
          ],
          "CollectorBase.collectDefaultAnnotations(AnnotationCollector, Annotation[])": [
            4,
            4,
            4
          ],
          "CollectorBase.collectDefaultFromBundle(AnnotationCollector, Annotation)": [
            5,
            5,
            5
          ],
          "CollectorBase._emptyAnnotationMaps(int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DataFormatReaders",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/DataFormatReaders.java",
      "class_declaration": "public class DataFormatReaders ",
      "methods_under_test": {
        "=1": {
          "DataFormatReaders.with(ObjectReader[])": [
            1,
            1,
            1
          ],
          "DataFormatReaders.findFormat(InputStream)": [
            1,
            1,
            1
          ],
          "DataFormatReaders.findFormat(byte[])": [
            1,
            1,
            1
          ],
          "DataFormatReaders.findFormat(byte[], int, int)": [
            1,
            1,
            1
          ],
          "Match.hasMatch()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DataFormatReaders.withOptimalMatch(MatchStrength)": [
            2,
            2,
            2
          ],
          "DataFormatReaders.withMinimalMatch(MatchStrength)": [
            2,
            2,
            2
          ],
          "DataFormatReaders.withMaxInputLookahead(int)": [
            2,
            2,
            2
          ],
          "DataFormatReaders.with(DeserializationConfig)": [
            2,
            2,
            2
          ],
          "DataFormatReaders.withType(JavaType)": [
            2,
            2,
            2
          ],
          "DataFormatReaders.toString()": [
            3,
            3,
            3
          ],
          "Match.createParserWithMatch()": [
            3,
            3,
            3
          ],
          "Match.getDataStream()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SerializableSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java",
      "class_declaration": "@JacksonStdImpl\n@SuppressWarnings(\"serial\")\npublic class SerializableSerializer extends StdSerializer<JsonSerializable> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UntypedObjectDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
      "class_declaration": "@JacksonStdImpl\npublic class UntypedObjectDeserializer extends StdDeserializer<Object> implements ResolvableDeserializer, ContextualDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CoreXMLDeserializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java",
      "class_declaration": "public class CoreXMLDeserializers extends Deserializers.Base ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ExternalTypeHandler",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
      "class_declaration": "public class ExternalTypeHandler ",
      "methods_under_test": {
        "=1": {
          "ExternalTypeHandler.builder(JavaType)": [
            1,
            1,
            1
          ],
          "ExternalTypeHandler.start()": [
            1,
            1,
            1
          ],
          "Builder.addExternal(SettableBeanProperty, TypeDeserializer)": [
            1,
            1,
            1
          ],
          "ExtTypedProperty.linkTypeProperty(SettableBeanProperty)": [
            1,
            1,
            1
          ],
          "ExtTypedProperty.hasTypePropertyName(String)": [
            1,
            1,
            1
          ],
          "ExtTypedProperty.hasDefaultType()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ExternalTypeHandler.handleTypePropertyValue(JsonParser, DeserializationContext, String, Object)": [
            5,
            5,
            5
          ],
          "ExternalTypeHandler.handlePropertyValue(JsonParser, DeserializationContext, String, Object)": [
            8,
            8,
            8
          ],
          "ExternalTypeHandler.complete(JsonParser, DeserializationContext, Object)": [
            9,
            9,
            9
          ],
          "ExternalTypeHandler._deserialize(JsonParser, DeserializationContext, int, String)": [
            2,
            2,
            2
          ],
          "ExternalTypeHandler._deserializeAndSet(JsonParser, DeserializationContext, Object, int, String)": [
            2,
            2,
            2
          ],
          "Builder.build(BeanPropertyMap)": [
            3,
            3,
            3
          ],
          "ExtTypedProperty.getDefaultTypeId()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "ExternalTypeHandler.complete(JsonParser, DeserializationContext, PropertyValueBuffer, PropertyBasedCreator)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Module",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/Module.java",
      "class_declaration": "public abstract class Module implements Versioned ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DateTimeSerializerBase",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class DateTimeSerializerBase <T> extends StdScalarSerializer<T> implements ContextualSerializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ThrowableDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java",
      "class_declaration": "public class ThrowableDeserializer extends BeanDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ThrowableDeserializer.unwrappingDeserializer(NameTransformer)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "ThrowableDeserializer.deserializeFromObject(JsonParser, DeserializationContext)": [
            19,
            19,
            19
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JacksonStdImpl",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/annotation/JacksonStdImpl.java",
      "error": "list index out of range"
    },
    {
      "src_name": "WritableObjectId",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/WritableObjectId.java",
      "class_declaration": "public final class WritableObjectId ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "WritableObjectId.writeAsId(JsonGenerator, SerializerProvider, ObjectIdWriter)": [
            3,
            3,
            3
          ],
          "WritableObjectId.generateId(Object)": [
            2,
            2,
            2
          ],
          "WritableObjectId.writeAsField(JsonGenerator, SerializerProvider, ObjectIdWriter)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PackageVersion",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/cfg/PackageVersion.java",
      "class_declaration": "public final class PackageVersion implements Versioned ",
      "methods_under_test": {
        "=1": {
          "PackageVersion.version()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AnnotatedField",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
      "class_declaration": "public final class AnnotatedField extends AnnotatedMember implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "AnnotatedField.withAnnotations(AnnotationMap)": [
            1,
            1,
            1
          ],
          "AnnotatedField.hashCode()": [
            1,
            1,
            1
          ],
          "AnnotatedField.toString()": [
            1,
            1,
            1
          ],
          "AnnotatedField.writeReplace()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AnnotatedField.setValue(Object, Object)": [
            2,
            2,
            2
          ],
          "AnnotatedField.getValue(Object)": [
            2,
            2,
            2
          ],
          "AnnotatedField.equals(Object)": [
            2,
            2,
            2
          ],
          "AnnotatedField.readResolve()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonTypeIdResolver",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/annotation/JsonTypeIdResolver.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MapperFeature",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java",
      "error": "local variable 'class_name' referenced before assignment"
    },
    {
      "src_name": "AnnotatedFieldCollector",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
      "class_declaration": "public class AnnotatedFieldCollector extends CollectorBase ",
      "methods_under_test": {
        "=1": {
          "AnnotatedFieldCollector.collectFields(AnnotationIntrospector, TypeResolutionContext, MixInResolver, TypeFactory, JavaType)": [
            1,
            1,
            1
          ],
          "FieldBuilder.build()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AnnotatedFieldCollector.collect(TypeResolutionContext, JavaType)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DefaultSerializerProvider",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
      "class_declaration": "public abstract class DefaultSerializerProvider extends SerializerProvider implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "DefaultSerializerProvider.cachedSerializersCount()": [
            1,
            1,
            1
          ],
          "DefaultSerializerProvider.flushCachedSerializers()": [
            1,
            1,
            1
          ],
          "DefaultSerializerProvider.createInstance(SerializationConfig, SerializerFactory)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DefaultSerializerProvider.serializerInstance(Annotated, Object)": [
            7,
            7,
            7
          ],
          "DefaultSerializerProvider.includeFilterInstance(BeanPropertyDefinition, Class<?>)": [
            3,
            3,
            3
          ],
          "DefaultSerializerProvider.includeFilterSuppressNulls(Object)": [
            4,
            4,
            4
          ],
          "DefaultSerializerProvider.findObjectId(Object, ObjectIdGenerator<?>)": [
            7,
            7,
            7
          ],
          "DefaultSerializerProvider._createObjectIdMap()": [
            2,
            2,
            2
          ],
          "DefaultSerializerProvider.hasSerializerFor(Class<?>, AtomicReference<Throwable>)": [
            10,
            10,
            10
          ],
          "DefaultSerializerProvider.serializeValue(JsonGenerator, Object)": [
            5,
            5,
            5
          ],
          "DefaultSerializerProvider.serializeValue(JsonGenerator, Object, JavaType)": [
            6,
            6,
            6
          ],
          "DefaultSerializerProvider.serializeValue(JsonGenerator, Object, JavaType, JsonSerializer<Object>)": [
            7,
            7,
            7
          ],
          "DefaultSerializerProvider.serializePolymorphic(JsonGenerator, Object, JavaType, JsonSerializer<Object>, TypeSerializer)": [
            9,
            9,
            9
          ],
          "DefaultSerializerProvider._serializeNull(JsonGenerator)": [
            2,
            2,
            2
          ],
          "DefaultSerializerProvider.acceptJsonFormatVisitor(JavaType, JsonFormatVisitorWrapper)": [
            2,
            2,
            2
          ],
          "DefaultSerializerProvider.generateJsonSchema(Class<?>)": [
            2,
            2,
            2
          ],
          "Impl.copy()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MapperConfig",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java",
      "class_declaration": "public abstract class MapperConfig <T extends MapperConfig<T>> implements ClassIntrospector.MixInResolver,\n        java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "MapperConfig.isEnabled(MapperFeature)": [
            1,
            1,
            1
          ],
          "MapperConfig.hasMapperFeatures(int)": [
            1,
            1,
            1
          ],
          "MapperConfig.canOverrideAccessModifiers()": [
            1,
            1,
            1
          ],
          "MapperConfig.shouldSortPropertiesAlphabetically()": [
            1,
            1,
            1
          ],
          "MapperConfig.compileString(String)": [
            1,
            1,
            1
          ],
          "MapperConfig.getDefaultTyper(JavaType)": [
            1,
            1,
            1
          ],
          "MapperConfig.constructType(Class<?>)": [
            1,
            1,
            1
          ],
          "MapperConfig.constructType(TypeReference<?>)": [
            1,
            1,
            1
          ],
          "MapperConfig.constructSpecializedType(JavaType, Class<?>)": [
            1,
            1,
            1
          ],
          "MapperConfig.introspectClassAnnotations(Class<?>)": [
            1,
            1,
            1
          ],
          "MapperConfig.introspectClassAnnotations(JavaType)": [
            1,
            1,
            1
          ],
          "MapperConfig.introspectDirectClassAnnotations(Class<?>)": [
            1,
            1,
            1
          ],
          "MapperConfig.introspectDirectClassAnnotations(JavaType)": [
            1,
            1,
            1
          ],
          "MapperConfig.getDefaultInclusion(Class<?>, Class<?>, JsonInclude.Value)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MapperConfig.collectFeatureDefaults(Class<F>)": [
            3,
            3,
            3
          ],
          "MapperConfig.getAnnotationIntrospector()": [
            2,
            2,
            2
          ],
          "MapperConfig.getDefaultPropertyInclusion(Class<?>, JsonInclude.Value)": [
            2,
            2,
            2
          ],
          "MapperConfig.typeResolverBuilderInstance(Annotated, Class<? extends TypeResolverBuilder<?>>)": [
            3,
            3,
            3
          ],
          "MapperConfig.typeIdResolverInstance(Annotated, Class<? extends TypeIdResolver>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CreatorCollector",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
      "class_declaration": "public class CreatorCollector ",
      "methods_under_test": {
        "=1": {
          "CreatorCollector.constructValueInstantiator(DeserializationContext)": [
            1,
            1,
            1
          ],
          "CreatorCollector.addStringCreator(AnnotatedWithParams, boolean)": [
            1,
            1,
            1
          ],
          "CreatorCollector.addIntCreator(AnnotatedWithParams, boolean)": [
            1,
            1,
            1
          ],
          "CreatorCollector.addLongCreator(AnnotatedWithParams, boolean)": [
            1,
            1,
            1
          ],
          "CreatorCollector.addDoubleCreator(AnnotatedWithParams, boolean)": [
            1,
            1,
            1
          ],
          "CreatorCollector.addBooleanCreator(AnnotatedWithParams, boolean)": [
            1,
            1,
            1
          ],
          "CreatorCollector.hasDefaultCreator()": [
            1,
            1,
            1
          ],
          "CreatorCollector.hasDelegatingCreator()": [
            1,
            1,
            1
          ],
          "CreatorCollector.hasPropertyBasedCreator()": [
            1,
            1,
            1
          ],
          "CreatorCollector._isEnumValueOf(AnnotatedWithParams)": [
            1,
            1,
            1
          ],
          "StdTypeConstructor.call()": [
            1,
            1,
            1
          ],
          "StdTypeConstructor.call(Object[])": [
            1,
            1,
            1
          ],
          "StdTypeConstructor.call1(Object)": [
            1,
            1,
            1
          ],
          "StdTypeConstructor.setValue(Object, Object)": [
            1,
            1,
            1
          ],
          "StdTypeConstructor.getValue(Object)": [
            1,
            1,
            1
          ],
          "StdTypeConstructor.withAnnotations(AnnotationMap)": [
            1,
            1,
            1
          ],
          "StdTypeConstructor.equals(Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CreatorCollector.addDelegatingCreator(AnnotatedWithParams, boolean, SettableBeanProperty[], int)": [
            5,
            5,
            5
          ],
          "CreatorCollector.addPropertyCreator(AnnotatedWithParams, boolean, SettableBeanProperty[])": [
            6,
            6,
            6
          ],
          "CreatorCollector.verifyNonDup(AnnotatedWithParams, int, boolean)": [
            10,
            10,
            10
          ],
          "StdTypeConstructor.tryToOptimize(AnnotatedWithParams)": [
            5,
            5,
            5
          ],
          "StdTypeConstructor._construct()": [
            4,
            4,
            4
          ],
          "StdTypeConstructor.getRawParameterType(int)": [
            2,
            2,
            2
          ],
          "StdTypeConstructor.getParameterType(int)": [
            2,
            2,
            2
          ],
          "StdTypeConstructor.getGenericParameterType(int)": [
            2,
            2,
            2
          ],
          "StdTypeConstructor.hashCode()": [
            2,
            2,
            2
          ],
          "StdTypeConstructor.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AttributePropertyWriter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/AttributePropertyWriter.java",
      "class_declaration": "public class AttributePropertyWriter extends VirtualBeanPropertyWriter ",
      "methods_under_test": {
        "=1": {
          "AttributePropertyWriter.construct(String, BeanPropertyDefinition, Annotations, JavaType)": [
            1,
            1,
            1
          ],
          "AttributePropertyWriter.withConfig(MapperConfig<?>, AnnotatedClass, BeanPropertyDefinition, JavaType)": [
            1,
            1,
            1
          ],
          "AttributePropertyWriter.value(Object, JsonGenerator, SerializerProvider)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PropertyBasedCreator",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java",
      "class_declaration": "public final class PropertyBasedCreator ",
      "methods_under_test": {
        "=1": {
          "PropertyBasedCreator.construct(DeserializationContext, ValueInstantiator, SettableBeanProperty[])": [
            1,
            1,
            1
          ],
          "PropertyBasedCreator.properties()": [
            1,
            1,
            1
          ],
          "PropertyBasedCreator.findCreatorProperty(String)": [
            1,
            1,
            1
          ],
          "PropertyBasedCreator.startBuilding(JsonParser, DeserializationContext, ObjectIdReader)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PropertyBasedCreator.construct(DeserializationContext, ValueInstantiator, SettableBeanProperty[], BeanPropertyMap)": [
            3,
            3,
            3
          ],
          "PropertyBasedCreator.construct(DeserializationContext, ValueInstantiator, SettableBeanProperty[], boolean)": [
            3,
            3,
            3
          ],
          "PropertyBasedCreator.findCreatorProperty(int)": [
            3,
            3,
            3
          ],
          "PropertyBasedCreator.build(DeserializationContext, PropertyValueBuffer)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonAppend",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/annotation/JsonAppend.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BeanAsArraySerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java",
      "class_declaration": "public class BeanAsArraySerializer extends BeanSerializerBase ",
      "methods_under_test": {
        "=1": {
          "BeanAsArraySerializer.withFilterId(Object)": [
            1,
            1,
            1
          ],
          "BeanAsArraySerializer.withIgnorals(Set<String>)": [
            1,
            1,
            1
          ],
          "BeanAsArraySerializer.asArraySerializer()": [
            1,
            1,
            1
          ],
          "BeanAsArraySerializer.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BeanAsArraySerializer.unwrappingSerializer(NameTransformer)": [
            2,
            2,
            2
          ],
          "BeanAsArraySerializer.withObjectIdWriter(ObjectIdWriter)": [
            2,
            2,
            2
          ],
          "BeanAsArraySerializer.serializeWithType(Object, JsonGenerator, SerializerProvider, TypeSerializer)": [
            2,
            2,
            2
          ],
          "BeanAsArraySerializer.serialize(Object, JsonGenerator, SerializerProvider)": [
            2,
            2,
            2
          ],
          "BeanAsArraySerializer.serializeAsArray(Object, JsonGenerator, SerializerProvider)": [
            10,
            10,
            10
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonBooleanFormatVisitor",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonBooleanFormatVisitor.java",
      "class_declaration": "public static class Base extends JsonValueFormatVisitor.Base implements JsonBooleanFormatVisitor ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonStringFormatVisitor",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonStringFormatVisitor.java",
      "class_declaration": "public static class Base extends JsonValueFormatVisitor.Base implements JsonStringFormatVisitor ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DeserializationContext",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
      "class_declaration": "public abstract class DeserializationContext extends DatabindContext implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "DeserializationContext.canOverrideAccessModifiers()": [
            1,
            1,
            1
          ],
          "DeserializationContext.isEnabled(MapperFeature)": [
            1,
            1,
            1
          ],
          "DeserializationContext.getDefaultPropertyFormat(Class<?>)": [
            1,
            1,
            1
          ],
          "DeserializationContext.getAttribute(Object)": [
            1,
            1,
            1
          ],
          "DeserializationContext.setAttribute(Object, Object)": [
            1,
            1,
            1
          ],
          "DeserializationContext.isEnabled(DeserializationFeature)": [
            1,
            1,
            1
          ],
          "DeserializationContext.hasDeserializationFeatures(int)": [
            1,
            1,
            1
          ],
          "DeserializationContext.hasSomeOfFeatures(int)": [
            1,
            1,
            1
          ],
          "DeserializationContext.findNonContextualValueDeserializer(JavaType)": [
            1,
            1,
            1
          ],
          "DeserializationContext.constructType(Class<?>)": [
            1,
            1,
            1
          ],
          "DeserializationContext.findClass(String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.constructCalendar(Date)": [
            1,
            1,
            1
          ],
          "DeserializationContext.readValue(JsonParser, Class<T>)": [
            1,
            1,
            1
          ],
          "DeserializationContext.readPropertyValue(JsonParser, BeanProperty, Class<T>)": [
            1,
            1,
            1
          ],
          "DeserializationContext.handleUnexpectedToken(Class<?>, JsonParser)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportWrongTokenException(JsonDeserializer<?>, JsonToken, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportWrongTokenException(JavaType, JsonToken, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportWrongTokenException(Class<?>, JsonToken, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportUnresolvedObjectId(ObjectIdReader, Object)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportInputMismatch(BeanProperty, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportInputMismatch(JsonDeserializer<?>, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportInputMismatch(Class<?>, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportInputMismatch(JavaType, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportTrailingTokens(Class<?>, JsonParser, JsonToken)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportWrongTokenException(JsonParser, JsonToken, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportUnknownProperty(Object, String, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportMissingContent(String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportBadTypeDefinition(BeanDescription, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportBadPropertyDefinition(BeanDescription, BeanPropertyDefinition, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportBadDefinition(JavaType, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.wrongTokenException(JsonParser, JavaType, JsonToken, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.wrongTokenException(JsonParser, Class<?>, JsonToken, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.wrongTokenException(JsonParser, JsonToken, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.weirdKeyException(Class<?>, String, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.weirdStringException(String, Class<?>, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.weirdNumberException(Number, Class<?>, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.weirdNativeValueException(Object, Class<?>)": [
            1,
            1,
            1
          ],
          "DeserializationContext.instantiationException(Class<?>, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.invalidTypeIdException(JavaType, String, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.missingTypeIdException(JavaType, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.unknownTypeException(JavaType, String, String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.endOfInputException(Class<?>)": [
            1,
            1,
            1
          ],
          "DeserializationContext.reportMappingException(String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.mappingException(String)": [
            1,
            1,
            1
          ],
          "DeserializationContext.mappingException(Class<?>)": [
            1,
            1,
            1
          ],
          "DeserializationContext.mappingException(Class<?>, JsonToken)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DeserializationContext.findInjectableValue(Object, BeanProperty, Object)": [
            2,
            2,
            2
          ],
          "DeserializationContext.hasValueDeserializerFor(JavaType, AtomicReference<Throwable>)": [
            6,
            6,
            6
          ],
          "DeserializationContext.findContextualValueDeserializer(JavaType, BeanProperty)": [
            2,
            2,
            2
          ],
          "DeserializationContext.findRootValueDeserializer(JavaType)": [
            3,
            3,
            3
          ],
          "DeserializationContext.findKeyDeserializer(JavaType, BeanProperty)": [
            2,
            2,
            2
          ],
          "DeserializationContext.leaseObjectBuffer()": [
            2,
            2,
            2
          ],
          "DeserializationContext.returnObjectBuffer(ObjectBuffer)": [
            2,
            2,
            2
          ],
          "DeserializationContext.getArrayBuilders()": [
            2,
            2,
            2
          ],
          "DeserializationContext.handlePrimaryContextualization(JsonDeserializer<?>, BeanProperty, JavaType)": [
            2,
            2,
            2
          ],
          "DeserializationContext.handleSecondaryContextualization(JsonDeserializer<?>, BeanProperty, JavaType)": [
            2,
            2,
            2
          ],
          "DeserializationContext.parseDate(String)": [
            2,
            2,
            2
          ],
          "DeserializationContext.readValue(JsonParser, JavaType)": [
            2,
            2,
            2
          ],
          "DeserializationContext.readPropertyValue(JsonParser, BeanProperty, JavaType)": [
            2,
            2,
            2
          ],
          "DeserializationContext.handleUnknownProperty(JsonParser, JsonDeserializer<?>, Object, String)": [
            4,
            4,
            4
          ],
          "DeserializationContext.handleWeirdKey(Class<?>, String, String)": [
            4,
            4,
            4
          ],
          "DeserializationContext.handleWeirdStringValue(Class<?>, String, String)": [
            4,
            4,
            4
          ],
          "DeserializationContext.handleWeirdNumberValue(Class<?>, Number, String)": [
            4,
            4,
            4
          ],
          "DeserializationContext.handleWeirdNativeValue(JavaType, Object, JsonParser)": [
            4,
            4,
            4
          ],
          "DeserializationContext.handleMissingInstantiator(Class<?>, ValueInstantiator, JsonParser, String)": [
            6,
            6,
            6
          ],
          "DeserializationContext.handleInstantiationProblem(Class<?>, Object, Throwable)": [
            4,
            4,
            4
          ],
          "DeserializationContext.handleUnexpectedToken(Class<?>, JsonToken, JsonParser, String)": [
            6,
            6,
            6
          ],
          "DeserializationContext.handleUnknownTypeId(JavaType, String, TypeIdResolver, String)": [
            6,
            6,
            6
          ],
          "DeserializationContext.handleMissingTypeId(JavaType, TypeIdResolver, String)": [
            5,
            5,
            5
          ],
          "DeserializationContext._isCompatible(Class<?>, Object)": [
            2,
            2,
            2
          ],
          "DeserializationContext.reportBadMerge(JsonDeserializer<?>)": [
            2,
            2,
            2
          ],
          "DeserializationContext.instantiationException(Class<?>, Throwable)": [
            3,
            3,
            3
          ],
          "DeserializationContext.getDateFormat()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Converter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/Converter.java",
      "class_declaration": "public abstract static class None implements Converter<Object,Object> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NodeCursor",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/NodeCursor.java",
      "class_declaration": "abstract class NodeCursor extends JsonStreamContext ",
      "methods_under_test": {
        "=1": {
          "RootCursor.nextValue()": [
            1,
            1,
            1
          ],
          "RootCursor.endToken()": [
            1,
            1,
            1
          ],
          "RootCursor.currentNode()": [
            1,
            1,
            1
          ],
          "RootCursor.currentHasChildren()": [
            1,
            1,
            1
          ],
          "ArrayCursor.nextValue()": [
            1,
            1,
            1
          ],
          "ArrayCursor.endToken()": [
            1,
            1,
            1
          ],
          "ArrayCursor.currentNode()": [
            1,
            1,
            1
          ],
          "ArrayCursor.currentHasChildren()": [
            1,
            1,
            1
          ],
          "ObjectCursor.endToken()": [
            1,
            1,
            1
          ],
          "ObjectCursor.currentNode()": [
            1,
            1,
            1
          ],
          "ObjectCursor.currentHasChildren()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NodeCursor.iterateChildren()": [
            4,
            4,
            4
          ],
          "RootCursor.nextToken()": [
            2,
            2,
            2
          ],
          "ArrayCursor.nextToken()": [
            2,
            2,
            2
          ],
          "ObjectCursor.nextToken()": [
            3,
            3,
            3
          ],
          "ObjectCursor.nextValue()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StringArrayDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
      "class_declaration": "@JacksonStdImpl\npublic final class StringArrayDeserializer extends StdDeserializer<String[]> implements ContextualDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StdKeyDeserializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java",
      "class_declaration": "public class StdKeyDeserializers implements KeyDeserializers, java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "StdKeyDeserializers.constructEnumKeyDeserializer(EnumResolver)": [
            1,
            1,
            1
          ],
          "StdKeyDeserializers.constructEnumKeyDeserializer(EnumResolver, AnnotatedMethod)": [
            1,
            1,
            1
          ],
          "StdKeyDeserializers.constructDelegatingKeyDeserializer(DeserializationConfig, JavaType, JsonDeserializer<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StdKeyDeserializers.findStringBasedKeyDeserializer(DeserializationConfig, JavaType)": [
            5,
            5,
            5
          ],
          "StdKeyDeserializers.findKeyDeserializer(JavaType, DeserializationConfig, BeanDescription)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AnnotatedConstructor",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
      "class_declaration": "public final class AnnotatedConstructor extends AnnotatedWithParams ",
      "methods_under_test": {
        "=1": {
          "AnnotatedConstructor.withAnnotations(AnnotationMap)": [
            1,
            1,
            1
          ],
          "AnnotatedConstructor.getRawParameterType(int)": [
            1,
            1,
            1
          ],
          "AnnotatedConstructor.call()": [
            1,
            1,
            1
          ],
          "AnnotatedConstructor.call(Object[])": [
            1,
            1,
            1
          ],
          "AnnotatedConstructor.call1(Object)": [
            1,
            1,
            1
          ],
          "AnnotatedConstructor.setValue(Object, Object)": [
            1,
            1,
            1
          ],
          "AnnotatedConstructor.getValue(Object)": [
            1,
            1,
            1
          ],
          "AnnotatedConstructor.toString()": [
            1,
            1,
            1
          ],
          "AnnotatedConstructor.hashCode()": [
            1,
            1,
            1
          ],
          "AnnotatedConstructor.writeReplace()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AnnotatedConstructor.getParameterType(int)": [
            2,
            2,
            2
          ],
          "AnnotatedConstructor.getGenericParameterType(int)": [
            2,
            2,
            2
          ],
          "AnnotatedConstructor.equals(Object)": [
            2,
            2,
            2
          ],
          "AnnotatedConstructor.readResolve()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/module/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SimpleFilterProvider",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleFilterProvider.java",
      "class_declaration": "public class SimpleFilterProvider extends FilterProvider implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "SimpleFilterProvider._convert(BeanPropertyFilter)": [
            1,
            1,
            1
          ],
          "SimpleFilterProvider.setDefaultFilter(BeanPropertyFilter)": [
            1,
            1,
            1
          ],
          "SimpleFilterProvider.setDefaultFilter(PropertyFilter)": [
            1,
            1,
            1
          ],
          "SimpleFilterProvider.setDefaultFilter(SimpleBeanPropertyFilter)": [
            1,
            1,
            1
          ],
          "SimpleFilterProvider.setFailOnUnknownId(boolean)": [
            1,
            1,
            1
          ],
          "SimpleFilterProvider.willFailOnUnknownId()": [
            1,
            1,
            1
          ],
          "SimpleFilterProvider.addFilter(String, BeanPropertyFilter)": [
            1,
            1,
            1
          ],
          "SimpleFilterProvider.addFilter(String, PropertyFilter)": [
            1,
            1,
            1
          ],
          "SimpleFilterProvider.addFilter(String, SimpleBeanPropertyFilter)": [
            1,
            1,
            1
          ],
          "SimpleFilterProvider.removeFilter(String)": [
            1,
            1,
            1
          ],
          "SimpleFilterProvider.findFilter(Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SimpleFilterProvider._convert(Map<String,?>)": [
            4,
            4,
            4
          ],
          "SimpleFilterProvider.findPropertyFilter(Object, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StdKeySerializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class StdKeySerializers ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "StdKeySerializers.getFallbackKeySerializer(SerializationConfig, Class<?>)": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "StdKeySerializers.getStdKeySerializer(SerializationConfig, Class<?>, boolean)": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BeanDeserializerBuilder",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
      "class_declaration": "public class BeanDeserializerBuilder ",
      "methods_under_test": {
        "=1": {
          "BeanDeserializerBuilder.addOrReplaceProperty(SettableBeanProperty, boolean)": [
            1,
            1,
            1
          ],
          "BeanDeserializerBuilder.addProperty(SettableBeanProperty)": [
            1,
            1,
            1
          ],
          "BeanDeserializerBuilder.addCreatorProperty(SettableBeanProperty)": [
            1,
            1,
            1
          ],
          "BeanDeserializerBuilder.setPOJOBuilder(AnnotatedMethod, JsonPOJOBuilder.Value)": [
            1,
            1,
            1
          ],
          "BeanDeserializerBuilder.findProperty(PropertyName)": [
            1,
            1,
            1
          ],
          "BeanDeserializerBuilder.hasProperty(PropertyName)": [
            1,
            1,
            1
          ],
          "BeanDeserializerBuilder.removeProperty(PropertyName)": [
            1,
            1,
            1
          ],
          "BeanDeserializerBuilder.hasIgnorable(String)": [
            1,
            1,
            1
          ],
          "BeanDeserializerBuilder.buildAbstract()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BeanDeserializerBuilder.addBackReferenceProperty(String, SettableBeanProperty)": [
            2,
            2,
            2
          ],
          "BeanDeserializerBuilder.addInjectable(PropertyName, JavaType, Annotations, AnnotatedMember, Object)": [
            3,
            3,
            3
          ],
          "BeanDeserializerBuilder.addIgnorable(String)": [
            2,
            2,
            2
          ],
          "BeanDeserializerBuilder.setAnySetter(SettableAnyProperty)": [
            2,
            2,
            2
          ],
          "BeanDeserializerBuilder.build()": [
            5,
            5,
            5
          ],
          "BeanDeserializerBuilder.buildBuilderBased(JavaType, String)": [
            8,
            8,
            8
          ],
          "BeanDeserializerBuilder._fixAccess(Collection<SettableBeanProperty>)": [
            4,
            4,
            4
          ],
          "BeanDeserializerBuilder._collectAliases(Collection<SettableBeanProperty>)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TypeParser",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/TypeParser.java",
      "class_declaration": "public class TypeParser implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "TypeParser.withFactory(TypeFactory)": [
            1,
            1,
            1
          ],
          "TypeParser._problem(MyTokenizer, String)": [
            1,
            1,
            1
          ],
          "MyTokenizer.hasMoreTokens()": [
            1,
            1,
            1
          ],
          "MyTokenizer.pushBack(String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TypeParser.parse(String)": [
            2,
            2,
            2
          ],
          "TypeParser.parseType(MyTokenizer)": [
            4,
            4,
            4
          ],
          "TypeParser.parseTypes(MyTokenizer)": [
            5,
            5,
            5
          ],
          "TypeParser.findClass(String, MyTokenizer)": [
            2,
            2,
            2
          ],
          "MyTokenizer.nextToken()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StdSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
      "class_declaration": "public abstract class StdSerializer <T> extends JsonSerializer<T> implements JsonFormatVisitable, SchemaAware, java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ContainerNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java",
      "class_declaration": "public abstract class ContainerNode <T extends ContainerNode<T>> extends BaseJsonNode implements JsonNodeCreator ",
      "methods_under_test": {
        "=1": {
          "ContainerNode.asText()": [
            1,
            1,
            1
          ],
          "ContainerNode.arrayNode()": [
            1,
            1,
            1
          ],
          "ContainerNode.arrayNode(int)": [
            1,
            1,
            1
          ],
          "ContainerNode.objectNode()": [
            1,
            1,
            1
          ],
          "ContainerNode.nullNode()": [
            1,
            1,
            1
          ],
          "ContainerNode.booleanNode(boolean)": [
            1,
            1,
            1
          ],
          "ContainerNode.numberNode(byte)": [
            1,
            1,
            1
          ],
          "ContainerNode.numberNode(short)": [
            1,
            1,
            1
          ],
          "ContainerNode.numberNode(int)": [
            1,
            1,
            1
          ],
          "ContainerNode.numberNode(long)": [
            1,
            1,
            1
          ],
          "ContainerNode.numberNode(float)": [
            1,
            1,
            1
          ],
          "ContainerNode.numberNode(double)": [
            1,
            1,
            1
          ],
          "ContainerNode.numberNode(BigInteger)": [
            1,
            1,
            1
          ],
          "ContainerNode.numberNode(BigDecimal)": [
            1,
            1,
            1
          ],
          "ContainerNode.numberNode(Byte)": [
            1,
            1,
            1
          ],
          "ContainerNode.numberNode(Short)": [
            1,
            1,
            1
          ],
          "ContainerNode.numberNode(Integer)": [
            1,
            1,
            1
          ],
          "ContainerNode.numberNode(Long)": [
            1,
            1,
            1
          ],
          "ContainerNode.numberNode(Float)": [
            1,
            1,
            1
          ],
          "ContainerNode.numberNode(Double)": [
            1,
            1,
            1
          ],
          "ContainerNode.textNode(String)": [
            1,
            1,
            1
          ],
          "ContainerNode.binaryNode(byte[])": [
            1,
            1,
            1
          ],
          "ContainerNode.binaryNode(byte[], int, int)": [
            1,
            1,
            1
          ],
          "ContainerNode.pojoNode(Object)": [
            1,
            1,
            1
          ],
          "ContainerNode.rawValueNode(RawValue)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PropertyNamingStrategy",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/PropertyNamingStrategy.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class PropertyNamingStrategy implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "PropertyNamingStrategyBase.nameForField(MapperConfig<?>, AnnotatedField, String)": [
            1,
            1,
            1
          ],
          "PropertyNamingStrategyBase.nameForGetterMethod(MapperConfig<?>, AnnotatedMethod, String)": [
            1,
            1,
            1
          ],
          "PropertyNamingStrategyBase.nameForSetterMethod(MapperConfig<?>, AnnotatedMethod, String)": [
            1,
            1,
            1
          ],
          "PropertyNamingStrategyBase.nameForConstructorParameter(MapperConfig<?>, AnnotatedParameter, String)": [
            1,
            1,
            1
          ],
          "LowerCaseStrategy.translate(String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SnakeCaseStrategy.translate(String)": [
            6,
            6,
            6
          ],
          "UpperCamelCaseStrategy.translate(String)": [
            3,
            3,
            3
          ],
          "KebabCaseStrategy.translate(String)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BeanAsArrayBuilderDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayBuilderDeserializer.java",
      "class_declaration": "public class BeanAsArrayBuilderDeserializer extends BeanDeserializerBase ",
      "methods_under_test": {
        "=1": {
          "BeanAsArrayBuilderDeserializer.asArrayDeserializer()": [
            1,
            1,
            1
          ],
          "BeanAsArrayBuilderDeserializer.supportsUpdate(DeserializationConfig)": [
            1,
            1,
            1
          ],
          "BeanAsArrayBuilderDeserializer.deserializeFromObject(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ],
          "BeanAsArrayBuilderDeserializer._deserializeFromNonArray(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BeanAsArrayBuilderDeserializer.unwrappingDeserializer(NameTransformer)": [
            2,
            2,
            2
          ],
          "BeanAsArrayBuilderDeserializer.withObjectIdReader(ObjectIdReader)": [
            2,
            2,
            2
          ],
          "BeanAsArrayBuilderDeserializer.withIgnorableProperties(Set<String>)": [
            2,
            2,
            2
          ],
          "BeanAsArrayBuilderDeserializer.withBeanProperties(BeanPropertyMap)": [
            2,
            2,
            2
          ],
          "BeanAsArrayBuilderDeserializer.finishBuild(DeserializationContext, Object)": [
            3,
            3,
            3
          ],
          "BeanAsArrayBuilderDeserializer.deserialize(JsonParser, DeserializationContext)": [
            10,
            10,
            10
          ],
          "BeanAsArrayBuilderDeserializer.deserialize(JsonParser, DeserializationContext, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "BeanAsArrayBuilderDeserializer._deserializeNonVanilla(JsonParser, DeserializationContext)": [
            11,
            11,
            11
          ],
          "BeanAsArrayBuilderDeserializer._deserializeUsingPropertyBased(final, JsonParser, final, DeserializationContext)": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "OptionalHandlerFactory",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
      "class_declaration": "public class OptionalHandlerFactory implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "OptionalHandlerFactory.findSerializer(SerializationConfig, JavaType, BeanDescription)": [
            6,
            6,
            6
          ],
          "OptionalHandlerFactory.findDeserializer(JavaType, DeserializationConfig, BeanDescription)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ConstantValueInstantiator",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/ConstantValueInstantiator.java",
      "class_declaration": "public class ConstantValueInstantiator extends ValueInstantiator ",
      "methods_under_test": {
        "=1": {
          "ConstantValueInstantiator.canInstantiate()": [
            1,
            1,
            1
          ],
          "ConstantValueInstantiator.canCreateUsingDefault()": [
            1,
            1,
            1
          ],
          "ConstantValueInstantiator.createUsingDefault(DeserializationContext)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ByteArraySerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/ByteArraySerializer.java",
      "class_declaration": "@JacksonStdImpl\npublic class ByteArraySerializer extends StdSerializer<byte[]> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PropertyBasedObjectIdGenerator",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedObjectIdGenerator.java",
      "class_declaration": "public class PropertyBasedObjectIdGenerator extends ObjectIdGenerators.PropertyGenerator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ByteBufferBackedInputStream",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/ByteBufferBackedInputStream.java",
      "class_declaration": "public class ByteBufferBackedInputStream extends InputStream ",
      "methods_under_test": {
        "=1": {
          "ByteBufferBackedInputStream.available()": [
            1,
            1,
            1
          ],
          "ByteBufferBackedInputStream.read()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ByteBufferBackedInputStream.read(byte[], int, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BooleanNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/BooleanNode.java",
      "class_declaration": "public class BooleanNode extends ValueNode ",
      "methods_under_test": {
        "=1": {
          "BooleanNode.valueOf(boolean)": [
            1,
            1,
            1
          ],
          "BooleanNode.asToken()": [
            1,
            1,
            1
          ],
          "BooleanNode.booleanValue()": [
            1,
            1,
            1
          ],
          "BooleanNode.asText()": [
            1,
            1,
            1
          ],
          "BooleanNode.asBoolean()": [
            1,
            1,
            1
          ],
          "BooleanNode.asBoolean(boolean)": [
            1,
            1,
            1
          ],
          "BooleanNode.asInt(int)": [
            1,
            1,
            1
          ],
          "BooleanNode.asLong(long)": [
            1,
            1,
            1
          ],
          "BooleanNode.asDouble(double)": [
            1,
            1,
            1
          ],
          "BooleanNode.serialize(JsonGenerator, SerializerProvider)": [
            1,
            1,
            1
          ],
          "BooleanNode.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BooleanNode.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ClassKey",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/ClassKey.java",
      "class_declaration": "public final class ClassKey implements Comparable<ClassKey>,\n        java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "ClassKey.reset(Class<?>)": [
            1,
            1,
            1
          ],
          "ClassKey.compareTo(ClassKey)": [
            1,
            1,
            1
          ],
          "ClassKey.hashCode()": [
            1,
            1,
            1
          ],
          "ClassKey.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ClassKey.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ContainerDeserializerBase",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class ContainerDeserializerBase <T> extends StdDeserializer<T> implements ValueInstantiator.Gettable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BeanDeserializerFactory",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "class_declaration": "public class BeanDeserializerFactory extends BasicDeserializerFactory implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "BeanDeserializerFactory.createBuilderBasedDeserializer(DeserializationContext, JavaType, BeanDescription, Class<?>)": [
            1,
            1,
            1
          ],
          "BeanDeserializerFactory.constructBeanDeserializerBuilder(DeserializationContext, BeanDescription)": [
            1,
            1,
            1
          ],
          "BeanDeserializerFactory.addReferenceProperties(DeserializationContext, BeanDescription, BeanDeserializerBuilder)": [
            1,
            1,
            1
          ],
          "BeanDeserializerFactory._validateSubType(DeserializationContext, JavaType, BeanDescription)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BeanDeserializerFactory.withConfig(DeserializerFactoryConfig)": [
            2,
            2,
            2
          ],
          "BeanDeserializerFactory.createBeanDeserializer(DeserializationContext, JavaType, BeanDescription)": [
            7,
            7,
            7
          ],
          "BeanDeserializerFactory.findStdDeserializer(DeserializationContext, JavaType, BeanDescription)": [
            4,
            4,
            4
          ],
          "BeanDeserializerFactory.materializeAbstractType(DeserializationContext, JavaType, BeanDescription)": [
            3,
            3,
            3
          ],
          "BeanDeserializerFactory.buildBeanDeserializer(DeserializationContext, JavaType, BeanDescription)": [
            8,
            8,
            8
          ],
          "BeanDeserializerFactory.buildBuilderBasedDeserializer(DeserializationContext, JavaType, BeanDescription)": [
            9,
            9,
            9
          ],
          "BeanDeserializerFactory.addObjectIdReader(DeserializationContext, BeanDescription, BeanDeserializerBuilder)": [
            4,
            4,
            4
          ],
          "BeanDeserializerFactory.buildThrowableDeserializer(DeserializationContext, JavaType, BeanDescription)": [
            8,
            8,
            8
          ],
          "BeanDeserializerFactory.addBeanProps(DeserializationContext, BeanDescription, BeanDeserializerBuilder)": [
            8,
            8,
            8
          ],
          "BeanDeserializerFactory.filterBeanProps(DeserializationContext, BeanDescription, BeanDeserializerBuilder, List<BeanPropertyDefinition>, Set<String>)": [
            5,
            5,
            5
          ],
          "BeanDeserializerFactory.addBackReferenceProperties(DeserializationContext, BeanDescription, BeanDeserializerBuilder)": [
            2,
            2,
            2
          ],
          "BeanDeserializerFactory.addInjectables(DeserializationContext, BeanDescription, BeanDeserializerBuilder)": [
            2,
            2,
            2
          ],
          "BeanDeserializerFactory.constructAnySetter(DeserializationContext, BeanDescription, AnnotatedMember)": [
            8,
            8,
            8
          ],
          "BeanDeserializerFactory.constructSettableProperty(DeserializationContext, BeanDescription, BeanPropertyDefinition, JavaType)": [
            7,
            7,
            7
          ],
          "BeanDeserializerFactory.constructSetterlessProperty(DeserializationContext, BeanDescription, BeanPropertyDefinition)": [
            3,
            3,
            3
          ],
          "BeanDeserializerFactory.isPotentialBeanType(Class<?>)": [
            4,
            4,
            4
          ],
          "BeanDeserializerFactory.isIgnorableType(DeserializationConfig, BeanPropertyDefinition, Class<?>, Map<Class<?>,Boolean>)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MappingJsonFactory",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/MappingJsonFactory.java",
      "class_declaration": "public class MappingJsonFactory extends JsonFactory ",
      "methods_under_test": {
        "=1": {
          "MappingJsonFactory.copy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MappingJsonFactory.hasFormat(InputAccessor)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MinimalClassNameIdResolver",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/MinimalClassNameIdResolver.java",
      "class_declaration": "public class MinimalClassNameIdResolver extends ClassNameIdResolver ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "MinimalClassNameIdResolver.idFromValue(Object)": [
            2,
            2,
            2
          ],
          "MinimalClassNameIdResolver._typeFromId(String, DatabindContext)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SimpleSerializers",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java",
      "class_declaration": "public class SimpleSerializers extends Serializers.Base implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SerializerFactoryConfig",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
      "class_declaration": "public final class SerializerFactoryConfig implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "SerializerFactoryConfig.hasSerializers()": [
            1,
            1,
            1
          ],
          "SerializerFactoryConfig.hasKeySerializers()": [
            1,
            1,
            1
          ],
          "SerializerFactoryConfig.hasSerializerModifiers()": [
            1,
            1,
            1
          ],
          "SerializerFactoryConfig.serializers()": [
            1,
            1,
            1
          ],
          "SerializerFactoryConfig.keySerializers()": [
            1,
            1,
            1
          ],
          "SerializerFactoryConfig.serializerModifiers()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SerializerFactoryConfig.withAdditionalSerializers(Serializers)": [
            2,
            2,
            2
          ],
          "SerializerFactoryConfig.withAdditionalKeySerializers(Serializers)": [
            2,
            2,
            2
          ],
          "SerializerFactoryConfig.withSerializerModifier(BeanSerializerModifier)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NullsFailProvider",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/NullsFailProvider.java",
      "class_declaration": "public class NullsFailProvider implements NullValueProvider, java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "NullsFailProvider.constructForProperty(BeanProperty)": [
            1,
            1,
            1
          ],
          "NullsFailProvider.constructForRootValue(JavaType)": [
            1,
            1,
            1
          ],
          "NullsFailProvider.getNullValue(DeserializationContext)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonschema/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "InnerClassProperty",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java",
      "class_declaration": "public final class InnerClassProperty extends SettableBeanProperty.Delegating ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Java7SupportImpl",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
      "class_declaration": "public class Java7SupportImpl extends Java7Support ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "Java7SupportImpl.getDeserializerForJavaNioFilePath(Class<?>)": [
            2,
            2,
            2
          ],
          "Java7SupportImpl.getSerializerForJavaNioFilePath(Class<?>)": [
            2,
            2,
            2
          ],
          "Java7SupportImpl.findTransient(Annotated)": [
            2,
            2,
            2
          ],
          "Java7SupportImpl.hasCreatorAnnotation(Annotated)": [
            2,
            2,
            2
          ],
          "Java7SupportImpl.findConstructorName(AnnotatedParameter)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TypeKey",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/TypeKey.java",
      "class_declaration": "public class TypeKey ",
      "methods_under_test": {
        "=1": {
          "TypeKey.untypedHash(Class<?>)": [
            1,
            1,
            1
          ],
          "TypeKey.typedHash(Class<?>)": [
            1,
            1,
            1
          ],
          "TypeKey.untypedHash(JavaType)": [
            1,
            1,
            1
          ],
          "TypeKey.typedHash(JavaType)": [
            1,
            1,
            1
          ],
          "TypeKey.resetTyped(Class<?>)": [
            1,
            1,
            1
          ],
          "TypeKey.resetUntyped(Class<?>)": [
            1,
            1,
            1
          ],
          "TypeKey.resetTyped(JavaType)": [
            1,
            1,
            1
          ],
          "TypeKey.resetUntyped(JavaType)": [
            1,
            1,
            1
          ],
          "TypeKey.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TypeKey.toString()": [
            2,
            2,
            2
          ],
          "TypeKey.equals(Object)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "EnumSetDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java",
      "class_declaration": "@SuppressWarnings(\"rawtypes\")\npublic class EnumSetDeserializer extends StdDeserializer<EnumSet<?>> implements ContextualDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnrecognizedPropertyException",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/exc/UnrecognizedPropertyException.java",
      "class_declaration": "public class UnrecognizedPropertyException extends PropertyBindingException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "UnrecognizedPropertyException.from(JsonParser, Object, String, Collection<Object>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "EnumResolver",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/EnumResolver.java",
      "class_declaration": "public class EnumResolver implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "EnumResolver.constructUsingToString(Class<Enum<?>>)": [
            1,
            1,
            1
          ],
          "EnumResolver.constructUnsafe(Class<?>, AnnotationIntrospector)": [
            1,
            1,
            1
          ],
          "EnumResolver.constructUnsafeUsingToString(Class<?>, AnnotationIntrospector)": [
            1,
            1,
            1
          ],
          "EnumResolver.constructUnsafeUsingMethod(Class<?>, AnnotatedMember, AnnotationIntrospector)": [
            1,
            1,
            1
          ],
          "EnumResolver.constructLookup()": [
            1,
            1,
            1
          ],
          "EnumResolver.findEnum(String)": [
            1,
            1,
            1
          ],
          "EnumResolver.lastValidIndex()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EnumResolver.constructFor(Class<Enum<?>>, AnnotationIntrospector)": [
            4,
            4,
            4
          ],
          "EnumResolver.constructUsingToString(Class<Enum<?>>, AnnotationIntrospector)": [
            2,
            2,
            2
          ],
          "EnumResolver.constructUsingMethod(Class<Enum<?>>, AnnotatedMember, AnnotationIntrospector)": [
            5,
            5,
            5
          ],
          "EnumResolver.getEnum(int)": [
            2,
            2,
            2
          ],
          "EnumResolver.getEnums()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StdKeyDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java",
      "class_declaration": "@JacksonStdImpl\npublic class StdKeyDeserializer extends KeyDeserializer implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "StdKeyDeserializer._parseInt(String)": [
            1,
            1,
            1
          ],
          "StdKeyDeserializer._parseLong(String)": [
            1,
            1,
            1
          ],
          "StdKeyDeserializer._parseDouble(String)": [
            1,
            1,
            1
          ],
          "StdKeyDeserializer._weirdKey(DeserializationContext, String, Exception)": [
            1,
            1,
            1
          ],
          "StringKD.deserializeKey(String, DeserializationContext)": [
            1,
            1,
            1
          ],
          "StringCtorKeyDeserializer._parse(String, DeserializationContext)": [
            1,
            1,
            1
          ],
          "StringFactoryKeyDeserializer._parse(String, DeserializationContext)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StringKD.forType(Class<?>)": [
            3,
            3,
            3
          ],
          "DelegatingKD.deserializeKey(String, DeserializationContext)": [
            10,
            10,
            10
          ],
          "EnumKD._parse(String, DeserializationContext)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NullsConstantProvider",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/NullsConstantProvider.java",
      "class_declaration": "public class NullsConstantProvider implements NullValueProvider, java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "NullsConstantProvider.skipper()": [
            1,
            1,
            1
          ],
          "NullsConstantProvider.nuller()": [
            1,
            1,
            1
          ],
          "NullsConstantProvider.isSkipper(NullValueProvider)": [
            1,
            1,
            1
          ],
          "NullsConstantProvider.isNuller(NullValueProvider)": [
            1,
            1,
            1
          ],
          "NullsConstantProvider.getNullValue(DeserializationContext)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NullsConstantProvider.forValue(Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MapLikeType",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java",
      "class_declaration": "public class MapLikeType extends TypeBase ",
      "methods_under_test": {
        "=1": {
          "MapLikeType._narrow(Class<?>)": [
            1,
            1,
            1
          ],
          "MapLikeType.withTypeHandler(Object)": [
            1,
            1,
            1
          ],
          "MapLikeType.withContentTypeHandler(Object)": [
            1,
            1,
            1
          ],
          "MapLikeType.withValueHandler(Object)": [
            1,
            1,
            1
          ],
          "MapLikeType.withContentValueHandler(Object)": [
            1,
            1,
            1
          ],
          "MapLikeType.refine(Class<?>, TypeBindings, JavaType, JavaType[])": [
            1,
            1,
            1
          ],
          "MapLikeType.hasHandlers()": [
            1,
            1,
            1
          ],
          "MapLikeType.getErasedSignature(StringBuilder)": [
            1,
            1,
            1
          ],
          "MapLikeType.getGenericSignature(StringBuilder)": [
            1,
            1,
            1
          ],
          "MapLikeType.withKeyTypeHandler(Object)": [
            1,
            1,
            1
          ],
          "MapLikeType.withKeyValueHandler(Object)": [
            1,
            1,
            1
          ],
          "MapLikeType.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MapLikeType.upgradeFrom(JavaType, JavaType, JavaType)": [
            2,
            2,
            2
          ],
          "MapLikeType.construct(Class<?>, JavaType, JavaType)": [
            2,
            2,
            2
          ],
          "MapLikeType.withKeyType(JavaType)": [
            2,
            2,
            2
          ],
          "MapLikeType.withContentType(JavaType)": [
            2,
            2,
            2
          ],
          "MapLikeType.withHandlersFrom(JavaType)": [
            6,
            6,
            6
          ],
          "MapLikeType.withStaticTyping()": [
            2,
            2,
            2
          ],
          "MapLikeType.buildCanonicalName()": [
            2,
            2,
            2
          ],
          "MapLikeType.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MergingSettableBeanProperty",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/MergingSettableBeanProperty.java",
      "class_declaration": "public class MergingSettableBeanProperty extends SettableBeanProperty.Delegating ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "StringSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
      "class_declaration": "@JacksonStdImpl\npublic final class StringSerializer extends StdScalarSerializer<Object> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SerializerCache",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/SerializerCache.java",
      "class_declaration": "public final class SerializerCache ",
      "methods_under_test": {
        "=1": {
          "SerializerCache.size()": [
            1,
            1,
            1
          ],
          "SerializerCache.flush()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SerializerCache.getReadOnlyLookupMap()": [
            2,
            2,
            2
          ],
          "SerializerCache.untypedValueSerializer(Class<?>)": [
            2,
            2,
            2
          ],
          "SerializerCache.untypedValueSerializer(JavaType)": [
            2,
            2,
            2
          ],
          "SerializerCache.typedValueSerializer(JavaType)": [
            2,
            2,
            2
          ],
          "SerializerCache.typedValueSerializer(Class<?>)": [
            2,
            2,
            2
          ],
          "SerializerCache.addTypedSerializer(JavaType, JsonSerializer<Object>)": [
            3,
            3,
            3
          ],
          "SerializerCache.addTypedSerializer(Class<?>, JsonSerializer<Object>)": [
            3,
            3,
            3
          ],
          "SerializerCache.addAndResolveNonTypedSerializer(Class<?>, JsonSerializer<Object>, SerializerProvider)": [
            4,
            4,
            4
          ],
          "SerializerCache.addAndResolveNonTypedSerializer(JavaType, JsonSerializer<Object>, SerializerProvider)": [
            4,
            4,
            4
          ],
          "SerializerCache.addAndResolveNonTypedSerializer(Class<?>, JavaType, JsonSerializer<Object>, SerializerProvider)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ObjectArraySerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java",
      "class_declaration": "@JacksonStdImpl\n@SuppressWarnings(\"serial\")\npublic class ObjectArraySerializer extends ArraySerializerBase<Object[]> implements ContextualSerializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StdValueInstantiator",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
      "class_declaration": "@JacksonStdImpl\npublic class StdValueInstantiator extends ValueInstantiator implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "StdValueInstantiator.configureFromObjectSettings(AnnotatedWithParams, AnnotatedWithParams, JavaType, SettableBeanProperty[], AnnotatedWithParams, SettableBeanProperty[])": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.configureFromArraySettings(AnnotatedWithParams, JavaType, SettableBeanProperty[])": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.configureFromStringCreator(AnnotatedWithParams)": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.configureFromIntCreator(AnnotatedWithParams)": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.configureFromLongCreator(AnnotatedWithParams)": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.configureFromDoubleCreator(AnnotatedWithParams)": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.configureFromBooleanCreator(AnnotatedWithParams)": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.configureIncompleteParameter(AnnotatedParameter)": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.canCreateFromString()": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.canCreateFromInt()": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.canCreateFromLong()": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.canCreateFromDouble()": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.canCreateFromBoolean()": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.canCreateUsingDefault()": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.canCreateUsingDelegate()": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.canCreateUsingArrayDelegate()": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.canCreateFromObjectWith()": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.canInstantiate()": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.getDelegateType(DeserializationConfig)": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.getArrayDelegateType(DeserializationConfig)": [
            1,
            1,
            1
          ],
          "StdValueInstantiator.getFromObjectArguments(DeserializationConfig)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StdValueInstantiator.createUsingDefault(DeserializationContext)": [
            4,
            4,
            4
          ],
          "StdValueInstantiator.createFromObjectWith(DeserializationContext, Object[])": [
            4,
            4,
            4
          ],
          "StdValueInstantiator.createUsingDelegate(DeserializationContext, Object)": [
            3,
            3,
            3
          ],
          "StdValueInstantiator.createUsingArrayDelegate(DeserializationContext, Object)": [
            3,
            3,
            3
          ],
          "StdValueInstantiator.createFromString(DeserializationContext, String)": [
            4,
            4,
            4
          ],
          "StdValueInstantiator.createFromInt(DeserializationContext, int)": [
            7,
            7,
            7
          ],
          "StdValueInstantiator.createFromLong(DeserializationContext, long)": [
            4,
            4,
            4
          ],
          "StdValueInstantiator.createFromDouble(DeserializationContext, double)": [
            4,
            4,
            4
          ],
          "StdValueInstantiator.createFromBoolean(DeserializationContext, boolean)": [
            4,
            4,
            4
          ],
          "StdValueInstantiator.wrapException(Throwable)": [
            3,
            3,
            3
          ],
          "StdValueInstantiator.unwrapAndWrapException(DeserializationContext, Throwable)": [
            3,
            3,
            3
          ],
          "StdValueInstantiator.wrapAsJsonMappingException(DeserializationContext, Throwable)": [
            2,
            2,
            2
          ],
          "StdValueInstantiator.rewrapCtorProblem(DeserializationContext, Throwable)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "LongNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/LongNode.java",
      "class_declaration": "public class LongNode extends NumericNode ",
      "methods_under_test": {
        "=1": {
          "LongNode.valueOf(long)": [
            1,
            1,
            1
          ],
          "LongNode.asToken()": [
            1,
            1,
            1
          ],
          "LongNode.numberType()": [
            1,
            1,
            1
          ],
          "LongNode.canConvertToInt()": [
            1,
            1,
            1
          ],
          "LongNode.canConvertToLong()": [
            1,
            1,
            1
          ],
          "LongNode.numberValue()": [
            1,
            1,
            1
          ],
          "LongNode.shortValue()": [
            1,
            1,
            1
          ],
          "LongNode.intValue()": [
            1,
            1,
            1
          ],
          "LongNode.longValue()": [
            1,
            1,
            1
          ],
          "LongNode.floatValue()": [
            1,
            1,
            1
          ],
          "LongNode.doubleValue()": [
            1,
            1,
            1
          ],
          "LongNode.decimalValue()": [
            1,
            1,
            1
          ],
          "LongNode.bigIntegerValue()": [
            1,
            1,
            1
          ],
          "LongNode.asText()": [
            1,
            1,
            1
          ],
          "LongNode.asBoolean(boolean)": [
            1,
            1,
            1
          ],
          "LongNode.serialize(JsonGenerator, SerializerProvider)": [
            1,
            1,
            1
          ],
          "LongNode.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LongNode.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AsWrapperTypeDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java",
      "class_declaration": "public class AsWrapperTypeDeserializer extends TypeDeserializerBase implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "AsWrapperTypeDeserializer.forProperty(BeanProperty)": [
            1,
            1,
            1
          ],
          "AsWrapperTypeDeserializer.deserializeTypedFromObject(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ],
          "AsWrapperTypeDeserializer.deserializeTypedFromArray(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ],
          "AsWrapperTypeDeserializer.deserializeTypedFromScalar(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ],
          "AsWrapperTypeDeserializer.deserializeTypedFromAny(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AsWrapperTypeDeserializer._deserialize(JsonParser, DeserializationContext)": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SimpleAbstractTypeResolver",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java",
      "class_declaration": "public class SimpleAbstractTypeResolver extends AbstractTypeResolver implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "SimpleAbstractTypeResolver.resolveAbstractType(DeserializationConfig, JavaType)": [
            1,
            1,
            1
          ],
          "SimpleAbstractTypeResolver.resolveAbstractType(DeserializationConfig, BeanDescription)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SimpleAbstractTypeResolver.addMapping(Class<T>, Class<? extends T>)": [
            4,
            4,
            4
          ],
          "SimpleAbstractTypeResolver.findTypeMapping(DeserializationConfig, JavaType)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BeanDeserializerBase",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "class_declaration": "public abstract class BeanDeserializerBase extends StdDeserializer<Object> implements ContextualDeserializer, ResolvableDeserializer,\n        ValueInstantiator.Gettable, \n        java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DateSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
      "class_declaration": "@JacksonStdImpl\n@SuppressWarnings(\"serial\")\npublic class DateSerializer extends DateTimeSerializerBase<Date> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MethodProperty",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
      "class_declaration": "public final class MethodProperty extends SettableBeanProperty ",
      "methods_under_test": {
        "=1": {
          "MethodProperty.withName(PropertyName)": [
            1,
            1,
            1
          ],
          "MethodProperty.withNullProvider(NullValueProvider)": [
            1,
            1,
            1
          ],
          "MethodProperty.fixAccess(DeserializationConfig)": [
            1,
            1,
            1
          ],
          "MethodProperty.getAnnotation(Class<A>)": [
            1,
            1,
            1
          ],
          "MethodProperty.readResolve()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MethodProperty.withValueDeserializer(JsonDeserializer<?>)": [
            2,
            2,
            2
          ],
          "MethodProperty.deserializeAndSet(JsonParser, DeserializationContext, Object)": [
            8,
            8,
            8
          ],
          "MethodProperty.deserializeSetAndReturn(JsonParser, DeserializationContext, Object)": [
            9,
            9,
            9
          ],
          "MethodProperty.set(Object, Object)": [
            3,
            3,
            3
          ],
          "MethodProperty.setAndReturn(Object, Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "InvalidDefinitionException",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/exc/InvalidDefinitionException.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class InvalidDefinitionException extends JsonMappingException ",
      "methods_under_test": {
        "=1": {
          "InvalidDefinitionException.from(JsonParser, String, BeanDescription, BeanPropertyDefinition)": [
            1,
            1,
            1
          ],
          "InvalidDefinitionException.from(JsonParser, String, JavaType)": [
            1,
            1,
            1
          ],
          "InvalidDefinitionException.from(JsonGenerator, String, BeanDescription, BeanPropertyDefinition)": [
            1,
            1,
            1
          ],
          "InvalidDefinitionException.from(JsonGenerator, String, JavaType)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CollectionSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java",
      "class_declaration": "public class CollectionSerializer extends AsArraySerializerBase<Collection<?>> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "EnumDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java",
      "class_declaration": "@JacksonStdImpl \npublic class EnumDeserializer extends StdScalarDeserializer<Object> implements ContextualDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SimpleBeanPropertyFilter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java",
      "class_declaration": "@SuppressWarnings(\"deprecation\")\npublic class SimpleBeanPropertyFilter implements BeanPropertyFilter, PropertyFilter ",
      "methods_under_test": {
        "=1": {
          "SimpleBeanPropertyFilter.serializeAll()": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyFilter.serializeAll(Set<String>)": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyFilter.filterOutAllExcept(Set<String>)": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyFilter.filterOutAllExcept()": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyFilter.serializeAllExcept(Set<String>)": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyFilter.serializeAllExcept()": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyFilter.from(final, BeanPropertyFilter)": [
            1,
            1,
            1
          ],
          "SimpleBeanPropertyFilter.includeElement(Object)": [
            1,
            1,
            1
          ],
          "FilterExceptFilter.include(BeanPropertyWriter)": [
            1,
            1,
            1
          ],
          "FilterExceptFilter.include(PropertyWriter)": [
            1,
            1,
            1
          ],
          "SerializeExceptFilter.include(BeanPropertyWriter)": [
            1,
            1,
            1
          ],
          "SerializeExceptFilter.include(PropertyWriter)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SimpleBeanPropertyFilter.serializeAsField(Object, JsonGenerator, SerializerProvider, BeanPropertyWriter)": [
            4,
            4,
            4
          ],
          "SimpleBeanPropertyFilter.depositSchemaProperty(BeanPropertyWriter, ObjectNode, SerializerProvider)": [
            2,
            2,
            2
          ],
          "SimpleBeanPropertyFilter.depositSchemaProperty(BeanPropertyWriter, JsonObjectFormatVisitor, SerializerProvider)": [
            2,
            2,
            2
          ],
          "SimpleBeanPropertyFilter.serializeAsField(Object, JsonGenerator, SerializerProvider, PropertyWriter)": [
            4,
            4,
            4
          ],
          "SimpleBeanPropertyFilter.serializeAsElement(Object, JsonGenerator, SerializerProvider, PropertyWriter)": [
            2,
            2,
            2
          ],
          "SimpleBeanPropertyFilter.depositSchemaProperty(PropertyWriter, ObjectNode, SerializerProvider)": [
            2,
            2,
            2
          ],
          "SimpleBeanPropertyFilter.depositSchemaProperty(PropertyWriter, JsonObjectFormatVisitor, SerializerProvider)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ObjectIdValueProperty",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
      "class_declaration": "public final class ObjectIdValueProperty extends SettableBeanProperty ",
      "methods_under_test": {
        "=1": {
          "ObjectIdValueProperty.withName(PropertyName)": [
            1,
            1,
            1
          ],
          "ObjectIdValueProperty.withNullProvider(NullValueProvider)": [
            1,
            1,
            1
          ],
          "ObjectIdValueProperty.getAnnotation(Class<A>)": [
            1,
            1,
            1
          ],
          "ObjectIdValueProperty.deserializeAndSet(JsonParser, DeserializationContext, Object)": [
            1,
            1,
            1
          ],
          "ObjectIdValueProperty.set(Object, Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ObjectIdValueProperty.withValueDeserializer(JsonDeserializer<?>)": [
            2,
            2,
            2
          ],
          "ObjectIdValueProperty.deserializeSetAndReturn(JsonParser, DeserializationContext, Object)": [
            3,
            3,
            3
          ],
          "ObjectIdValueProperty.setAndReturn(Object, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ClassNameIdResolver",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java",
      "class_declaration": "public class ClassNameIdResolver extends TypeIdResolverBase ",
      "methods_under_test": {
        "=1": {
          "ClassNameIdResolver.idFromValue(Object)": [
            1,
            1,
            1
          ],
          "ClassNameIdResolver.idFromValueAndType(Object, Class<?>)": [
            1,
            1,
            1
          ],
          "ClassNameIdResolver.typeFromId(DatabindContext, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ClassNameIdResolver._typeFromId(String, DatabindContext)": [
            3,
            3,
            3
          ],
          "ClassNameIdResolver._idFrom(Object, Class<?>, TypeFactory)": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ContainerBuilder",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/attic/ContainerBuilder.java",
      "class_declaration": "public final class ContainerBuilder ",
      "methods_under_test": {
        "=1": {
          "ContainerBuilder.canReuse()": [
            1,
            1,
            1
          ],
          "ContainerBuilder.bufferLength()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ContainerBuilder.start()": [
            2,
            2,
            2
          ],
          "ContainerBuilder.startList(Object)": [
            2,
            2,
            2
          ],
          "ContainerBuilder.startMap(String, Object)": [
            2,
            2,
            2
          ],
          "ContainerBuilder.add(Object)": [
            4,
            4,
            4
          ],
          "ContainerBuilder.put(String, Object)": [
            4,
            4,
            4
          ],
          "ContainerBuilder.finishList(int)": [
            2,
            2,
            2
          ],
          "ContainerBuilder.finishArray(int)": [
            2,
            2,
            2
          ],
          "ContainerBuilder.finishArray(int, Class<T>)": [
            2,
            2,
            2
          ],
          "ContainerBuilder.finishMap(int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "IteratorSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/IteratorSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\n@JacksonStdImpl\npublic class IteratorSerializer extends AsArraySerializerBase<Iterator<?>> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TypeBindings",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/attic/TypeBindings.java",
      "class_declaration": "public class TypeBindings ",
      "methods_under_test": {
        "=1": {
          "TypeBindings.childInstance()": [
            1,
            1,
            1
          ],
          "TypeBindings.resolveType(Class<?>)": [
            1,
            1,
            1
          ],
          "TypeBindings.resolveType(Type)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TypeBindings.addBinding(String, JavaType)": [
            2,
            2,
            2
          ],
          "TypeBindings.typesAsArray()": [
            3,
            3,
            3
          ],
          "TypeBindings.getBindingCount()": [
            2,
            2,
            2
          ],
          "TypeBindings._resolve()": [
            5,
            5,
            5
          ],
          "TypeBindings._addPlaceholder(String)": [
            2,
            2,
            2
          ],
          "TypeBindings.toString()": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "TypeBindings.findType(String, boolean)": [
            17,
            17,
            17
          ],
          "TypeBindings._resolveBindings(Type)": [
            17,
            17,
            17
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AsWrapperTypeSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java",
      "class_declaration": "public class AsWrapperTypeSerializer extends TypeSerializerBase ",
      "methods_under_test": {
        "=1": {
          "AsWrapperTypeSerializer.forProperty(BeanProperty)": [
            1,
            1,
            1
          ],
          "AsWrapperTypeSerializer._validTypeId(String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AsWrapperTypeSerializer._writeTypeId(JsonGenerator, String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnknownSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class UnknownSerializer extends StdSerializer<Object> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AsPropertyTypeSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java",
      "class_declaration": "public class AsPropertyTypeSerializer extends AsArrayTypeSerializer ",
      "methods_under_test": {
        "=1": {
          "AsPropertyTypeSerializer.forProperty(BeanProperty)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
      "class_declaration": "public abstract class JsonDeserializer <T> implements NullValueProvider ",
      "methods_under_test": {
        "=1": {
          "JsonDeserializer.deserializeWithType(JsonParser, DeserializationContext, TypeDeserializer)": [
            1,
            1,
            1
          ],
          "JsonDeserializer.unwrappingDeserializer(NameTransformer)": [
            1,
            1,
            1
          ],
          "JsonDeserializer.replaceDelegatee(JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "JsonDeserializer.handledType()": [
            1,
            1,
            1
          ],
          "JsonDeserializer.getNullValue(DeserializationContext)": [
            1,
            1,
            1
          ],
          "JsonDeserializer.getEmptyValue(DeserializationContext)": [
            1,
            1,
            1
          ],
          "JsonDeserializer.findBackReference(String)": [
            1,
            1,
            1
          ],
          "JsonDeserializer.supportsUpdate(DeserializationConfig)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonDeserializer.deserialize(JsonParser, DeserializationContext, T)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StdDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
      "class_declaration": "public abstract class StdDeserializer <T> extends JsonDeserializer<T> implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Java7Support",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ext/Java7Support.java",
      "class_declaration": "public abstract class Java7Support ",
      "methods_under_test": {
        "=1": {
          "Java7Support.instance()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FilteredBeanPropertyWriter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/FilteredBeanPropertyWriter.java",
      "class_declaration": "public abstract class FilteredBeanPropertyWriter ",
      "methods_under_test": {
        "=1": {
          "SingleView.rename(NameTransformer)": [
            1,
            1,
            1
          ],
          "SingleView.assignSerializer(JsonSerializer<Object>)": [
            1,
            1,
            1
          ],
          "SingleView.assignNullSerializer(JsonSerializer<Object>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FilteredBeanPropertyWriter.constructViewBased(BeanPropertyWriter, Class<?>[])": [
            2,
            2,
            2
          ],
          "SingleView.serializeAsField(Object, JsonGenerator, SerializerProvider)": [
            3,
            3,
            3
          ],
          "SingleView.serializeAsElement(Object, JsonGenerator, SerializerProvider)": [
            3,
            3,
            3
          ],
          "SingleView.depositSchemaProperty(JsonObjectFormatVisitor, SerializerProvider)": [
            2,
            2,
            2
          ],
          "MultiView.rename(NameTransformer)": [
            2,
            2,
            2
          ],
          "MultiView.assignSerializer(JsonSerializer<Object>)": [
            2,
            2,
            2
          ],
          "MultiView.assignNullSerializer(JsonSerializer<Object>)": [
            2,
            2,
            2
          ],
          "MultiView.serializeAsField(Object, JsonGenerator, SerializerProvider)": [
            5,
            5,
            5
          ],
          "MultiView.serializeAsElement(Object, JsonGenerator, SerializerProvider)": [
            5,
            5,
            5
          ],
          "MultiView.depositSchemaProperty(JsonObjectFormatVisitor, SerializerProvider)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NioPathDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ext/NioPathDeserializer.java",
      "class_declaration": "public class NioPathDeserializer extends StdScalarDeserializer<Path> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "EnumSetSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class EnumSetSerializer extends AsArraySerializerBase<EnumSet<? extends Enum<?>>> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PropertyValueBuffer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java",
      "class_declaration": "public class PropertyValueBuffer ",
      "methods_under_test": {
        "=1": {
          "PropertyValueBuffer.buffered()": [
            1,
            1,
            1
          ],
          "PropertyValueBuffer.bufferProperty(SettableBeanProperty, Object)": [
            1,
            1,
            1
          ],
          "PropertyValueBuffer.bufferAnyProperty(SettableAnyProperty, String, Object)": [
            1,
            1,
            1
          ],
          "PropertyValueBuffer.bufferMapProperty(Object, Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PropertyValueBuffer.hasParameter(SettableBeanProperty)": [
            2,
            2,
            2
          ],
          "PropertyValueBuffer.getParameter(SettableBeanProperty)": [
            3,
            3,
            3
          ],
          "PropertyValueBuffer.getParameters(SettableBeanProperty[])": [
            9,
            9,
            9
          ],
          "PropertyValueBuffer._findMissing(SettableBeanProperty)": [
            4,
            4,
            4
          ],
          "PropertyValueBuffer.readIdProperty(String)": [
            2,
            2,
            2
          ],
          "PropertyValueBuffer.handleIdValue(final, DeserializationContext, Object)": [
            4,
            4,
            4
          ],
          "PropertyValueBuffer.assignParameter(SettableBeanProperty, Object)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonIntegerFormatVisitor",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonIntegerFormatVisitor.java",
      "class_declaration": "public static class Base extends JsonValueFormatVisitor.Base implements JsonIntegerFormatVisitor ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BeanProperty",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java",
      "class_declaration": "public static class Std implements BeanProperty,\n        java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "Std.withType(JavaType)": [
            1,
            1,
            1
          ],
          "Std.getAnnotation(Class<A>)": [
            1,
            1,
            1
          ],
          "Std.getContextAnnotation(Class<A>)": [
            1,
            1,
            1
          ],
          "Std.findAliases(MapperConfig<?>)": [
            1,
            1,
            1
          ],
          "Std.depositSchemaProperty(JsonObjectFormatVisitor, SerializerProvider)": [
            1,
            1,
            1
          ],
          "Bogus.getAnnotation(Class<A>)": [
            1,
            1,
            1
          ],
          "Bogus.getContextAnnotation(Class<A>)": [
            1,
            1,
            1
          ],
          "Bogus.findFormatOverrides(AnnotationIntrospector)": [
            1,
            1,
            1
          ],
          "Bogus.findPropertyFormat(MapperConfig<?>, Class<?>)": [
            1,
            1,
            1
          ],
          "Bogus.findPropertyInclusion(MapperConfig<?>, Class<?>)": [
            1,
            1,
            1
          ],
          "Bogus.findAliases(MapperConfig<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Std.findFormatOverrides(AnnotationIntrospector)": [
            3,
            3,
            3
          ],
          "Std.findPropertyFormat(MapperConfig<?>, Class<?>)": [
            3,
            3,
            3
          ],
          "Std.findPropertyInclusion(MapperConfig<?>, Class<?>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/cfg/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SubtypeResolver",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
      "class_declaration": "public abstract class SubtypeResolver ",
      "methods_under_test": {
        "=1": {
          "SubtypeResolver.collectAndResolveSubtypesByClass(MapperConfig<?>, AnnotatedMember, JavaType)": [
            1,
            1,
            1
          ],
          "SubtypeResolver.collectAndResolveSubtypesByClass(MapperConfig<?>, AnnotatedClass)": [
            1,
            1,
            1
          ],
          "SubtypeResolver.collectAndResolveSubtypesByTypeId(MapperConfig<?>, AnnotatedMember, JavaType)": [
            1,
            1,
            1
          ],
          "SubtypeResolver.collectAndResolveSubtypesByTypeId(MapperConfig<?>, AnnotatedClass)": [
            1,
            1,
            1
          ],
          "SubtypeResolver.collectAndResolveSubtypes(AnnotatedMember, MapperConfig<?>, AnnotationIntrospector, JavaType)": [
            1,
            1,
            1
          ],
          "SubtypeResolver.collectAndResolveSubtypes(AnnotatedClass, MapperConfig<?>, AnnotationIntrospector)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NumberSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
      "class_declaration": "@JacksonStdImpl\n@SuppressWarnings(\"serial\")\npublic class NumberSerializer extends StdScalarSerializer<Number> implements ContextualSerializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonFormatVisitable",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitable.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ReadOnlyClassToSerializerMap",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/ReadOnlyClassToSerializerMap.java",
      "class_declaration": "public final class ReadOnlyClassToSerializerMap ",
      "methods_under_test": {
        "=1": {
          "ReadOnlyClassToSerializerMap.from(HashMap<TypeKey, JsonSerializer<Object>>)": [
            1,
            1,
            1
          ],
          "ReadOnlyClassToSerializerMap.size()": [
            1,
            1,
            1
          ],
          "Bucket.matchesTyped(Class<?>)": [
            1,
            1,
            1
          ],
          "Bucket.matchesUntyped(Class<?>)": [
            1,
            1,
            1
          ],
          "Bucket.matchesTyped(JavaType)": [
            1,
            1,
            1
          ],
          "Bucket.matchesUntyped(JavaType)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ReadOnlyClassToSerializerMap.typedValueSerializer(JavaType)": [
            5,
            5,
            5
          ],
          "ReadOnlyClassToSerializerMap.typedValueSerializer(Class<?>)": [
            5,
            5,
            5
          ],
          "ReadOnlyClassToSerializerMap.untypedValueSerializer(JavaType)": [
            5,
            5,
            5
          ],
          "ReadOnlyClassToSerializerMap.untypedValueSerializer(Class<?>)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TypeIdResolverBase",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java",
      "class_declaration": "public abstract class TypeIdResolverBase implements TypeIdResolver ",
      "methods_under_test": {
        "=1": {
          "TypeIdResolverBase.idFromBaseType()": [
            1,
            1,
            1
          ],
          "TypeIdResolverBase.typeFromId(DatabindContext, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BasicBeanDescription",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
      "class_declaration": "public class BasicBeanDescription extends BeanDescription ",
      "methods_under_test": {
        "=1": {
          "BasicBeanDescription.forDeserialization(POJOPropertiesCollector)": [
            1,
            1,
            1
          ],
          "BasicBeanDescription.forSerialization(POJOPropertiesCollector)": [
            1,
            1,
            1
          ],
          "BasicBeanDescription.forOtherUse(MapperConfig<?>, JavaType, AnnotatedClass)": [
            1,
            1,
            1
          ],
          "BasicBeanDescription.hasProperty(PropertyName)": [
            1,
            1,
            1
          ],
          "BasicBeanDescription.findProperties()": [
            1,
            1,
            1
          ],
          "BasicBeanDescription.findJsonValueMethod()": [
            1,
            1,
            1
          ],
          "BasicBeanDescription.findJsonValueAccessor()": [
            1,
            1,
            1
          ],
          "BasicBeanDescription.hasKnownClassAnnotations()": [
            1,
            1,
            1
          ],
          "BasicBeanDescription.bindingsForBeanType()": [
            1,
            1,
            1
          ],
          "BasicBeanDescription.findDefaultConstructor()": [
            1,
            1,
            1
          ],
          "BasicBeanDescription.findMethod(String, Class<?>[])": [
            1,
            1,
            1
          ],
          "BasicBeanDescription.findPOJOBuilder()": [
            1,
            1,
            1
          ],
          "BasicBeanDescription.findPOJOBuilderConfig()": [
            1,
            1,
            1
          ],
          "BasicBeanDescription.findClassDescription()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasicBeanDescription._properties()": [
            2,
            2,
            2
          ],
          "BasicBeanDescription.removeProperty(String)": [
            3,
            3,
            3
          ],
          "BasicBeanDescription.addProperty(BeanPropertyDefinition)": [
            2,
            2,
            2
          ],
          "BasicBeanDescription.findProperty(PropertyName)": [
            3,
            3,
            3
          ],
          "BasicBeanDescription.getIgnoredPropertyNames()": [
            2,
            2,
            2
          ],
          "BasicBeanDescription.resolveType(java.lang.reflect.Type)": [
            2,
            2,
            2
          ],
          "BasicBeanDescription.findAnySetterAccessor()": [
            6,
            6,
            6
          ],
          "BasicBeanDescription.findInjectables()": [
            2,
            2,
            2
          ],
          "BasicBeanDescription.instantiateBean(boolean)": [
            4,
            4,
            4
          ],
          "BasicBeanDescription.findExpectedFormat(JsonFormat.Value)": [
            6,
            6,
            6
          ],
          "BasicBeanDescription.findDefaultViews()": [
            4,
            4,
            4
          ],
          "BasicBeanDescription.findSerializationConverter()": [
            2,
            2,
            2
          ],
          "BasicBeanDescription.findPropertyInclusion(JsonInclude.Value)": [
            3,
            3,
            3
          ],
          "BasicBeanDescription.findAnyGetter()": [
            3,
            3,
            3
          ],
          "BasicBeanDescription.findBackReferences()": [
            5,
            5,
            5
          ],
          "BasicBeanDescription.findBackReferenceProperties()": [
            3,
            3,
            3
          ],
          "BasicBeanDescription.getFactoryMethods()": [
            6,
            6,
            6
          ],
          "BasicBeanDescription.findSingleArgConstructor()": [
            5,
            5,
            5
          ],
          "BasicBeanDescription.findFactoryMethod()": [
            5,
            5,
            5
          ],
          "BasicBeanDescription.isFactoryMethod(AnnotatedMethod)": [
            8,
            8,
            8
          ],
          "BasicBeanDescription._findCreatorPropertyName(AnnotatedParameter)": [
            3,
            3,
            3
          ],
          "BasicBeanDescription.findDeserializationConverter()": [
            2,
            2,
            2
          ],
          "BasicBeanDescription._findPropertyFields(Collection<String>, boolean)": [
            5,
            5,
            5
          ],
          "BasicBeanDescription._createConverter(Object)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ConcreteBeanPropertyBase",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
      "class_declaration": "public abstract class ConcreteBeanPropertyBase implements BeanProperty, java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ConcreteBeanPropertyBase.findFormatOverrides(AnnotationIntrospector)": [
            4,
            4,
            4
          ],
          "ConcreteBeanPropertyBase.findPropertyFormat(MapperConfig<?>, Class<?>)": [
            5,
            5,
            5
          ],
          "ConcreteBeanPropertyBase.findPropertyInclusion(MapperConfig<?>, Class<?>)": [
            4,
            4,
            4
          ],
          "ConcreteBeanPropertyBase.findAliases(MapperConfig<?>)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "POJOPropertyBuilder",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
      "class_declaration": "public class POJOPropertyBuilder extends BeanPropertyDefinition implements Comparable<POJOPropertyBuilder> ",
      "methods_under_test": {
        "=1": {
          "POJOPropertyBuilder.withName(PropertyName)": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.withSimpleName(String)": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.hasName(PropertyName)": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.getWrapperName()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.hasGetter()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.hasSetter()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.hasField()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.hasConstructorParameter()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.couldDeserialize()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.couldSerialize()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.findViews()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder._findRequired()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder._findDescription()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder._findIndex()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder._findDefaultValue()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.findObjectIdInfo()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.findInclusion()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.findAccess()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.addField(AnnotatedField, PropertyName, boolean, boolean, boolean)": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.addCtor(AnnotatedParameter, PropertyName, boolean, boolean, boolean)": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.addGetter(AnnotatedMethod, PropertyName, boolean, boolean, boolean)": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.addSetter(AnnotatedMethod, PropertyName, boolean, boolean, boolean)": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.addAll(POJOPropertyBuilder)": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.removeIgnored()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.removeConstructors()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.trimByVisibility()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.anyVisible()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.anyIgnorals()": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.explode(Collection<PropertyName>)": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder._explode(Collection<PropertyName>, Map<PropertyName,POJOPropertyBuilder>, Linked<?>)": [
            1,
            1,
            1
          ],
          "POJOPropertyBuilder.toString()": [
            1,
            1,
            1
          ],
          "MemberIterator.hasNext()": [
            1,
            1,
            1
          ],
          "MemberIterator.remove()": [
            1,
            1,
            1
          ],
          "Linked.withoutNonVisible()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "POJOPropertyBuilder.compareTo(POJOPropertyBuilder)": [
            4,
            4,
            4
          ],
          "POJOPropertyBuilder.getMetadata()": [
            4,
            4,
            4
          ],
          "POJOPropertyBuilder.getPrimaryType()": [
            8,
            8,
            8
          ],
          "POJOPropertyBuilder.getGetter()": [
            9,
            9,
            9
          ],
          "POJOPropertyBuilder.getField()": [
            6,
            6,
            6
          ],
          "POJOPropertyBuilder.getConstructorParameter()": [
            4,
            4,
            4
          ],
          "POJOPropertyBuilder.getConstructorParameters()": [
            2,
            2,
            2
          ],
          "POJOPropertyBuilder.getPrimaryMember()": [
            3,
            3,
            3
          ],
          "POJOPropertyBuilder._getterPriority(AnnotatedMethod)": [
            3,
            3,
            3
          ],
          "POJOPropertyBuilder._setterPriority(AnnotatedMethod)": [
            2,
            2,
            2
          ],
          "POJOPropertyBuilder.findReferenceType()": [
            4,
            4,
            4
          ],
          "POJOPropertyBuilder.removeNonVisible(boolean)": [
            9,
            9,
            9
          ],
          "POJOPropertyBuilder.mergeAnnotations(boolean)": [
            8,
            8,
            8
          ],
          "POJOPropertyBuilder.findExplicitNames()": [
            2,
            2,
            2
          ],
          "POJOPropertyBuilder.fromMemberAnnotations(WithMember<T>)": [
            7,
            7,
            7
          ],
          "MemberIterator.next()": [
            2,
            2,
            2
          ],
          "Linked.withoutNext()": [
            2,
            2,
            2
          ],
          "Linked.withValue(T)": [
            2,
            2,
            2
          ],
          "Linked.withNext(Linked<T>)": [
            2,
            2,
            2
          ],
          "Linked.withoutIgnored()": [
            4,
            4,
            4
          ],
          "Linked.append(Linked<T>)": [
            2,
            2,
            2
          ],
          "Linked.trimByVisibility()": [
            6,
            6,
            6
          ],
          "Linked.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "POJOPropertyBuilder._getSetterInfo(PropertyMetadata)": [
            20,
            20,
            20
          ],
          "POJOPropertyBuilder.getSetter()": [
            12,
            12,
            12
          ],
          "POJOPropertyBuilder.fromMemberAnnotationsExcept(WithMember<T>, T)": [
            19,
            19,
            19
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "IntNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/IntNode.java",
      "class_declaration": "public class IntNode extends NumericNode ",
      "methods_under_test": {
        "=1": {
          "IntNode.asToken()": [
            1,
            1,
            1
          ],
          "IntNode.numberType()": [
            1,
            1,
            1
          ],
          "IntNode.canConvertToInt()": [
            1,
            1,
            1
          ],
          "IntNode.canConvertToLong()": [
            1,
            1,
            1
          ],
          "IntNode.numberValue()": [
            1,
            1,
            1
          ],
          "IntNode.shortValue()": [
            1,
            1,
            1
          ],
          "IntNode.intValue()": [
            1,
            1,
            1
          ],
          "IntNode.longValue()": [
            1,
            1,
            1
          ],
          "IntNode.floatValue()": [
            1,
            1,
            1
          ],
          "IntNode.doubleValue()": [
            1,
            1,
            1
          ],
          "IntNode.decimalValue()": [
            1,
            1,
            1
          ],
          "IntNode.bigIntegerValue()": [
            1,
            1,
            1
          ],
          "IntNode.asText()": [
            1,
            1,
            1
          ],
          "IntNode.asBoolean(boolean)": [
            1,
            1,
            1
          ],
          "IntNode.serialize(JsonGenerator, SerializerProvider)": [
            1,
            1,
            1
          ],
          "IntNode.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "IntNode.valueOf(int)": [
            2,
            2,
            2
          ],
          "IntNode.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseJsonNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java",
      "class_declaration": "public abstract class BaseJsonNode extends JsonNode implements JsonSerializable ",
      "methods_under_test": {
        "=1": {
          "BaseJsonNode.traverse()": [
            1,
            1,
            1
          ],
          "BaseJsonNode.traverse(ObjectCodec)": [
            1,
            1,
            1
          ],
          "BaseJsonNode.numberType()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BaseJsonNode.findPath(String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MapEntryDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/MapEntryDeserializer.java",
      "class_declaration": "@JacksonStdImpl\npublic class MapEntryDeserializer extends ContainerDeserializerBase<Map.Entry<Object,Object>> implements ContextualDeserializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BasicDeserializerFactory",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class BasicDeserializerFactory extends DeserializerFactory implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "BasicDeserializerFactory.withAdditionalDeserializers(Deserializers)": [
            1,
            1,
            1
          ],
          "BasicDeserializerFactory.withAdditionalKeyDeserializers(KeyDeserializers)": [
            1,
            1,
            1
          ],
          "BasicDeserializerFactory.withDeserializerModifier(BeanDeserializerModifier)": [
            1,
            1,
            1
          ],
          "BasicDeserializerFactory.withAbstractTypeResolver(AbstractTypeResolver)": [
            1,
            1,
            1
          ],
          "BasicDeserializerFactory.withValueInstantiators(ValueInstantiators)": [
            1,
            1,
            1
          ],
          "BasicDeserializerFactory._reportUnwrappedCreatorProperty(DeserializationContext, BeanDescription, AnnotatedParameter)": [
            1,
            1,
            1
          ],
          "BasicDeserializerFactory.findOptionalStdDeserializer(DeserializationContext, JavaType, BeanDescription)": [
            1,
            1,
            1
          ],
          "BasicDeserializerFactory._findRemappedType(DeserializationConfig, Class<?>)": [
            1,
            1,
            1
          ],
          "BasicDeserializerFactory.resolveType(DeserializationContext, BeanDescription, JavaType, AnnotatedMember)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasicDeserializerFactory.mapAbstractType(DeserializationConfig, JavaType)": [
            2,
            2,
            2
          ],
          "BasicDeserializerFactory.findValueInstantiator(DeserializationContext, BeanDescription)": [
            8,
            8,
            8
          ],
          "BasicDeserializerFactory._constructDefaultValueInstantiator(DeserializationContext, BeanDescription)": [
            2,
            2,
            2
          ],
          "BasicDeserializerFactory._findCreatorsFromProperties(DeserializationContext, BeanDescription)": [
            6,
            6,
            6
          ],
          "BasicDeserializerFactory._valueInstantiatorInstance(DeserializationConfig, Annotated, Object)": [
            8,
            8,
            8
          ],
          "BasicDeserializerFactory._addExplicitDelegatingCreator(DeserializationContext, BeanDescription, CreatorCollector, CreatorCandidate)": [
            7,
            7,
            7
          ],
          "BasicDeserializerFactory._addExplicitPropertyCreator(DeserializationContext, BeanDescription, CreatorCollector, CreatorCandidate)": [
            5,
            5,
            5
          ],
          "BasicDeserializerFactory._addExplicitAnyCreator(DeserializationContext, BeanDescription, CreatorCollector, CreatorCandidate)": [
            7,
            7,
            7
          ],
          "BasicDeserializerFactory._addDeserializerFactoryMethods(DeserializationContext, BeanDescription, VisibilityChecker<?>, AnnotationIntrospector, CreatorCollector, Map<AnnotatedWithParams,BeanPropertyDefinition[]>)": [
            10,
            10,
            10
          ],
          "BasicDeserializerFactory.constructCreatorProperty(DeserializationContext, BeanDescription, PropertyName, int, AnnotatedParameter, JacksonInject.Value)": [
            5,
            5,
            5
          ],
          "BasicDeserializerFactory.createArrayDeserializer(DeserializationContext, ArrayType, final, BeanDescription)": [
            8,
            8,
            8
          ],
          "BasicDeserializerFactory._mapAbstractCollectionType(JavaType, DeserializationConfig)": [
            2,
            2,
            2
          ],
          "BasicDeserializerFactory.createCollectionLikeDeserializer(DeserializationContext, CollectionLikeType, final, BeanDescription)": [
            5,
            5,
            5
          ],
          "BasicDeserializerFactory.createMapLikeDeserializer(DeserializationContext, MapLikeType, final, BeanDescription)": [
            5,
            5,
            5
          ],
          "BasicDeserializerFactory.createEnumDeserializer(DeserializationContext, JavaType, BeanDescription)": [
            9,
            9,
            9
          ],
          "BasicDeserializerFactory.createTreeDeserializer(DeserializationConfig, JavaType, BeanDescription)": [
            2,
            2,
            2
          ],
          "BasicDeserializerFactory.createReferenceDeserializer(DeserializationContext, ReferenceType, BeanDescription)": [
            8,
            8,
            8
          ],
          "BasicDeserializerFactory.findTypeDeserializer(DeserializationConfig, JavaType)": [
            6,
            6,
            6
          ],
          "BasicDeserializerFactory.createKeyDeserializer(DeserializationContext, JavaType)": [
            9,
            9,
            9
          ],
          "BasicDeserializerFactory.findPropertyTypeDeserializer(DeserializationConfig, JavaType, AnnotatedMember)": [
            2,
            2,
            2
          ],
          "BasicDeserializerFactory.findPropertyContentTypeDeserializer(DeserializationConfig, JavaType, AnnotatedMember)": [
            2,
            2,
            2
          ],
          "BasicDeserializerFactory._findCustomTreeNodeDeserializer(Class<? extends JsonNode>, DeserializationConfig, BeanDescription)": [
            3,
            3,
            3
          ],
          "BasicDeserializerFactory._findCustomReferenceDeserializer(ReferenceType, DeserializationConfig, BeanDescription, TypeDeserializer, JsonDeserializer<?>)": [
            3,
            3,
            3
          ],
          "BasicDeserializerFactory._findCustomBeanDeserializer(JavaType, DeserializationConfig, BeanDescription)": [
            3,
            3,
            3
          ],
          "BasicDeserializerFactory._findCustomArrayDeserializer(ArrayType, DeserializationConfig, BeanDescription, TypeDeserializer, JsonDeserializer<?>)": [
            3,
            3,
            3
          ],
          "BasicDeserializerFactory._findCustomCollectionDeserializer(CollectionType, DeserializationConfig, BeanDescription, TypeDeserializer, JsonDeserializer<?>)": [
            3,
            3,
            3
          ],
          "BasicDeserializerFactory._findCustomCollectionLikeDeserializer(CollectionLikeType, DeserializationConfig, BeanDescription, TypeDeserializer, JsonDeserializer<?>)": [
            3,
            3,
            3
          ],
          "BasicDeserializerFactory._findCustomEnumDeserializer(Class<?>, DeserializationConfig, BeanDescription)": [
            3,
            3,
            3
          ],
          "BasicDeserializerFactory._findCustomMapDeserializer(MapType, DeserializationConfig, BeanDescription, KeyDeserializer, TypeDeserializer, JsonDeserializer<?>)": [
            3,
            3,
            3
          ],
          "BasicDeserializerFactory._findCustomMapLikeDeserializer(MapLikeType, DeserializationConfig, BeanDescription, KeyDeserializer, TypeDeserializer, JsonDeserializer<?>)": [
            3,
            3,
            3
          ],
          "BasicDeserializerFactory.findDeserializerFromAnnotation(DeserializationContext, Annotated)": [
            3,
            3,
            3
          ],
          "BasicDeserializerFactory.findKeyDeserializerFromAnnotation(DeserializationContext, Annotated)": [
            3,
            3,
            3
          ],
          "BasicDeserializerFactory.findContentDeserializerFromAnnotation(DeserializationContext, Annotated)": [
            3,
            3,
            3
          ],
          "BasicDeserializerFactory.resolveMemberAndTypeAnnotations(DeserializationContext, AnnotatedMember, JavaType)": [
            9,
            9,
            9
          ],
          "BasicDeserializerFactory.constructEnumResolver(Class<?>, DeserializationConfig, AnnotatedMember)": [
            3,
            3,
            3
          ],
          "BasicDeserializerFactory._hasCreatorAnnotation(DeserializationContext, Annotated)": [
            2,
            2,
            2
          ],
          "BasicDeserializerFactory.modifyTypeByAnnotation(DeserializationContext, Annotated, JavaType)": [
            2,
            2,
            2
          ],
          "BasicDeserializerFactory._findJsonValueFor(DeserializationConfig, JavaType)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "BasicDeserializerFactory._handleSingleArgumentCreator(CreatorCollector, AnnotatedWithParams, boolean, boolean)": [
            12,
            12,
            12
          ],
          "BasicDeserializerFactory.createCollectionDeserializer(DeserializationContext, CollectionType, BeanDescription)": [
            16,
            16,
            16
          ],
          "BasicDeserializerFactory.createMapDeserializer(DeserializationContext, MapType, BeanDescription)": [
            14,
            14,
            14
          ],
          "BasicDeserializerFactory.findDefaultDeserializer(DeserializationContext, JavaType, BeanDescription)": [
            12,
            12,
            12
          ]
        },
        ">20": {
          "BasicDeserializerFactory._addDeserializerConstructors(DeserializationContext, BeanDescription, VisibilityChecker<?>, AnnotationIntrospector, CreatorCollector, Map<AnnotatedWithParams,BeanPropertyDefinition[]>)": [
            26,
            0,
            0
          ]
        },
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MismatchedInputException",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/exc/MismatchedInputException.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class MismatchedInputException extends JsonMappingException ",
      "methods_under_test": {
        "=1": {
          "MismatchedInputException.from(JsonParser, String)": [
            1,
            1,
            1
          ],
          "MismatchedInputException.from(JsonParser, JavaType, String)": [
            1,
            1,
            1
          ],
          "MismatchedInputException.from(JsonParser, Class<?>, String)": [
            1,
            1,
            1
          ],
          "MismatchedInputException.setTargetType(JavaType)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FloatNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/FloatNode.java",
      "class_declaration": "public class FloatNode extends NumericNode ",
      "methods_under_test": {
        "=1": {
          "FloatNode.valueOf(float)": [
            1,
            1,
            1
          ],
          "FloatNode.asToken()": [
            1,
            1,
            1
          ],
          "FloatNode.numberType()": [
            1,
            1,
            1
          ],
          "FloatNode.canConvertToInt()": [
            1,
            1,
            1
          ],
          "FloatNode.canConvertToLong()": [
            1,
            1,
            1
          ],
          "FloatNode.numberValue()": [
            1,
            1,
            1
          ],
          "FloatNode.shortValue()": [
            1,
            1,
            1
          ],
          "FloatNode.intValue()": [
            1,
            1,
            1
          ],
          "FloatNode.longValue()": [
            1,
            1,
            1
          ],
          "FloatNode.floatValue()": [
            1,
            1,
            1
          ],
          "FloatNode.doubleValue()": [
            1,
            1,
            1
          ],
          "FloatNode.decimalValue()": [
            1,
            1,
            1
          ],
          "FloatNode.bigIntegerValue()": [
            1,
            1,
            1
          ],
          "FloatNode.asText()": [
            1,
            1,
            1
          ],
          "FloatNode.serialize(JsonGenerator, SerializerProvider)": [
            1,
            1,
            1
          ],
          "FloatNode.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FloatNode.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AnnotatedMember",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
      "class_declaration": "public abstract class AnnotatedMember extends Annotated implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "AnnotatedMember.getAnnotation(Class<A>)": [
            2,
            2,
            2
          ],
          "AnnotatedMember.hasAnnotation(Class<?>)": [
            2,
            2,
            2
          ],
          "AnnotatedMember.hasOneOf(Class<? extends Annotation>[])": [
            2,
            2,
            2
          ],
          "AnnotatedMember.annotations()": [
            2,
            2,
            2
          ],
          "AnnotatedMember.fixAccess(boolean)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TypeResolverBuilder",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java",
      "error": "list index out of range"
    },
    {
      "src_name": "InvalidFormatException",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/exc/InvalidFormatException.java",
      "class_declaration": "public class InvalidFormatException extends MismatchedInputException ",
      "methods_under_test": {
        "=1": {
          "InvalidFormatException.from(JsonParser, String, Object, Class<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "InvalidNullException",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/exc/InvalidNullException.java",
      "class_declaration": "public class InvalidNullException extends MismatchedInputException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "InvalidNullException.from(DeserializationContext, PropertyName, JavaType)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PlaceholderForType",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/PlaceholderForType.java",
      "class_declaration": "public class PlaceholderForType extends TypeBase ",
      "methods_under_test": {
        "=1": {
          "PlaceholderForType.actualType()": [
            1,
            1,
            1
          ],
          "PlaceholderForType.actualType(JavaType)": [
            1,
            1,
            1
          ],
          "PlaceholderForType.buildCanonicalName()": [
            1,
            1,
            1
          ],
          "PlaceholderForType.getGenericSignature(StringBuilder)": [
            1,
            1,
            1
          ],
          "PlaceholderForType.getErasedSignature(StringBuilder)": [
            1,
            1,
            1
          ],
          "PlaceholderForType.withTypeHandler(Object)": [
            1,
            1,
            1
          ],
          "PlaceholderForType.withContentTypeHandler(Object)": [
            1,
            1,
            1
          ],
          "PlaceholderForType.withValueHandler(Object)": [
            1,
            1,
            1
          ],
          "PlaceholderForType.withContentValueHandler(Object)": [
            1,
            1,
            1
          ],
          "PlaceholderForType.withContentType(JavaType)": [
            1,
            1,
            1
          ],
          "PlaceholderForType.withStaticTyping()": [
            1,
            1,
            1
          ],
          "PlaceholderForType.refine(Class<?>, TypeBindings, JavaType, JavaType[])": [
            1,
            1,
            1
          ],
          "PlaceholderForType._narrow(Class<?>)": [
            1,
            1,
            1
          ],
          "PlaceholderForType.toString()": [
            1,
            1,
            1
          ],
          "PlaceholderForType.equals(Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AtomicReferenceSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer.java",
      "class_declaration": "public class AtomicReferenceSerializer extends ReferenceTypeSerializer<AtomicReference<?>> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UUIDDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/UUIDDeserializer.java",
      "class_declaration": "public class UUIDDeserializer extends FromStringDeserializer<UUID> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BasicSerializerFactory",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class BasicSerializerFactory extends SerializerFactory implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "BasicSerializerFactory.withAdditionalSerializers(Serializers)": [
            1,
            1,
            1
          ],
          "BasicSerializerFactory.withAdditionalKeySerializers(Serializers)": [
            1,
            1,
            1
          ],
          "BasicSerializerFactory.withSerializerModifier(BeanSerializerModifier)": [
            1,
            1,
            1
          ],
          "BasicSerializerFactory.findOptionalStdSerializer(SerializerProvider, JavaType, BeanDescription, boolean)": [
            1,
            1,
            1
          ],
          "BasicSerializerFactory.isIndexedList(Class<?>)": [
            1,
            1,
            1
          ],
          "BasicSerializerFactory.buildIndexedListSerializer(JavaType, boolean, TypeSerializer, JsonSerializer<Object>)": [
            1,
            1,
            1
          ],
          "BasicSerializerFactory.buildCollectionSerializer(JavaType, boolean, TypeSerializer, JsonSerializer<Object>)": [
            1,
            1,
            1
          ],
          "BasicSerializerFactory.buildEnumSetSerializer(JavaType)": [
            1,
            1,
            1
          ],
          "BasicSerializerFactory.buildIteratorSerializer(SerializationConfig, JavaType, BeanDescription, boolean, JavaType)": [
            1,
            1,
            1
          ],
          "BasicSerializerFactory.buildIterableSerializer(SerializationConfig, JavaType, BeanDescription, boolean, JavaType)": [
            1,
            1,
            1
          ],
          "BasicSerializerFactory.findFilterId(SerializationConfig, BeanDescription)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasicSerializerFactory.createTypeSerializer(SerializationConfig, JavaType)": [
            3,
            3,
            3
          ],
          "BasicSerializerFactory.findSerializerByLookup(JavaType, SerializationConfig, BeanDescription, boolean)": [
            3,
            3,
            3
          ],
          "BasicSerializerFactory.findSerializerByAnnotations(SerializerProvider, JavaType, BeanDescription)": [
            4,
            4,
            4
          ],
          "BasicSerializerFactory.findSerializerByAddonType(SerializationConfig, JavaType, BeanDescription, boolean)": [
            4,
            4,
            4
          ],
          "BasicSerializerFactory.findSerializerFromAnnotation(SerializerProvider, Annotated)": [
            2,
            2,
            2
          ],
          "BasicSerializerFactory.findConvertingSerializer(SerializerProvider, Annotated, JsonSerializer<?>)": [
            2,
            2,
            2
          ],
          "BasicSerializerFactory.findConverter(SerializerProvider, Annotated)": [
            2,
            2,
            2
          ],
          "BasicSerializerFactory.buildMapSerializer(SerializerProvider, MapType, BeanDescription, boolean, JsonSerializer<Object>, TypeSerializer, JsonSerializer<Object>)": [
            8,
            8,
            8
          ],
          "BasicSerializerFactory._findInclusionWithContent(SerializerProvider, BeanDescription, JavaType, Class<?>)": [
            4,
            4,
            4
          ],
          "BasicSerializerFactory.buildArraySerializer(SerializerProvider, ArrayType, BeanDescription, boolean, TypeSerializer, JsonSerializer<Object>)": [
            9,
            9,
            9
          ],
          "BasicSerializerFactory.findReferenceSerializer(SerializerProvider, ReferenceType, BeanDescription, boolean)": [
            5,
            5,
            5
          ],
          "BasicSerializerFactory.buildAtomicReferenceSerializer(SerializerProvider, ReferenceType, BeanDescription, boolean, TypeSerializer, JsonSerializer<Object>)": [
            10,
            10,
            10
          ],
          "BasicSerializerFactory.buildEnumSerializer(SerializationConfig, JavaType, BeanDescription)": [
            4,
            4,
            4
          ],
          "BasicSerializerFactory._findKeySerializer(SerializerProvider, Annotated)": [
            2,
            2,
            2
          ],
          "BasicSerializerFactory._findContentSerializer(SerializerProvider, Annotated)": [
            2,
            2,
            2
          ],
          "BasicSerializerFactory.usesStaticTyping(SerializationConfig, BeanDescription, TypeSerializer)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "BasicSerializerFactory.createKeySerializer(SerializationConfig, JavaType, JsonSerializer<Object>)": [
            11,
            11,
            11
          ],
          "BasicSerializerFactory.findSerializerByPrimaryType(SerializerProvider, JavaType, BeanDescription, boolean)": [
            16,
            16,
            16
          ],
          "BasicSerializerFactory.buildCollectionSerializer(SerializerProvider, CollectionType, BeanDescription, boolean, TypeSerializer, JsonSerializer<Object>)": [
            16,
            16,
            16
          ],
          "BasicSerializerFactory._checkMapContentInclusion(SerializerProvider, BeanDescription, MapSerializer)": [
            11,
            11,
            11
          ],
          "BasicSerializerFactory.buildMapEntrySerializer(SerializerProvider, JavaType, BeanDescription, boolean, JavaType, JavaType)": [
            11,
            11,
            11
          ]
        },
        ">20": {
          "BasicSerializerFactory.buildContainerSerializer(SerializerProvider, JavaType, BeanDescription, boolean)": [
            21,
            21,
            21
          ]
        },
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "PropertyWriter",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/PropertyWriter.java",
      "class_declaration": "public abstract class PropertyWriter extends ConcreteBeanPropertyBase implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "PropertyWriter.findAnnotation(Class<A>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ClassSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/ClassSerializer.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class ClassSerializer extends StdScalarSerializer<Class<?>> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ShortNode",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/node/ShortNode.java",
      "class_declaration": "public class ShortNode extends NumericNode ",
      "methods_under_test": {
        "=1": {
          "ShortNode.valueOf(short)": [
            1,
            1,
            1
          ],
          "ShortNode.asToken()": [
            1,
            1,
            1
          ],
          "ShortNode.numberType()": [
            1,
            1,
            1
          ],
          "ShortNode.canConvertToInt()": [
            1,
            1,
            1
          ],
          "ShortNode.canConvertToLong()": [
            1,
            1,
            1
          ],
          "ShortNode.numberValue()": [
            1,
            1,
            1
          ],
          "ShortNode.shortValue()": [
            1,
            1,
            1
          ],
          "ShortNode.intValue()": [
            1,
            1,
            1
          ],
          "ShortNode.longValue()": [
            1,
            1,
            1
          ],
          "ShortNode.floatValue()": [
            1,
            1,
            1
          ],
          "ShortNode.doubleValue()": [
            1,
            1,
            1
          ],
          "ShortNode.decimalValue()": [
            1,
            1,
            1
          ],
          "ShortNode.bigIntegerValue()": [
            1,
            1,
            1
          ],
          "ShortNode.asText()": [
            1,
            1,
            1
          ],
          "ShortNode.asBoolean(boolean)": [
            1,
            1,
            1
          ],
          "ShortNode.serialize(JsonGenerator, SerializerProvider)": [
            1,
            1,
            1
          ],
          "ShortNode.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ShortNode.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BeanAsArrayDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayDeserializer.java",
      "class_declaration": "public class BeanAsArrayDeserializer extends BeanDeserializerBase ",
      "methods_under_test": {
        "=1": {
          "BeanAsArrayDeserializer.asArrayDeserializer()": [
            1,
            1,
            1
          ],
          "BeanAsArrayDeserializer.deserializeFromObject(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ],
          "BeanAsArrayDeserializer._deserializeFromNonArray(JsonParser, DeserializationContext)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BeanAsArrayDeserializer.unwrappingDeserializer(NameTransformer)": [
            2,
            2,
            2
          ],
          "BeanAsArrayDeserializer.withObjectIdReader(ObjectIdReader)": [
            2,
            2,
            2
          ],
          "BeanAsArrayDeserializer.withIgnorableProperties(Set<String>)": [
            2,
            2,
            2
          ],
          "BeanAsArrayDeserializer.withBeanProperties(BeanPropertyMap)": [
            2,
            2,
            2
          ],
          "BeanAsArrayDeserializer.deserialize(JsonParser, DeserializationContext)": [
            10,
            10,
            10
          ],
          "BeanAsArrayDeserializer.deserialize(JsonParser, DeserializationContext, Object)": [
            10,
            10,
            10
          ]
        },
        "11-20": {
          "BeanAsArrayDeserializer._deserializeNonVanilla(JsonParser, DeserializationContext)": [
            11,
            11,
            11
          ],
          "BeanAsArrayDeserializer._deserializeUsingPropertyBased(final, JsonParser, final, DeserializationContext)": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnwrappedPropertyHandler",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/impl/UnwrappedPropertyHandler.java",
      "class_declaration": "public class UnwrappedPropertyHandler ",
      "methods_under_test": {
        "=1": {
          "UnwrappedPropertyHandler.addProperty(SettableBeanProperty)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnwrappedPropertyHandler.renameAll(NameTransformer)": [
            4,
            4,
            4
          ],
          "UnwrappedPropertyHandler.processUnwrapped(JsonParser, DeserializationContext, Object, TokenBuffer)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "RootNameLookup",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/util/RootNameLookup.java",
      "class_declaration": "public class RootNameLookup implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "RootNameLookup.findRootName(JavaType, MapperConfig<?>)": [
            1,
            1,
            1
          ],
          "RootNameLookup.readResolve()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "RootNameLookup.findRootName(Class<?>, MapperConfig<?>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BeanDeserializerModifier",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java",
      "class_declaration": "public abstract class BeanDeserializerModifier ",
      "methods_under_test": {
        "=1": {
          "BeanDeserializerModifier.updateProperties(DeserializationConfig, BeanDescription, List<BeanPropertyDefinition>)": [
            1,
            1,
            1
          ],
          "BeanDeserializerModifier.updateBuilder(DeserializationConfig, BeanDescription, BeanDeserializerBuilder)": [
            1,
            1,
            1
          ],
          "BeanDeserializerModifier.modifyDeserializer(DeserializationConfig, BeanDescription, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "BeanDeserializerModifier.modifyEnumDeserializer(DeserializationConfig, JavaType, BeanDescription, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "BeanDeserializerModifier.modifyReferenceDeserializer(DeserializationConfig, ReferenceType, BeanDescription, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "BeanDeserializerModifier.modifyArrayDeserializer(DeserializationConfig, ArrayType, BeanDescription, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "BeanDeserializerModifier.modifyCollectionDeserializer(DeserializationConfig, CollectionType, BeanDescription, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "BeanDeserializerModifier.modifyCollectionLikeDeserializer(DeserializationConfig, CollectionLikeType, BeanDescription, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "BeanDeserializerModifier.modifyMapDeserializer(DeserializationConfig, MapType, BeanDescription, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "BeanDeserializerModifier.modifyMapLikeDeserializer(DeserializationConfig, MapLikeType, BeanDescription, JsonDeserializer<?>)": [
            1,
            1,
            1
          ],
          "BeanDeserializerModifier.modifyKeyDeserializer(DeserializationConfig, JavaType, KeyDeserializer)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ArraySerializerBase",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class ArraySerializerBase <T> extends ContainerSerializer<T> implements ContextualSerializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AnnotatedMethodCollector",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
      "class_declaration": "public class AnnotatedMethodCollector extends CollectorBase ",
      "methods_under_test": {
        "=1": {
          "AnnotatedMethodCollector.collectMethods(AnnotationIntrospector, TypeResolutionContext, MixInResolver, TypeFactory, JavaType, List<JavaType>, Class<?>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AnnotatedMethodCollector._addMethodMixIns(TypeResolutionContext, Class<?>, Map<MemberKey,MethodBuilder>, Class<?>)": [
            2,
            2,
            2
          ],
          "MethodBuilder.build()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "AnnotatedMethodCollector.collect(TypeFactory, TypeResolutionContext, JavaType, List<JavaType>, Class<?>)": [
            15,
            15,
            15
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnwrappingBeanSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java",
      "class_declaration": "public class UnwrappingBeanSerializer extends BeanSerializerBase implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "UnwrappingBeanSerializer.unwrappingSerializer(NameTransformer)": [
            1,
            1,
            1
          ],
          "UnwrappingBeanSerializer.withObjectIdWriter(ObjectIdWriter)": [
            1,
            1,
            1
          ],
          "UnwrappingBeanSerializer.withFilterId(Object)": [
            1,
            1,
            1
          ],
          "UnwrappingBeanSerializer.withIgnorals(Set<String>)": [
            1,
            1,
            1
          ],
          "UnwrappingBeanSerializer.asArraySerializer()": [
            1,
            1,
            1
          ],
          "UnwrappingBeanSerializer.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnwrappingBeanSerializer.serialize(Object, JsonGenerator, SerializerProvider)": [
            4,
            4,
            4
          ],
          "UnwrappingBeanSerializer.serializeWithType(Object, JsonGenerator, SerializerProvider, TypeSerializer)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "IgnoredPropertyException",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/exc/IgnoredPropertyException.java",
      "class_declaration": "public class IgnoredPropertyException extends PropertyBindingException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "IgnoredPropertyException.from(JsonParser, Object, String, Collection<Object>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ReferenceType",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java",
      "class_declaration": "public class ReferenceType extends SimpleType ",
      "methods_under_test": {
        "=1": {
          "ReferenceType.construct(Class<?>, TypeBindings, JavaType, JavaType[], JavaType)": [
            1,
            1,
            1
          ],
          "ReferenceType.construct(Class<?>, JavaType)": [
            1,
            1,
            1
          ],
          "ReferenceType.refine(Class<?>, TypeBindings, JavaType, JavaType[])": [
            1,
            1,
            1
          ],
          "ReferenceType.buildCanonicalName()": [
            1,
            1,
            1
          ],
          "ReferenceType._narrow(Class<?>)": [
            1,
            1,
            1
          ],
          "ReferenceType.hasContentType()": [
            1,
            1,
            1
          ],
          "ReferenceType.getErasedSignature(StringBuilder)": [
            1,
            1,
            1
          ],
          "ReferenceType.getGenericSignature(StringBuilder)": [
            1,
            1,
            1
          ],
          "ReferenceType.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ReferenceType.upgradeFrom(JavaType, JavaType)": [
            3,
            3,
            3
          ],
          "ReferenceType.withContentType(JavaType)": [
            2,
            2,
            2
          ],
          "ReferenceType.withTypeHandler(Object)": [
            2,
            2,
            2
          ],
          "ReferenceType.withContentTypeHandler(Object)": [
            2,
            2,
            2
          ],
          "ReferenceType.withValueHandler(Object)": [
            2,
            2,
            2
          ],
          "ReferenceType.withContentValueHandler(Object)": [
            2,
            2,
            2
          ],
          "ReferenceType.withStaticTyping()": [
            2,
            2,
            2
          ],
          "ReferenceType.equals(Object)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BooleanSerializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
      "class_declaration": "@JacksonStdImpl\npublic final class BooleanSerializer extends StdScalarSerializer<Object> implements ContextualSerializer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StringDeserializer",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java",
      "class_declaration": "@JacksonStdImpl\npublic class StringDeserializer extends StdScalarDeserializer<String> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonAnyFormatVisitor",
      "src_path": "../../defects4j-subjects/JacksonDatabind-112f/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonAnyFormatVisitor.java",
      "class_declaration": "public static class Base implements JsonAnyFormatVisitor ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    }
  ],
  "test_unpaired": [
    {
      "SingleValueAsArrayTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/SingleValueAsArrayTest.java"
    },
    {
      "ManualReadPerfUntypedStream": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/ManualReadPerfUntypedStream.java"
    },
    {
      "NodeContext2049Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/NodeContext2049Test.java"
    },
    {
      "TestGenericMapDeser": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestGenericMapDeser.java"
    },
    {
      "TestObjectIdWithEquals": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithEquals.java"
    },
    {
      "TypeAliasesTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/TypeAliasesTest.java"
    },
    {
      "TestCreatorNullValue": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreatorNullValue.java"
    },
    {
      "TestPolymorphicDelegating": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/TestPolymorphicDelegating.java"
    },
    {
      "UnwrappedWithView1559Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/UnwrappedWithView1559Test.java"
    },
    {
      "ObjectId687Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId687Test.java"
    },
    {
      "TestConvertingSerializer": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingSerializer.java"
    },
    {
      "RecordAsArray": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/RecordAsArray.java"
    },
    {
      "TestInjectables": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/inject/TestInjectables.java"
    },
    {
      "TestRootType": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestRootType.java"
    },
    {
      "NopWriter": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/NopWriter.java"
    },
    {
      "BuilderAdvancedTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderAdvancedTest.java"
    },
    {
      "PolymorphicViaRefTypeTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/PolymorphicViaRefTypeTest.java"
    },
    {
      "TypeCoercion1592Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/TypeCoercion1592Test.java"
    },
    {
      "DateFormatTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/format/DateFormatTest.java"
    },
    {
      "NewSchemaTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsonschema/NewSchemaTest.java"
    },
    {
      "ManualReadPerfWithMedia": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/ManualReadPerfWithMedia.java"
    },
    {
      "ProblemHandlerUnknownTypeId2221Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/filter/ProblemHandlerUnknownTypeId2221Test.java"
    },
    {
      "MultipleExternalIds291Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/MultipleExternalIds291Test.java"
    },
    {
      "TestDefaultForEnums": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForEnums.java"
    },
    {
      "ObjectId825Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825Test.java"
    },
    {
      "JDKAtomicTypesDeserTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKAtomicTypesDeserTest.java"
    },
    {
      "NullConversionsSkipTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/filter/NullConversionsSkipTest.java"
    },
    {
      "TestUnwrappedWithUnknown650": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/TestUnwrappedWithUnknown650.java"
    },
    {
      "MapRelatedTypesDeserTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/MapRelatedTypesDeserTest.java"
    },
    {
      "PolymorphicList036Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test.java"
    },
    {
      "BackReference1878Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/BackReference1878Test.java"
    },
    {
      "AlwaysAsReferenceFirstTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/AlwaysAsReferenceFirstTest.java"
    },
    {
      "ManualReadWithTypeResolution": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/ManualReadWithTypeResolution.java"
    },
    {
      "DeserExceptionTypeTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/exc/DeserExceptionTypeTest.java"
    },
    {
      "TestDefaultForMaps": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForMaps.java"
    },
    {
      "TestMixinInheritance": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinInheritance.java"
    },
    {
      "TestPOJOAsArrayWithBuilder": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArrayWithBuilder.java"
    },
    {
      "DelegatingArrayCreator1804Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/DelegatingArrayCreator1804Test.java"
    },
    {
      "BasicExceptionTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/exc/BasicExceptionTest.java"
    },
    {
      "FormatFeatureUnwrapSingleTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/FormatFeatureUnwrapSingleTest.java"
    },
    {
      "CaseInsensitiveDeserTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/misc/CaseInsensitiveDeserTest.java"
    },
    {
      "TypeRefinementForMapTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TypeRefinementForMapTest.java"
    },
    {
      "TestTreeSerialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java"
    },
    {
      "TestTypedArraySerialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedArraySerialization.java"
    },
    {
      "TestConversions": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java"
    },
    {
      "TestCachingOfDeser": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestCachingOfDeser.java"
    },
    {
      "MergeWithNullTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/merge/MergeWithNullTest.java"
    },
    {
      "TestUnwrappedWithSameName647": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithSameName647.java"
    },
    {
      "TestDefaultForObject": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForObject.java"
    },
    {
      "BuilderWithIgnored1214Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/BuilderWithIgnored1214Test.java"
    },
    {
      "BackReference1516Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/BackReference1516Test.java"
    },
    {
      "TestObjectIdSerialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdSerialization.java"
    },
    {
      "TestMapFiltering": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/filter/TestMapFiltering.java"
    },
    {
      "UnknownSubClassTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/UnknownSubClassTest.java"
    },
    {
      "BogusFormatFeature": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/cfg/BogusFormatFeature.java"
    },
    {
      "TestObjectIdWithUnwrapping1298": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/TestObjectIdWithUnwrapping1298.java"
    },
    {
      "TestJSONP": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/misc/TestJSONP.java"
    },
    {
      "AutoDetect1947Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/AutoDetect1947Test.java"
    },
    {
      "TestUnknownPropertyDeserialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/filter/TestUnknownPropertyDeserialization.java"
    },
    {
      "TestNamingStrategyCustom": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyCustom.java"
    },
    {
      "TestContextualWithAnnDeserializer": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualWithAnnDeserializer.java"
    },
    {
      "TestDefaultWithCreators": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultWithCreators.java"
    },
    {
      "BuilderWithUnwrappedTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderWithUnwrappedTest.java"
    },
    {
      "BuilderErrorHandling": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderErrorHandling.java"
    },
    {
      "MapperMixinsCopy1998Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/mixins/MapperMixinsCopy1998Test.java"
    },
    {
      "TestEndOfInputHandling": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/TestEndOfInputHandling.java"
    },
    {
      "HugeIntegerCoerceTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/dos/HugeIntegerCoerceTest.java"
    },
    {
      "DisablingCreatorsTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/DisablingCreatorsTest.java"
    },
    {
      "TestFormatDetection": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/interop/TestFormatDetection.java"
    },
    {
      "MapMergeTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/merge/MapMergeTest.java"
    },
    {
      "TestTypeNames": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypeNames.java"
    },
    {
      "TestConcurrency": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestConcurrency.java"
    },
    {
      "TestTypedArrayDeserialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedArrayDeserialization.java"
    },
    {
      "JsonIncludeTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/filter/JsonIncludeTest.java"
    },
    {
      "NullConversionsForContentTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/filter/NullConversionsForContentTest.java"
    },
    {
      "TestAnnotationInheritance": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestAnnotationInheritance.java"
    },
    {
      "DefaultTypingOverride1391Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/DefaultTypingOverride1391Test.java"
    },
    {
      "ExternalTypeIdTest1288": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288.java"
    },
    {
      "TestConfig": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java"
    },
    {
      "ObjectId825BTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest.java"
    },
    {
      "DeprecatedConstructType1456Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/DeprecatedConstructType1456Test.java"
    },
    {
      "TestMixinDeserForClass": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinDeserForClass.java"
    },
    {
      "TreeReadViaMapperTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/TreeReadViaMapperTest.java"
    },
    {
      "TestOverloaded": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestOverloaded.java"
    },
    {
      "BeanNamingTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/BeanNamingTest.java"
    },
    {
      "ThreadSafety1759Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/misc/ThreadSafety1759Test.java"
    },
    {
      "TestScalaLikeImplicitProperties": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/TestScalaLikeImplicitProperties.java"
    },
    {
      "BuilderInfiniteLoop1978Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderInfiniteLoop1978Test.java"
    },
    {
      "TestStatics": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestStatics.java"
    },
    {
      "MapDeserializationTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/MapDeserializationTest.java"
    },
    {
      "RecursiveIgnorePropertiesTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/filter/RecursiveIgnorePropertiesTest.java"
    },
    {
      "TestJsonSerialize2": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize2.java"
    },
    {
      "UnwrapSingleArrayScalarsTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/UnwrapSingleArrayScalarsTest.java"
    },
    {
      "FieldSerializationTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/FieldSerializationTest.java"
    },
    {
      "TestTypedRootValueSerialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestTypedRootValueSerialization.java"
    },
    {
      "ManualWritePerfWithRecord": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/ManualWritePerfWithRecord.java"
    },
    {
      "UnwrappedCreatorParam265Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/UnwrappedCreatorParam265Test.java"
    },
    {
      "TestAbstractContainers": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractContainers.java"
    },
    {
      "RecursiveType1658Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/RecursiveType1658Test.java"
    },
    {
      "JDKScalarsTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKScalarsTest.java"
    },
    {
      "ManualWritePerfWithAllTypes": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/ManualWritePerfWithAllTypes.java"
    },
    {
      "BuilderWithViewTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderWithViewTest.java"
    },
    {
      "TestNonStaticInnerClassInList32": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/TestNonStaticInnerClassInList32.java"
    },
    {
      "TestExceptionHandlingWithJsonCreatorDeserialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/exc/TestExceptionHandlingWithJsonCreatorDeserialization.java"
    },
    {
      "InnerClassCreatorTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/InnerClassCreatorTest.java"
    },
    {
      "TestGenericFieldInSubtype": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/TestGenericFieldInSubtype.java"
    },
    {
      "TestUnwrappedWithPrefix": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithPrefix.java"
    },
    {
      "JDKStringLikeTypesTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKStringLikeTypesTest.java"
    },
    {
      "ProblemHandlerLocation1440Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/filter/ProblemHandlerLocation1440Test.java"
    },
    {
      "AtomicTypeSerializationTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/jdk/AtomicTypeSerializationTest.java"
    },
    {
      "TestVersions": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/TestVersions.java"
    },
    {
      "TestNameConflicts": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/TestNameConflicts.java"
    },
    {
      "TestMixinSerForFields": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerForFields.java"
    },
    {
      "MapKeySerializationTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/jdk/MapKeySerializationTest.java"
    },
    {
      "BigCreatorTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/BigCreatorTest.java"
    },
    {
      "TestIgnoredTypes": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/filter/TestIgnoredTypes.java"
    },
    {
      "TestExternalizable": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/interop/TestExternalizable.java"
    },
    {
      "BrokenStringReader": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/BrokenStringReader.java"
    },
    {
      "NumberSerTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/jdk/NumberSerTest.java"
    },
    {
      "TestCreatorWithPolymorphic113": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreatorWithPolymorphic113.java"
    },
    {
      "TestBlocking": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/misc/TestBlocking.java"
    },
    {
      "RequireSetterForGetter736Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/RequireSetterForGetter736Test.java"
    },
    {
      "ReadOnlyDeser95Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/filter/ReadOnlyDeser95Test.java"
    },
    {
      "AnyGetterTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/AnyGetterTest.java"
    },
    {
      "JDKTypeSerializationTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/jdk/JDKTypeSerializationTest.java"
    },
    {
      "TestJava7Types": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ext/TestJava7Types.java"
    },
    {
      "TestFindMethods": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/TestFindMethods.java"
    },
    {
      "TestUnwrappedRecursive383": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedRecursive383.java"
    },
    {
      "TestAnnotationMerging": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/TestAnnotationMerging.java"
    },
    {
      "TestCreators": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators.java"
    },
    {
      "ExceptionPathTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/exc/ExceptionPathTest.java"
    },
    {
      "ReferentialWithObjectIdTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/ReferentialWithObjectIdTest.java"
    },
    {
      "EnumCreatorTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/EnumCreatorTest.java"
    },
    {
      "ReadValuesTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/seq/ReadValuesTest.java"
    },
    {
      "ManualReadPerfUntypedReader": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/ManualReadPerfUntypedReader.java"
    },
    {
      "TestDeepCopy": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/TestDeepCopy.java"
    },
    {
      "FullStreamReadTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/FullStreamReadTest.java"
    },
    {
      "AnyPropSorting518Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/AnyPropSorting518Test.java"
    },
    {
      "Base64DecodingTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/Base64DecodingTest.java"
    },
    {
      "TestPolymorphicDeserialization676": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestPolymorphicDeserialization676.java"
    },
    {
      "ManualReadPerfUntyped": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/ManualReadPerfUntyped.java"
    },
    {
      "TestObjectIdDeserialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdDeserialization.java"
    },
    {
      "StaticTyping1515Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/StaticTyping1515Test.java"
    },
    {
      "IgnorePropsForSerTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/filter/IgnorePropsForSerTest.java"
    },
    {
      "TestTypeFactoryWithClassLoader": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactoryWithClassLoader.java"
    },
    {
      "MapInclusionTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/filter/MapInclusionTest.java"
    },
    {
      "NestedTypes1604Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/NestedTypes1604Test.java"
    },
    {
      "CreatorWithNamingStrategyTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/CreatorWithNamingStrategyTest.java"
    },
    {
      "AbstractTypeMapping1186Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/AbstractTypeMapping1186Test.java"
    },
    {
      "BuilderSimpleTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderSimpleTest.java"
    },
    {
      "JsonIncludeOverrideTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/filter/JsonIncludeOverrideTest.java"
    },
    {
      "JDKNumberDeserTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKNumberDeserTest.java"
    },
    {
      "ExternalTypeIdWithUnwrapped2039Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/ExternalTypeIdWithUnwrapped2039Test.java"
    },
    {
      "TestBasicAnnotations": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestBasicAnnotations.java"
    },
    {
      "TestCreatorsWithIdentity": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreatorsWithIdentity.java"
    },
    {
      "AbstractApplicationContext": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/org/springframework/jacksontest/AbstractApplicationContext.java"
    },
    {
      "BogusApplicationContext": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/org/springframework/jacksontest/BogusApplicationContext.java"
    },
    {
      "JDKCollectionsDeserTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKCollectionsDeserTest.java"
    },
    {
      "DelegatingArrayCreator2324Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/DelegatingArrayCreator2324Test.java"
    },
    {
      "BogusPointcutAdvisor": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/org/springframework/jacksontest/BogusPointcutAdvisor.java"
    },
    {
      "TestBackRefsWithPolymorphic": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/TestBackRefsWithPolymorphic.java"
    },
    {
      "DelegatingCreatorWithAbstractProp2252Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/DelegatingCreatorWithAbstractProp2252Test.java"
    },
    {
      "TestFieldDeserialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestFieldDeserialization.java"
    },
    {
      "TestMixinSerForClass": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerForClass.java"
    },
    {
      "TestCreatorsDelegating": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreatorsDelegating.java"
    },
    {
      "CollectionFormatShapeTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/format/CollectionFormatShapeTest.java"
    },
    {
      "TestAnnotationBundles": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/TestAnnotationBundles.java"
    },
    {
      "TestGenerateJsonSchema": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java"
    },
    {
      "TestMixinSerForMethods": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerForMethods.java"
    },
    {
      "IgnoreWithDeserTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/IgnoreWithDeserTest.java"
    },
    {
      "TestStatics": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestStatics.java"
    },
    {
      "TestTreeMapperSerializer": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperSerializer.java"
    },
    {
      "TestValueAnnotations": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestValueAnnotations.java"
    },
    {
      "AnySetter349Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/AnySetter349Test.java"
    },
    {
      "TestParentChildReferences": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/TestParentChildReferences.java"
    },
    {
      "ArrayDelegatorCreatorForCollectionTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/ArrayDelegatorCreatorForCollectionTest.java"
    },
    {
      "TestCustomDeserializers": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java"
    },
    {
      "JsonIncludeArrayTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/filter/JsonIncludeArrayTest.java"
    },
    {
      "CreatorAnySetter1401Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/CreatorAnySetter1401Test.java"
    },
    {
      "TestGenericListSerialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestGenericListSerialization.java"
    },
    {
      "TestPolymorphicWithDefaultImpl": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestPolymorphicWithDefaultImpl.java"
    },
    {
      "TestUnwrapped": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrapped.java"
    },
    {
      "TestNamingStrategyStd": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd.java"
    },
    {
      "KeySerializers1679Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/jdk/KeySerializers1679Test.java"
    },
    {
      "ManulWritePerfWithUUID": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/ManulWritePerfWithUUID.java"
    },
    {
      "JsonValueExtTypeIdTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/JsonValueExtTypeIdTest.java"
    },
    {
      "TestPOJOAsArray": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArray.java"
    },
    {
      "TestArrayConversions": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/convert/TestArrayConversions.java"
    },
    {
      "TestBuilderMethods": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/TestBuilderMethods.java"
    },
    {
      "MapperViaParserTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/MapperViaParserTest.java"
    },
    {
      "RecursiveIgnoreProperties1755Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/RecursiveIgnoreProperties1755Test.java"
    },
    {
      "InnerClassNonStaticCore384Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/InnerClassNonStaticCore384Test.java"
    },
    {
      "ManualReadPerfWithUUID": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/ManualReadPerfWithUUID.java"
    },
    {
      "EmptyArrayAsNullTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/EmptyArrayAsNullTest.java"
    },
    {
      "TestCustomValueInstDefaults": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCustomValueInstDefaults.java"
    },
    {
      "TestConvertingDeserializer": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingDeserializer.java"
    },
    {
      "ExternalTypeId999Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeId999Test.java"
    },
    {
      "ReadRecoveryTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/seq/ReadRecoveryTest.java"
    },
    {
      "PojoAsArray646Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/PojoAsArray646Test.java"
    },
    {
      "DelegatingCreatorImplicitNames1001Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/DelegatingCreatorImplicitNames1001Test.java"
    },
    {
      "TestAbstractWithObjectId": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/TestAbstractWithObjectId.java"
    },
    {
      "IllegalTypesCheckTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java"
    },
    {
      "UntypedSerializationTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/jdk/UntypedSerializationTest.java"
    },
    {
      "UpdateValueTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/convert/UpdateValueTest.java"
    },
    {
      "DelegatingExternalProperty1003Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/DelegatingExternalProperty1003Test.java"
    },
    {
      "JsonIncludeCollectionTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/filter/JsonIncludeCollectionTest.java"
    },
    {
      "TestSubtypesExternalPropertyMissingProperty": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/TestSubtypesExternalPropertyMissingProperty.java"
    },
    {
      "GrantedAuthority": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/org/springframework/jacksontest/GrantedAuthority.java"
    },
    {
      "FailOnNullCreatorTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/FailOnNullCreatorTest.java"
    },
    {
      "SetterConflictTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/SetterConflictTest.java"
    },
    {
      "DefaultViewTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/views/DefaultViewTest.java"
    },
    {
      "TestUnknownProperty426": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/TestUnknownProperty426.java"
    },
    {
      "TestJDKSerialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java"
    },
    {
      "PolyMapWriter827Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/seq/PolyMapWriter827Test.java"
    },
    {
      "MapMerge1844Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/merge/MapMerge1844Test.java"
    },
    {
      "TestDefaultForScalars": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForScalars.java"
    },
    {
      "TestGenericTypes": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestGenericTypes.java"
    },
    {
      "TestWithGenerics": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java"
    },
    {
      "MapKeyDeserializationTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/MapKeyDeserializationTest.java"
    },
    {
      "NumericConversionTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/convert/NumericConversionTest.java"
    },
    {
      "PolymorphicList1451SerTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/PolymorphicList1451SerTest.java"
    },
    {
      "TestStringConversions": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/convert/TestStringConversions.java"
    },
    {
      "TestTreeDeserialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/TestTreeDeserialization.java"
    },
    {
      "TestBeanConversions": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/convert/TestBeanConversions.java"
    },
    {
      "BuilderDeserializationTest921": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/BuilderDeserializationTest921.java"
    },
    {
      "TestPolymorphicUpdateValue": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/convert/TestPolymorphicUpdateValue.java"
    },
    {
      "InvalidInjectionTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/inject/InvalidInjectionTest.java"
    },
    {
      "SerConfigTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/cfg/SerConfigTest.java"
    },
    {
      "TestViewDeserialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/views/TestViewDeserialization.java"
    },
    {
      "DelegatingCreatorAnnotations2016Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/DelegatingCreatorAnnotations2016Test.java"
    },
    {
      "TestTimestampDeserialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestTimestampDeserialization.java"
    },
    {
      "TestJDKProxy": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/interop/TestJDKProxy.java"
    },
    {
      "ReadOnlyDeser1890Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/filter/ReadOnlyDeser1890Test.java"
    },
    {
      "MapInclusion1649Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/MapInclusion1649Test.java"
    },
    {
      "ExternalTypeIdWithEnum1328Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdWithEnum1328Test.java"
    },
    {
      "TestPropertyTypeInfo": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestPropertyTypeInfo.java"
    },
    {
      "ManualWritePerfUntyped": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/ManualWritePerfUntyped.java"
    },
    {
      "NoTypeInfoTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/NoTypeInfoTest.java"
    },
    {
      "KevinFail1410Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/KevinFail1410Test.java"
    },
    {
      "MapFormatShapeTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/format/MapFormatShapeTest.java"
    },
    {
      "ExceptionDeserializationTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/exc/ExceptionDeserializationTest.java"
    },
    {
      "ObjectWriterTestBase": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/ObjectWriterTestBase.java"
    },
    {
      "IgnorePropertyOnDeserTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/filter/IgnorePropertyOnDeserTest.java"
    },
    {
      "Generic1128Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/Generic1128Test.java"
    },
    {
      "ImplicitParamsForCreator806Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/ImplicitParamsForCreator806Test.java"
    },
    {
      "TestUpdateViaObjectReader": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateViaObjectReader.java"
    },
    {
      "TestMixinMerging": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinMerging.java"
    },
    {
      "MapEntryFormatTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/format/MapEntryFormatTest.java"
    },
    {
      "NullHandlingTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/NullHandlingTest.java"
    },
    {
      "DeprecatedTypeHandling1102Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/interop/DeprecatedTypeHandling1102Test.java"
    },
    {
      "ConfigObjectsTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/cfg/ConfigObjectsTest.java"
    },
    {
      "TestDuplicateRegistration": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/module/TestDuplicateRegistration.java"
    },
    {
      "BuilderViaUpdateTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderViaUpdateTest.java"
    },
    {
      "TestSimpleSerializationIgnore": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/filter/TestSimpleSerializationIgnore.java"
    },
    {
      "SimpleModuleArgCheckTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/module/SimpleModuleArgCheckTest.java"
    },
    {
      "EnumAsIndexMapKey1877Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/EnumAsIndexMapKey1877Test.java"
    },
    {
      "ExternalTypeId198Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeId198Test.java"
    },
    {
      "TestJsonSerialize3": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize3.java"
    },
    {
      "TestPOJOAsArrayAdvanced": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArrayAdvanced.java"
    },
    {
      "BuilderWithCreatorTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderWithCreatorTest.java"
    },
    {
      "TestAutoDetect": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/TestAutoDetect.java"
    },
    {
      "TestTreeWithType": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/TestTreeWithType.java"
    },
    {
      "TestEmptyClass": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestEmptyClass.java"
    },
    {
      "TestInferredMutators": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/TestInferredMutators.java"
    },
    {
      "TestGenericCollectionDeser": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestGenericCollectionDeser.java"
    },
    {
      "BuilderFailTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderFailTest.java"
    },
    {
      "TestAnnotationUsing": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestAnnotationUsing.java"
    },
    {
      "TestJacksonTypes": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestJacksonTypes.java"
    },
    {
      "TestMixinDeserForMethods": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinDeserForMethods.java"
    },
    {
      "RecordBase": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/RecordBase.java"
    },
    {
      "MediaItem": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/MediaItem.java"
    },
    {
      "TestObjectIdWithInjectables639": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/TestObjectIdWithInjectables639.java"
    },
    {
      "TestTypedSerialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedSerialization.java"
    },
    {
      "CreatorPropertiesTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/CreatorPropertiesTest.java"
    },
    {
      "NullConversionsPojoTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/filter/NullConversionsPojoTest.java"
    },
    {
      "TestSetterlessProperties501": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/TestSetterlessProperties501.java"
    },
    {
      "ScalarCoercionTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/ScalarCoercionTest.java"
    },
    {
      "TestArrayDeserialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java"
    },
    {
      "MixinsWithBundlesTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/mixins/MixinsWithBundlesTest.java"
    },
    {
      "TestCyclicTypes": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestCyclicTypes.java"
    },
    {
      "TestUnwrappedWithTypeInfo": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithTypeInfo.java"
    },
    {
      "ExceptionSerializationTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/exc/ExceptionSerializationTest.java"
    },
    {
      "ScalarConversionTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/convert/ScalarConversionTest.java"
    },
    {
      "ImplicitNameMatch792Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/ImplicitNameMatch792Test.java"
    },
    {
      "TestObjectIdWithPolymorphic": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithPolymorphic.java"
    },
    {
      "RaceCondition738Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/misc/RaceCondition738Test.java"
    },
    {
      "MultiArgConstructorTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/MultiArgConstructorTest.java"
    },
    {
      "TestDefaultForArrays": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForArrays.java"
    },
    {
      "TestConstructFromMap": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/TestConstructFromMap.java"
    },
    {
      "TestBiggerData": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/big/TestBiggerData.java"
    },
    {
      "PolymorphicWithObjectId1551Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/PolymorphicWithObjectId1551Test.java"
    },
    {
      "RoundtripTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/RoundtripTest.java"
    },
    {
      "Record": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/Record.java"
    },
    {
      "TestMixinDeserForCreators": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinDeserForCreators.java"
    },
    {
      "ConvertingAbstractSerializer795Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/convert/ConvertingAbstractSerializer795Test.java"
    },
    {
      "EnumMapDeserializationTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumMapDeserializationTest.java"
    },
    {
      "TransientTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/TransientTest.java"
    },
    {
      "TestCreators2": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators2.java"
    },
    {
      "ProblemHandler1767Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/filter/ProblemHandler1767Test.java"
    },
    {
      "GenericTypeId1735Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/GenericTypeId1735Test.java"
    },
    {
      "BaseTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/BaseTest.java"
    },
    {
      "RequiredCreatorTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/RequiredCreatorTest.java"
    },
    {
      "TestArraySerialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestArraySerialization.java"
    },
    {
      "TestCustomFactory": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomFactory.java"
    },
    {
      "TestVirtualProperties": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestVirtualProperties.java"
    },
    {
      "WrapperObjectWithObjectIdTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/WrapperObjectWithObjectIdTest.java"
    },
    {
      "TestTypeModifierNameResolution": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifierNameResolution.java"
    },
    {
      "ContainerTypesTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/ContainerTypesTest.java"
    },
    {
      "TestAbstractTypes": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/module/TestAbstractTypes.java"
    },
    {
      "TestAutoDetect": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestAutoDetect.java"
    },
    {
      "TestJsonFilter": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/filter/TestJsonFilter.java"
    },
    {
      "BrokenStringWriter": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/BrokenStringWriter.java"
    },
    {
      "CreatorWithObjectIdTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/CreatorWithObjectIdTest.java"
    },
    {
      "LocalTypeTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/LocalTypeTest.java"
    },
    {
      "TestUnwrappedMap171": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/TestUnwrappedMap171.java"
    },
    {
      "TestPropertyConflicts": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/TestPropertyConflicts.java"
    },
    {
      "TestExceptionsDuringWriting": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/exc/TestExceptionsDuringWriting.java"
    },
    {
      "NotANumberConversionTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/NotANumberConversionTest.java"
    },
    {
      "TestExceptionHandlingWithDefaultDeserialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/exc/TestExceptionHandlingWithDefaultDeserialization.java"
    },
    {
      "EnumDeserializationTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumDeserializationTest.java"
    },
    {
      "BooleanFormatTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/format/BooleanFormatTest.java"
    },
    {
      "ByteBufferUtilsTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/util/ByteBufferUtilsTest.java"
    },
    {
      "FormatFeatureAcceptSingleTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/FormatFeatureAcceptSingleTest.java"
    },
    {
      "EnumDefaultReadTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumDefaultReadTest.java"
    },
    {
      "MapEntryFormat1419Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/MapEntryFormat1419Test.java"
    },
    {
      "TestJacksonTypes": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestJacksonTypes.java"
    },
    {
      "TestViewsSerialization2": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/views/TestViewsSerialization2.java"
    },
    {
      "NumberNodes1770Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/NumberNodes1770Test.java"
    },
    {
      "IgnoredCreatorProperty1572Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/IgnoredCreatorProperty1572Test.java"
    },
    {
      "TestObjectIdDeserialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/TestObjectIdDeserialization.java"
    },
    {
      "TestDOM": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ext/TestDOM.java"
    },
    {
      "BeanSerializerModifier1612Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifier1612Test.java"
    },
    {
      "TestKeySerializers": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestKeySerializers.java"
    },
    {
      "NullConversionsGenericTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/filter/NullConversionsGenericTest.java"
    },
    {
      "TestSubtypes": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java"
    },
    {
      "EnumFormatShapeTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/format/EnumFormatShapeTest.java"
    },
    {
      "TestContextualKeyTypes": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualKeyTypes.java"
    },
    {
      "ObjectWithCreator1261Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectWithCreator1261Test.java"
    },
    {
      "NodeMergeTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/merge/NodeMergeTest.java"
    },
    {
      "TestDefaultForTreeNodes": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForTreeNodes.java"
    },
    {
      "TestAnyGetterAccess": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/access/TestAnyGetterAccess.java"
    },
    {
      "TestFormatSchema": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java"
    },
    {
      "NodeTestBase": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/NodeTestBase.java"
    },
    {
      "TestRootName": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/TestRootName.java"
    },
    {
      "EnumAltIdTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/EnumAltIdTest.java"
    },
    {
      "TestVisibleTypeId": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestVisibleTypeId.java"
    },
    {
      "UpdateValueTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/merge/UpdateValueTest.java"
    },
    {
      "ReadOrWriteOnlyTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/ReadOrWriteOnlyTest.java"
    },
    {
      "TestTypeFactoryWithRecursiveTypes": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactoryWithRecursiveTypes.java"
    },
    {
      "JsonIncludeCustomTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/filter/JsonIncludeCustomTest.java"
    },
    {
      "TestInnerClass": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestInnerClass.java"
    },
    {
      "TestGenerics": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/TestGenerics.java"
    },
    {
      "TestViewSerialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/views/TestViewSerialization.java"
    },
    {
      "JsonInclude1327Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/filter/JsonInclude1327Test.java"
    },
    {
      "AccessFixTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/misc/AccessFixTest.java"
    },
    {
      "IgnoreCreatorProp1317Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/filter/IgnoreCreatorProp1317Test.java"
    },
    {
      "TestMapSerialization": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java"
    },
    {
      "TestSerializationOrder": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestSerializationOrder.java"
    },
    {
      "DelegatingCreatorAnnotations2021Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/DelegatingCreatorAnnotations2021Test.java"
    },
    {
      "ComboPooledDataSource": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/mchange/v2/c3p0/jacksontest/ComboPooledDataSource.java"
    },
    {
      "TestGenericsBounded": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded.java"
    },
    {
      "JsonParserSequenceTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/util/JsonParserSequenceTest.java"
    },
    {
      "TestJsonSerializeAs": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerializeAs.java"
    },
    {
      "ExternalTypeId96Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/ExternalTypeId96Test.java"
    },
    {
      "DateSerializationTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/jdk/DateSerializationTest.java"
    },
    {
      "RawValueTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/RawValueTest.java"
    },
    {
      "TestContextAttributeWithDeser": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithDeser.java"
    },
    {
      "MediaItem": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/MediaItem.java"
    },
    {
      "TestObjectIdWithInjectables538": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithInjectables538.java"
    },
    {
      "AnySetterTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/AnySetterTest.java"
    },
    {
      "TypeResolverTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TypeResolverTest.java"
    },
    {
      "ObjectIdWithBuilder1496Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/ObjectIdWithBuilder1496Test.java"
    },
    {
      "TestTypeFactory1604": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory1604.java"
    },
    {
      "TestEnumTyping": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestEnumTyping.java"
    },
    {
      "ObjectReaderTestBase": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/ObjectReaderTestBase.java"
    },
    {
      "TestCreatorWithNamingStrategy556": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreatorWithNamingStrategy556.java"
    },
    {
      "SkipInjectableIntrospection962Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/SkipInjectableIntrospection962Test.java"
    },
    {
      "TestJava6Types": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ext/TestJava6Types.java"
    },
    {
      "CaseInsensitive1854Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/misc/CaseInsensitive1854Test.java"
    },
    {
      "TestMapConversions": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/convert/TestMapConversions.java"
    },
    {
      "NoTypeInfo1654Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/NoTypeInfo1654Test.java"
    },
    {
      "AbstractPointcutAdvisor": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/org/springframework/jacksontest/AbstractPointcutAdvisor.java"
    },
    {
      "TestIterable": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestIterable.java"
    },
    {
      "ViewsWithSchemaTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/views/ViewsWithSchemaTest.java"
    },
    {
      "TestDefaultForLists": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/deftyping/TestDefaultForLists.java"
    },
    {
      "ReadOnlyDeser1805Test": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/ReadOnlyDeser1805Test.java"
    },
    {
      "TestCreators3": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/TestCreators3.java"
    },
    {
      "TestCyclicTypes": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ser/TestCyclicTypes.java"
    },
    {
      "TestPolymorphicWithDefaultImpl1565": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestPolymorphicWithDefaultImpl1565.java"
    },
    {
      "TestAbstractTypeNames": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractTypeNames.java"
    },
    {
      "TestOverlappingTypeIdNames": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/jsontype/TestOverlappingTypeIdNames.java"
    },
    {
      "TestPolymorphicCreators": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/TestPolymorphicCreators.java"
    },
    {
      "VisibilityForSerializationTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/introspect/VisibilityForSerializationTest.java"
    },
    {
      "TestInnerClassReaderFor": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/seq/TestInnerClassReaderFor.java"
    },
    {
      "ImplicitParamsForCreatorTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/ImplicitParamsForCreatorTest.java"
    },
    {
      "FormatFeatureOrderedMapTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/struct/FormatFeatureOrderedMapTest.java"
    },
    {
      "ManualReadPerfWithRecord": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/perf/ManualReadPerfWithRecord.java"
    },
    {
      "DateDeserializationTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/jdk/DateDeserializationTest.java"
    },
    {
      "ArrayMergeTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/merge/ArrayMergeTest.java"
    },
    {
      "SingleArgCreatorTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/creators/SingleArgCreatorTest.java"
    },
    {
      "TestMixinSerWithViews": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerWithViews.java"
    },
    {
      "TestCoreXMLTypes": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/ext/TestCoreXMLTypes.java"
    },
    {
      "TestJsonPointer": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/node/TestJsonPointer.java"
    },
    {
      "BaseMapTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java"
    },
    {
      "NullConversionWithCreatorTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/failing/NullConversionWithCreatorTest.java"
    },
    {
      "CollectionMergeTest": "../../defects4j-subjects/JacksonDatabind-112f/src/test/java/com/fasterxml/jackson/databind/deser/merge/CollectionMergeTest.java"
    }
  ]
}