{
  "src_test_exact_match": [
    {
      "src_name": "JsonpCharacterEscapes",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/JsonpCharacterEscapes.java",
      "class_declaration": "public class JsonpCharacterEscapes extends CharacterEscapes ",
      "methods_under_test": {
        "=1": {
          "JsonpCharacterEscapes.instance()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonpCharacterEscapes.getEscapeSequence(int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/JsonpCharacterEscapesTest.java"
    },
    {
      "src_name": "RequestPayload",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/RequestPayload.java",
      "class_declaration": "public class RequestPayload implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "RequestPayload.getRawPayload()": [
            2,
            2,
            2
          ],
          "RequestPayload.toString()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/util/RequestPayloadTest.java"
    },
    {
      "src_name": "DefaultIndenter",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/DefaultIndenter.java",
      "class_declaration": "public class DefaultIndenter extends DefaultPrettyPrinter.NopIndenter ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/util/DefaultIndenterTest.java"
    },
    {
      "src_name": "JsonReadContext",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java",
      "class_declaration": "public final class JsonReadContext extends JsonStreamContext ",
      "methods_under_test": {
        "=1": {
          "JsonReadContext.withDupDetector(DupDetector)": [
            1,
            1,
            1
          ],
          "JsonReadContext.createRootContext(int, int, DupDetector)": [
            1,
            1,
            1
          ],
          "JsonReadContext.createRootContext(DupDetector)": [
            1,
            1,
            1
          ],
          "JsonReadContext.hasCurrentName()": [
            1,
            1,
            1
          ],
          "JsonReadContext.getStartLocation(Object)": [
            1,
            1,
            1
          ],
          "JsonReadContext.clearAndGetParent()": [
            1,
            1,
            1
          ],
          "JsonReadContext.expectComma()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonReadContext.reset(int, int, int)": [
            2,
            2,
            2
          ],
          "JsonReadContext.createChildArrayContext(int, int)": [
            2,
            2,
            2
          ],
          "JsonReadContext.createChildObjectContext(int, int)": [
            2,
            2,
            2
          ],
          "JsonReadContext.setCurrentName(String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/JsonReadContextTest.java"
    },
    {
      "src_name": "IOContext",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/io/IOContext.java",
      "class_declaration": "public class IOContext ",
      "methods_under_test": {
        "=1": {
          "IOContext.withEncoding(JsonEncoding)": [
            1,
            1,
            1
          ],
          "IOContext.constructTextBuffer()": [
            1,
            1,
            1
          ],
          "IOContext.allocReadIOBuffer()": [
            1,
            1,
            1
          ],
          "IOContext.allocReadIOBuffer(int)": [
            1,
            1,
            1
          ],
          "IOContext.allocWriteEncodingBuffer()": [
            1,
            1,
            1
          ],
          "IOContext.allocWriteEncodingBuffer(int)": [
            1,
            1,
            1
          ],
          "IOContext.allocBase64Buffer()": [
            1,
            1,
            1
          ],
          "IOContext.allocBase64Buffer(int)": [
            1,
            1,
            1
          ],
          "IOContext.allocTokenBuffer()": [
            1,
            1,
            1
          ],
          "IOContext.allocTokenBuffer(int)": [
            1,
            1,
            1
          ],
          "IOContext.allocConcatBuffer()": [
            1,
            1,
            1
          ],
          "IOContext.allocNameCopyBuffer(int)": [
            1,
            1,
            1
          ],
          "IOContext._verifyAlloc(Object)": [
            1,
            1,
            1
          ],
          "IOContext._verifyRelease(byte[], byte[])": [
            1,
            1,
            1
          ],
          "IOContext._verifyRelease(char[], char[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "IOContext.releaseReadIOBuffer(byte[])": [
            2,
            2,
            2
          ],
          "IOContext.releaseWriteEncodingBuffer(byte[])": [
            2,
            2,
            2
          ],
          "IOContext.releaseBase64Buffer(byte[])": [
            2,
            2,
            2
          ],
          "IOContext.releaseTokenBuffer(char[])": [
            2,
            2,
            2
          ],
          "IOContext.releaseConcatBuffer(char[])": [
            2,
            2,
            2
          ],
          "IOContext.releaseNameCopyBuffer(char[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java"
    },
    {
      "src_name": "JsonFactory",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/JsonFactory.java",
      "class_declaration": "@SuppressWarnings(\"resource\")\npublic class JsonFactory extends TokenStreamFactory implements Versioned,\n        java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "JsonFactory.enabledByDefault()": [
            1,
            1,
            1
          ],
          "JsonFactory.enabledIn(int)": [
            1,
            1,
            1
          ],
          "JsonFactory.rebuild()": [
            1,
            1,
            1
          ],
          "JsonFactory.builder()": [
            1,
            1,
            1
          ],
          "JsonFactory.copy()": [
            1,
            1,
            1
          ],
          "JsonFactory._checkInvalidCopy(Class<?>)": [
            1,
            1,
            1
          ],
          "JsonFactory.readResolve()": [
            1,
            1,
            1
          ],
          "JsonFactory.requiresPropertyOrdering()": [
            1,
            1,
            1
          ],
          "JsonFactory.canHandleBinaryNatively()": [
            1,
            1,
            1
          ],
          "JsonFactory.canUseCharArrays()": [
            1,
            1,
            1
          ],
          "JsonFactory.canParseAsync()": [
            1,
            1,
            1
          ],
          "JsonFactory.requiresCustomCodec()": [
            1,
            1,
            1
          ],
          "JsonFactory.hasJSONFormat(InputAccessor)": [
            1,
            1,
            1
          ],
          "JsonFactory.version()": [
            1,
            1,
            1
          ],
          "JsonFactory.configure(JsonFactory.Feature, boolean)": [
            1,
            1,
            1
          ],
          "JsonFactory.enable(JsonFactory.Feature)": [
            1,
            1,
            1
          ],
          "JsonFactory.disable(JsonFactory.Feature)": [
            1,
            1,
            1
          ],
          "JsonFactory.isEnabled(JsonFactory.Feature)": [
            1,
            1,
            1
          ],
          "JsonFactory.configure(JsonParser.Feature, boolean)": [
            1,
            1,
            1
          ],
          "JsonFactory.enable(JsonParser.Feature)": [
            1,
            1,
            1
          ],
          "JsonFactory.disable(JsonParser.Feature)": [
            1,
            1,
            1
          ],
          "JsonFactory.isEnabled(JsonParser.Feature)": [
            1,
            1,
            1
          ],
          "JsonFactory.isEnabled(StreamReadFeature)": [
            1,
            1,
            1
          ],
          "JsonFactory.setInputDecorator(InputDecorator)": [
            1,
            1,
            1
          ],
          "JsonFactory.configure(JsonGenerator.Feature, boolean)": [
            1,
            1,
            1
          ],
          "JsonFactory.enable(JsonGenerator.Feature)": [
            1,
            1,
            1
          ],
          "JsonFactory.disable(JsonGenerator.Feature)": [
            1,
            1,
            1
          ],
          "JsonFactory.isEnabled(JsonGenerator.Feature)": [
            1,
            1,
            1
          ],
          "JsonFactory.isEnabled(StreamWriteFeature)": [
            1,
            1,
            1
          ],
          "JsonFactory.setCharacterEscapes(CharacterEscapes)": [
            1,
            1,
            1
          ],
          "JsonFactory.setOutputDecorator(OutputDecorator)": [
            1,
            1,
            1
          ],
          "JsonFactory.setRootValueSeparator(String)": [
            1,
            1,
            1
          ],
          "JsonFactory.setCodec(ObjectCodec)": [
            1,
            1,
            1
          ],
          "JsonFactory.createParser(File)": [
            1,
            1,
            1
          ],
          "JsonFactory.createParser(URL)": [
            1,
            1,
            1
          ],
          "JsonFactory.createParser(InputStream)": [
            1,
            1,
            1
          ],
          "JsonFactory.createParser(Reader)": [
            1,
            1,
            1
          ],
          "JsonFactory.createParser(char[])": [
            1,
            1,
            1
          ],
          "JsonFactory.createParser(DataInput)": [
            1,
            1,
            1
          ],
          "JsonFactory.createNonBlockingByteArrayParser()": [
            1,
            1,
            1
          ],
          "JsonFactory.createGenerator(OutputStream)": [
            1,
            1,
            1
          ],
          "JsonFactory.createGenerator(Writer)": [
            1,
            1,
            1
          ],
          "JsonFactory.createGenerator(DataOutput, JsonEncoding)": [
            1,
            1,
            1
          ],
          "JsonFactory.createGenerator(DataOutput)": [
            1,
            1,
            1
          ],
          "JsonFactory.createJsonParser(File)": [
            1,
            1,
            1
          ],
          "JsonFactory.createJsonParser(URL)": [
            1,
            1,
            1
          ],
          "JsonFactory.createJsonParser(InputStream)": [
            1,
            1,
            1
          ],
          "JsonFactory.createJsonParser(Reader)": [
            1,
            1,
            1
          ],
          "JsonFactory.createJsonParser(byte[])": [
            1,
            1,
            1
          ],
          "JsonFactory.createJsonParser(byte[], int, int)": [
            1,
            1,
            1
          ],
          "JsonFactory.createJsonParser(String)": [
            1,
            1,
            1
          ],
          "JsonFactory.createJsonGenerator(OutputStream, JsonEncoding)": [
            1,
            1,
            1
          ],
          "JsonFactory.createJsonGenerator(Writer)": [
            1,
            1,
            1
          ],
          "JsonFactory.createJsonGenerator(OutputStream)": [
            1,
            1,
            1
          ],
          "JsonFactory._createParser(InputStream, IOContext)": [
            1,
            1,
            1
          ],
          "JsonFactory._createParser(Reader, IOContext)": [
            1,
            1,
            1
          ],
          "JsonFactory._createParser(char[], int, int, IOContext, boolean)": [
            1,
            1,
            1
          ],
          "JsonFactory._createParser(byte[], int, int, IOContext)": [
            1,
            1,
            1
          ],
          "JsonFactory._createParser(DataInput, IOContext)": [
            1,
            1,
            1
          ],
          "JsonFactory._createContext(Object, boolean)": [
            1,
            1,
            1
          ],
          "JsonFactory._createNonBlockingContext(Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonFactory.collectDefaults()": [
            3,
            3,
            3
          ],
          "JsonFactory.canUseSchema(FormatSchema)": [
            2,
            2,
            2
          ],
          "JsonFactory.getFormatName()": [
            2,
            2,
            2
          ],
          "JsonFactory.hasFormat(InputAccessor)": [
            2,
            2,
            2
          ],
          "JsonFactory.createParser(byte[])": [
            3,
            3,
            3
          ],
          "JsonFactory.createParser(byte[], int, int)": [
            3,
            3,
            3
          ],
          "JsonFactory.createParser(String)": [
            2,
            2,
            2
          ],
          "JsonFactory.createParser(char[], int, int)": [
            2,
            2,
            2
          ],
          "JsonFactory.createGenerator(OutputStream, JsonEncoding)": [
            2,
            2,
            2
          ],
          "JsonFactory.createGenerator(File, JsonEncoding)": [
            2,
            2,
            2
          ],
          "JsonFactory._createGenerator(Writer, IOContext)": [
            4,
            4,
            4
          ],
          "JsonFactory._createUTF8Generator(OutputStream, IOContext)": [
            4,
            4,
            4
          ],
          "JsonFactory._createWriter(OutputStream, JsonEncoding, IOContext)": [
            2,
            2,
            2
          ],
          "JsonFactory._decorate(InputStream, IOContext)": [
            3,
            3,
            3
          ],
          "JsonFactory._decorate(Reader, IOContext)": [
            3,
            3,
            3
          ],
          "JsonFactory._decorate(DataInput, IOContext)": [
            3,
            3,
            3
          ],
          "JsonFactory._decorate(OutputStream, IOContext)": [
            3,
            3,
            3
          ],
          "JsonFactory._decorate(Writer, IOContext)": [
            3,
            3,
            3
          ],
          "JsonFactory._getBufferRecycler()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/JsonFactoryTest.java"
    },
    {
      "src_name": "TypeReference",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/type/TypeReference.java",
      "class_declaration": "public abstract class TypeReference <T> implements Comparable<TypeReference<T>> ",
      "methods_under_test": {
        "=1": {
          "TypeReference.compareTo(TypeReference<T>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java"
    },
    {
      "src_name": "SerializedString",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/io/SerializedString.java",
      "class_declaration": "public class SerializedString implements SerializableString, java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "SerializedString.readResolve()": [
            1,
            1,
            1
          ],
          "SerializedString.charLength()": [
            1,
            1,
            1
          ],
          "SerializedString.toString()": [
            1,
            1,
            1
          ],
          "SerializedString.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SerializedString.asQuotedChars()": [
            2,
            2,
            2
          ],
          "SerializedString.asUnquotedUTF8()": [
            2,
            2,
            2
          ],
          "SerializedString.asQuotedUTF8()": [
            2,
            2,
            2
          ],
          "SerializedString.appendQuotedUTF8(byte[], int)": [
            3,
            3,
            3
          ],
          "SerializedString.appendQuoted(char[], int)": [
            3,
            3,
            3
          ],
          "SerializedString.appendUnquotedUTF8(byte[], int)": [
            3,
            3,
            3
          ],
          "SerializedString.appendUnquoted(char[], int)": [
            2,
            2,
            2
          ],
          "SerializedString.writeQuotedUTF8(OutputStream)": [
            2,
            2,
            2
          ],
          "SerializedString.writeUnquotedUTF8(OutputStream)": [
            2,
            2,
            2
          ],
          "SerializedString.putQuotedUTF8(ByteBuffer)": [
            3,
            3,
            3
          ],
          "SerializedString.putUnquotedUTF8(ByteBuffer)": [
            3,
            3,
            3
          ],
          "SerializedString.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/util/TestSerializedString.java"
    },
    {
      "src_name": "UTF8Writer",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/io/UTF8Writer.java",
      "class_declaration": "public final class UTF8Writer extends Writer ",
      "methods_under_test": {
        "=1": {
          "UTF8Writer.append(char)": [
            1,
            1,
            1
          ],
          "UTF8Writer.write(char[])": [
            1,
            1,
            1
          ],
          "UTF8Writer.write(String)": [
            1,
            1,
            1
          ],
          "UTF8Writer.illegalSurrogate(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UTF8Writer.close()": [
            5,
            5,
            5
          ],
          "UTF8Writer.flush()": [
            3,
            3,
            3
          ],
          "UTF8Writer.write(int)": [
            10,
            10,
            10
          ],
          "UTF8Writer.convertSurrogate(int)": [
            2,
            2,
            2
          ],
          "UTF8Writer.illegalSurrogateDesc(int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "UTF8Writer.write(char[], int, int)": [
            14,
            0,
            0
          ],
          "UTF8Writer.write(String, int, int)": [
            16,
            16,
            16
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/io/UTF8WriterTest.java"
    },
    {
      "src_name": "JsonParser",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/JsonParser.java",
      "class_declaration": "public abstract class JsonParser implements Closeable, Versioned ",
      "methods_under_test": {
        "=1": {
          "JsonParser.enabledByDefault()": [
            1,
            1,
            1
          ],
          "JsonParser.enabledIn(int)": [
            1,
            1,
            1
          ],
          "JsonParser.getCurrentValue()": [
            1,
            1,
            1
          ],
          "JsonParser.setRequestPayloadOnError(byte[], String)": [
            1,
            1,
            1
          ],
          "JsonParser.canUseSchema(FormatSchema)": [
            1,
            1,
            1
          ],
          "JsonParser.requiresCustomCodec()": [
            1,
            1,
            1
          ],
          "JsonParser.canParseAsync()": [
            1,
            1,
            1
          ],
          "JsonParser.releaseBuffered(OutputStream)": [
            1,
            1,
            1
          ],
          "JsonParser.releaseBuffered(Writer)": [
            1,
            1,
            1
          ],
          "JsonParser.enable(Feature)": [
            1,
            1,
            1
          ],
          "JsonParser.disable(Feature)": [
            1,
            1,
            1
          ],
          "JsonParser.isEnabled(Feature)": [
            1,
            1,
            1
          ],
          "JsonParser.setFeatureMask(int)": [
            1,
            1,
            1
          ],
          "JsonParser.overrideStdFeatures(int, int)": [
            1,
            1,
            1
          ],
          "JsonParser.overrideFormatFeatures(int, int)": [
            1,
            1,
            1
          ],
          "JsonParser.nextFieldName(SerializableString)": [
            1,
            1,
            1
          ],
          "JsonParser.nextFieldName()": [
            1,
            1,
            1
          ],
          "JsonParser.nextTextValue()": [
            1,
            1,
            1
          ],
          "JsonParser.nextIntValue(int)": [
            1,
            1,
            1
          ],
          "JsonParser.nextLongValue(long)": [
            1,
            1,
            1
          ],
          "JsonParser.currentToken()": [
            1,
            1,
            1
          ],
          "JsonParser.currentTokenId()": [
            1,
            1,
            1
          ],
          "JsonParser.currentName()": [
            1,
            1,
            1
          ],
          "JsonParser.readBinaryValue(OutputStream)": [
            1,
            1,
            1
          ],
          "JsonParser.readBinaryValue(Base64Variant, OutputStream)": [
            1,
            1,
            1
          ],
          "JsonParser.getValueAsInt(int)": [
            1,
            1,
            1
          ],
          "JsonParser.getValueAsLong(long)": [
            1,
            1,
            1
          ],
          "JsonParser.getValueAsDouble(double)": [
            1,
            1,
            1
          ],
          "JsonParser.getValueAsBoolean(boolean)": [
            1,
            1,
            1
          ],
          "JsonParser.canReadObjectId()": [
            1,
            1,
            1
          ],
          "JsonParser.canReadTypeId()": [
            1,
            1,
            1
          ],
          "JsonParser.readValueAs(Class<T>)": [
            1,
            1,
            1
          ],
          "JsonParser.readValueAs(TypeReference<?>)": [
            1,
            1,
            1
          ],
          "JsonParser.readValuesAs(Class<T>)": [
            1,
            1,
            1
          ],
          "JsonParser.readValuesAs(TypeReference<T>)": [
            1,
            1,
            1
          ],
          "JsonParser.readValueAsTree()": [
            1,
            1,
            1
          ],
          "JsonParser._constructError(String)": [
            1,
            1,
            1
          ],
          "JsonParser._reportUnsupportedOperation()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonParser.collectDefaults()": [
            3,
            3,
            3
          ],
          "JsonParser.setCurrentValue(Object)": [
            2,
            2,
            2
          ],
          "JsonParser.configure(Feature, boolean)": [
            2,
            2,
            2
          ],
          "JsonParser.nextBooleanValue()": [
            3,
            3,
            3
          ],
          "JsonParser.getText(Writer)": [
            2,
            2,
            2
          ],
          "JsonParser.getByteValue()": [
            2,
            2,
            2
          ],
          "JsonParser.getShortValue()": [
            2,
            2,
            2
          ],
          "JsonParser.getBooleanValue()": [
            3,
            3,
            3
          ],
          "JsonParser._codec()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/JsonParserTest.java"
    },
    {
      "src_name": "Version",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/Version.java",
      "class_declaration": "public class Version implements Comparable<Version>, java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "Version.unknownVersion()": [
            1,
            1,
            1
          ],
          "Version.toFullString()": [
            1,
            1,
            1
          ],
          "Version.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Version.toString()": [
            2,
            2,
            2
          ],
          "Version.equals(Object)": [
            4,
            4,
            4
          ],
          "Version.compareTo(Version)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/VersionTest.java"
    },
    {
      "src_name": "JsonStringEncoder",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java",
      "class_declaration": "public final class JsonStringEncoder ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "JsonStringEncoder.quoteAsString(String)": [
            8,
            0,
            0
          ],
          "JsonStringEncoder.quoteAsString(CharSequence, StringBuilder)": [
            4,
            0,
            0
          ]
        },
        "11-20": {
          "JsonStringEncoder.quoteAsUTF8(String)": [
            18,
            18,
            18
          ],
          "JsonStringEncoder.encodeAsUTF8(String)": [
            16,
            16,
            16
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java"
    },
    {
      "src_name": "CharTypes",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/io/CharTypes.java",
      "class_declaration": "public final class CharTypes ",
      "methods_under_test": {
        "=1": {
          "CharTypes.charToHex(int)": [
            1,
            1,
            1
          ],
          "CharTypes.appendQuoted(StringBuilder, String)": [
            1,
            1,
            1
          ],
          "CharTypes.copyHexChars()": [
            1,
            1,
            1
          ],
          "CharTypes.copyHexBytes()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/io/TestCharTypes.java"
    },
    {
      "src_name": "JsonPointer",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/JsonPointer.java",
      "class_declaration": "public class JsonPointer ",
      "methods_under_test": {
        "=1": {
          "JsonPointer.valueOf(String)": [
            1,
            1,
            1
          ],
          "JsonPointer.matches()": [
            1,
            1,
            1
          ],
          "JsonPointer.mayMatchProperty()": [
            1,
            1,
            1
          ],
          "JsonPointer.mayMatchElement()": [
            1,
            1,
            1
          ],
          "JsonPointer.matchesProperty(String)": [
            1,
            1,
            1
          ],
          "JsonPointer.matchesElement(int)": [
            1,
            1,
            1
          ],
          "JsonPointer.tail()": [
            1,
            1,
            1
          ],
          "JsonPointer.toString()": [
            1,
            1,
            1
          ],
          "JsonPointer.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonPointer.compile(String)": [
            3,
            3,
            3
          ],
          "JsonPointer.forPath(JsonStreamContext, boolean)": [
            9,
            9,
            9
          ],
          "JsonPointer.last()": [
            3,
            3,
            3
          ],
          "JsonPointer.append(JsonPointer)": [
            4,
            4,
            4
          ],
          "JsonPointer.matchProperty(String)": [
            2,
            2,
            2
          ],
          "JsonPointer.matchElement(int)": [
            2,
            2,
            2
          ],
          "JsonPointer.head()": [
            3,
            3,
            3
          ],
          "JsonPointer.equals(Object)": [
            4,
            4,
            4
          ],
          "JsonPointer._parseTail(String)": [
            4,
            4,
            4
          ],
          "JsonPointer._parseQuotedTail(String, int)": [
            5,
            5,
            5
          ],
          "JsonPointer._constructHead()": [
            2,
            2,
            2
          ],
          "JsonPointer._constructHead(int, JsonPointer)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java"
    },
    {
      "src_name": "DefaultPrettyPrinter",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic class DefaultPrettyPrinter implements PrettyPrinter, Instantiatable<DefaultPrettyPrinter>,\n        java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "DefaultPrettyPrinter.withRootSeparator(String)": [
            1,
            1,
            1
          ],
          "DefaultPrettyPrinter.indentArraysWith(Indenter)": [
            1,
            1,
            1
          ],
          "DefaultPrettyPrinter.indentObjectsWith(Indenter)": [
            1,
            1,
            1
          ],
          "DefaultPrettyPrinter.withSpacesInObjectEntries()": [
            1,
            1,
            1
          ],
          "DefaultPrettyPrinter.withoutSpacesInObjectEntries()": [
            1,
            1,
            1
          ],
          "DefaultPrettyPrinter.withSeparators(Separators)": [
            1,
            1,
            1
          ],
          "DefaultPrettyPrinter.beforeObjectEntries(JsonGenerator)": [
            1,
            1,
            1
          ],
          "DefaultPrettyPrinter.writeObjectEntrySeparator(JsonGenerator)": [
            1,
            1,
            1
          ],
          "DefaultPrettyPrinter.beforeArrayValues(JsonGenerator)": [
            1,
            1,
            1
          ],
          "DefaultPrettyPrinter.writeArrayValueSeparator(JsonGenerator)": [
            1,
            1,
            1
          ],
          "FixedSpaceIndenter.writeIndentation(JsonGenerator, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DefaultPrettyPrinter.withRootSeparator(SerializableString)": [
            2,
            2,
            2
          ],
          "DefaultPrettyPrinter.withArrayIndenter(Indenter)": [
            3,
            3,
            3
          ],
          "DefaultPrettyPrinter.withObjectIndenter(Indenter)": [
            3,
            3,
            3
          ],
          "DefaultPrettyPrinter._withSpaces(boolean)": [
            2,
            2,
            2
          ],
          "DefaultPrettyPrinter.createInstance()": [
            2,
            2,
            2
          ],
          "DefaultPrettyPrinter.writeRootValueSeparator(JsonGenerator)": [
            2,
            2,
            2
          ],
          "DefaultPrettyPrinter.writeStartObject(JsonGenerator)": [
            2,
            2,
            2
          ],
          "DefaultPrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator)": [
            3,
            3,
            3
          ],
          "DefaultPrettyPrinter.writeEndObject(JsonGenerator, int)": [
            3,
            3,
            3
          ],
          "DefaultPrettyPrinter.writeStartArray(JsonGenerator)": [
            2,
            2,
            2
          ],
          "DefaultPrettyPrinter.writeEndArray(JsonGenerator, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java"
    },
    {
      "src_name": "SegmentedStringWriter",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java",
      "class_declaration": "public final class SegmentedStringWriter extends Writer ",
      "methods_under_test": {
        "=1": {
          "SegmentedStringWriter.append(char)": [
            1,
            1,
            1
          ],
          "SegmentedStringWriter.append(CharSequence)": [
            1,
            1,
            1
          ],
          "SegmentedStringWriter.append(CharSequence, int, int)": [
            1,
            1,
            1
          ],
          "SegmentedStringWriter.write(char[])": [
            1,
            1,
            1
          ],
          "SegmentedStringWriter.write(char[], int, int)": [
            1,
            1,
            1
          ],
          "SegmentedStringWriter.write(int)": [
            1,
            1,
            1
          ],
          "SegmentedStringWriter.write(String)": [
            1,
            1,
            1
          ],
          "SegmentedStringWriter.write(String, int, int)": [
            1,
            1,
            1
          ],
          "SegmentedStringWriter.getAndClear()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/io/SegmentedStringWriterTest.java"
    },
    {
      "src_name": "MergedStream",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/io/MergedStream.java",
      "class_declaration": "public final class MergedStream extends InputStream ",
      "methods_under_test": {
        "=1": {
          "MergedStream.read(byte[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MergedStream.available()": [
            4,
            4,
            4
          ],
          "MergedStream.close()": [
            2,
            2,
            2
          ],
          "MergedStream.mark(int)": [
            3,
            3,
            3
          ],
          "MergedStream.markSupported()": [
            2,
            2,
            2
          ],
          "MergedStream.read()": [
            5,
            5,
            5
          ],
          "MergedStream.read(byte[], int, int)": [
            6,
            6,
            6
          ],
          "MergedStream.reset()": [
            3,
            3,
            3
          ],
          "MergedStream.skip(long)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/io/TestMergedStream.java"
    },
    {
      "src_name": "TextBuffer",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java",
      "class_declaration": "public final class TextBuffer ",
      "methods_under_test": {
        "=1": {
          "TextBuffer.contentsAsDouble()": [
            1,
            1,
            1
          ],
          "TextBuffer.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TextBuffer.releaseBuffers()": [
            4,
            4,
            4
          ],
          "TextBuffer.resetWithEmpty()": [
            2,
            2,
            2
          ],
          "TextBuffer.resetWith(char)": [
            3,
            3,
            3
          ],
          "TextBuffer.resetWithShared(char[], int, int)": [
            2,
            2,
            2
          ],
          "TextBuffer.resetWithCopy(char[], int, int)": [
            3,
            3,
            3
          ],
          "TextBuffer.resetWithCopy(String, int, int)": [
            3,
            3,
            3
          ],
          "TextBuffer.resetWithString(String)": [
            2,
            2,
            2
          ],
          "TextBuffer.size()": [
            4,
            4,
            4
          ],
          "TextBuffer.hasTextAsCharacters()": [
            3,
            3,
            3
          ],
          "TextBuffer.getTextBuffer()": [
            5,
            5,
            5
          ],
          "TextBuffer.contentsAsString()": [
            8,
            8,
            8
          ],
          "TextBuffer.contentsAsArray()": [
            2,
            2,
            2
          ],
          "TextBuffer.contentsAsDecimal()": [
            4,
            4,
            4
          ],
          "TextBuffer.contentsAsInt(boolean)": [
            4,
            4,
            4
          ],
          "TextBuffer.contentsAsLong(boolean)": [
            4,
            4,
            4
          ],
          "TextBuffer.contentsToWriter(Writer)": [
            8,
            8,
            8
          ],
          "TextBuffer.ensureNotShared()": [
            2,
            2,
            2
          ],
          "TextBuffer.append(char)": [
            3,
            3,
            3
          ],
          "TextBuffer.append(char[], int, int)": [
            6,
            6,
            6
          ],
          "TextBuffer.append(String, int, int)": [
            6,
            6,
            6
          ],
          "TextBuffer.getCurrentSegment()": [
            4,
            4,
            4
          ],
          "TextBuffer.emptyAndGetCurrentSegment()": [
            3,
            3,
            3
          ],
          "TextBuffer.setCurrentAndReturn(int)": [
            2,
            2,
            2
          ],
          "TextBuffer.finishCurrentSegment()": [
            4,
            4,
            4
          ],
          "TextBuffer.expandCurrentSegment()": [
            2,
            2,
            2
          ],
          "TextBuffer.expandCurrentSegment(int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java"
    },
    {
      "src_name": "VersionUtil",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java",
      "class_declaration": "public class VersionUtil ",
      "methods_under_test": {
        "=1": {
          "VersionUtil.version()": [
            1,
            1,
            1
          ],
          "VersionUtil.versionFor(Class<?>)": [
            1,
            1,
            1
          ],
          "VersionUtil.throwInternal()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "VersionUtil.packageVersionFor(Class<?>)": [
            6,
            6,
            6
          ],
          "VersionUtil.mavenVersionFor(ClassLoader, String, String)": [
            9,
            9,
            9
          ],
          "VersionUtil.parseVersion(String, String, String)": [
            2,
            2,
            2
          ],
          "VersionUtil.parseVersionPart(String)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/util/VersionUtilTest.java"
    },
    {
      "src_name": "ByteArrayBuilder",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java",
      "error": "810 is not in list",
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/util/ByteArrayBuilderTest.java"
    },
    {
      "src_name": "PrettyPrinter",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java"
    },
    {
      "src_name": "Separators",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/Separators.java",
      "class_declaration": "public class Separators implements Serializable ",
      "methods_under_test": {
        "=1": {
          "Separators.createDefaultInstance()": [
            1,
            1,
            1
          ],
          "Separators.withObjectFieldValueSeparator(char)": [
            1,
            1,
            1
          ],
          "Separators.withObjectEntrySeparator(char)": [
            1,
            1,
            1
          ],
          "Separators.withArrayValueSeparator(char)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/util/SeparatorsTest.java"
    },
    {
      "src_name": "DataFormatMatcher",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java",
      "class_declaration": "public class DataFormatMatcher ",
      "methods_under_test": {
        "=1": {
          "DataFormatMatcher.hasMatch()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DataFormatMatcher.createParserWithMatch()": [
            3,
            3,
            3
          ],
          "DataFormatMatcher.getDataStream()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/format/DataFormatMatcherTest.java"
    }
  ],
  "src_test_fuzz_match": [
    {
      "src_name": "Name",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/sym/Name.java",
      "class_declaration": "public abstract class Name ",
      "methods_under_test": {
        "=1": {
          "Name.toString()": [
            1,
            1,
            1
          ],
          "Name.hashCode()": [
            1,
            1,
            1
          ],
          "Name.equals(Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncParserNamesTest.java"
    },
    {
      "src_name": "UTF8DataInputJsonParser",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/UTF8DataInputJsonParser.java",
      "class_declaration": "public class UTF8DataInputJsonParser extends ParserBase ",
      "methods_under_test": {
        "=1": {
          "UTF8DataInputJsonParser.releaseBuffered(OutputStream)": [
            1,
            1,
            1
          ],
          "UTF8DataInputJsonParser._releaseBuffers()": [
            1,
            1,
            1
          ],
          "UTF8DataInputJsonParser._reportInvalidToken(int, String)": [
            1,
            1,
            1
          ],
          "UTF8DataInputJsonParser._reportInvalidInitial(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UTF8DataInputJsonParser.getText()": [
            3,
            3,
            3
          ],
          "UTF8DataInputJsonParser.getText(Writer)": [
            6,
            6,
            6
          ],
          "UTF8DataInputJsonParser.getValueAsString()": [
            4,
            4,
            4
          ],
          "UTF8DataInputJsonParser.getValueAsString(String)": [
            4,
            4,
            4
          ],
          "UTF8DataInputJsonParser.getValueAsInt()": [
            5,
            5,
            5
          ],
          "UTF8DataInputJsonParser.getValueAsInt(int)": [
            5,
            5,
            5
          ],
          "UTF8DataInputJsonParser._getText2(JsonToken)": [
            7,
            7,
            7
          ],
          "UTF8DataInputJsonParser.getTextCharacters()": [
            10,
            10,
            10
          ],
          "UTF8DataInputJsonParser.getTextLength()": [
            6,
            6,
            6
          ],
          "UTF8DataInputJsonParser.getTextOffset()": [
            7,
            7,
            7
          ],
          "UTF8DataInputJsonParser.getBinaryValue(Base64Variant)": [
            5,
            5,
            5
          ],
          "UTF8DataInputJsonParser.readBinaryValue(Base64Variant, OutputStream)": [
            4,
            4,
            4
          ],
          "UTF8DataInputJsonParser.finishToken()": [
            2,
            2,
            2
          ],
          "UTF8DataInputJsonParser.nextTextValue()": [
            6,
            6,
            6
          ],
          "UTF8DataInputJsonParser.nextIntValue(int)": [
            5,
            5,
            5
          ],
          "UTF8DataInputJsonParser.nextLongValue(long)": [
            5,
            5,
            5
          ],
          "UTF8DataInputJsonParser.nextBooleanValue()": [
            8,
            8,
            8
          ],
          "UTF8DataInputJsonParser._parsePosNumber(int)": [
            6,
            6,
            6
          ],
          "UTF8DataInputJsonParser._parseNegNumber()": [
            7,
            7,
            7
          ],
          "UTF8DataInputJsonParser._finishString()": [
            4,
            4,
            4
          ],
          "UTF8DataInputJsonParser._skipString()": [
            4,
            0,
            0
          ],
          "UTF8DataInputJsonParser._handleInvalidNumberStart(int, boolean)": [
            5,
            5,
            5
          ],
          "UTF8DataInputJsonParser._matchToken(String, int)": [
            4,
            4,
            4
          ],
          "UTF8DataInputJsonParser._decodeCharForError(int)": [
            10,
            10,
            10
          ],
          "UTF8DataInputJsonParser._reportInvalidToken(int, String, String)": [
            3,
            3,
            3
          ],
          "UTF8DataInputJsonParser._reportInvalidChar(int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "UTF8DataInputJsonParser._parseName(int)": [
            12,
            12,
            12
          ],
          "UTF8DataInputJsonParser.parseEscapedName(int[], int, int, int, int)": [
            16,
            16,
            16
          ],
          "UTF8DataInputJsonParser._handleOddName(int)": [
            11,
            11,
            11
          ],
          "UTF8DataInputJsonParser._parseAposName()": [
            17,
            17,
            17
          ],
          "UTF8DataInputJsonParser._handleUnexpectedValue(int)": [
            14,
            14,
            14
          ],
          "UTF8DataInputJsonParser._handleApos()": [
            14,
            14,
            14
          ],
          "UTF8DataInputJsonParser._decodeEscaped()": [
            12,
            12,
            12
          ],
          "UTF8DataInputJsonParser._decodeBase64(Base64Variant)": [
            15,
            15,
            15
          ]
        },
        ">20": {
          "UTF8DataInputJsonParser._readBinary(Base64Variant, OutputStream, byte[])": [
            21,
            21,
            21
          ],
          "UTF8DataInputJsonParser.nextToken()": [
            28,
            28,
            28
          ],
          "UTF8DataInputJsonParser.nextFieldName()": [
            26,
            26,
            26
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/JsonParserClosedCaseTest.java"
    },
    {
      "src_name": "ParserBase",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java",
      "class_declaration": "public abstract class ParserBase extends ParserMinimalBase ",
      "methods_under_test": {
        "=1": {
          "ParserBase.version()": [
            1,
            1,
            1
          ],
          "ParserBase.getCurrentLocation()": [
            1,
            1,
            1
          ],
          "ParserBase.getTokenColumnNr()": [
            1,
            1,
            1
          ],
          "ParserBase._eofAsNextChar()": [
            1,
            1,
            1
          ],
          "ParserBase.resetInt(boolean, int)": [
            1,
            1,
            1
          ],
          "ParserBase.resetFloat(boolean, int, int, int)": [
            1,
            1,
            1
          ],
          "ParserBase.resetAsNaN(String, double)": [
            1,
            1,
            1
          ],
          "ParserBase.getFloatValue()": [
            1,
            1,
            1
          ],
          "ParserBase._reportMismatchedEndMarker(int, char)": [
            1,
            1,
            1
          ],
          "ParserBase._decodeEscaped()": [
            1,
            1,
            1
          ],
          "ParserBase.reportInvalidBase64Char(Base64Variant, int, int)": [
            1,
            1,
            1
          ],
          "ParserBase._handleBase64MissingPadding(Base64Variant)": [
            1,
            1,
            1
          ],
          "ParserBase.loadMore()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ParserBase.enable(Feature)": [
            3,
            3,
            3
          ],
          "ParserBase.disable(Feature)": [
            2,
            2,
            2
          ],
          "ParserBase.setFeatureMask(int)": [
            2,
            2,
            2
          ],
          "ParserBase.overrideStdFeatures(int, int)": [
            2,
            2,
            2
          ],
          "ParserBase._checkStdFeatureChanges(int, int)": [
            4,
            4,
            4
          ],
          "ParserBase.getCurrentName()": [
            3,
            3,
            3
          ],
          "ParserBase.overrideCurrentName(String)": [
            3,
            3,
            3
          ],
          "ParserBase.close()": [
            2,
            2,
            2
          ],
          "ParserBase.hasTextCharacters()": [
            3,
            3,
            3
          ],
          "ParserBase.getBinaryValue(Base64Variant)": [
            3,
            3,
            3
          ],
          "ParserBase._releaseBuffers()": [
            2,
            2,
            2
          ],
          "ParserBase._handleEOF()": [
            2,
            2,
            2
          ],
          "ParserBase._getByteArrayBuilder()": [
            2,
            2,
            2
          ],
          "ParserBase.reset(boolean, int, int, int)": [
            2,
            2,
            2
          ],
          "ParserBase.getNumberValue()": [
            8,
            8,
            8
          ],
          "ParserBase.getNumberType()": [
            6,
            6,
            6
          ],
          "ParserBase.getIntValue()": [
            4,
            4,
            4
          ],
          "ParserBase.getLongValue()": [
            4,
            4,
            4
          ],
          "ParserBase.getBigIntegerValue()": [
            4,
            4,
            4
          ],
          "ParserBase.getDoubleValue()": [
            4,
            4,
            4
          ],
          "ParserBase.getDecimalValue()": [
            4,
            4,
            4
          ],
          "ParserBase._parseNumericValue(int)": [
            9,
            9,
            9
          ],
          "ParserBase._parseIntValue()": [
            4,
            4,
            4
          ],
          "ParserBase._reportTooLongIntegral(int, String)": [
            3,
            3,
            3
          ],
          "ParserBase.convertNumberToInt()": [
            9,
            9,
            9
          ],
          "ParserBase.convertNumberToLong()": [
            8,
            8,
            8
          ],
          "ParserBase.convertNumberToBigInteger()": [
            5,
            5,
            5
          ],
          "ParserBase.convertNumberToDouble()": [
            5,
            5,
            5
          ],
          "ParserBase.convertNumberToBigDecimal()": [
            5,
            5,
            5
          ],
          "ParserBase._handleUnrecognizedCharacterEscape(char)": [
            3,
            3,
            3
          ],
          "ParserBase._throwUnquotedSpace(int, String)": [
            2,
            2,
            2
          ],
          "ParserBase._decodeBase64Escape(Base64Variant, int, int)": [
            6,
            6,
            6
          ],
          "ParserBase._decodeBase64Escape(Base64Variant, char, int)": [
            6,
            6,
            6
          ],
          "ParserBase.reportInvalidBase64Char(Base64Variant, int, int, String)": [
            5,
            5,
            5
          ],
          "ParserBase._getSourceReference()": [
            2,
            2,
            2
          ],
          "ParserBase.growArrayBy(int[], int)": [
            2,
            2,
            2
          ],
          "ParserBase.loadMoreGuaranteed()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java"
    },
    {
      "src_name": "GeneratorBase",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java",
      "class_declaration": "public abstract class GeneratorBase extends JsonGenerator ",
      "methods_under_test": {
        "=1": {
          "GeneratorBase.version()": [
            1,
            1,
            1
          ],
          "GeneratorBase.isEnabled(Feature)": [
            1,
            1,
            1
          ],
          "GeneratorBase.setCodec(ObjectCodec)": [
            1,
            1,
            1
          ],
          "GeneratorBase.writeFieldName(SerializableString)": [
            1,
            1,
            1
          ],
          "GeneratorBase.writeString(SerializableString)": [
            1,
            1,
            1
          ],
          "GeneratorBase.writeRawValue(String)": [
            1,
            1,
            1
          ],
          "GeneratorBase.writeRawValue(String, int, int)": [
            1,
            1,
            1
          ],
          "GeneratorBase.writeRawValue(char[], int, int)": [
            1,
            1,
            1
          ],
          "GeneratorBase.writeRawValue(SerializableString)": [
            1,
            1,
            1
          ],
          "GeneratorBase.writeBinary(Base64Variant, InputStream, int)": [
            1,
            1,
            1
          ],
          "GeneratorBase.close()": [
            1,
            1,
            1
          ],
          "GeneratorBase._constructDefaultPrettyPrinter()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GeneratorBase.enable(Feature)": [
            6,
            6,
            6
          ],
          "GeneratorBase.disable(Feature)": [
            5,
            5,
            5
          ],
          "GeneratorBase.setFeatureMask(int)": [
            2,
            2,
            2
          ],
          "GeneratorBase.overrideStdFeatures(int, int)": [
            2,
            2,
            2
          ],
          "GeneratorBase._checkStdFeatureChanges(int, int)": [
            7,
            7,
            7
          ],
          "GeneratorBase.useDefaultPrettyPrinter()": [
            2,
            2,
            2
          ],
          "GeneratorBase.writeStartObject(Object)": [
            2,
            2,
            2
          ],
          "GeneratorBase.writeObject(Object)": [
            4,
            4,
            4
          ],
          "GeneratorBase.writeTree(TreeNode)": [
            4,
            4,
            4
          ],
          "GeneratorBase._asString(BigDecimal)": [
            3,
            3,
            3
          ],
          "GeneratorBase._decodeSurrogate(int, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/GeneratorBasicTest.java"
    },
    {
      "src_name": "TokenFilter",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java",
      "class_declaration": "public class TokenFilter ",
      "methods_under_test": {
        "=1": {
          "TokenFilter.filterStartObject()": [
            1,
            1,
            1
          ],
          "TokenFilter.filterStartArray()": [
            1,
            1,
            1
          ],
          "TokenFilter.includeProperty(String)": [
            1,
            1,
            1
          ],
          "TokenFilter.includeElement(int)": [
            1,
            1,
            1
          ],
          "TokenFilter.includeRootValue(int)": [
            1,
            1,
            1
          ],
          "TokenFilter.includeValue(JsonParser)": [
            1,
            1,
            1
          ],
          "TokenFilter.includeBoolean(boolean)": [
            1,
            1,
            1
          ],
          "TokenFilter.includeNull()": [
            1,
            1,
            1
          ],
          "TokenFilter.includeString(String)": [
            1,
            1,
            1
          ],
          "TokenFilter.includeNumber(int)": [
            1,
            1,
            1
          ],
          "TokenFilter.includeNumber(long)": [
            1,
            1,
            1
          ],
          "TokenFilter.includeNumber(float)": [
            1,
            1,
            1
          ],
          "TokenFilter.includeNumber(double)": [
            1,
            1,
            1
          ],
          "TokenFilter.includeNumber(BigDecimal)": [
            1,
            1,
            1
          ],
          "TokenFilter.includeNumber(BigInteger)": [
            1,
            1,
            1
          ],
          "TokenFilter.includeBinary()": [
            1,
            1,
            1
          ],
          "TokenFilter.includeRawValue()": [
            1,
            1,
            1
          ],
          "TokenFilter.includeEmbeddedValue(Object)": [
            1,
            1,
            1
          ],
          "TokenFilter._includeScalar()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TokenFilter.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncTokenFilterTest.java"
    },
    {
      "src_name": "UTF8JsonGenerator",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java",
      "class_declaration": "public class UTF8JsonGenerator extends JsonGeneratorImpl ",
      "methods_under_test": {
        "=1": {
          "UTF8JsonGenerator.writeNull()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UTF8JsonGenerator.writeFieldName(SerializableString)": [
            9,
            9,
            9
          ],
          "UTF8JsonGenerator.writeStartArray()": [
            4,
            4,
            4
          ],
          "UTF8JsonGenerator.writeEndArray()": [
            4,
            4,
            4
          ],
          "UTF8JsonGenerator.writeStartObject()": [
            4,
            4,
            4
          ],
          "UTF8JsonGenerator.writeStartObject(Object)": [
            5,
            5,
            5
          ],
          "UTF8JsonGenerator.writeEndObject()": [
            4,
            4,
            4
          ],
          "UTF8JsonGenerator._writePPFieldName(String)": [
            9,
            9,
            9
          ],
          "UTF8JsonGenerator._writePPFieldName(SerializableString)": [
            8,
            8,
            8
          ],
          "UTF8JsonGenerator.writeString(String)": [
            5,
            5,
            5
          ],
          "UTF8JsonGenerator.writeString(Reader, int)": [
            8,
            8,
            8
          ],
          "UTF8JsonGenerator.writeString(char[], int, int)": [
            5,
            5,
            5
          ],
          "UTF8JsonGenerator.writeString(SerializableString)": [
            4,
            4,
            4
          ],
          "UTF8JsonGenerator.writeRawUTF8String(byte[], int, int)": [
            3,
            3,
            3
          ],
          "UTF8JsonGenerator.writeUTF8String(byte[], int, int)": [
            4,
            4,
            4
          ],
          "UTF8JsonGenerator.writeRaw(String)": [
            3,
            3,
            3
          ],
          "UTF8JsonGenerator.writeRaw(String, int, int)": [
            2,
            2,
            2
          ],
          "UTF8JsonGenerator.writeRaw(SerializableString)": [
            3,
            3,
            3
          ],
          "UTF8JsonGenerator.writeRawValue(SerializableString)": [
            3,
            3,
            3
          ],
          "UTF8JsonGenerator.writeRaw(char[], int, int)": [
            6,
            0,
            0
          ],
          "UTF8JsonGenerator.writeRaw(char)": [
            4,
            4,
            4
          ],
          "UTF8JsonGenerator.writeBinary(Base64Variant, byte[], int, int)": [
            3,
            3,
            3
          ],
          "UTF8JsonGenerator.writeBinary(Base64Variant, InputStream, int)": [
            6,
            6,
            6
          ],
          "UTF8JsonGenerator.writeNumber(short)": [
            3,
            3,
            3
          ],
          "UTF8JsonGenerator.writeNumber(int)": [
            3,
            3,
            3
          ],
          "UTF8JsonGenerator.writeNumber(long)": [
            3,
            3,
            3
          ],
          "UTF8JsonGenerator.writeNumber(BigInteger)": [
            4,
            4,
            4
          ],
          "UTF8JsonGenerator.writeNumber(double)": [
            2,
            2,
            2
          ],
          "UTF8JsonGenerator.writeNumber(float)": [
            2,
            2,
            2
          ],
          "UTF8JsonGenerator.writeNumber(BigDecimal)": [
            4,
            4,
            4
          ],
          "UTF8JsonGenerator.writeNumber(String)": [
            3,
            3,
            3
          ],
          "UTF8JsonGenerator.writeBoolean(boolean)": [
            2,
            2,
            2
          ],
          "UTF8JsonGenerator._verifyValueWrite(String)": [
            10,
            10,
            10
          ],
          "UTF8JsonGenerator.flush()": [
            3,
            3,
            3
          ],
          "UTF8JsonGenerator.close()": [
            8,
            8,
            8
          ],
          "UTF8JsonGenerator._releaseBuffers()": [
            3,
            3,
            3
          ],
          "UTF8JsonGenerator._writeBinary(Base64Variant, byte[], int, final, int)": [
            7,
            7,
            7
          ],
          "UTF8JsonGenerator._writeBinary(Base64Variant, InputStream, byte[], int)": [
            10,
            10,
            10
          ],
          "UTF8JsonGenerator._writeBinary(Base64Variant, InputStream, byte[])": [
            9,
            9,
            9
          ],
          "UTF8JsonGenerator._outputSurrogates(int, int)": [
            2,
            2,
            2
          ],
          "UTF8JsonGenerator._flushBuffer()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "UTF8JsonGenerator.writeFieldName(String)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java"
    }
  ],
  "src_without_tests": [
    {
      "src_name": "InputAccessor",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java",
      "class_declaration": "class Std implements InputAccessor ",
      "methods_under_test": {
        "=1": {
          "Std.reset()": [
            1,
            1,
            1
          ],
          "Std.createMatcher(JsonFactory, MatchStrength)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Std.hasMoreBytes()": [
            5,
            5,
            5
          ],
          "Std.nextByte()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/base/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "StreamReadFeature",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/StreamReadFeature.java",
      "error": "local variable 'class_name' referenced before assignment"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/type/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "JsonParseException",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/JsonParseException.java",
      "class_declaration": "public class JsonParseException extends StreamReadException ",
      "methods_under_test": {
        "=1": {
          "JsonParseException.withParser(JsonParser)": [
            1,
            1,
            1
          ],
          "JsonParseException.withRequestPayload(RequestPayload)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TokenFilterContext",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java",
      "class_declaration": "public class TokenFilterContext extends JsonStreamContext ",
      "methods_under_test": {
        "=1": {
          "TokenFilterContext.reset(int, TokenFilter, boolean)": [
            1,
            1,
            1
          ],
          "TokenFilterContext.createRootContext(TokenFilter)": [
            1,
            1,
            1
          ],
          "TokenFilterContext.setFieldName(String)": [
            1,
            1,
            1
          ],
          "TokenFilterContext.skipParentChecks()": [
            1,
            1,
            1
          ],
          "TokenFilterContext.hasCurrentName()": [
            1,
            1,
            1
          ],
          "TokenFilterContext.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TokenFilterContext.createChildArrayContext(TokenFilter, boolean)": [
            2,
            2,
            2
          ],
          "TokenFilterContext.createChildObjectContext(TokenFilter, boolean)": [
            2,
            2,
            2
          ],
          "TokenFilterContext.checkValue(TokenFilter)": [
            3,
            3,
            3
          ],
          "TokenFilterContext.writePath(JsonGenerator)": [
            8,
            8,
            8
          ],
          "TokenFilterContext.writeImmediatePath(JsonGenerator)": [
            8,
            8,
            8
          ],
          "TokenFilterContext.closeArray(JsonGenerator)": [
            3,
            3,
            3
          ],
          "TokenFilterContext.closeObject(JsonGenerator)": [
            3,
            3,
            3
          ],
          "TokenFilterContext.nextTokenToRead()": [
            4,
            4,
            4
          ],
          "TokenFilterContext.findChildOf(TokenFilterContext)": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "TokenFilterContext.appendDesc(StringBuilder)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NumberOutput",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/io/NumberOutput.java",
      "class_declaration": "public final class NumberOutput ",
      "methods_under_test": {
        "=1": {
          "NumberOutput.toString(double)": [
            1,
            1,
            1
          ],
          "NumberOutput.toString(float)": [
            1,
            1,
            1
          ],
          "NumberOutput.notFinite(double)": [
            1,
            1,
            1
          ],
          "NumberOutput.notFinite(float)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NumberOutput.outputInt(int, char[], int)": [
            8,
            8,
            8
          ],
          "NumberOutput.outputInt(int, byte[], int)": [
            8,
            8,
            8
          ],
          "NumberOutput.outputLong(long, char[], int)": [
            6,
            6,
            6
          ],
          "NumberOutput.outputLong(long, byte[], int)": [
            6,
            6,
            6
          ],
          "NumberOutput.toString(int)": [
            4,
            4,
            4
          ],
          "NumberOutput.toString(long)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonLocation",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/JsonLocation.java",
      "class_declaration": "public class JsonLocation implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "JsonLocation.sourceDescription()": [
            1,
            1,
            1
          ],
          "JsonLocation.hashCode()": [
            1,
            1,
            1
          ],
          "JsonLocation.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonLocation.equals(Object)": [
            7,
            7,
            7
          ],
          "JsonLocation._appendSourceDesc(StringBuilder)": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Base64Variant",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/Base64Variant.java",
      "class_declaration": "public final class Base64Variant implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "Base64Variant.readResolve()": [
            1,
            1,
            1
          ],
          "Base64Variant.usesPadding()": [
            1,
            1,
            1
          ],
          "Base64Variant.usesPaddingChar(char)": [
            1,
            1,
            1
          ],
          "Base64Variant.usesPaddingChar(int)": [
            1,
            1,
            1
          ],
          "Base64Variant.decodeBase64Char(char)": [
            1,
            1,
            1
          ],
          "Base64Variant.decodeBase64Char(int)": [
            1,
            1,
            1
          ],
          "Base64Variant.encodeBase64BitsAsChar(int)": [
            1,
            1,
            1
          ],
          "Base64Variant.encodeBase64Chunk(int, char[], int)": [
            1,
            1,
            1
          ],
          "Base64Variant.encodeBase64Chunk(StringBuilder, int)": [
            1,
            1,
            1
          ],
          "Base64Variant.encodeBase64BitsAsByte(int)": [
            1,
            1,
            1
          ],
          "Base64Variant.encodeBase64Chunk(int, byte[], int)": [
            1,
            1,
            1
          ],
          "Base64Variant.encode(byte[])": [
            1,
            1,
            1
          ],
          "Base64Variant.decode(String)": [
            1,
            1,
            1
          ],
          "Base64Variant.toString()": [
            1,
            1,
            1
          ],
          "Base64Variant.equals(Object)": [
            1,
            1,
            1
          ],
          "Base64Variant.hashCode()": [
            1,
            1,
            1
          ],
          "Base64Variant._reportBase64EOF()": [
            1,
            1,
            1
          ],
          "Base64Variant.missingPaddingMessage()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Base64Variant.decodeBase64Byte(byte)": [
            2,
            2,
            2
          ],
          "Base64Variant.encodeBase64Partial(int, int, char[], int)": [
            3,
            3,
            3
          ],
          "Base64Variant.encodeBase64Partial(StringBuilder, int, int)": [
            4,
            4,
            4
          ],
          "Base64Variant.encodeBase64Partial(int, int, byte[], int)": [
            3,
            3,
            3
          ],
          "Base64Variant.encode(byte[], boolean)": [
            7,
            7,
            7
          ],
          "Base64Variant.encode(byte[], boolean, String)": [
            7,
            7,
            7
          ],
          "Base64Variant._reportInvalidBase64(char, int, String)": [
            5,
            5,
            5
          ]
        },
        "11-20": {
          "Base64Variant.decode(String, ByteArrayBuilder)": [
            14,
            14,
            14
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FormatFeature",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/FormatFeature.java",
      "error": "list index out of range"
    },
    {
      "src_name": "JsonReadFeature",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/JsonReadFeature.java",
      "error": "local variable 'class_name' referenced before assignment"
    },
    {
      "src_name": "JsonParserSequence",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java",
      "class_declaration": "public class JsonParserSequence extends JsonParserDelegate ",
      "methods_under_test": {
        "=1": {
          "JsonParserSequence.createFlattened(JsonParser, JsonParser)": [
            1,
            1,
            1
          ],
          "JsonParserSequence.addFlattenedActiveParsers(List<JsonParser>)": [
            1,
            1,
            1
          ],
          "JsonParserSequence.containedParsersCount()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonParserSequence.createFlattened(boolean, JsonParser, JsonParser)": [
            4,
            4,
            4
          ],
          "JsonParserSequence.close()": [
            3,
            3,
            3
          ],
          "JsonParserSequence.nextToken()": [
            4,
            4,
            4
          ],
          "JsonParserSequence.skipChildren()": [
            7,
            7,
            7
          ],
          "JsonParserSequence.switchToNext()": [
            2,
            2,
            2
          ],
          "JsonParserSequence.switchAndReturnNext()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FilteringGeneratorDelegate",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java",
      "class_declaration": "public class FilteringGeneratorDelegate extends JsonGeneratorDelegate ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "FilteringGeneratorDelegate.writeStartArray()": [
            7,
            7,
            7
          ],
          "FilteringGeneratorDelegate.writeStartArray(int)": [
            7,
            7,
            7
          ],
          "FilteringGeneratorDelegate.writeEndArray()": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeStartObject()": [
            7,
            7,
            7
          ],
          "FilteringGeneratorDelegate.writeStartObject(Object)": [
            7,
            7,
            7
          ],
          "FilteringGeneratorDelegate.writeEndObject()": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeFieldName(String)": [
            4,
            4,
            4
          ],
          "FilteringGeneratorDelegate.writeFieldName(SerializableString)": [
            4,
            4,
            4
          ],
          "FilteringGeneratorDelegate.writeString(String)": [
            6,
            6,
            6
          ],
          "FilteringGeneratorDelegate.writeString(char[], int, int)": [
            6,
            6,
            6
          ],
          "FilteringGeneratorDelegate.writeString(SerializableString)": [
            6,
            6,
            6
          ],
          "FilteringGeneratorDelegate.writeRawUTF8String(byte[], int, int)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeUTF8String(byte[], int, int)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeRaw(String)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeRaw(String, int, int)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeRaw(SerializableString)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeRaw(char[], int, int)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeRaw(char)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeRawValue(String)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeRawValue(String, int, int)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeRawValue(char[], int, int)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeBinary(Base64Variant, byte[], int, int)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeBinary(Base64Variant, InputStream, int)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeNumber(short)": [
            6,
            6,
            6
          ],
          "FilteringGeneratorDelegate.writeNumber(int)": [
            6,
            6,
            6
          ],
          "FilteringGeneratorDelegate.writeNumber(long)": [
            6,
            6,
            6
          ],
          "FilteringGeneratorDelegate.writeNumber(BigInteger)": [
            6,
            6,
            6
          ],
          "FilteringGeneratorDelegate.writeNumber(double)": [
            6,
            6,
            6
          ],
          "FilteringGeneratorDelegate.writeNumber(float)": [
            6,
            6,
            6
          ],
          "FilteringGeneratorDelegate.writeNumber(BigDecimal)": [
            6,
            6,
            6
          ],
          "FilteringGeneratorDelegate.writeNumber(String)": [
            6,
            6,
            6
          ],
          "FilteringGeneratorDelegate.writeBoolean(boolean)": [
            6,
            6,
            6
          ],
          "FilteringGeneratorDelegate.writeNull()": [
            6,
            6,
            6
          ],
          "FilteringGeneratorDelegate.writeOmittedField(String)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeObjectId(Object)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeObjectRef(Object)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate.writeTypeId(Object)": [
            2,
            2,
            2
          ],
          "FilteringGeneratorDelegate._checkParentPath()": [
            3,
            3,
            3
          ],
          "FilteringGeneratorDelegate._checkPropertyParentPath()": [
            4,
            4,
            4
          ],
          "FilteringGeneratorDelegate._checkBinaryWrite()": [
            4,
            4,
            4
          ],
          "FilteringGeneratorDelegate._checkRawValueWrite()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "OutputDecorator",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class OutputDecorator implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "InternCache",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/InternCache.java",
      "class_declaration": "public final class InternCache extends ConcurrentHashMap<String,String> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ResolvedType",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java",
      "class_declaration": "public abstract class ResolvedType ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Name1",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/sym/Name1.java",
      "class_declaration": "public final class Name1 extends Name ",
      "methods_under_test": {
        "=1": {
          "Name1.equals(int)": [
            1,
            1,
            1
          ],
          "Name1.equals(int, int)": [
            1,
            1,
            1
          ],
          "Name1.equals(int, int, int)": [
            1,
            1,
            1
          ],
          "Name1.equals(int[], int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UTF32Reader",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java",
      "class_declaration": "public class UTF32Reader extends Reader ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "UTF32Reader.close()": [
            2,
            2,
            2
          ],
          "UTF32Reader.read()": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "UTF32Reader.read(char[], int, int)": [
            14,
            14,
            14
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TreeCodec",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/TreeCodec.java",
      "class_declaration": "public abstract class TreeCodec ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NonBlockingJsonParserBase",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParserBase.java",
      "class_declaration": "public abstract class NonBlockingJsonParserBase extends ParserBase ",
      "methods_under_test": {
        "=1": {
          "NonBlockingJsonParserBase.canParseAsync()": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase.symbolTableForTests()": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase._releaseBuffers()": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase._closeInput()": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase.getCurrentLocation()": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase.readBinaryValue(Base64Variant, OutputStream)": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase._startArrayScope()": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase._startObjectScope()": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase._padLastQuad(int, int)": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase._fieldComplete(String)": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase._valueComplete(JsonToken)": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase._valueCompleteInt(int, String)": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase._nonStdToken(int)": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase._updateTokenLocation()": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase._reportInvalidInitial(int)": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase._reportInvalidOther(int, int)": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParserBase._reportInvalidOther(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NonBlockingJsonParserBase.hasTextCharacters()": [
            3,
            3,
            3
          ],
          "NonBlockingJsonParserBase.getText()": [
            2,
            2,
            2
          ],
          "NonBlockingJsonParserBase._getText2(JsonToken)": [
            8,
            8,
            8
          ],
          "NonBlockingJsonParserBase.getText(Writer)": [
            6,
            6,
            6
          ],
          "NonBlockingJsonParserBase.getValueAsString()": [
            3,
            3,
            3
          ],
          "NonBlockingJsonParserBase.getValueAsString(String)": [
            3,
            3,
            3
          ],
          "NonBlockingJsonParserBase.getTextCharacters()": [
            9,
            9,
            9
          ],
          "NonBlockingJsonParserBase.getTextLength()": [
            6,
            6,
            6
          ],
          "NonBlockingJsonParserBase.getTextOffset()": [
            6,
            6,
            6
          ],
          "NonBlockingJsonParserBase.getBinaryValue(Base64Variant)": [
            3,
            3,
            3
          ],
          "NonBlockingJsonParserBase.getEmbeddedObject()": [
            2,
            2,
            2
          ],
          "NonBlockingJsonParserBase._closeArrayScope()": [
            4,
            4,
            4
          ],
          "NonBlockingJsonParserBase._closeObjectScope()": [
            4,
            4,
            4
          ],
          "NonBlockingJsonParserBase._findName(int, int)": [
            2,
            2,
            2
          ],
          "NonBlockingJsonParserBase._findName(int, int, int)": [
            2,
            2,
            2
          ],
          "NonBlockingJsonParserBase._findName(int, int, int, int)": [
            2,
            2,
            2
          ],
          "NonBlockingJsonParserBase._eofAsNextToken()": [
            2,
            2,
            2
          ],
          "NonBlockingJsonParserBase._valueNonStdNumberComplete(int)": [
            2,
            2,
            2
          ],
          "NonBlockingJsonParserBase._reportInvalidChar(int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "NonBlockingJsonParserBase._addName(int[], int, int)": [
            17,
            17,
            17
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonGeneratorImpl",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
      "class_declaration": "public abstract class JsonGeneratorImpl extends GeneratorBase ",
      "methods_under_test": {
        "=1": {
          "JsonGeneratorImpl.version()": [
            1,
            1,
            1
          ],
          "JsonGeneratorImpl._checkStdFeatureChanges(int, int)": [
            1,
            1,
            1
          ],
          "JsonGeneratorImpl.setHighestNonEscapedChar(int)": [
            1,
            1,
            1
          ],
          "JsonGeneratorImpl.setRootValueSeparator(SerializableString)": [
            1,
            1,
            1
          ],
          "JsonGeneratorImpl.writeStringField(String, String)": [
            1,
            1,
            1
          ],
          "JsonGeneratorImpl._reportCantWriteValueExpectName(String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonGeneratorImpl.enable(Feature)": [
            2,
            2,
            2
          ],
          "JsonGeneratorImpl.disable(Feature)": [
            2,
            2,
            2
          ],
          "JsonGeneratorImpl.setCharacterEscapes(CharacterEscapes)": [
            2,
            2,
            2
          ],
          "JsonGeneratorImpl._verifyPrettyValueWrite(String, int)": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CharacterEscapes",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java",
      "class_declaration": "@SuppressWarnings(\"serial\")\npublic abstract class CharacterEscapes implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "CharacterEscapes.standardAsciiEscapesForJSON()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "InputDecorator",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java",
      "class_declaration": "public abstract class InputDecorator implements java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "InputDecorator.decorate(IOContext, DataInput)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MatchStrength",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java",
      "error": "list index out of range"
    },
    {
      "src_name": "TokenStreamFactory",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/TokenStreamFactory.java",
      "class_declaration": "public abstract class TokenStreamFactory implements Versioned,\n    java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "TokenStreamFactory._createDataOutputWrapper(DataOutput)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TokenStreamFactory._optimizedStreamFromURL(URL)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ByteSourceJsonBootstrapper",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java",
      "class_declaration": "public final class ByteSourceJsonBootstrapper ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ByteSourceJsonBootstrapper.skipUTF8BOM(DataInput)": [
            4,
            4,
            4
          ],
          "ByteSourceJsonBootstrapper.constructReader()": [
            6,
            6,
            6
          ],
          "ByteSourceJsonBootstrapper.constructParser(int, ObjectCodec, ByteQuadsCanonicalizer, CharsToNameCanonicalizer, int)": [
            3,
            3,
            3
          ],
          "ByteSourceJsonBootstrapper.ensureLoaded(int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "ByteSourceJsonBootstrapper.detectEncoding()": [
            11,
            11,
            11
          ]
        },
        ">20": {
          "ByteSourceJsonBootstrapper.hasJSONFormat(InputAccessor)": [
            22,
            22,
            22
          ]
        },
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StreamReadException",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/exc/StreamReadException.java",
      "class_declaration": "public abstract class StreamReadException extends JsonProcessingException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "StreamReadException.getMessage()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UTF8StreamJsonParser",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
      "class_declaration": "public class UTF8StreamJsonParser extends ParserBase ",
      "methods_under_test": {
        "=1": {
          "UTF8StreamJsonParser._reportInvalidToken(String, int)": [
            1,
            1,
            1
          ],
          "UTF8StreamJsonParser._reportInvalidToken(String)": [
            1,
            1,
            1
          ],
          "UTF8StreamJsonParser._reportInvalidInitial(int)": [
            1,
            1,
            1
          ],
          "UTF8StreamJsonParser._reportInvalidOther(int)": [
            1,
            1,
            1
          ],
          "UTF8StreamJsonParser._reportInvalidOther(int, int)": [
            1,
            1,
            1
          ],
          "UTF8StreamJsonParser.getCurrentLocation()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UTF8StreamJsonParser.releaseBuffered(OutputStream)": [
            2,
            2,
            2
          ],
          "UTF8StreamJsonParser._loadMore()": [
            5,
            5,
            5
          ],
          "UTF8StreamJsonParser._closeInput()": [
            3,
            3,
            3
          ],
          "UTF8StreamJsonParser._releaseBuffers()": [
            3,
            3,
            3
          ],
          "UTF8StreamJsonParser.getText()": [
            3,
            3,
            3
          ],
          "UTF8StreamJsonParser.getText(Writer)": [
            6,
            6,
            6
          ],
          "UTF8StreamJsonParser.getValueAsString()": [
            4,
            4,
            4
          ],
          "UTF8StreamJsonParser.getValueAsString(String)": [
            4,
            4,
            4
          ],
          "UTF8StreamJsonParser.getValueAsInt()": [
            5,
            5,
            5
          ],
          "UTF8StreamJsonParser.getValueAsInt(int)": [
            5,
            5,
            5
          ],
          "UTF8StreamJsonParser._getText2(JsonToken)": [
            7,
            7,
            7
          ],
          "UTF8StreamJsonParser.getTextCharacters()": [
            10,
            10,
            10
          ],
          "UTF8StreamJsonParser.getTextLength()": [
            7,
            7,
            7
          ],
          "UTF8StreamJsonParser.getTextOffset()": [
            7,
            7,
            7
          ],
          "UTF8StreamJsonParser.getBinaryValue(Base64Variant)": [
            5,
            5,
            5
          ],
          "UTF8StreamJsonParser.readBinaryValue(Base64Variant, OutputStream)": [
            4,
            4,
            4
          ],
          "UTF8StreamJsonParser.finishToken()": [
            2,
            2,
            2
          ],
          "UTF8StreamJsonParser.nextTextValue()": [
            6,
            6,
            6
          ],
          "UTF8StreamJsonParser.nextIntValue(int)": [
            5,
            5,
            5
          ],
          "UTF8StreamJsonParser.nextLongValue(long)": [
            5,
            5,
            5
          ],
          "UTF8StreamJsonParser.nextBooleanValue()": [
            8,
            8,
            8
          ],
          "UTF8StreamJsonParser._parsePosNumber(int)": [
            7,
            7,
            7
          ],
          "UTF8StreamJsonParser._parseNegNumber()": [
            10,
            10,
            10
          ],
          "UTF8StreamJsonParser.parseMediumName(int)": [
            9,
            9,
            9
          ],
          "UTF8StreamJsonParser.parseMediumName2(int, final, int)": [
            9,
            9,
            9
          ],
          "UTF8StreamJsonParser.slowParseName()": [
            4,
            4,
            4
          ],
          "UTF8StreamJsonParser._loadMoreGuaranteed()": [
            2,
            2,
            2
          ],
          "UTF8StreamJsonParser._finishString()": [
            5,
            5,
            5
          ],
          "UTF8StreamJsonParser._finishAndReturnString()": [
            5,
            5,
            5
          ],
          "UTF8StreamJsonParser._skipString()": [
            2,
            2,
            2
          ],
          "UTF8StreamJsonParser._handleInvalidNumberStart(int, boolean)": [
            7,
            7,
            7
          ],
          "UTF8StreamJsonParser._matchTrue()": [
            4,
            4,
            4
          ],
          "UTF8StreamJsonParser._matchFalse()": [
            4,
            4,
            4
          ],
          "UTF8StreamJsonParser._matchNull()": [
            4,
            4,
            4
          ],
          "UTF8StreamJsonParser._matchToken(String, int)": [
            5,
            5,
            5
          ],
          "UTF8StreamJsonParser._decodeCharForError(int)": [
            10,
            10,
            10
          ],
          "UTF8StreamJsonParser._skipCR()": [
            3,
            3,
            3
          ],
          "UTF8StreamJsonParser._reportInvalidToken(String, String)": [
            4,
            4,
            4
          ],
          "UTF8StreamJsonParser._reportInvalidChar(int)": [
            2,
            2,
            2
          ],
          "UTF8StreamJsonParser.getTokenLocation()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "UTF8StreamJsonParser.nextFieldName(SerializableString)": [
            17,
            17,
            17
          ],
          "UTF8StreamJsonParser._parseName(int)": [
            13,
            13,
            13
          ],
          "UTF8StreamJsonParser.parseLongName(int, final, int, int)": [
            11,
            11,
            11
          ],
          "UTF8StreamJsonParser.parseEscapedName(int[], int, int, int, int)": [
            18,
            18,
            18
          ],
          "UTF8StreamJsonParser._handleOddName(int)": [
            13,
            13,
            13
          ],
          "UTF8StreamJsonParser._handleUnexpectedValue(int)": [
            16,
            16,
            16
          ],
          "UTF8StreamJsonParser._handleApos()": [
            16,
            0,
            0
          ],
          "UTF8StreamJsonParser._decodeEscaped()": [
            16,
            16,
            16
          ],
          "UTF8StreamJsonParser._decodeBase64(Base64Variant)": [
            20,
            20,
            20
          ]
        },
        ">20": {
          "UTF8StreamJsonParser._readBinary(Base64Variant, OutputStream, byte[])": [
            26,
            26,
            26
          ],
          "UTF8StreamJsonParser.nextToken()": [
            28,
            28,
            28
          ],
          "UTF8StreamJsonParser.nextFieldName()": [
            28,
            28,
            28
          ],
          "UTF8StreamJsonParser._parseAposName()": [
            21,
            21,
            21
          ]
        },
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonTokenId",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/JsonTokenId.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SerializableString",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/SerializableString.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BufferRecyclers",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/BufferRecyclers.java",
      "class_declaration": "public class BufferRecyclers ",
      "methods_under_test": {
        "=1": {
          "BufferRecyclers.encodeAsUTF8(String)": [
            1,
            1,
            1
          ],
          "BufferRecyclers.quoteAsJsonText(String)": [
            1,
            1,
            1
          ],
          "BufferRecyclers.quoteAsJsonText(CharSequence, StringBuilder)": [
            1,
            1,
            1
          ],
          "BufferRecyclers.quoteAsJsonUTF8(String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BufferRecyclers.getBufferRecycler()": [
            3,
            3,
            3
          ],
          "BufferRecyclers.releaseBuffers()": [
            2,
            2,
            2
          ],
          "BufferRecyclers.getJsonStringEncoder()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NameN",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/sym/NameN.java",
      "class_declaration": "public final class NameN extends Name ",
      "methods_under_test": {
        "=1": {
          "NameN.equals(int)": [
            1,
            1,
            1
          ],
          "NameN.equals(int, int)": [
            1,
            1,
            1
          ],
          "NameN.equals(int, int, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NameN.construct(String, int, int[], int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "NameN.equals(int[], int)": [
            15,
            15,
            15
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CharsToNameCanonicalizer",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java",
      "class_declaration": "public final class CharsToNameCanonicalizer ",
      "methods_under_test": {
        "=1": {
          "CharsToNameCanonicalizer.createRoot()": [
            1,
            1,
            1
          ],
          "CharsToNameCanonicalizer.createRoot(int)": [
            1,
            1,
            1
          ],
          "CharsToNameCanonicalizer.makeChild(int)": [
            1,
            1,
            1
          ],
          "CharsToNameCanonicalizer.bucketCount()": [
            1,
            1,
            1
          ],
          "CharsToNameCanonicalizer.maybeDirty()": [
            1,
            1,
            1
          ],
          "CharsToNameCanonicalizer.hashSeed()": [
            1,
            1,
            1
          ],
          "CharsToNameCanonicalizer.maxCollisionLength()": [
            1,
            1,
            1
          ],
          "CharsToNameCanonicalizer._hashToIndex(int)": [
            1,
            1,
            1
          ],
          "CharsToNameCanonicalizer.reportTooManyCollisions(int)": [
            1,
            1,
            1
          ],
          "TableInfo.createInitial(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CharsToNameCanonicalizer.release()": [
            3,
            3,
            3
          ],
          "CharsToNameCanonicalizer.size()": [
            2,
            2,
            2
          ],
          "CharsToNameCanonicalizer.collisionCount()": [
            3,
            3,
            3
          ],
          "CharsToNameCanonicalizer.findSymbol(char[], int, int, int)": [
            10,
            10,
            10
          ],
          "CharsToNameCanonicalizer.calcHash(char[], int, int)": [
            2,
            2,
            2
          ],
          "CharsToNameCanonicalizer.calcHash(String)": [
            2,
            2,
            2
          ],
          "Bucket.has(char[], int, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NonBlockingJsonParser",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/async/NonBlockingJsonParser.java",
      "class_declaration": "public class NonBlockingJsonParser extends NonBlockingJsonParserBase implements ByteArrayFeeder ",
      "methods_under_test": {
        "=1": {
          "NonBlockingJsonParser.needMoreInput()": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParser.endOfInput()": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParser._decodeEscaped()": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParser._finishErrorTokenWithEOF()": [
            1,
            1,
            1
          ],
          "NonBlockingJsonParser._reportErrorToken(String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NonBlockingJsonParser.feedInput(byte[], int, int)": [
            4,
            4,
            4
          ],
          "NonBlockingJsonParser.releaseBuffered(OutputStream)": [
            2,
            2,
            2
          ],
          "NonBlockingJsonParser._startFalseToken()": [
            4,
            4,
            4
          ],
          "NonBlockingJsonParser._startTrueToken()": [
            4,
            4,
            4
          ],
          "NonBlockingJsonParser._startNullToken()": [
            4,
            4,
            4
          ],
          "NonBlockingJsonParser._finishKeywordToken(String, int, JsonToken)": [
            6,
            6,
            6
          ],
          "NonBlockingJsonParser._finishKeywordTokenWithEOF(String, int, JsonToken)": [
            2,
            2,
            2
          ],
          "NonBlockingJsonParser._finishNonStdToken(int, int)": [
            6,
            6,
            6
          ],
          "NonBlockingJsonParser._finishNonStdTokenWithEOF(int, int)": [
            2,
            2,
            2
          ],
          "NonBlockingJsonParser._finishErrorToken()": [
            4,
            4,
            4
          ],
          "NonBlockingJsonParser._startPositiveNumber(int)": [
            9,
            9,
            9
          ],
          "NonBlockingJsonParser._startNumberLeadingZero()": [
            7,
            7,
            7
          ],
          "NonBlockingJsonParser._finishNumberMinus(int)": [
            5,
            5,
            5
          ],
          "NonBlockingJsonParser._finishNumberLeadingZeroes()": [
            10,
            10,
            10
          ],
          "NonBlockingJsonParser._finishNumberLeadingNegZeroes()": [
            10,
            10,
            10
          ],
          "NonBlockingJsonParser._finishNumberIntegralPart(char[], int)": [
            8,
            8,
            8
          ],
          "NonBlockingJsonParser._finishFloatFraction()": [
            7,
            7,
            7
          ],
          "NonBlockingJsonParser._finishFloatExponent(boolean, int)": [
            8,
            8,
            8
          ],
          "NonBlockingJsonParser._finishFieldWithEscape()": [
            9,
            9,
            9
          ],
          "NonBlockingJsonParser._startString()": [
            4,
            4,
            4
          ],
          "NonBlockingJsonParser._startAposString()": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "NonBlockingJsonParser.nextToken()": [
            13,
            13,
            13
          ],
          "NonBlockingJsonParser._finishTokenWithEOF()": [
            19,
            19,
            19
          ],
          "NonBlockingJsonParser._startUnexpectedValue(boolean, int)": [
            11,
            11,
            11
          ],
          "NonBlockingJsonParser._startNegativeNumber()": [
            14,
            14,
            14
          ],
          "NonBlockingJsonParser._startFloat(char[], int, int)": [
            18,
            18,
            18
          ]
        },
        ">20": {
          "NonBlockingJsonParser._finishToken()": [
            42,
            42,
            42
          ]
        },
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonPointerBasedFilter",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java",
      "class_declaration": "public class JsonPointerBasedFilter extends TokenFilter ",
      "methods_under_test": {
        "=1": {
          "JsonPointerBasedFilter.filterStartArray()": [
            1,
            1,
            1
          ],
          "JsonPointerBasedFilter.filterStartObject()": [
            1,
            1,
            1
          ],
          "JsonPointerBasedFilter._includeScalar()": [
            1,
            1,
            1
          ],
          "JsonPointerBasedFilter.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonPointerBasedFilter.includeElement(int)": [
            3,
            3,
            3
          ],
          "JsonPointerBasedFilter.includeProperty(String)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonFactoryBuilder",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/JsonFactoryBuilder.java",
      "class_declaration": "public class JsonFactoryBuilder extends TSFBuilder<JsonFactory, JsonFactoryBuilder> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NonBlockingInputFeeder",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/async/NonBlockingInputFeeder.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "JsonWriteContext",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java",
      "class_declaration": "public class JsonWriteContext extends JsonStreamContext ",
      "methods_under_test": {
        "=1": {
          "JsonWriteContext.withDupDetector(DupDetector)": [
            1,
            1,
            1
          ],
          "JsonWriteContext.createRootContext()": [
            1,
            1,
            1
          ],
          "JsonWriteContext.createRootContext(DupDetector)": [
            1,
            1,
            1
          ],
          "JsonWriteContext.hasCurrentName()": [
            1,
            1,
            1
          ],
          "JsonWriteContext.clearAndGetParent()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonWriteContext.reset(int)": [
            2,
            2,
            2
          ],
          "JsonWriteContext.createChildArrayContext()": [
            2,
            2,
            2
          ],
          "JsonWriteContext.createChildObjectContext()": [
            2,
            2,
            2
          ],
          "JsonWriteContext.writeFieldName(String)": [
            3,
            3,
            3
          ],
          "JsonWriteContext.writeValue()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StreamWriteFeature",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/StreamWriteFeature.java",
      "error": "local variable 'class_name' referenced before assignment"
    },
    {
      "src_name": "TreeNode",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/TreeNode.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MinimalPrettyPrinter",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java",
      "class_declaration": "public class MinimalPrettyPrinter implements PrettyPrinter, java.io.Serializable ",
      "methods_under_test": {
        "=1": {
          "MinimalPrettyPrinter.setSeparators(Separators)": [
            1,
            1,
            1
          ],
          "MinimalPrettyPrinter.writeStartObject(JsonGenerator)": [
            1,
            1,
            1
          ],
          "MinimalPrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator)": [
            1,
            1,
            1
          ],
          "MinimalPrettyPrinter.writeObjectEntrySeparator(JsonGenerator)": [
            1,
            1,
            1
          ],
          "MinimalPrettyPrinter.writeEndObject(JsonGenerator, int)": [
            1,
            1,
            1
          ],
          "MinimalPrettyPrinter.writeStartArray(JsonGenerator)": [
            1,
            1,
            1
          ],
          "MinimalPrettyPrinter.writeArrayValueSeparator(JsonGenerator)": [
            1,
            1,
            1
          ],
          "MinimalPrettyPrinter.writeEndArray(JsonGenerator, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MinimalPrettyPrinter.writeRootValueSeparator(JsonGenerator)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DupDetector",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/DupDetector.java",
      "class_declaration": "public class DupDetector ",
      "methods_under_test": {
        "=1": {
          "DupDetector.rootDetector(JsonParser)": [
            1,
            1,
            1
          ],
          "DupDetector.rootDetector(JsonGenerator)": [
            1,
            1,
            1
          ],
          "DupDetector.child()": [
            1,
            1,
            1
          ],
          "DupDetector.reset()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DupDetector.findLocation()": [
            2,
            2,
            2
          ],
          "DupDetector.isDup(String)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonWriteFeature",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/JsonWriteFeature.java",
      "error": "local variable 'class_name' referenced before assignment"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/async/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/sym/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DataFormatDetector",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java",
      "class_declaration": "public class DataFormatDetector ",
      "methods_under_test": {
        "=1": {
          "DataFormatDetector.findFormat(InputStream)": [
            1,
            1,
            1
          ],
          "DataFormatDetector.findFormat(byte[])": [
            1,
            1,
            1
          ],
          "DataFormatDetector.findFormat(byte[], int, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DataFormatDetector.withOptimalMatch(MatchStrength)": [
            2,
            2,
            2
          ],
          "DataFormatDetector.withMinimalMatch(MatchStrength)": [
            2,
            2,
            2
          ],
          "DataFormatDetector.withMaxInputLookahead(int)": [
            2,
            2,
            2
          ],
          "DataFormatDetector.toString()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Name2",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/sym/Name2.java",
      "class_declaration": "public final class Name2 extends Name ",
      "methods_under_test": {
        "=1": {
          "Name2.equals(int)": [
            1,
            1,
            1
          ],
          "Name2.equals(int, int)": [
            1,
            1,
            1
          ],
          "Name2.equals(int, int, int)": [
            1,
            1,
            1
          ],
          "Name2.equals(int[], int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "WritableTypeId",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/type/WritableTypeId.java",
      "class_declaration": "public class WritableTypeId ",
      "methods_under_test": {
        "=1": {
          "WritableTypeId.requiresObjectContext()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Versioned",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/Versioned.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Name3",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/sym/Name3.java",
      "class_declaration": "public final class Name3 extends Name ",
      "methods_under_test": {
        "=1": {
          "Name3.equals(int)": [
            1,
            1,
            1
          ],
          "Name3.equals(int, int)": [
            1,
            1,
            1
          ],
          "Name3.equals(int, int, int)": [
            1,
            1,
            1
          ],
          "Name3.equals(int[], int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ByteArrayFeeder",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/async/ByteArrayFeeder.java",
      "error": "list index out of range"
    },
    {
      "src_name": "module-info",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/moditect/module-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "TSFBuilder",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/TSFBuilder.java",
      "class_declaration": "public abstract class TSFBuilder <F extends JsonFactory,\n    B extends TSFBuilder<F,B>> ",
      "methods_under_test": {
        "=1": {
          "TSFBuilder.factoryFeaturesMask()": [
            1,
            1,
            1
          ],
          "TSFBuilder.streamReadFeatures()": [
            1,
            1,
            1
          ],
          "TSFBuilder.streamWriteFeatures()": [
            1,
            1,
            1
          ],
          "TSFBuilder.inputDecorator()": [
            1,
            1,
            1
          ],
          "TSFBuilder.outputDecorator()": [
            1,
            1,
            1
          ],
          "TSFBuilder.enable(JsonFactory.Feature)": [
            1,
            1,
            1
          ],
          "TSFBuilder.disable(JsonFactory.Feature)": [
            1,
            1,
            1
          ],
          "TSFBuilder.configure(JsonFactory.Feature, boolean)": [
            1,
            1,
            1
          ],
          "TSFBuilder.configure(StreamReadFeature, boolean)": [
            1,
            1,
            1
          ],
          "TSFBuilder.configure(StreamWriteFeature, boolean)": [
            1,
            1,
            1
          ],
          "TSFBuilder.enable(JsonReadFeature)": [
            1,
            1,
            1
          ],
          "TSFBuilder.disable(JsonReadFeature)": [
            1,
            1,
            1
          ],
          "TSFBuilder.configure(JsonReadFeature, boolean)": [
            1,
            1,
            1
          ],
          "TSFBuilder.enable(JsonWriteFeature)": [
            1,
            1,
            1
          ],
          "TSFBuilder.disable(JsonWriteFeature)": [
            1,
            1,
            1
          ],
          "TSFBuilder.configure(JsonWriteFeature, boolean)": [
            1,
            1,
            1
          ],
          "TSFBuilder.inputDecorator(InputDecorator)": [
            1,
            1,
            1
          ],
          "TSFBuilder.outputDecorator(OutputDecorator)": [
            1,
            1,
            1
          ],
          "TSFBuilder._this()": [
            1,
            1,
            1
          ],
          "TSFBuilder._legacyEnable(JsonParser.Feature)": [
            1,
            1,
            1
          ],
          "TSFBuilder._legacyDisable(JsonParser.Feature)": [
            1,
            1,
            1
          ],
          "TSFBuilder._legacyEnable(JsonGenerator.Feature)": [
            1,
            1,
            1
          ],
          "TSFBuilder._legacyDisable(JsonGenerator.Feature)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TSFBuilder.enable(StreamReadFeature)": [
            2,
            2,
            2
          ],
          "TSFBuilder.disable(StreamReadFeature)": [
            2,
            2,
            2
          ],
          "TSFBuilder.enable(StreamWriteFeature)": [
            2,
            2,
            2
          ],
          "TSFBuilder.disable(StreamWriteFeature)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ObjectCodec",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/ObjectCodec.java",
      "class_declaration": "public abstract class ObjectCodec extends TreeCodec implements Versioned ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ByteQuadsCanonicalizer",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
      "class_declaration": "public final class ByteQuadsCanonicalizer ",
      "methods_under_test": {
        "=1": {
          "ByteQuadsCanonicalizer.createRoot()": [
            1,
            1,
            1
          ],
          "ByteQuadsCanonicalizer.createRoot(int)": [
            1,
            1,
            1
          ],
          "ByteQuadsCanonicalizer.makeChild(int)": [
            1,
            1,
            1
          ],
          "ByteQuadsCanonicalizer.bucketCount()": [
            1,
            1,
            1
          ],
          "ByteQuadsCanonicalizer.maybeDirty()": [
            1,
            1,
            1
          ],
          "ByteQuadsCanonicalizer.hashSeed()": [
            1,
            1,
            1
          ],
          "ByteQuadsCanonicalizer.spilloverCount()": [
            1,
            1,
            1
          ],
          "ByteQuadsCanonicalizer.toString()": [
            1,
            1,
            1
          ],
          "ByteQuadsCanonicalizer.calcHash(int)": [
            1,
            1,
            1
          ],
          "ByteQuadsCanonicalizer.calcHash(int, int)": [
            1,
            1,
            1
          ],
          "ByteQuadsCanonicalizer.calcHash(int, int, int)": [
            1,
            1,
            1
          ],
          "TableInfo.createInitial(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ByteQuadsCanonicalizer.release()": [
            2,
            2,
            2
          ],
          "ByteQuadsCanonicalizer.size()": [
            2,
            2,
            2
          ],
          "ByteQuadsCanonicalizer.primaryCount()": [
            3,
            3,
            3
          ],
          "ByteQuadsCanonicalizer.secondaryCount()": [
            3,
            3,
            3
          ],
          "ByteQuadsCanonicalizer.tertiaryCount()": [
            3,
            3,
            3
          ],
          "ByteQuadsCanonicalizer.totalCount()": [
            3,
            3,
            3
          ],
          "ByteQuadsCanonicalizer.findName(int)": [
            7,
            7,
            7
          ],
          "ByteQuadsCanonicalizer.findName(int, int)": [
            7,
            7,
            7
          ],
          "ByteQuadsCanonicalizer.findName(int, int, int)": [
            7,
            7,
            7
          ],
          "ByteQuadsCanonicalizer.findName(int[], int)": [
            10,
            10,
            10
          ],
          "ByteQuadsCanonicalizer.addName(String, int)": [
            2,
            2,
            2
          ],
          "ByteQuadsCanonicalizer.addName(String, int, int)": [
            2,
            2,
            2
          ],
          "ByteQuadsCanonicalizer.addName(String, int, int, int)": [
            2,
            2,
            2
          ],
          "ByteQuadsCanonicalizer.addName(String, int[], int)": [
            5,
            5,
            5
          ],
          "ByteQuadsCanonicalizer.calcHash(int[], int)": [
            3,
            3,
            3
          ],
          "ByteQuadsCanonicalizer._reportTooManyCollisions()": [
            2,
            2,
            2
          ],
          "ByteQuadsCanonicalizer._calcTertiaryShift(int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/async/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BufferRecycler",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java",
      "class_declaration": "public class BufferRecycler ",
      "methods_under_test": {
        "=1": {
          "BufferRecycler.allocByteBuffer(int)": [
            1,
            1,
            1
          ],
          "BufferRecycler.releaseByteBuffer(int, byte[])": [
            1,
            1,
            1
          ],
          "BufferRecycler.allocCharBuffer(int)": [
            1,
            1,
            1
          ],
          "BufferRecycler.releaseCharBuffer(int, char[])": [
            1,
            1,
            1
          ],
          "BufferRecycler.byteBufferLength(int)": [
            1,
            1,
            1
          ],
          "BufferRecycler.charBufferLength(int)": [
            1,
            1,
            1
          ],
          "BufferRecycler.balloc(int)": [
            1,
            1,
            1
          ],
          "BufferRecycler.calloc(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BufferRecycler.allocByteBuffer(int, int)": [
            3,
            3,
            3
          ],
          "BufferRecycler.allocCharBuffer(int, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DataOutputAsStream",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/io/DataOutputAsStream.java",
      "class_declaration": "public class DataOutputAsStream extends OutputStream ",
      "methods_under_test": {
        "=1": {
          "DataOutputAsStream.write(int)": [
            1,
            1,
            1
          ],
          "DataOutputAsStream.write(byte, [])": [
            1,
            1,
            1
          ],
          "DataOutputAsStream.write(byte, [], int, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PackageVersion",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/PackageVersion.java",
      "class_declaration": "public final class PackageVersion implements Versioned ",
      "methods_under_test": {
        "=1": {
          "PackageVersion.version()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonToken",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/JsonToken.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ByteBufferFeeder",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/async/ByteBufferFeeder.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ParserMinimalBase",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java",
      "class_declaration": "public abstract class ParserMinimalBase extends JsonParser ",
      "methods_under_test": {
        "=1": {
          "ParserMinimalBase.currentToken()": [
            1,
            1,
            1
          ],
          "ParserMinimalBase.currentTokenId()": [
            1,
            1,
            1
          ],
          "ParserMinimalBase.getCurrentTokenId()": [
            1,
            1,
            1
          ],
          "ParserMinimalBase.hasCurrentToken()": [
            1,
            1,
            1
          ],
          "ParserMinimalBase.hasToken(JsonToken)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase._hasTextualNull(String)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase.reportInvalidNumber(String)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase.reportOverflowInt()": [
            1,
            1,
            1
          ],
          "ParserMinimalBase.reportOverflowInt(String)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase.reportOverflowInt(String, JsonToken)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase.reportOverflowLong()": [
            1,
            1,
            1
          ],
          "ParserMinimalBase.reportOverflowLong(String)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase.reportOverflowLong(String, JsonToken)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase._reportInputCoercion(String, JsonToken, Class<?>)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase._reportInvalidEOF()": [
            1,
            1,
            1
          ],
          "ParserMinimalBase._reportInvalidEOF(String, JsonToken)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase._reportInvalidEOFInValue()": [
            1,
            1,
            1
          ],
          "ParserMinimalBase._reportInvalidEOF(String)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase._reportMissingRootWS(int)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase._throwInvalidSpace(int)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase._reportError(String)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase._reportError(String, Object)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase._reportError(String, Object, Object)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase._wrapError(String, Throwable)": [
            1,
            1,
            1
          ],
          "ParserMinimalBase._throwInternal()": [
            1,
            1,
            1
          ],
          "ParserMinimalBase._constructError(String, Throwable)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ParserMinimalBase.hasTokenId(int)": [
            2,
            2,
            2
          ],
          "ParserMinimalBase.nextValue()": [
            2,
            2,
            2
          ],
          "ParserMinimalBase.skipChildren()": [
            6,
            6,
            6
          ],
          "ParserMinimalBase.clearCurrentToken()": [
            2,
            2,
            2
          ],
          "ParserMinimalBase.getValueAsInt()": [
            2,
            2,
            2
          ],
          "ParserMinimalBase.getValueAsInt(int)": [
            10,
            10,
            10
          ],
          "ParserMinimalBase.getValueAsLong()": [
            2,
            2,
            2
          ],
          "ParserMinimalBase.getValueAsLong(long)": [
            10,
            10,
            10
          ],
          "ParserMinimalBase.getValueAsString()": [
            3,
            3,
            3
          ],
          "ParserMinimalBase.getValueAsString(String)": [
            4,
            4,
            4
          ],
          "ParserMinimalBase._decodeBase64(String, ByteArrayBuilder, Base64Variant)": [
            3,
            3,
            3
          ],
          "ParserMinimalBase.reportUnexpectedNumberChar(int, String)": [
            2,
            2,
            2
          ],
          "ParserMinimalBase._longIntegerDesc(String)": [
            3,
            3,
            3
          ],
          "ParserMinimalBase._longNumberDesc(String)": [
            3,
            3,
            3
          ],
          "ParserMinimalBase._reportUnexpectedChar(int, String)": [
            3,
            3,
            3
          ],
          "ParserMinimalBase._reportInvalidEOFInValue(JsonToken)": [
            3,
            3,
            3
          ],
          "ParserMinimalBase._getCharDesc(int)": [
            3,
            3,
            3
          ],
          "ParserMinimalBase._asciiBytes(String)": [
            2,
            2,
            2
          ],
          "ParserMinimalBase._ascii(byte[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "ParserMinimalBase.getValueAsBoolean(boolean)": [
            12,
            12,
            12
          ],
          "ParserMinimalBase.getValueAsDouble(double)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FilteringParserDelegate",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
      "class_declaration": "public class FilteringParserDelegate extends JsonParserDelegate ",
      "methods_under_test": {
        "=1": {
          "FilteringParserDelegate.currentToken()": [
            1,
            1,
            1
          ],
          "FilteringParserDelegate.getCurrentTokenId()": [
            1,
            1,
            1
          ],
          "FilteringParserDelegate.currentTokenId()": [
            1,
            1,
            1
          ],
          "FilteringParserDelegate.hasCurrentToken()": [
            1,
            1,
            1
          ],
          "FilteringParserDelegate.hasToken(JsonToken)": [
            1,
            1,
            1
          ],
          "FilteringParserDelegate.overrideCurrentName(String)": [
            1,
            1,
            1
          ],
          "FilteringParserDelegate.hasTextCharacters()": [
            1,
            1,
            1
          ],
          "FilteringParserDelegate.getValueAsInt(int)": [
            1,
            1,
            1
          ],
          "FilteringParserDelegate.getValueAsLong(long)": [
            1,
            1,
            1
          ],
          "FilteringParserDelegate.getValueAsDouble(double)": [
            1,
            1,
            1
          ],
          "FilteringParserDelegate.getValueAsBoolean(boolean)": [
            1,
            1,
            1
          ],
          "FilteringParserDelegate.getValueAsString(String)": [
            1,
            1,
            1
          ],
          "FilteringParserDelegate.getBinaryValue(Base64Variant)": [
            1,
            1,
            1
          ],
          "FilteringParserDelegate.readBinaryValue(Base64Variant, OutputStream)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FilteringParserDelegate.hasTokenId(int)": [
            2,
            2,
            2
          ],
          "FilteringParserDelegate.getCurrentName()": [
            2,
            2,
            2
          ],
          "FilteringParserDelegate.clearCurrentToken()": [
            2,
            2,
            2
          ],
          "FilteringParserDelegate.nextValue()": [
            2,
            2,
            2
          ],
          "FilteringParserDelegate.skipChildren()": [
            7,
            7,
            7
          ],
          "FilteringParserDelegate._filterContext()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {
          "FilteringParserDelegate.nextToken()": [
            45,
            45,
            45
          ],
          "FilteringParserDelegate._nextToken2()": [
            22,
            19,
            19
          ],
          "FilteringParserDelegate._nextTokenWithBuffering(final, TokenFilterContext)": [
            25,
            25,
            25
          ]
        },
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ThreadLocalBufferManager",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/ThreadLocalBufferManager.java",
      "class_declaration": "class ThreadLocalBufferManager ",
      "methods_under_test": {
        "=1": {
          "ThreadLocalBufferManager.instance()": [
            1,
            1,
            1
          ],
          "ThreadLocalBufferManager.wrapAndTrack(BufferRecycler)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ThreadLocalBufferManager.releaseBuffers()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonStreamContext",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java",
      "class_declaration": "public abstract class JsonStreamContext ",
      "methods_under_test": {
        "=1": {
          "JsonStreamContext.inArray()": [
            1,
            1,
            1
          ],
          "JsonStreamContext.inRoot()": [
            1,
            1,
            1
          ],
          "JsonStreamContext.inObject()": [
            1,
            1,
            1
          ],
          "JsonStreamContext.hasCurrentIndex()": [
            1,
            1,
            1
          ],
          "JsonStreamContext.hasCurrentName()": [
            1,
            1,
            1
          ],
          "JsonStreamContext.pathAsPointer()": [
            1,
            1,
            1
          ],
          "JsonStreamContext.pathAsPointer(boolean)": [
            1,
            1,
            1
          ],
          "JsonStreamContext.getStartLocation(Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonStreamContext.getTypeDesc()": [
            4,
            4,
            4
          ],
          "JsonStreamContext.typeDesc()": [
            4,
            4,
            4
          ],
          "JsonStreamContext.hasPathSegment()": [
            3,
            3,
            3
          ],
          "JsonStreamContext.toString()": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "JsonProcessingException",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java",
      "class_declaration": "public class JsonProcessingException extends java.io.IOException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonGenerationException",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java",
      "class_declaration": "public class JsonGenerationException extends JsonProcessingException ",
      "methods_under_test": {
        "=1": {
          "JsonGenerationException.withGenerator(JsonGenerator)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ReaderBasedJsonParser",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
      "class_declaration": "public class ReaderBasedJsonParser extends ParserBase ",
      "methods_under_test": {
        "=1": {
          "ReaderBasedJsonParser.getNextChar(String)": [
            1,
            1,
            1
          ],
          "ReaderBasedJsonParser.getCurrentLocation()": [
            1,
            1,
            1
          ],
          "ReaderBasedJsonParser._reportInvalidToken(String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ReaderBasedJsonParser.releaseBuffered(Writer)": [
            2,
            2,
            2
          ],
          "ReaderBasedJsonParser.getNextChar(String, JsonToken)": [
            3,
            3,
            3
          ],
          "ReaderBasedJsonParser._closeInput()": [
            3,
            3,
            3
          ],
          "ReaderBasedJsonParser._releaseBuffers()": [
            3,
            3,
            3
          ],
          "ReaderBasedJsonParser._loadMoreGuaranteed()": [
            2,
            2,
            2
          ],
          "ReaderBasedJsonParser._loadMore()": [
            4,
            4,
            4
          ],
          "ReaderBasedJsonParser.getText()": [
            3,
            3,
            3
          ],
          "ReaderBasedJsonParser.getText(Writer)": [
            6,
            6,
            6
          ],
          "ReaderBasedJsonParser.getValueAsString()": [
            4,
            4,
            4
          ],
          "ReaderBasedJsonParser.getValueAsString(String)": [
            4,
            4,
            4
          ],
          "ReaderBasedJsonParser._getText2(JsonToken)": [
            7,
            7,
            7
          ],
          "ReaderBasedJsonParser.getTextCharacters()": [
            10,
            10,
            10
          ],
          "ReaderBasedJsonParser.getTextLength()": [
            7,
            7,
            7
          ],
          "ReaderBasedJsonParser.getTextOffset()": [
            7,
            7,
            7
          ],
          "ReaderBasedJsonParser.getBinaryValue(Base64Variant)": [
            6,
            6,
            6
          ],
          "ReaderBasedJsonParser.readBinaryValue(Base64Variant, OutputStream)": [
            4,
            4,
            4
          ],
          "ReaderBasedJsonParser.finishToken()": [
            2,
            2,
            2
          ],
          "ReaderBasedJsonParser.nextTextValue()": [
            6,
            6,
            6
          ],
          "ReaderBasedJsonParser.nextIntValue(int)": [
            5,
            5,
            5
          ],
          "ReaderBasedJsonParser.nextLongValue(long)": [
            5,
            5,
            5
          ],
          "ReaderBasedJsonParser.nextBooleanValue()": [
            9,
            9,
            9
          ],
          "ReaderBasedJsonParser._parsePosNumber(int)": [
            6,
            0,
            0
          ],
          "ReaderBasedJsonParser._parseNegNumber()": [
            8,
            0,
            0
          ],
          "ReaderBasedJsonParser._handleInvalidNumberStart(int, boolean)": [
            8,
            8,
            8
          ],
          "ReaderBasedJsonParser._parseName()": [
            4,
            4,
            4
          ],
          "ReaderBasedJsonParser._handleOddName(int)": [
            10,
            10,
            10
          ],
          "ReaderBasedJsonParser._parseAposName()": [
            5,
            5,
            5
          ],
          "ReaderBasedJsonParser._handleApos()": [
            10,
            10,
            10
          ],
          "ReaderBasedJsonParser._finishString()": [
            5,
            5,
            5
          ],
          "ReaderBasedJsonParser._finishString2()": [
            9,
            9,
            9
          ],
          "ReaderBasedJsonParser._skipString()": [
            6,
            0,
            0
          ],
          "ReaderBasedJsonParser._skipCR()": [
            3,
            3,
            3
          ],
          "ReaderBasedJsonParser._matchToken(String, int)": [
            5,
            5,
            5
          ],
          "ReaderBasedJsonParser.getTokenLocation()": [
            2,
            2,
            2
          ],
          "ReaderBasedJsonParser._reportInvalidToken(String, String)": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "ReaderBasedJsonParser.nextFieldName(SerializableString)": [
            15,
            15,
            15
          ],
          "ReaderBasedJsonParser._isNextTokenNameMaybe(int, String)": [
            18,
            18,
            18
          ],
          "ReaderBasedJsonParser._handleOddValue(int)": [
            15,
            15,
            15
          ],
          "ReaderBasedJsonParser._decodeEscaped()": [
            16,
            16,
            16
          ],
          "ReaderBasedJsonParser._decodeBase64(Base64Variant)": [
            20,
            20,
            20
          ]
        },
        ">20": {
          "ReaderBasedJsonParser._readBinary(Base64Variant, OutputStream, byte[])": [
            26,
            26,
            26
          ],
          "ReaderBasedJsonParser.nextToken()": [
            30,
            30,
            30
          ],
          "ReaderBasedJsonParser.nextFieldName()": [
            26,
            26,
            26
          ]
        },
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonGenerator",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java",
      "class_declaration": "public abstract class JsonGenerator implements Closeable, Flushable, Versioned ",
      "methods_under_test": {
        "=1": {
          "JsonGenerator.enabledByDefault()": [
            1,
            1,
            1
          ],
          "JsonGenerator.enabledIn(int)": [
            1,
            1,
            1
          ],
          "JsonGenerator.overrideStdFeatures(int, int)": [
            1,
            1,
            1
          ],
          "JsonGenerator.overrideFormatFeatures(int, int)": [
            1,
            1,
            1
          ],
          "JsonGenerator.setPrettyPrinter(PrettyPrinter)": [
            1,
            1,
            1
          ],
          "JsonGenerator.setHighestNonEscapedChar(int)": [
            1,
            1,
            1
          ],
          "JsonGenerator.setCharacterEscapes(CharacterEscapes)": [
            1,
            1,
            1
          ],
          "JsonGenerator.setRootValueSeparator(SerializableString)": [
            1,
            1,
            1
          ],
          "JsonGenerator.getCurrentValue()": [
            1,
            1,
            1
          ],
          "JsonGenerator.canUseSchema(FormatSchema)": [
            1,
            1,
            1
          ],
          "JsonGenerator.canWriteObjectId()": [
            1,
            1,
            1
          ],
          "JsonGenerator.canWriteTypeId()": [
            1,
            1,
            1
          ],
          "JsonGenerator.canWriteBinaryNatively()": [
            1,
            1,
            1
          ],
          "JsonGenerator.canOmitFields()": [
            1,
            1,
            1
          ],
          "JsonGenerator.canWriteFormattedNumbers()": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeStartArray(int)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeStartObject(Object)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeFieldId(long)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeString(Reader, int)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeRaw(SerializableString)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeRawValue(SerializableString)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeBinary(byte[], int, int)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeBinary(byte[])": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeBinary(InputStream, int)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeNumber(short)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeObjectId(Object)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeObjectRef(Object)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeTypeId(Object)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeStringField(String, String)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeBooleanField(String, boolean)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeNullField(String)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeNumberField(String, int)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeNumberField(String, long)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeNumberField(String, double)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeNumberField(String, float)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeNumberField(String, BigDecimal)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeBinaryField(String, byte[])": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeArrayFieldStart(String)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeObjectFieldStart(String)": [
            1,
            1,
            1
          ],
          "JsonGenerator.writeObjectField(String, Object)": [
            1,
            1,
            1
          ],
          "JsonGenerator._reportError(String)": [
            1,
            1,
            1
          ],
          "JsonGenerator._throwInternal()": [
            1,
            1,
            1
          ],
          "JsonGenerator._reportUnsupportedOperation()": [
            1,
            1,
            1
          ],
          "JsonGenerator._verifyOffsets(int, int, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JsonGenerator.collectDefaults()": [
            3,
            3,
            3
          ],
          "JsonGenerator.configure(Feature, boolean)": [
            2,
            2,
            2
          ],
          "JsonGenerator.setCurrentValue(Object)": [
            2,
            2,
            2
          ],
          "JsonGenerator.writeArray(int[], int, int)": [
            3,
            3,
            3
          ],
          "JsonGenerator.writeArray(long[], int, int)": [
            3,
            3,
            3
          ],
          "JsonGenerator.writeArray(double[], int, int)": [
            3,
            3,
            3
          ],
          "JsonGenerator.writeEmbeddedObject(Object)": [
            3,
            3,
            3
          ],
          "JsonGenerator.writeTypePrefix(WritableTypeId)": [
            10,
            10,
            10
          ],
          "JsonGenerator.writeTypeSuffix(WritableTypeId)": [
            9,
            9,
            9
          ]
        },
        "11-20": {
          "JsonGenerator.copyCurrentStructure(JsonParser)": [
            18,
            18,
            18
          ],
          "JsonGenerator._writeSimpleObject(Object)": [
            17,
            17,
            17
          ]
        },
        ">20": {
          "JsonGenerator.copyCurrentEvent(JsonParser)": [
            21,
            21,
            21
          ]
        },
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonGeneratorDelegate",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java",
      "class_declaration": "public class JsonGeneratorDelegate extends JsonGenerator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "JsonGeneratorDelegate.setCodec(ObjectCodec)": [
            3,
            3,
            3
          ],
          "JsonGeneratorDelegate.version()": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.canUseSchema(FormatSchema)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.canWriteTypeId()": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.canWriteObjectId()": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.canWriteBinaryNatively()": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.canOmitFields()": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.enable(Feature)": [
            3,
            3,
            3
          ],
          "JsonGeneratorDelegate.disable(Feature)": [
            3,
            3,
            3
          ],
          "JsonGeneratorDelegate.isEnabled(Feature)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.setFeatureMask(int)": [
            3,
            3,
            3
          ],
          "JsonGeneratorDelegate.overrideStdFeatures(int, int)": [
            3,
            3,
            3
          ],
          "JsonGeneratorDelegate.overrideFormatFeatures(int, int)": [
            3,
            3,
            3
          ],
          "JsonGeneratorDelegate.setPrettyPrinter(PrettyPrinter)": [
            3,
            3,
            3
          ],
          "JsonGeneratorDelegate.useDefaultPrettyPrinter()": [
            3,
            3,
            3
          ],
          "JsonGeneratorDelegate.setHighestNonEscapedChar(int)": [
            3,
            3,
            3
          ],
          "JsonGeneratorDelegate.setCharacterEscapes(CharacterEscapes)": [
            3,
            3,
            3
          ],
          "JsonGeneratorDelegate.setRootValueSeparator(SerializableString)": [
            3,
            3,
            3
          ],
          "JsonGeneratorDelegate.writeStartArray()": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeStartArray(int)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeEndArray()": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeStartObject()": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeStartObject(Object)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeEndObject()": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeFieldName(String)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeFieldName(SerializableString)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeFieldId(long)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeArray(int[], int, int)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeArray(long[], int, int)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeArray(double[], int, int)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeString(String)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeString(Reader, int)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeString(char[], int, int)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeString(SerializableString)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeRawUTF8String(byte[], int, int)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeUTF8String(byte[], int, int)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeRaw(String)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeRaw(String, int, int)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeRaw(SerializableString)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeRaw(char[], int, int)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeRaw(char)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeRawValue(String)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeRawValue(String, int, int)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeRawValue(char[], int, int)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeBinary(Base64Variant, byte[], int, int)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeBinary(Base64Variant, InputStream, int)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeNumber(short)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeNumber(int)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeNumber(long)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeNumber(BigInteger)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeNumber(double)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeNumber(float)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeNumber(BigDecimal)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeNumber(String)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeBoolean(boolean)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeNull()": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeOmittedField(String)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeObjectId(Object)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeObjectRef(Object)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeTypeId(Object)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeEmbeddedObject(Object)": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.writeTree(TreeNode)": [
            10,
            10,
            10
          ],
          "JsonGeneratorDelegate.copyCurrentEvent(JsonParser)": [
            5,
            5,
            5
          ],
          "JsonGeneratorDelegate.copyCurrentStructure(JsonParser)": [
            5,
            5,
            5
          ],
          "JsonGeneratorDelegate.flush()": [
            2,
            2,
            2
          ],
          "JsonGeneratorDelegate.close()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "JsonGeneratorDelegate.writeObject(Object)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/exc/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "InputCoercionException",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/exc/InputCoercionException.java",
      "class_declaration": "public class InputCoercionException extends StreamReadException ",
      "methods_under_test": {
        "=1": {
          "InputCoercionException.withParser(JsonParser)": [
            1,
            1,
            1
          ],
          "InputCoercionException.withRequestPayload(RequestPayload)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "WriterBasedJsonGenerator",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java",
      "class_declaration": "public class WriterBasedJsonGenerator extends JsonGeneratorImpl ",
      "methods_under_test": {
        "=1": {
          "WriterBasedJsonGenerator.getOutputBuffered()": [
            1,
            1,
            1
          ],
          "WriterBasedJsonGenerator.canWriteFormattedNumbers()": [
            1,
            1,
            1
          ],
          "WriterBasedJsonGenerator.writeRawUTF8String(byte[], int, int)": [
            1,
            1,
            1
          ],
          "WriterBasedJsonGenerator.writeUTF8String(byte[], int, int)": [
            1,
            1,
            1
          ],
          "WriterBasedJsonGenerator.writeNull()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "WriterBasedJsonGenerator.writeFieldName(String)": [
            2,
            2,
            2
          ],
          "WriterBasedJsonGenerator.writeFieldName(SerializableString)": [
            2,
            2,
            2
          ],
          "WriterBasedJsonGenerator._writeFieldName(String, boolean)": [
            6,
            6,
            6
          ],
          "WriterBasedJsonGenerator._writeFieldName(SerializableString, boolean)": [
            7,
            7,
            7
          ],
          "WriterBasedJsonGenerator.writeStartArray()": [
            4,
            4,
            4
          ],
          "WriterBasedJsonGenerator.writeEndArray()": [
            4,
            4,
            4
          ],
          "WriterBasedJsonGenerator.writeStartObject(Object)": [
            5,
            5,
            5
          ],
          "WriterBasedJsonGenerator.writeStartObject()": [
            4,
            4,
            4
          ],
          "WriterBasedJsonGenerator.writeEndObject()": [
            4,
            4,
            4
          ],
          "WriterBasedJsonGenerator._writePPFieldName(String, boolean)": [
            6,
            6,
            6
          ],
          "WriterBasedJsonGenerator._writePPFieldName(SerializableString, boolean)": [
            6,
            6,
            6
          ],
          "WriterBasedJsonGenerator.writeString(String)": [
            4,
            4,
            4
          ],
          "WriterBasedJsonGenerator.writeString(Reader, int)": [
            8,
            8,
            8
          ],
          "WriterBasedJsonGenerator.writeString(char[], int, int)": [
            3,
            3,
            3
          ],
          "WriterBasedJsonGenerator.writeString(SerializableString)": [
            4,
            4,
            4
          ],
          "WriterBasedJsonGenerator.writeRaw(String)": [
            4,
            4,
            4
          ],
          "WriterBasedJsonGenerator.writeRaw(String, int, int)": [
            4,
            4,
            4
          ],
          "WriterBasedJsonGenerator.writeRaw(SerializableString)": [
            2,
            2,
            2
          ],
          "WriterBasedJsonGenerator.writeRaw(char[], int, int)": [
            3,
            3,
            3
          ],
          "WriterBasedJsonGenerator.writeRaw(char)": [
            2,
            2,
            2
          ],
          "WriterBasedJsonGenerator.writeBinary(Base64Variant, byte[], int, int)": [
            3,
            3,
            3
          ],
          "WriterBasedJsonGenerator.writeBinary(Base64Variant, InputStream, int)": [
            6,
            6,
            6
          ],
          "WriterBasedJsonGenerator.writeNumber(short)": [
            3,
            3,
            3
          ],
          "WriterBasedJsonGenerator.writeNumber(int)": [
            3,
            3,
            3
          ],
          "WriterBasedJsonGenerator.writeNumber(long)": [
            3,
            3,
            3
          ],
          "WriterBasedJsonGenerator.writeNumber(BigInteger)": [
            4,
            4,
            4
          ],
          "WriterBasedJsonGenerator.writeNumber(double)": [
            2,
            2,
            2
          ],
          "WriterBasedJsonGenerator.writeNumber(float)": [
            2,
            2,
            2
          ],
          "WriterBasedJsonGenerator.writeNumber(BigDecimal)": [
            4,
            4,
            4
          ],
          "WriterBasedJsonGenerator.writeNumber(String)": [
            3,
            3,
            3
          ],
          "WriterBasedJsonGenerator.writeBoolean(boolean)": [
            3,
            3,
            3
          ],
          "WriterBasedJsonGenerator._verifyValueWrite(String)": [
            9,
            9,
            9
          ],
          "WriterBasedJsonGenerator.flush()": [
            3,
            3,
            3
          ],
          "WriterBasedJsonGenerator.close()": [
            8,
            8,
            8
          ],
          "WriterBasedJsonGenerator._releaseBuffers()": [
            3,
            3,
            3
          ],
          "WriterBasedJsonGenerator._writeBinary(Base64Variant, byte[], int, final, int)": [
            7,
            7,
            7
          ],
          "WriterBasedJsonGenerator._writeBinary(Base64Variant, InputStream, byte[], int)": [
            10,
            10,
            10
          ],
          "WriterBasedJsonGenerator._writeBinary(Base64Variant, InputStream, byte[])": [
            9,
            9,
            9
          ],
          "WriterBasedJsonGenerator._flushBuffer()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Instantiatable",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/Instantiatable.java",
      "error": "list index out of range"
    },
    {
      "src_name": "JsonEOFException",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/io/JsonEOFException.java",
      "class_declaration": "public class JsonEOFException extends JsonParseException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/format/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Base64Variants",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/Base64Variants.java",
      "class_declaration": "public final class Base64Variants ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "Base64Variants.valueOf(String)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FormatSchema",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/FormatSchema.java",
      "error": "list index out of range"
    },
    {
      "src_name": "JsonParserDelegate",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java",
      "class_declaration": "public class JsonParserDelegate extends JsonParser ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "JsonParserDelegate.enable(Feature)": [
            3,
            3,
            3
          ],
          "JsonParserDelegate.disable(Feature)": [
            3,
            3,
            3
          ],
          "JsonParserDelegate.isEnabled(Feature)": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.setFeatureMask(int)": [
            3,
            3,
            3
          ],
          "JsonParserDelegate.overrideStdFeatures(int, int)": [
            3,
            3,
            3
          ],
          "JsonParserDelegate.overrideFormatFeatures(int, int)": [
            3,
            3,
            3
          ],
          "JsonParserDelegate.canUseSchema(FormatSchema)": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.version()": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.requiresCustomCodec()": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.close()": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.currentToken()": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.currentTokenId()": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.hasCurrentToken()": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.hasTokenId(int)": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.hasToken(JsonToken)": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.clearCurrentToken()": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.overrideCurrentName(String)": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.hasTextCharacters()": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.getText(Writer)": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.getValueAsInt(int)": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.getValueAsLong(long)": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.getValueAsDouble(double)": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.getValueAsBoolean(boolean)": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.getValueAsString(String)": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.getBinaryValue(Base64Variant)": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.readBinaryValue(Base64Variant, OutputStream)": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.nextToken()": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.nextValue()": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.finishToken()": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.skipChildren()": [
            3,
            3,
            3
          ],
          "JsonParserDelegate.canReadObjectId()": [
            2,
            2,
            2
          ],
          "JsonParserDelegate.canReadTypeId()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JsonEncoding",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/JsonEncoding.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NumberInput",
      "src_path": "../../defects4j-subjects/JacksonCore-26f/src/main/java/com/fasterxml/jackson/core/io/NumberInput.java",
      "class_declaration": "public final class NumberInput ",
      "methods_under_test": {
        "=1": {
          "NumberInput.parseLong(char[], int, int)": [
            1,
            1,
            1
          ],
          "NumberInput.parseBigDecimal(char[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NumberInput.parseInt(char[], int, int)": [
            9,
            9,
            9
          ],
          "NumberInput.parseLong(String)": [
            2,
            2,
            2
          ],
          "NumberInput.inLongRange(char[], int, int, boolean)": [
            5,
            5,
            5
          ],
          "NumberInput.inLongRange(String, boolean)": [
            5,
            5,
            5
          ],
          "NumberInput.parseAsDouble(String, double)": [
            5,
            5,
            5
          ],
          "NumberInput.parseDouble(String)": [
            2,
            2,
            2
          ],
          "NumberInput.parseBigDecimal(String)": [
            2,
            2,
            2
          ],
          "NumberInput.parseBigDecimal(char[], int, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "NumberInput.parseInt(String)": [
            12,
            12,
            12
          ],
          "NumberInput.parseAsInt(String, int)": [
            12,
            12,
            12
          ],
          "NumberInput.parseAsLong(String, long)": [
            12,
            12,
            12
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    }
  ],
  "test_unpaired": [
    {
      "AsyncRootNumbersTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncRootNumbersTest.java"
    },
    {
      "ParserDupHandlingTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/ParserDupHandlingTest.java"
    },
    {
      "Base64CodecTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/base64/Base64CodecTest.java"
    },
    {
      "SymbolTableMergingTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/sym/SymbolTableMergingTest.java"
    },
    {
      "ManualReadPerfWithMedia": "../../defects4j-subjects/JacksonCore-26f/src/test/java/perf/ManualReadPerfWithMedia.java"
    },
    {
      "SymbolsViaParserTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java"
    },
    {
      "TestSymbolTables": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java"
    },
    {
      "AsyncTestBase": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/async/AsyncTestBase.java"
    },
    {
      "ValueConversionsTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/ValueConversionsTest.java"
    },
    {
      "NonStandardParserFeaturesTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/NonStandardParserFeaturesTest.java"
    },
    {
      "TestParserOverrides": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/TestParserOverrides.java"
    },
    {
      "AsyncScopeMatchingTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncScopeMatchingTest.java"
    },
    {
      "TestLocation": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/TestLocation.java"
    },
    {
      "Surrogate223Test": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/failing/Surrogate223Test.java"
    },
    {
      "AsyncNumberLeadingZeroesTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncNumberLeadingZeroesTest.java"
    },
    {
      "TestRootValues": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/TestRootValues.java"
    },
    {
      "ManualSmallTokenRead": "../../defects4j-subjects/JacksonCore-26f/src/test/java/perf/ManualSmallTokenRead.java"
    },
    {
      "TestDecorators": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java"
    },
    {
      "Base64GenerationTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/base64/Base64GenerationTest.java"
    },
    {
      "TestJDKSerializability": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/TestJDKSerializability.java"
    },
    {
      "AsyncInvalidCharsTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncInvalidCharsTest.java"
    },
    {
      "EnumByBytesLookup": "../../defects4j-subjects/JacksonCore-26f/src/test/java/perf/EnumByBytesLookup.java"
    },
    {
      "ParserErrorHandlingTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/ParserErrorHandlingTest.java"
    },
    {
      "TestParserClosing": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java"
    },
    {
      "NextXxxAccessTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/NextXxxAccessTest.java"
    },
    {
      "JsonPointerGeneratorFilteringTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java"
    },
    {
      "TestGeneratorClosing": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java"
    },
    {
      "AsyncStringArrayTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncStringArrayTest.java"
    },
    {
      "AsyncConcurrencyTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncConcurrencyTest.java"
    },
    {
      "AsyncSimpleNestedTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncSimpleNestedTest.java"
    },
    {
      "BasicParserFilteringTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java"
    },
    {
      "AsyncRootValuesTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncRootValuesTest.java"
    },
    {
      "TestCharEscaping": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/TestCharEscaping.java"
    },
    {
      "TestGeneratorObject": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java"
    },
    {
      "LocationInObjectTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java"
    },
    {
      "TestCharTypes": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/util/TestCharTypes.java"
    },
    {
      "TestExceptions": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/TestExceptions.java"
    },
    {
      "StringWriterForTesting": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/testsupport/StringWriterForTesting.java"
    },
    {
      "AsyncNumberCoercionTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncNumberCoercionTest.java"
    },
    {
      "AsyncCommentParsingTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncCommentParsingTest.java"
    },
    {
      "TestRawStringWriting": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java"
    },
    {
      "Base64BinaryParsingTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/base64/Base64BinaryParsingTest.java"
    },
    {
      "TestByteBasedSymbols": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java"
    },
    {
      "MockDataInput": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/testsupport/MockDataInput.java"
    },
    {
      "AsyncMissingValuesInObjectTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncMissingValuesInObjectTest.java"
    },
    {
      "ManualIntRead": "../../defects4j-subjects/JacksonCore-26f/src/test/java/perf/ManualIntRead.java"
    },
    {
      "TestParserLinefeeds": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/main/TestParserLinefeeds.java"
    },
    {
      "TestSymbolsWithMediaItem": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java"
    },
    {
      "AsyncNonStdParsingTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncNonStdParsingTest.java"
    },
    {
      "TestCustomEscaping": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java"
    },
    {
      "StringGenerationFromReaderTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/StringGenerationFromReaderTest.java"
    },
    {
      "ByteOutputStreamForTesting": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/testsupport/ByteOutputStreamForTesting.java"
    },
    {
      "TestGeneratorWithSerializedString": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/TestGeneratorWithSerializedString.java"
    },
    {
      "TestDelegates": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java"
    },
    {
      "TestGeneratorMisc": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java"
    },
    {
      "TestHashCollisionChars": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/sym/TestHashCollisionChars.java"
    },
    {
      "AsyncBinaryParseTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncBinaryParseTest.java"
    },
    {
      "StringGenerationTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/StringGenerationTest.java"
    },
    {
      "AsyncLocationTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncLocationTest.java"
    },
    {
      "MediaItem": "../../defects4j-subjects/JacksonCore-26f/src/test/java/perf/MediaItem.java"
    },
    {
      "JsonPointerParserFilteringTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java"
    },
    {
      "ParserSymbolHandlingTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/ParserSymbolHandlingTest.java"
    },
    {
      "TestGeneratorDupHandling": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/TestGeneratorDupHandling.java"
    },
    {
      "TestGeneratorCopy": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java"
    },
    {
      "LocationOffsetsTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/LocationOffsetsTest.java"
    },
    {
      "TestParserFeatures": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java"
    },
    {
      "GeneratorFeaturesTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/GeneratorFeaturesTest.java"
    },
    {
      "NumberOverflowTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java"
    },
    {
      "TestParserWithObjects": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java"
    },
    {
      "NonStandardUnquotedNamesTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/NonStandardUnquotedNamesTest.java"
    },
    {
      "AsyncNonStdNumbersTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncNonStdNumbersTest.java"
    },
    {
      "GeneratorFailFromReaderTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/GeneratorFailFromReaderTest.java"
    },
    {
      "ParserTestBase": "../../defects4j-subjects/JacksonCore-26f/src/test/java/perf/ParserTestBase.java"
    },
    {
      "LocationInArrayTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/LocationInArrayTest.java"
    },
    {
      "PointerFromContextTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/PointerFromContextTest.java"
    },
    {
      "TestArrayParsing": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/main/TestArrayParsing.java"
    },
    {
      "ThrottledInputStream": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/testsupport/ThrottledInputStream.java"
    },
    {
      "NumberParsingTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/NumberParsingTest.java"
    },
    {
      "DataInputTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/DataInputTest.java"
    },
    {
      "AsyncSimpleObjectTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncSimpleObjectTest.java"
    },
    {
      "NumberCoercionTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java"
    },
    {
      "RequestPayloadOnExceptionTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/RequestPayloadOnExceptionTest.java"
    },
    {
      "CommentParsingTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/CommentParsingTest.java"
    },
    {
      "ParserScopeMatchingTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/ParserScopeMatchingTest.java"
    },
    {
      "AsyncStringObjectTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncStringObjectTest.java"
    },
    {
      "ConcurrencyReadTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/perf/ConcurrencyReadTest.java"
    },
    {
      "ParserErrorHandlingTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/failing/ParserErrorHandlingTest.java"
    },
    {
      "AsyncFieldNamesTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncFieldNamesTest.java"
    },
    {
      "TestJsonFormatDetection": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/format/TestJsonFormatDetection.java"
    },
    {
      "BaseTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/BaseTest.java"
    },
    {
      "AsyncReaderWrapper": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/testsupport/AsyncReaderWrapper.java"
    },
    {
      "UTF8NamesParseTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/UTF8NamesParseTest.java"
    },
    {
      "AsyncUnicodeHandlingTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncUnicodeHandlingTest.java"
    },
    {
      "AsyncMissingValuesInArrayTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncMissingValuesInArrayTest.java"
    },
    {
      "UTF32ParseTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/UTF32ParseTest.java"
    },
    {
      "TrailingCommasTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/read/TrailingCommasTest.java"
    },
    {
      "ManualCharAccessTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/perf/ManualCharAccessTest.java"
    },
    {
      "AsyncReaderWrapperForByteArray": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/testsupport/AsyncReaderWrapperForByteArray.java"
    },
    {
      "ArrayGenerationTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/ArrayGenerationTest.java"
    },
    {
      "ConfigTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/ConfigTest.java"
    },
    {
      "GeneratorFailTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java"
    },
    {
      "TestUnicode": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/TestUnicode.java"
    },
    {
      "AsyncScalarArrayTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncScalarArrayTest.java"
    },
    {
      "AsyncTokenErrorTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/failing/async/AsyncTokenErrorTest.java"
    },
    {
      "TestVersions": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/TestVersions.java"
    },
    {
      "TestNumberPrinting": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/util/TestNumberPrinting.java"
    },
    {
      "TestVersionUtil": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java"
    },
    {
      "AsyncCharEscapingTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/async/AsyncCharEscapingTest.java"
    },
    {
      "BasicGeneratorFilteringTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java"
    },
    {
      "RawValueWithSurrogatesTest": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/RawValueWithSurrogatesTest.java"
    },
    {
      "TestGeneratorArray": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java"
    },
    {
      "TestNumberParsing": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/main/TestNumberParsing.java"
    },
    {
      "TestMaxErrorSize": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/TestMaxErrorSize.java"
    },
    {
      "TestWithTonsaSymbols": "../../defects4j-subjects/JacksonCore-26f/src/test/java/com/fasterxml/jackson/core/json/TestWithTonsaSymbols.java"
    }
  ]
}