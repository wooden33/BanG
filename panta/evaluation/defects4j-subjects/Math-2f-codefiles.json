{
  "src_test_exact_match": [
    {
      "src_name": "NPointCrossover",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/NPointCrossover.java",
      "class_declaration": "public class NPointCrossover <T> implements CrossoverPolicy ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "NPointCrossover.crossover(final, Chromosome, final, Chromosome)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/NPointCrossoverTest.java"
    },
    {
      "src_name": "MultiStartMultivariateOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/MultiStartMultivariateOptimizer.java",
      "class_declaration": "public class MultiStartMultivariateOptimizer extends BaseMultiStartMultivariateOptimizer<PointValuePair> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/MultiStartMultivariateOptimizerTest.java"
    },
    {
      "src_name": "JacobianMatrices",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/JacobianMatrices.java",
      "class_declaration": "public class JacobianMatrices ",
      "methods_under_test": {
        "=1": {
          "JacobianMatrices.addParameterJacobianProvider(final, ParameterJacobianProvider)": [
            1,
            1,
            1
          ],
          "JacobianMatrices.setParameterizedODE(final, ParameterizedODE)": [
            1,
            1,
            1
          ],
          "JacobianMatrices.getCurrentMainSetJacobian(final, double[][])": [
            1,
            1,
            1
          ],
          "MainStateJacobianWrapper.computeDerivatives(double, double[], double[])": [
            1,
            1,
            1
          ],
          "MainStateJacobianWrapper.computeMainStateJacobian(double, double[], double[], double[][])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JacobianMatrices.registerVariationalEquations(final, ExpandableStatefulODE)": [
            2,
            2,
            2
          ],
          "JacobianMatrices.setParameterStep(final, String, final, double)": [
            3,
            3,
            3
          ],
          "JacobianMatrices.setInitialMainStateJacobian(final, double[][])": [
            3,
            3,
            3
          ],
          "JacobianMatrices.setInitialParameterJacobian(final, String, final, double[])": [
            4,
            4,
            4
          ],
          "JacobianMatrices.getCurrentParameterJacobian(String, final, double[])": [
            2,
            2,
            2
          ],
          "JacobiansSecondaryEquations.computeDerivatives(final, double, final, double[], final, double[], final, double[], final, double[])": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/JacobianMatricesTest.java"
    },
    {
      "src_name": "Vector3D",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java",
      "class_declaration": "public class Vector3D implements Serializable, Vector<Euclidean3D> ",
      "methods_under_test": {
        "=1": {
          "Vector3D.toArray()": [
            1,
            1,
            1
          ],
          "Vector3D.add(final, Vector<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "Vector3D.add(double, final, Vector<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "Vector3D.subtract(final, Vector<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "Vector3D.subtract(final, double, final, Vector<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "Vector3D.negate()": [
            1,
            1,
            1
          ],
          "Vector3D.scalarMultiply(double)": [
            1,
            1,
            1
          ],
          "Vector3D.dotProduct(final, Vector<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "Vector3D.crossProduct(final, Vector<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "Vector3D.distance1(Vector<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "Vector3D.distance(Vector<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "Vector3D.distanceInf(Vector<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "Vector3D.distanceSq(Vector<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "Vector3D.dotProduct(Vector3D, Vector3D)": [
            1,
            1,
            1
          ],
          "Vector3D.crossProduct(final, Vector3D, final, Vector3D)": [
            1,
            1,
            1
          ],
          "Vector3D.distance1(Vector3D, Vector3D)": [
            1,
            1,
            1
          ],
          "Vector3D.distance(Vector3D, Vector3D)": [
            1,
            1,
            1
          ],
          "Vector3D.distanceInf(Vector3D, Vector3D)": [
            1,
            1,
            1
          ],
          "Vector3D.distanceSq(Vector3D, Vector3D)": [
            1,
            1,
            1
          ],
          "Vector3D.toString()": [
            1,
            1,
            1
          ],
          "Vector3D.toString(final, NumberFormat)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Vector3D.normalize()": [
            2,
            2,
            2
          ],
          "Vector3D.orthogonal()": [
            4,
            4,
            4
          ],
          "Vector3D.angle(Vector3D, Vector3D)": [
            4,
            4,
            4
          ],
          "Vector3D.equals(Object)": [
            4,
            4,
            4
          ],
          "Vector3D.hashCode()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DTest.java"
    },
    {
      "src_name": "SimplexSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java",
      "class_declaration": "@Deprecated\npublic class SimplexSolver extends AbstractLinearOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SimplexSolver.doIteration(final, SimplexTableau)": [
            2,
            2,
            2
          ],
          "SimplexSolver.solvePhase1(final, SimplexTableau)": [
            3,
            3,
            3
          ],
          "SimplexSolver.doOptimize()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java"
    },
    {
      "src_name": "GLSMultipleLinearRegression",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/regression/GLSMultipleLinearRegression.java",
      "class_declaration": "public class GLSMultipleLinearRegression extends AbstractMultipleLinearRegression ",
      "methods_under_test": {
        "=1": {
          "GLSMultipleLinearRegression.newSampleData(double[], double[][], double[][])": [
            1,
            1,
            1
          ],
          "GLSMultipleLinearRegression.newCovarianceData(double[][])": [
            1,
            1,
            1
          ],
          "GLSMultipleLinearRegression.calculateBeta()": [
            1,
            1,
            1
          ],
          "GLSMultipleLinearRegression.calculateBetaVariance()": [
            1,
            1,
            1
          ],
          "GLSMultipleLinearRegression.calculateErrorVariance()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GLSMultipleLinearRegression.getOmegaInverse()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/regression/GLSMultipleLinearRegressionTest.java"
    },
    {
      "src_name": "GeometricMean",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/moment/GeometricMean.java",
      "class_declaration": "public class GeometricMean extends AbstractStorelessUnivariateStatistic implements Serializable ",
      "methods_under_test": {
        "=1": {
          "GeometricMean.copy()": [
            1,
            1,
            1
          ],
          "GeometricMean.increment(final, double)": [
            1,
            1,
            1
          ],
          "GeometricMean.clear()": [
            1,
            1,
            1
          ],
          "GeometricMean.evaluate(final, double[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "GeometricMean.setSumLogImpl(StorelessUnivariateStatistic)": [
            1,
            1,
            1
          ],
          "GeometricMean.copy(GeometricMean, GeometricMean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GeometricMean.getResult()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/moment/GeometricMeanTest.java"
    },
    {
      "src_name": "LogNormalDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/LogNormalDistribution.java",
      "class_declaration": "public class LogNormalDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {
          "LogNormalDistribution.cumulativeProbability(double, double)": [
            1,
            1,
            1
          ],
          "LogNormalDistribution.getNumericalMean()": [
            1,
            1,
            1
          ],
          "LogNormalDistribution.getNumericalVariance()": [
            1,
            1,
            1
          ],
          "LogNormalDistribution.sample()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LogNormalDistribution.density(double)": [
            2,
            2,
            2
          ],
          "LogNormalDistribution.cumulativeProbability(double)": [
            3,
            3,
            3
          ],
          "LogNormalDistribution.probability(double, double)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/LogNormalDistributionTest.java"
    },
    {
      "src_name": "LevyDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/LevyDistribution.java",
      "class_declaration": "public class LevyDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "LevyDistribution.density(final, double)": [
            2,
            2,
            2
          ],
          "LevyDistribution.cumulativeProbability(final, double)": [
            2,
            2,
            2
          ],
          "LevyDistribution.inverseCumulativeProbability(final, double)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/LevyDistributionTest.java"
    },
    {
      "src_name": "Rotation",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java",
      "class_declaration": "public class Rotation implements Serializable ",
      "methods_under_test": {
        "=1": {
          "Rotation.revert()": [
            1,
            1,
            1
          ],
          "Rotation.getMatrix()": [
            1,
            1,
            1
          ],
          "Rotation.applyTo(Vector3D)": [
            1,
            1,
            1
          ],
          "Rotation.applyTo(final, double[], final, double[])": [
            1,
            1,
            1
          ],
          "Rotation.applyInverseTo(Vector3D)": [
            1,
            1,
            1
          ],
          "Rotation.applyInverseTo(final, double[], final, double[])": [
            1,
            1,
            1
          ],
          "Rotation.applyTo(Rotation)": [
            1,
            1,
            1
          ],
          "Rotation.applyInverseTo(Rotation)": [
            1,
            1,
            1
          ],
          "Rotation.distance(Rotation, Rotation)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Rotation.getAxis()": [
            3,
            3,
            3
          ],
          "Rotation.getAngle()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {
          "Rotation.getAngles(RotationOrder)": [
            25,
            25,
            25
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationTest.java"
    },
    {
      "src_name": "HaltonSequenceGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java",
      "class_declaration": "public class HaltonSequenceGenerator implements RandomVectorGenerator ",
      "methods_under_test": {
        "=1": {
          "HaltonSequenceGenerator.scramble(final, int, final, int, final, int, final, int)": [
            1,
            1,
            1
          ],
          "HaltonSequenceGenerator.skipTo(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "HaltonSequenceGenerator.nextVector()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/HaltonSequenceGeneratorTest.java"
    },
    {
      "src_name": "BigReal",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/BigReal.java",
      "class_declaration": "public class BigReal implements FieldElement<BigReal>, Comparable<BigReal>, Serializable ",
      "methods_under_test": {
        "=1": {
          "BigReal.add(BigReal)": [
            1,
            1,
            1
          ],
          "BigReal.subtract(BigReal)": [
            1,
            1,
            1
          ],
          "BigReal.negate()": [
            1,
            1,
            1
          ],
          "BigReal.multiply(BigReal)": [
            1,
            1,
            1
          ],
          "BigReal.multiply(final, int)": [
            1,
            1,
            1
          ],
          "BigReal.compareTo(BigReal)": [
            1,
            1,
            1
          ],
          "BigReal.doubleValue()": [
            1,
            1,
            1
          ],
          "BigReal.bigDecimalValue()": [
            1,
            1,
            1
          ],
          "BigReal.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BigReal.divide(BigReal)": [
            2,
            2,
            2
          ],
          "BigReal.reciprocal()": [
            2,
            2,
            2
          ],
          "BigReal.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/BigRealTest.java"
    },
    {
      "src_name": "BinaryChromosome",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/BinaryChromosome.java",
      "class_declaration": "public abstract class BinaryChromosome extends AbstractListChromosome<Integer> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/BinaryChromosomeTest.java"
    },
    {
      "src_name": "EuclideanIntegerPoint",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/clustering/EuclideanIntegerPoint.java",
      "class_declaration": "@Deprecated\npublic class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable ",
      "methods_under_test": {
        "=1": {
          "EuclideanIntegerPoint.distanceFrom(final, EuclideanIntegerPoint)": [
            1,
            1,
            1
          ],
          "EuclideanIntegerPoint.hashCode()": [
            1,
            1,
            1
          ],
          "EuclideanIntegerPoint.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EuclideanIntegerPoint.centroidOf(final, Collection<EuclideanIntegerPoint>)": [
            4,
            4,
            4
          ],
          "EuclideanIntegerPoint.equals(final, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/clustering/EuclideanIntegerPointTest.java"
    },
    {
      "src_name": "SimpleValueChecker",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/SimpleValueChecker.java",
      "class_declaration": "@Deprecated\npublic class SimpleValueChecker extends AbstractConvergenceChecker<PointValuePair> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/SimpleValueCheckerTest.java"
    },
    {
      "src_name": "KalmanFilter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/filter/KalmanFilter.java",
      "class_declaration": "public class KalmanFilter ",
      "methods_under_test": {
        "=1": {
          "KalmanFilter.predict()": [
            1,
            1,
            1
          ],
          "KalmanFilter.predict(final, double[])": [
            1,
            1,
            1
          ],
          "KalmanFilter.correct(final, double[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "KalmanFilter.predict(final, RealVector)": [
            3,
            3,
            3
          ],
          "KalmanFilter.correct(final, RealVector)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/filter/KalmanFilterTest.java"
    },
    {
      "src_name": "QRDecomposition",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/QRDecomposition.java",
      "class_declaration": "public class QRDecomposition ",
      "methods_under_test": {
        "=1": {
          "QRDecomposition.decompose(double[][])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "QRDecomposition.performHouseholderReflection(int, double[][])": [
            3,
            3,
            3
          ],
          "QRDecomposition.getR()": [
            4,
            4,
            4
          ],
          "QRDecomposition.getQ()": [
            2,
            2,
            2
          ],
          "QRDecomposition.getQT()": [
            8,
            8,
            8
          ],
          "QRDecomposition.getH()": [
            4,
            4,
            4
          ],
          "Solver.solve(RealVector)": [
            8,
            8,
            8
          ]
        },
        "11-20": {
          "Solver.solve(RealMatrix)": [
            14,
            14,
            14
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/QRDecompositionTest.java"
    },
    {
      "src_name": "HypergeometricDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
      "class_declaration": "public class HypergeometricDistribution extends AbstractIntegerDistribution ",
      "methods_under_test": {
        "=1": {
          "HypergeometricDistribution.calculateNumericalVariance()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "HypergeometricDistribution.cumulativeProbability(int)": [
            3,
            3,
            3
          ],
          "HypergeometricDistribution.probability(int)": [
            2,
            2,
            2
          ],
          "HypergeometricDistribution.upperCumulativeProbability(int)": [
            3,
            3,
            3
          ],
          "HypergeometricDistribution.getNumericalVariance()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java"
    },
    {
      "src_name": "DimensionMismatchException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/DimensionMismatchException.java",
      "class_declaration": "public class DimensionMismatchException extends MathIllegalNumberException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/exception/DimensionMismatchExceptionTest.java"
    },
    {
      "src_name": "FixedElapsedTime",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/FixedElapsedTime.java",
      "class_declaration": "public class FixedElapsedTime implements StoppingCondition ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "FixedElapsedTime.isSatisfied(final, Population)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/FixedElapsedTimeTest.java"
    },
    {
      "src_name": "RandomGeneratorFactory",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/RandomGeneratorFactory.java",
      "class_declaration": "public class RandomGeneratorFactory ",
      "methods_under_test": {
        "=1": {
          "RandomGeneratorFactory.createRandomGenerator(final, Random)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "RandomGeneratorFactory.convertToLong(int[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/RandomGeneratorFactoryTest.java"
    },
    {
      "src_name": "TricubicSplineInterpolatingFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunction.java",
      "class_declaration": "public class TricubicSplineInterpolatingFunction implements TrivariateFunction ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "TricubicSplineInterpolatingFunction.value(double, double, double)": [
            4,
            4,
            4
          ],
          "TricubicSplineFunction.value(double, double, double)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java"
    },
    {
      "src_name": "MillerUpdatingRegression",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/regression/MillerUpdatingRegression.java",
      "class_declaration": "public class MillerUpdatingRegression implements UpdatingMultipleLinearRegression ",
      "methods_under_test": {
        "=1": {
          "MillerUpdatingRegression.hasIntercept()": [
            1,
            1,
            1
          ],
          "MillerUpdatingRegression.regress()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MillerUpdatingRegression.addObservation(final, double[], final, double)": [
            3,
            3,
            3
          ],
          "MillerUpdatingRegression.addObservations(double[][], double[])": [
            4,
            4,
            4
          ],
          "MillerUpdatingRegression.clear()": [
            2,
            2,
            2
          ],
          "MillerUpdatingRegression.getDiagonalOfHatMatrix(double[])": [
            6,
            6,
            6
          ]
        },
        "11-20": {
          "MillerUpdatingRegression.getPartialCorrelations(int)": [
            12,
            12,
            12
          ],
          "MillerUpdatingRegression.regress(int)": [
            15,
            15,
            15
          ]
        },
        ">20": {
          "MillerUpdatingRegression.regress(int[])": [
            21,
            21,
            21
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/regression/MillerUpdatingRegressionTest.java"
    },
    {
      "src_name": "SubLine",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java",
      "class_declaration": "public class SubLine ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SubLine.getSegments()": [
            2,
            2,
            2
          ],
          "SubLine.intersection(final, SubLine, final, boolean)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java"
    },
    {
      "src_name": "Logistic",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Logistic.java",
      "class_declaration": "public class Logistic implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Logistic.value(double)": [
            1,
            1,
            1
          ],
          "Logistic.derivative()": [
            1,
            1,
            1
          ],
          "Parametric.value(double)": [
            1,
            1,
            1
          ],
          "Parametric.gradient(double)": [
            1,
            1,
            1
          ],
          "Logistic.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/function/LogisticTest.java"
    },
    {
      "src_name": "SecondMoment",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/moment/SecondMoment.java",
      "class_declaration": "public class SecondMoment extends FirstMoment implements Serializable ",
      "methods_under_test": {
        "=1": {
          "SecondMoment.clear()": [
            1,
            1,
            1
          ],
          "SecondMoment.copy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SecondMoment.increment(final, double)": [
            2,
            2,
            2
          ],
          "SecondMoment.copy(SecondMoment, SecondMoment)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/moment/SecondMomentTest.java"
    },
    {
      "src_name": "SparseRealMatrix",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/SparseRealMatrix.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/SparseRealMatrixTest.java"
    },
    {
      "src_name": "EulerIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/EulerIntegrator.java",
      "class_declaration": "public class EulerIntegrator extends RungeKuttaIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/EulerIntegratorTest.java"
    },
    {
      "src_name": "SimplexSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java",
      "class_declaration": "public class SimplexSolver extends LinearOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SimplexSolver.doIteration(final, SimplexTableau)": [
            2,
            2,
            2
          ],
          "SimplexSolver.solvePhase1(final, SimplexTableau)": [
            3,
            3,
            3
          ],
          "SimplexSolver.doOptimize()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java"
    },
    {
      "src_name": "Well512a",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/Well512a.java",
      "class_declaration": "public class Well512a extends AbstractWell ",
      "methods_under_test": {
        "=1": {
          "Well512a.next(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/Well512aTest.java"
    },
    {
      "src_name": "VectorialMean",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/moment/VectorialMean.java",
      "class_declaration": "public class VectorialMean implements Serializable ",
      "methods_under_test": {
        "=1": {
          "VectorialMean.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "VectorialMean.increment(double[])": [
            2,
            2,
            2
          ],
          "VectorialMean.getResult()": [
            2,
            2,
            2
          ],
          "VectorialMean.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/moment/VectorialMeanTest.java"
    },
    {
      "src_name": "MidPointIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/MidPointIntegrator.java",
      "class_declaration": "public class MidPointIntegrator extends BaseAbstractUnivariateIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "MidPointIntegrator.doIntegrate()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/integration/MidPointIntegratorTest.java"
    },
    {
      "src_name": "CauchyDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/CauchyDistribution.java",
      "class_declaration": "public class CauchyDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {
          "CauchyDistribution.cumulativeProbability(double)": [
            1,
            1,
            1
          ],
          "CauchyDistribution.density(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CauchyDistribution.inverseCumulativeProbability(double)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/CauchyDistributionTest.java"
    },
    {
      "src_name": "LevenbergMarquardtOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java",
      "class_declaration": "public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer<LevenbergMarquardtOptimizer> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java"
    },
    {
      "src_name": "FastFourierTransformer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/transform/FastFourierTransformer.java",
      "class_declaration": "public class FastFourierTransformer implements Serializable ",
      "methods_under_test": {
        "=1": {
          "FastFourierTransformer.transform(final, double[], final, TransformType)": [
            1,
            1,
            1
          ],
          "FastFourierTransformer.transform(final, UnivariateFunction, final, double, final, double, final, int, final, TransformType)": [
            1,
            1,
            1
          ],
          "FastFourierTransformer.transform(final, Complex[], final, TransformType)": [
            1,
            1,
            1
          ],
          "MultiDimensionalComplexMatrix.clone()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FastFourierTransformer.mdfft(Object, TransformType)": [
            2,
            2,
            2
          ],
          "FastFourierTransformer.mdfft(MultiDimensionalComplexMatrix, TransformType, int, int[])": [
            6,
            6,
            6
          ],
          "MultiDimensionalComplexMatrix.get()": [
            5,
            5,
            5
          ],
          "MultiDimensionalComplexMatrix.set(Complex)": [
            5,
            5,
            5
          ]
        },
        "11-20": {
          "FastFourierTransformer.transformInPlace(final, double[][], final, DftNormalization, final, TransformType)": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/transform/FastFourierTransformerTest.java"
    },
    {
      "src_name": "FirstOrderConverter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/FirstOrderConverter.java",
      "class_declaration": "public class FirstOrderConverter implements FirstOrderDifferentialEquations ",
      "methods_under_test": {
        "=1": {
          "FirstOrderConverter.computeDerivatives(final, double, final, double[], final, double[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/FirstOrderConverterTest.java"
    },
    {
      "src_name": "ClassicalRungeKuttaIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/ClassicalRungeKuttaIntegrator.java",
      "class_declaration": "public class ClassicalRungeKuttaIntegrator extends RungeKuttaIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java"
    },
    {
      "src_name": "Mean",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/moment/Mean.java",
      "class_declaration": "public class Mean extends AbstractStorelessUnivariateStatistic implements Serializable, WeightedEvaluation ",
      "methods_under_test": {
        "=1": {
          "Mean.evaluate(final, double[], final, double[])": [
            1,
            1,
            1
          ],
          "Mean.copy()": [
            1,
            1,
            1
          ],
          "Mean.copy(Mean, Mean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Mean.increment(final, double)": [
            2,
            2,
            2
          ],
          "Mean.clear()": [
            2,
            2,
            2
          ],
          "Mean.evaluate(final, double[], final, int, final, int)": [
            3,
            3,
            3
          ],
          "Mean.evaluate(final, double[], final, double[], final, int, final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/moment/MeanTest.java"
    },
    {
      "src_name": "MathArrays",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/MathArrays.java",
      "class_declaration": "public class MathArrays ",
      "methods_under_test": {
        "=1": {
          "MathArrays.scaleInPlace(double, final, double[])": [
            1,
            1,
            1
          ],
          "MathArrays.isMonotonic(double[], OrderDirection, boolean)": [
            1,
            1,
            1
          ],
          "MathArrays.checkOrder(double[], OrderDirection, boolean)": [
            1,
            1,
            1
          ],
          "MathArrays.checkOrder(double[])": [
            1,
            1,
            1
          ],
          "MathArrays.checkRectangular(final, long[][])": [
            1,
            1,
            1
          ],
          "MathArrays.checkPositive(final, double[])": [
            1,
            1,
            1
          ],
          "MathArrays.checkNonNegative(final, long[])": [
            1,
            1,
            1
          ],
          "MathArrays.checkNonNegative(final, long[][])": [
            1,
            1,
            1
          ],
          "MathArrays.sortInPlace(double[])": [
            1,
            1,
            1
          ],
          "MathArrays.copyOf(int[])": [
            1,
            1,
            1
          ],
          "MathArrays.copyOf(double[])": [
            1,
            1,
            1
          ],
          "MathArrays.copyOf(int[], int)": [
            1,
            1,
            1
          ],
          "MathArrays.copyOf(double[], int)": [
            1,
            1,
            1
          ],
          "MathArrays.buildArray(final, Field<T>, final, int)": [
            1,
            1,
            1
          ],
          "MathArrays.shuffle(int[], int, Position)": [
            1,
            1,
            1
          ],
          "MathArrays.shuffle(int[], RandomGenerator)": [
            1,
            1,
            1
          ],
          "MathArrays.shuffle(int[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MathArrays.scale(double, final, double[])": [
            2,
            2,
            2
          ],
          "MathArrays.ebeAdd(double[], double[])": [
            3,
            3,
            3
          ],
          "MathArrays.ebeSubtract(double[], double[])": [
            3,
            3,
            3
          ],
          "MathArrays.ebeMultiply(double[], double[])": [
            3,
            3,
            3
          ],
          "MathArrays.ebeDivide(double[], double[])": [
            3,
            3,
            3
          ],
          "MathArrays.distance1(double[], double[])": [
            2,
            2,
            2
          ],
          "MathArrays.distance1(int[], int[])": [
            2,
            2,
            2
          ],
          "MathArrays.distance(double[], double[])": [
            2,
            2,
            2
          ],
          "MathArrays.distance(int[], int[])": [
            2,
            2,
            2
          ],
          "MathArrays.distanceInf(double[], double[])": [
            2,
            2,
            2
          ],
          "MathArrays.distanceInf(int[], int[])": [
            2,
            2,
            2
          ],
          "MathArrays.isMonotonic(T[], OrderDirection, boolean)": [
            10,
            10,
            10
          ],
          "MathArrays.safeNorm(double[])": [
            10,
            10,
            10
          ],
          "MathArrays.sortInPlace(double[], final, OrderDirection)": [
            9,
            9,
            9
          ],
          "MathArrays.linearCombination(final, double[], final, double[])": [
            7,
            7,
            7
          ],
          "MathArrays.linearCombination(final, double, final, double, final, double, final, double)": [
            2,
            2,
            2
          ],
          "MathArrays.linearCombination(final, double, final, double, final, double, final, double, final, double, final, double)": [
            2,
            2,
            2
          ],
          "MathArrays.linearCombination(final, double, final, double, final, double, final, double, final, double, final, double, final, double, final, double)": [
            2,
            2,
            2
          ],
          "MathArrays.equals(float[], float[])": [
            5,
            5,
            5
          ],
          "MathArrays.equalsIncludingNaN(float[], float[])": [
            5,
            5,
            5
          ],
          "MathArrays.equals(double[], double[])": [
            5,
            5,
            5
          ],
          "MathArrays.equalsIncludingNaN(double[], double[])": [
            5,
            5,
            5
          ],
          "MathArrays.normalizeArray(double[], double)": [
            9,
            9,
            9
          ],
          "MathArrays.buildArray(final, Field<T>, final, int, final, int)": [
            3,
            3,
            3
          ],
          "MathArrays.convolve(double[], double[])": [
            4,
            4,
            4
          ],
          "MathArrays.shuffle(int[], int, Position, RandomGenerator)": [
            7,
            7,
            7
          ]
        },
        "11-20": {
          "MathArrays.checkOrder(double[], OrderDirection, boolean, boolean)": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/MathArraysTest.java"
    },
    {
      "src_name": "CurveFitter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java",
      "class_declaration": "@Deprecated\npublic class CurveFitter <T extends ParametricUnivariateFunction> ",
      "methods_under_test": {
        "=1": {
          "CurveFitter.addObservedPoint(double, double)": [
            1,
            1,
            1
          ],
          "CurveFitter.addObservedPoint(double, double, double)": [
            1,
            1,
            1
          ],
          "CurveFitter.addObservedPoint(WeightedObservedPoint)": [
            1,
            1,
            1
          ],
          "CurveFitter.clearObservations()": [
            1,
            1,
            1
          ],
          "CurveFitter.fit(T, final, double[])": [
            1,
            1,
            1
          ],
          "OldTheoreticalValuesFunction.jacobian()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CurveFitter.fit(int, T, final, double[])": [
            3,
            3,
            3
          ],
          "OldTheoreticalValuesFunction.value(double[])": [
            2,
            2,
            2
          ],
          "TheoreticalValuesFunction.value(double[])": [
            2,
            2,
            2
          ],
          "TheoreticalValuesFunction.value(DerivativeStructure[])": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java"
    },
    {
      "src_name": "BetaDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/BetaDistribution.java",
      "class_declaration": "public class BetaDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {
          "BetaDistribution.getNumericalMean()": [
            1,
            1,
            1
          ],
          "BetaDistribution.getNumericalVariance()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BetaDistribution.density(double)": [
            7,
            7,
            7
          ],
          "BetaDistribution.cumulativeProbability(double)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/BetaDistributionTest.java"
    },
    {
      "src_name": "Covariance",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/correlation/Covariance.java",
      "class_declaration": "public class Covariance ",
      "methods_under_test": {
        "=1": {
          "Covariance.computeCovarianceMatrix(RealMatrix)": [
            1,
            1,
            1
          ],
          "Covariance.computeCovarianceMatrix(double[][], boolean)": [
            1,
            1,
            1
          ],
          "Covariance.computeCovarianceMatrix(double[][])": [
            1,
            1,
            1
          ],
          "Covariance.covariance(final, double[], final, double[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Covariance.computeCovarianceMatrix(RealMatrix, boolean)": [
            3,
            3,
            3
          ],
          "Covariance.covariance(final, double[], final, double[], boolean)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/correlation/CovarianceTest.java"
    },
    {
      "src_name": "RootsOfUnity",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/complex/RootsOfUnity.java",
      "class_declaration": "public class RootsOfUnity implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "RootsOfUnity.computeRoots(int)": [
            4,
            4,
            4
          ],
          "RootsOfUnity.getReal(int)": [
            3,
            3,
            3
          ],
          "RootsOfUnity.getImaginary(int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/complex/RootsOfUnityTest.java"
    },
    {
      "src_name": "UnivariatePeriodicInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/UnivariatePeriodicInterpolator.java",
      "class_declaration": "public class UnivariatePeriodicInterpolator implements UnivariateInterpolator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "UnivariatePeriodicInterpolator.interpolate(double[], double[])": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/interpolation/UnivariatePeriodicInterpolatorTest.java"
    },
    {
      "src_name": "AdamsMoultonIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/AdamsMoultonIntegrator.java",
      "class_declaration": "public class AdamsMoultonIntegrator extends AdamsIntegrator ",
      "methods_under_test": {
        "=1": {
          "Corrector.start(int, int, int, int, int, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AdamsMoultonIntegrator.integrate(final, ExpandableStatefulODE, final, double)": [
            10,
            10,
            10
          ],
          "Corrector.visit(int, int, double)": [
            3,
            3,
            3
          ],
          "Corrector.end()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/AdamsMoultonIntegratorTest.java"
    },
    {
      "src_name": "Chromosome",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/Chromosome.java",
      "class_declaration": "public abstract class Chromosome implements Comparable<Chromosome>,Fitness ",
      "methods_under_test": {
        "=1": {
          "Chromosome.compareTo(final, Chromosome)": [
            1,
            1,
            1
          ],
          "Chromosome.isSame(final, Chromosome)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Chromosome.getFitness()": [
            2,
            2,
            2
          ],
          "Chromosome.findSameChromosome(final, Population)": [
            3,
            3,
            3
          ],
          "Chromosome.searchForFitnessUpdate(final, Population)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/ChromosomeTest.java"
    },
    {
      "src_name": "RandomGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/RandomGenerator.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/TestRandomGenerator.java"
    },
    {
      "src_name": "SplineInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/SplineInterpolator.java",
      "class_declaration": "public class SplineInterpolator implements UnivariateInterpolator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SplineInterpolator.interpolate(double, [], double, [])": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/interpolation/SplineInterpolatorTest.java"
    },
    {
      "src_name": "OpenIntToDoubleHashMap",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java",
      "class_declaration": "public class OpenIntToDoubleHashMap implements Serializable ",
      "methods_under_test": {
        "=1": {
          "OpenIntToDoubleHashMap.iterator()": [
            1,
            1,
            1
          ],
          "OpenIntToDoubleHashMap.size()": [
            1,
            1,
            1
          ],
          "Iterator.hasNext()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "OpenIntToDoubleHashMap.get(final, int)": [
            5,
            5,
            5
          ],
          "OpenIntToDoubleHashMap.remove(final, int)": [
            5,
            5,
            5
          ],
          "OpenIntToDoubleHashMap.put(final, int, final, double)": [
            4,
            4,
            4
          ],
          "Iterator.key()": [
            3,
            3,
            3
          ],
          "Iterator.value()": [
            3,
            3,
            3
          ],
          "Iterator.advance()": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "OpenIntToDoubleHashMap.containsKey(final, int)": [
            15,
            15,
            15
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/OpenIntToDoubleHashMapTest.java"
    },
    {
      "src_name": "MultivariateSummaryStatistics",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/MultivariateSummaryStatistics.java",
      "class_declaration": "public class MultivariateSummaryStatistics implements StatisticalMultivariateSummary, Serializable ",
      "methods_under_test": {
        "=1": {
          "MultivariateSummaryStatistics.toString()": [
            1,
            1,
            1
          ],
          "MultivariateSummaryStatistics.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MultivariateSummaryStatistics.addValue(double[])": [
            2,
            2,
            2
          ],
          "MultivariateSummaryStatistics.getStandardDeviation()": [
            4,
            4,
            4
          ],
          "MultivariateSummaryStatistics.clear()": [
            2,
            2,
            2
          ],
          "MultivariateSummaryStatistics.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/MultivariateSummaryStatisticsTest.java"
    },
    {
      "src_name": "RealVector",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/RealVector.java",
      "class_declaration": "public abstract class RealVector ",
      "methods_under_test": {
        "=1": {
          "RealVector.checkVectorDimensions(RealVector)": [
            1,
            1,
            1
          ],
          "RealVector.checkVectorDimensions(int)": [
            1,
            1,
            1
          ],
          "RealVector.checkIndex(final, int)": [
            1,
            1,
            1
          ],
          "RealVector.getMinValue()": [
            1,
            1,
            1
          ],
          "RealVector.getMaxValue()": [
            1,
            1,
            1
          ],
          "RealVector.walkInOptimizedOrder(final, RealVectorPreservingVisitor)": [
            1,
            1,
            1
          ],
          "RealVector.walkInOptimizedOrder(final, RealVectorPreservingVisitor, final, int, final, int)": [
            1,
            1,
            1
          ],
          "RealVector.walkInOptimizedOrder(final, RealVectorChangingVisitor)": [
            1,
            1,
            1
          ],
          "RealVector.walkInOptimizedOrder(final, RealVectorChangingVisitor, final, int, final, int)": [
            1,
            1,
            1
          ],
          "RealVector.equals(Object)": [
            1,
            1,
            1
          ],
          "RealVector.hashCode()": [
            1,
            1,
            1
          ],
          "SparseEntryIterator.hasNext()": [
            1,
            1,
            1
          ],
          "SparseEntryIterator.remove()": [
            1,
            1,
            1
          ],
          "RealVector.unmodifiableRealVector(final, RealVector)": [
            1,
            1,
            1
          ],
          "RealVector.mapToSelf(UnivariateFunction)": [
            1,
            1,
            1
          ],
          "RealVector.map(UnivariateFunction)": [
            1,
            1,
            1
          ],
          "RealVector.iterator()": [
            1,
            1,
            1
          ],
          "RealVector.sparseIterator()": [
            1,
            1,
            1
          ],
          "RealVector.copy()": [
            1,
            1,
            1
          ],
          "RealVector.add(RealVector)": [
            1,
            1,
            1
          ],
          "RealVector.subtract(RealVector)": [
            1,
            1,
            1
          ],
          "RealVector.mapAdd(double)": [
            1,
            1,
            1
          ],
          "RealVector.mapAddToSelf(double)": [
            1,
            1,
            1
          ],
          "RealVector.mapSubtract(double)": [
            1,
            1,
            1
          ],
          "RealVector.mapSubtractToSelf(double)": [
            1,
            1,
            1
          ],
          "RealVector.mapMultiply(double)": [
            1,
            1,
            1
          ],
          "RealVector.mapMultiplyToSelf(double)": [
            1,
            1,
            1
          ],
          "RealVector.mapDivide(double)": [
            1,
            1,
            1
          ],
          "RealVector.mapDivideToSelf(double)": [
            1,
            1,
            1
          ],
          "RealVector.ebeMultiply(RealVector)": [
            1,
            1,
            1
          ],
          "RealVector.ebeDivide(RealVector)": [
            1,
            1,
            1
          ],
          "RealVector.dotProduct(RealVector)": [
            1,
            1,
            1
          ],
          "RealVector.cosine(RealVector)": [
            1,
            1,
            1
          ],
          "RealVector.getDistance(RealVector)": [
            1,
            1,
            1
          ],
          "RealVector.getL1Distance(RealVector)": [
            1,
            1,
            1
          ],
          "RealVector.getLInfDistance(RealVector)": [
            1,
            1,
            1
          ],
          "RealVector.unitVector()": [
            1,
            1,
            1
          ],
          "RealVector.unitize()": [
            1,
            1,
            1
          ],
          "RealVector.outerProduct(RealVector)": [
            1,
            1,
            1
          ],
          "RealVector.getEntry(int)": [
            1,
            1,
            1
          ],
          "RealVector.setEntry(int, double)": [
            1,
            1,
            1
          ],
          "RealVector.addToEntry(int, double)": [
            1,
            1,
            1
          ],
          "RealVector.append(RealVector)": [
            1,
            1,
            1
          ],
          "RealVector.append(double)": [
            1,
            1,
            1
          ],
          "RealVector.getSubVector(int, int)": [
            1,
            1,
            1
          ],
          "RealVector.setSubVector(int, RealVector)": [
            1,
            1,
            1
          ],
          "RealVector.toArray()": [
            1,
            1,
            1
          ],
          "RealVector.combine(double, double, RealVector)": [
            1,
            1,
            1
          ],
          "RealVector.combineToSelf(double, double, RealVector)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "RealVector.checkIndices(final, int, final, int)": [
            3,
            3,
            3
          ],
          "RealVector.getMinIndex()": [
            3,
            3,
            3
          ],
          "RealVector.getMaxIndex()": [
            3,
            3,
            3
          ],
          "RealVector.projection(final, RealVector)": [
            2,
            2,
            2
          ],
          "RealVector.walkInDefaultOrder(final, RealVectorPreservingVisitor)": [
            2,
            2,
            2
          ],
          "RealVector.walkInDefaultOrder(final, RealVectorPreservingVisitor, final, int, final, int)": [
            2,
            2,
            2
          ],
          "RealVector.walkInDefaultOrder(final, RealVectorChangingVisitor)": [
            2,
            2,
            2
          ],
          "RealVector.walkInDefaultOrder(final, RealVectorChangingVisitor, final, int, final, int)": [
            2,
            2,
            2
          ],
          "SparseEntryIterator.advance(Entry)": [
            4,
            4,
            4
          ],
          "SparseEntryIterator.next()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/RealVectorTest.java"
    },
    {
      "src_name": "StepNormalizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/sampling/StepNormalizer.java",
      "class_declaration": "public class StepNormalizer implements StepHandler ",
      "methods_under_test": {
        "=1": {
          "StepNormalizer.init(double, double[], double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StepNormalizer.handleStep(final, StepInterpolator, final, boolean)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/sampling/StepNormalizerTest.java"
    },
    {
      "src_name": "DormandPrince853Integrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator.java",
      "class_declaration": "public class DormandPrince853Integrator extends EmbeddedRungeKuttaIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "DormandPrince853Integrator.estimateError(final, double[][], final, double[], final, double[], final, double)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java"
    },
    {
      "src_name": "CanberraDistance",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/distance/CanberraDistance.java",
      "class_declaration": "public class CanberraDistance implements DistanceMeasure ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "CanberraDistance.compute(double[], double[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ml/distance/CanberraDistanceTest.java"
    },
    {
      "src_name": "NonLinearConjugateGradientOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java",
      "class_declaration": "public class NonLinearConjugateGradientOptimizer extends GradientMultivariateOptimizer ",
      "methods_under_test": {
        "=1": {
          "NonLinearConjugateGradientOptimizer.optimize()": [
            1,
            1,
            1
          ],
          "IdentityPreconditioner.precondition(double[], double[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NonLinearConjugateGradientOptimizer.doOptimize()": [
            5,
            5,
            5
          ],
          "NonLinearConjugateGradientOptimizer.parseOptimizationData()": [
            3,
            3,
            3
          ],
          "LineSearchFunction.value(double)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java"
    },
    {
      "src_name": "ThirdMoment",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/moment/ThirdMoment.java",
      "class_declaration": "class ThirdMoment extends SecondMoment implements Serializable ",
      "methods_under_test": {
        "=1": {
          "ThirdMoment.clear()": [
            1,
            1,
            1
          ],
          "ThirdMoment.copy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ThirdMoment.increment(final, double)": [
            2,
            2,
            2
          ],
          "ThirdMoment.copy(ThirdMoment, ThirdMoment)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/moment/ThirdMomentTest.java"
    },
    {
      "src_name": "UniformIntegerDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java",
      "class_declaration": "public class UniformIntegerDistribution extends AbstractIntegerDistribution ",
      "methods_under_test": {
        "=1": {
          "UniformIntegerDistribution.getNumericalVariance()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UniformIntegerDistribution.probability(int)": [
            2,
            2,
            2
          ],
          "UniformIntegerDistribution.cumulativeProbability(int)": [
            3,
            3,
            3
          ],
          "UniformIntegerDistribution.sample()": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/UniformIntegerDistributionTest.java"
    },
    {
      "src_name": "PascalDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/PascalDistribution.java",
      "class_declaration": "public class PascalDistribution extends AbstractIntegerDistribution ",
      "methods_under_test": {
        "=1": {
          "PascalDistribution.getNumericalMean()": [
            1,
            1,
            1
          ],
          "PascalDistribution.getNumericalVariance()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PascalDistribution.probability(int)": [
            2,
            2,
            2
          ],
          "PascalDistribution.cumulativeProbability(int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/PascalDistributionTest.java"
    },
    {
      "src_name": "ComplexFormat",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/complex/ComplexFormat.java",
      "class_declaration": "public class ComplexFormat ",
      "methods_under_test": {
        "=1": {
          "ComplexFormat.format(Complex)": [
            1,
            1,
            1
          ],
          "ComplexFormat.format(Double)": [
            1,
            1,
            1
          ],
          "ComplexFormat.getInstance(Locale)": [
            1,
            1,
            1
          ],
          "ComplexFormat.getInstance(String, Locale)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ComplexFormat.format(Complex, StringBuffer, FieldPosition)": [
            3,
            3,
            3
          ],
          "ComplexFormat.format(Object, StringBuffer, FieldPosition)": [
            3,
            3,
            3
          ],
          "ComplexFormat.parse(String)": [
            2,
            2,
            2
          ],
          "ComplexFormat.parse(String, ParsePosition)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/complex/ComplexFormatTest.java"
    },
    {
      "src_name": "ComplexField",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/complex/ComplexField.java",
      "class_declaration": "public class ComplexField implements Field<Complex>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/complex/ComplexFieldTest.java"
    },
    {
      "src_name": "SimplexTableau",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/linear/SimplexTableau.java",
      "class_declaration": "class SimplexTableau implements Serializable ",
      "methods_under_test": {
        "=1": {
          "SimplexTableau.divideRow(final, int, final, double)": [
            1,
            1,
            1
          ],
          "SimplexTableau.subtractRow(final, int, final, int, final, double)": [
            1,
            1,
            1
          ],
          "SimplexTableau.getEntry(final, int, final, int)": [
            1,
            1,
            1
          ],
          "SimplexTableau.setEntry(final, int, final, int, final, double)": [
            1,
            1,
            1
          ],
          "SimplexTableau.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SimplexTableau.initializeColumnLabels()": [
            6,
            6,
            6
          ],
          "SimplexTableau.createTableau(final, boolean)": [
            8,
            8,
            8
          ],
          "SimplexTableau.normalizeConstraints(Collection<LinearConstraint>)": [
            2,
            2,
            2
          ],
          "SimplexTableau.getInvertedCoefficientSum(final, RealVector)": [
            2,
            2,
            2
          ],
          "SimplexTableau.getBasicRow(final, int)": [
            4,
            4,
            4
          ],
          "SimplexTableau.dropPhase1Objective()": [
            10,
            10,
            10
          ],
          "SimplexTableau.getSolution()": [
            5,
            5,
            5
          ],
          "SimplexTableau.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/linear/SimplexTableauTest.java"
    },
    {
      "src_name": "HermiteInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolator.java",
      "class_declaration": "public class HermiteInterpolator implements UnivariateDifferentiableVectorFunction ",
      "methods_under_test": {
        "=1": {
          "HermiteInterpolator.addSamplePoint(final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "HermiteInterpolator.getPolynomials()": [
            4,
            4,
            4
          ],
          "HermiteInterpolator.value(double)": [
            3,
            3,
            3
          ],
          "HermiteInterpolator.value(final, DerivativeStructure)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/interpolation/HermiteInterpolatorTest.java"
    },
    {
      "src_name": "MultivariateFunctionMappingAdapter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/direct/MultivariateFunctionMappingAdapter.java",
      "class_declaration": "@Deprecated\npublic class MultivariateFunctionMappingAdapter implements MultivariateFunction ",
      "methods_under_test": {
        "=1": {
          "NoBoundsMapper.unboundedToBounded(final, double)": [
            1,
            1,
            1
          ],
          "NoBoundsMapper.boundedToUnbounded(final, double)": [
            1,
            1,
            1
          ],
          "LowerBoundMapper.unboundedToBounded(final, double)": [
            1,
            1,
            1
          ],
          "LowerBoundMapper.boundedToUnbounded(final, double)": [
            1,
            1,
            1
          ],
          "UpperBoundMapper.unboundedToBounded(final, double)": [
            1,
            1,
            1
          ],
          "UpperBoundMapper.boundedToUnbounded(final, double)": [
            1,
            1,
            1
          ],
          "LowerUpperBoundMapper.unboundedToBounded(final, double)": [
            1,
            1,
            1
          ],
          "LowerUpperBoundMapper.boundedToUnbounded(final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MultivariateFunctionMappingAdapter.unboundedToBounded(double[])": [
            2,
            2,
            2
          ],
          "MultivariateFunctionMappingAdapter.boundedToUnbounded(double[])": [
            2,
            2,
            2
          ],
          "MultivariateFunctionMappingAdapter.value(double[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/direct/MultivariateFunctionMappingAdapterTest.java"
    },
    {
      "src_name": "DescriptiveStatistics",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatistics.java",
      "class_declaration": "public class DescriptiveStatistics implements StatisticalSummary, Serializable ",
      "methods_under_test": {
        "=1": {
          "DescriptiveStatistics.replaceMostRecentValue(double)": [
            1,
            1,
            1
          ],
          "DescriptiveStatistics.clear()": [
            1,
            1,
            1
          ],
          "DescriptiveStatistics.getSortedValues()": [
            1,
            1,
            1
          ],
          "DescriptiveStatistics.getElement(int)": [
            1,
            1,
            1
          ],
          "DescriptiveStatistics.apply(UnivariateStatistic)": [
            1,
            1,
            1
          ],
          "DescriptiveStatistics.copy()": [
            1,
            1,
            1
          ],
          "DescriptiveStatistics.copy(DescriptiveStatistics, DescriptiveStatistics)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DescriptiveStatistics.addValue(double)": [
            5,
            5,
            5
          ],
          "DescriptiveStatistics.removeMostRecentValue()": [
            2,
            2,
            2
          ],
          "DescriptiveStatistics.getStandardDeviation()": [
            3,
            3,
            3
          ],
          "DescriptiveStatistics.setWindowSize(int)": [
            3,
            3,
            3
          ],
          "DescriptiveStatistics.getPercentile(double)": [
            5,
            5,
            5
          ],
          "DescriptiveStatistics.toString()": [
            2,
            2,
            2
          ],
          "DescriptiveStatistics.setPercentileImpl(UnivariateStatistic)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/DescriptiveStatisticsTest.java"
    },
    {
      "src_name": "OpenMapRealMatrix",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/OpenMapRealMatrix.java",
      "class_declaration": "@Deprecated\npublic class OpenMapRealMatrix extends AbstractRealMatrix implements SparseRealMatrix, Serializable ",
      "methods_under_test": {
        "=1": {
          "OpenMapRealMatrix.copy()": [
            1,
            1,
            1
          ],
          "OpenMapRealMatrix.createMatrix(int, int)": [
            1,
            1,
            1
          ],
          "OpenMapRealMatrix.getEntry(int, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "OpenMapRealMatrix.add(OpenMapRealMatrix)": [
            2,
            2,
            2
          ],
          "OpenMapRealMatrix.subtract(final, RealMatrix)": [
            3,
            3,
            3
          ],
          "OpenMapRealMatrix.subtract(OpenMapRealMatrix)": [
            2,
            2,
            2
          ],
          "OpenMapRealMatrix.multiply(final, RealMatrix)": [
            5,
            5,
            5
          ],
          "OpenMapRealMatrix.multiply(OpenMapRealMatrix)": [
            5,
            5,
            5
          ],
          "OpenMapRealMatrix.setEntry(int, int, double)": [
            3,
            3,
            3
          ],
          "OpenMapRealMatrix.addToEntry(int, int, double)": [
            3,
            3,
            3
          ],
          "OpenMapRealMatrix.multiplyEntry(int, int, double)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/OpenMapRealMatrixTest.java"
    },
    {
      "src_name": "FDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/FDistribution.java",
      "class_declaration": "public class FDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {
          "FDistribution.density(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FDistribution.cumulativeProbability(double)": [
            2,
            2,
            2
          ],
          "FDistribution.getNumericalMean()": [
            2,
            2,
            2
          ],
          "FDistribution.getNumericalVariance()": [
            2,
            2,
            2
          ],
          "FDistribution.calculateNumericalVariance()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java"
    },
    {
      "src_name": "MultivariateDifferentiableVectorMultiStartOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizer.java",
      "class_declaration": "@Deprecated\npublic class MultivariateDifferentiableVectorMultiStartOptimizer extends BaseMultivariateVectorMultiStartOptimizer<MultivariateDifferentiableVectorFunction> implements MultivariateDifferentiableVectorOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java"
    },
    {
      "src_name": "MultivariateNormalDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
      "class_declaration": "public class MultivariateNormalDistribution extends AbstractMultivariateRealDistribution ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "MultivariateNormalDistribution.density(final, double[])": [
            2,
            2,
            2
          ],
          "MultivariateNormalDistribution.getStandardDeviations()": [
            2,
            2,
            2
          ],
          "MultivariateNormalDistribution.sample()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java"
    },
    {
      "src_name": "EventState",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/events/EventState.java",
      "class_declaration": "public class EventState ",
      "methods_under_test": {
        "=1": {
          "EventState.setExpandable(final, ExpandableStatefulODE)": [
            1,
            1,
            1
          ],
          "EventState.stop()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EventState.reinitializeBegin(final, StepInterpolator)": [
            2,
            2,
            2
          ],
          "EventState.evaluateStep(final, StepInterpolator)": [
            10,
            10,
            10
          ],
          "EventState.stepAccepted(final, double, final, double[])": [
            3,
            3,
            3
          ],
          "EventState.reset(final, double, final, double[])": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/events/EventStateTest.java"
    },
    {
      "src_name": "SymmLQ",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/SymmLQ.java",
      "class_declaration": "public class SymmLQ extends PreconditionedIterativeLinearSolver ",
      "methods_under_test": {
        "=1": {
          "State.hasConverged()": [
            1,
            1,
            1
          ],
          "State.bEqualsNullVector()": [
            1,
            1,
            1
          ],
          "State.betaEqualsZero()": [
            1,
            1,
            1
          ],
          "SymmLQ.solve(final, RealLinearOperator, final, RealLinearOperator, final, RealVector)": [
            1,
            1,
            1
          ],
          "SymmLQ.solve(final, RealLinearOperator, final, RealLinearOperator, final, RealVector, final, boolean, final, double)": [
            1,
            1,
            1
          ],
          "SymmLQ.solve(final, RealLinearOperator, final, RealLinearOperator, final, RealVector, final, RealVector)": [
            1,
            1,
            1
          ],
          "SymmLQ.solve(final, RealLinearOperator, final, RealVector)": [
            1,
            1,
            1
          ],
          "SymmLQ.solve(final, RealLinearOperator, final, RealVector, final, boolean, final, double)": [
            1,
            1,
            1
          ],
          "SymmLQ.solve(final, RealLinearOperator, final, RealVector, final, RealVector)": [
            1,
            1,
            1
          ],
          "SymmLQ.solveInPlace(final, RealLinearOperator, final, RealLinearOperator, final, RealVector, final, RealVector)": [
            1,
            1,
            1
          ],
          "SymmLQ.solveInPlace(final, RealLinearOperator, final, RealVector, final, RealVector)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "State.refineSolution(final, RealVector)": [
            7,
            7,
            7
          ],
          "State.init()": [
            8,
            8,
            8
          ],
          "State.update()": [
            4,
            4,
            4
          ],
          "SymmLQ.solveInPlace(final, RealLinearOperator, final, RealLinearOperator, final, RealVector, final, RealVector, final, boolean, final, double)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/SymmLQTest.java"
    },
    {
      "src_name": "RealVectorFormat",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/RealVectorFormat.java",
      "class_declaration": "public class RealVectorFormat ",
      "methods_under_test": {
        "=1": {
          "RealVectorFormat.getInstance(final, Locale)": [
            1,
            1,
            1
          ],
          "RealVectorFormat.format(RealVector)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "RealVectorFormat.format(RealVector, StringBuffer, FieldPosition)": [
            3,
            3,
            3
          ],
          "RealVectorFormat.parse(String)": [
            2,
            2,
            2
          ],
          "RealVectorFormat.parse(String, ParsePosition)": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/RealVectorFormatTest.java"
    },
    {
      "src_name": "Decimal64",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/Decimal64.java",
      "class_declaration": "public class Decimal64 extends Number implements RealFieldElement<Decimal64>, Comparable<Decimal64> ",
      "methods_under_test": {
        "=1": {
          "Decimal64.add(final, Decimal64)": [
            1,
            1,
            1
          ],
          "Decimal64.subtract(final, Decimal64)": [
            1,
            1,
            1
          ],
          "Decimal64.negate()": [
            1,
            1,
            1
          ],
          "Decimal64.multiply(final, Decimal64)": [
            1,
            1,
            1
          ],
          "Decimal64.multiply(final, int)": [
            1,
            1,
            1
          ],
          "Decimal64.divide(final, Decimal64)": [
            1,
            1,
            1
          ],
          "Decimal64.reciprocal()": [
            1,
            1,
            1
          ],
          "Decimal64.byteValue()": [
            1,
            1,
            1
          ],
          "Decimal64.shortValue()": [
            1,
            1,
            1
          ],
          "Decimal64.intValue()": [
            1,
            1,
            1
          ],
          "Decimal64.longValue()": [
            1,
            1,
            1
          ],
          "Decimal64.floatValue()": [
            1,
            1,
            1
          ],
          "Decimal64.doubleValue()": [
            1,
            1,
            1
          ],
          "Decimal64.compareTo(final, Decimal64)": [
            1,
            1,
            1
          ],
          "Decimal64.hashCode()": [
            1,
            1,
            1
          ],
          "Decimal64.toString()": [
            1,
            1,
            1
          ],
          "Decimal64.add(final, double)": [
            1,
            1,
            1
          ],
          "Decimal64.subtract(final, double)": [
            1,
            1,
            1
          ],
          "Decimal64.multiply(final, double)": [
            1,
            1,
            1
          ],
          "Decimal64.divide(final, double)": [
            1,
            1,
            1
          ],
          "Decimal64.remainder(final, double)": [
            1,
            1,
            1
          ],
          "Decimal64.remainder(final, Decimal64)": [
            1,
            1,
            1
          ],
          "Decimal64.abs()": [
            1,
            1,
            1
          ],
          "Decimal64.ceil()": [
            1,
            1,
            1
          ],
          "Decimal64.floor()": [
            1,
            1,
            1
          ],
          "Decimal64.rint()": [
            1,
            1,
            1
          ],
          "Decimal64.round()": [
            1,
            1,
            1
          ],
          "Decimal64.signum()": [
            1,
            1,
            1
          ],
          "Decimal64.copySign(final, Decimal64)": [
            1,
            1,
            1
          ],
          "Decimal64.copySign(final, double)": [
            1,
            1,
            1
          ],
          "Decimal64.scalb(final, int)": [
            1,
            1,
            1
          ],
          "Decimal64.hypot(final, Decimal64)": [
            1,
            1,
            1
          ],
          "Decimal64.sqrt()": [
            1,
            1,
            1
          ],
          "Decimal64.cbrt()": [
            1,
            1,
            1
          ],
          "Decimal64.pow(final, double)": [
            1,
            1,
            1
          ],
          "Decimal64.pow(final, int)": [
            1,
            1,
            1
          ],
          "Decimal64.pow(final, Decimal64)": [
            1,
            1,
            1
          ],
          "Decimal64.exp()": [
            1,
            1,
            1
          ],
          "Decimal64.expm1()": [
            1,
            1,
            1
          ],
          "Decimal64.log()": [
            1,
            1,
            1
          ],
          "Decimal64.log1p()": [
            1,
            1,
            1
          ],
          "Decimal64.log10()": [
            1,
            1,
            1
          ],
          "Decimal64.cos()": [
            1,
            1,
            1
          ],
          "Decimal64.sin()": [
            1,
            1,
            1
          ],
          "Decimal64.tan()": [
            1,
            1,
            1
          ],
          "Decimal64.acos()": [
            1,
            1,
            1
          ],
          "Decimal64.asin()": [
            1,
            1,
            1
          ],
          "Decimal64.atan()": [
            1,
            1,
            1
          ],
          "Decimal64.atan2(final, Decimal64)": [
            1,
            1,
            1
          ],
          "Decimal64.cosh()": [
            1,
            1,
            1
          ],
          "Decimal64.sinh()": [
            1,
            1,
            1
          ],
          "Decimal64.tanh()": [
            1,
            1,
            1
          ],
          "Decimal64.acosh()": [
            1,
            1,
            1
          ],
          "Decimal64.asinh()": [
            1,
            1,
            1
          ],
          "Decimal64.atanh()": [
            1,
            1,
            1
          ],
          "Decimal64.linearCombination(final, Decimal64, final, Decimal64, final, Decimal64, final, Decimal64)": [
            1,
            1,
            1
          ],
          "Decimal64.linearCombination(final, double, final, Decimal64, final, double, final, Decimal64)": [
            1,
            1,
            1
          ],
          "Decimal64.linearCombination(final, Decimal64, final, Decimal64, final, Decimal64, final, Decimal64, final, Decimal64, final, Decimal64)": [
            1,
            1,
            1
          ],
          "Decimal64.linearCombination(final, double, final, Decimal64, final, double, final, Decimal64, final, double, final, Decimal64)": [
            1,
            1,
            1
          ],
          "Decimal64.linearCombination(final, Decimal64, final, Decimal64, final, Decimal64, final, Decimal64, final, Decimal64, final, Decimal64, final, Decimal64, final, Decimal64)": [
            1,
            1,
            1
          ],
          "Decimal64.linearCombination(final, double, final, Decimal64, final, double, final, Decimal64, final, double, final, Decimal64, final, double, final, Decimal64)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Decimal64.equals(final, Object)": [
            2,
            2,
            2
          ],
          "Decimal64.rootN(final, int)": [
            3,
            3,
            3
          ],
          "Decimal64.linearCombination(final, Decimal64[], final, Decimal64[])": [
            3,
            3,
            3
          ],
          "Decimal64.linearCombination(final, double[], final, Decimal64[])": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/Decimal64Test.java"
    },
    {
      "src_name": "MultiStartUnivariateOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/univariate/MultiStartUnivariateOptimizer.java",
      "class_declaration": "public class MultiStartUnivariateOptimizer extends UnivariateOptimizer ",
      "methods_under_test": {
        "=1": {
          "MultiStartUnivariateOptimizer.optimize()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MultiStartUnivariateOptimizer.getOptima()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "MultiStartUnivariateOptimizer.doOptimize()": [
            12,
            12,
            12
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/univariate/MultiStartUnivariateOptimizerTest.java"
    },
    {
      "src_name": "PolyhedronsSet",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet.java",
      "class_declaration": "public class PolyhedronsSet extends AbstractRegion<Euclidean3D, Euclidean2D> ",
      "methods_under_test": {
        "=1": {
          "FacetsContributionVisitor.visitOrder(final, BSPTree<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "RotationTransform.apply(final, Vector<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "RotationTransform.apply(final, Hyperplane<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "TranslationTransform.apply(final, Vector<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "TranslationTransform.apply(final, Hyperplane<Euclidean3D>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FacetsContributionVisitor.visitInternalNode(final, BSPTree<Euclidean3D>)": [
            3,
            3,
            3
          ],
          "RotationTransform.apply(final, SubHyperplane<Euclidean2D>, final, Hyperplane<Euclidean3D>, final, Hyperplane<Euclidean3D>)": [
            2,
            2,
            2
          ],
          "TranslationTransform.apply(final, SubHyperplane<Euclidean2D>, final, Hyperplane<Euclidean3D>, final, Hyperplane<Euclidean3D>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java"
    },
    {
      "src_name": "UnivariateSolverUtils",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.java",
      "class_declaration": "public class UnivariateSolverUtils ",
      "methods_under_test": {
        "=1": {
          "UnivariateSolverUtils.bracket(UnivariateFunction, double, double, double)": [
            1,
            1,
            1
          ],
          "UnivariateSolverUtils.midpoint(double, double)": [
            1,
            1,
            1
          ],
          "UnivariateSolverUtils.isSequence(final, double, final, double, final, double)": [
            1,
            1,
            1
          ],
          "UnivariateSolverUtils.verifyInterval(final, double, final, double)": [
            1,
            1,
            1
          ],
          "UnivariateSolverUtils.verifySequence(final, double, final, double, final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnivariateSolverUtils.solve(UnivariateFunction, double, double)": [
            2,
            2,
            2
          ],
          "UnivariateSolverUtils.solve(UnivariateFunction, double, double, double)": [
            2,
            2,
            2
          ],
          "UnivariateSolverUtils.forceSide(final, int, final, UnivariateFunction, final, BracketedUnivariateSolver<UnivariateFunction>, final, double, final, double, final, double, final, AllowedSolution)": [
            10,
            10,
            10
          ],
          "UnivariateSolverUtils.bracket(UnivariateFunction, double, double, double, int)": [
            5,
            5,
            5
          ],
          "UnivariateSolverUtils.isBracketing(UnivariateFunction, final, double, final, double)": [
            2,
            2,
            2
          ],
          "UnivariateSolverUtils.verifyBracketing(UnivariateFunction, final, double, final, double)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/solvers/UnivariateSolverUtilsTest.java"
    },
    {
      "src_name": "Gamma",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/special/Gamma.java",
      "class_declaration": "public class Gamma ",
      "methods_under_test": {
        "=1": {
          "Gamma.regularizedGammaP(double, double)": [
            1,
            1,
            1
          ],
          "Gamma.regularizedGammaQ(double, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Gamma.logGamma(double)": [
            6,
            6,
            6
          ],
          "Gamma.regularizedGammaP(double, double, double, int)": [
            7,
            7,
            7
          ],
          "Gamma.regularizedGammaQ(final, double, double, double, int)": [
            6,
            6,
            6
          ],
          "Gamma.digamma(double)": [
            3,
            3,
            3
          ],
          "Gamma.trigamma(double)": [
            3,
            3,
            3
          ],
          "Gamma.lanczos(final, double)": [
            2,
            2,
            2
          ],
          "Gamma.invGamma1pm1(final, double)": [
            6,
            6,
            6
          ],
          "Gamma.logGamma1p(final, double)": [
            3,
            3,
            3
          ],
          "Gamma.gamma(final, double)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/special/GammaTest.java"
    },
    {
      "src_name": "Precision",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/Precision.java",
      "class_declaration": "public class Precision ",
      "methods_under_test": {
        "=1": {
          "Precision.equals(float, float)": [
            1,
            1,
            1
          ],
          "Precision.equalsIncludingNaN(float, float)": [
            1,
            1,
            1
          ],
          "Precision.equals(float, float, float)": [
            1,
            1,
            1
          ],
          "Precision.equalsIncludingNaN(float, float, float)": [
            1,
            1,
            1
          ],
          "Precision.equalsIncludingNaN(float, float, int)": [
            1,
            1,
            1
          ],
          "Precision.equals(double, double)": [
            1,
            1,
            1
          ],
          "Precision.equalsIncludingNaN(double, double)": [
            1,
            1,
            1
          ],
          "Precision.equals(double, double, double)": [
            1,
            1,
            1
          ],
          "Precision.equalsIncludingNaN(double, double, double)": [
            1,
            1,
            1
          ],
          "Precision.equalsIncludingNaN(double, double, int)": [
            1,
            1,
            1
          ],
          "Precision.round(double, int)": [
            1,
            1,
            1
          ],
          "Precision.round(float, int)": [
            1,
            1,
            1
          ],
          "Precision.round(float, int, int)": [
            1,
            1,
            1
          ],
          "Precision.representableDelta(double, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Precision.compareTo(double, double, double)": [
            3,
            3,
            3
          ],
          "Precision.compareTo(final, double, final, double, final, int)": [
            3,
            3,
            3
          ],
          "Precision.equals(float, float, int)": [
            3,
            3,
            3
          ],
          "Precision.equalsWithRelativeTolerance(double, double, double)": [
            2,
            2,
            2
          ],
          "Precision.equals(double, double, int)": [
            3,
            3,
            3
          ],
          "Precision.round(double, int, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/PrecisionTest.java"
    },
    {
      "src_name": "PolynomialFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java",
      "class_declaration": "public class PolynomialFunction implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction, Serializable ",
      "methods_under_test": {
        "=1": {
          "PolynomialFunction.value(double)": [
            1,
            1,
            1
          ],
          "PolynomialFunction.degree()": [
            1,
            1,
            1
          ],
          "PolynomialFunction.polynomialDerivative()": [
            1,
            1,
            1
          ],
          "PolynomialFunction.derivative()": [
            1,
            1,
            1
          ],
          "PolynomialFunction.hashCode()": [
            1,
            1,
            1
          ],
          "Parametric.value(final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PolynomialFunction.evaluate(double[], double)": [
            3,
            3,
            3
          ],
          "PolynomialFunction.value(final, DerivativeStructure)": [
            3,
            3,
            3
          ],
          "PolynomialFunction.add(final, PolynomialFunction)": [
            2,
            2,
            2
          ],
          "PolynomialFunction.subtract(final, PolynomialFunction)": [
            4,
            4,
            4
          ],
          "PolynomialFunction.negate()": [
            2,
            2,
            2
          ],
          "PolynomialFunction.multiply(final, PolynomialFunction)": [
            3,
            3,
            3
          ],
          "PolynomialFunction.differentiate(double[])": [
            4,
            4,
            4
          ],
          "PolynomialFunction.toString()": [
            10,
            10,
            10
          ],
          "PolynomialFunction.equals(Object)": [
            4,
            4,
            4
          ],
          "Parametric.gradient(double)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionTest.java"
    },
    {
      "src_name": "DormandPrince54StepInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince54StepInterpolator.java",
      "class_declaration": "class DormandPrince54StepInterpolator extends RungeKuttaStepInterpolator ",
      "methods_under_test": {
        "=1": {
          "DormandPrince54StepInterpolator.doCopy()": [
            1,
            1,
            1
          ],
          "DormandPrince54StepInterpolator.reinitialize(final, AbstractIntegrator, final, double[], final, double[][], final, boolean, final, EquationsMapper, final, EquationsMapper[])": [
            1,
            1,
            1
          ],
          "DormandPrince54StepInterpolator.storeTime(final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DormandPrince54StepInterpolator.computeInterpolatedStateAndDerivatives(final, double, final, double)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince54StepInterpolatorTest.java"
    },
    {
      "src_name": "PolynomialsUtils",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialsUtils.java",
      "class_declaration": "public class PolynomialsUtils ",
      "methods_under_test": {
        "=1": {
          "PolynomialsUtils.createChebyshevPolynomial(final, int)": [
            1,
            1,
            1
          ],
          "PolynomialsUtils.createHermitePolynomial(final, int)": [
            1,
            1,
            1
          ],
          "PolynomialsUtils.createLaguerrePolynomial(final, int)": [
            1,
            1,
            1
          ],
          "PolynomialsUtils.createLegendrePolynomial(final, int)": [
            1,
            1,
            1
          ],
          "JacobiKey.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PolynomialsUtils.createJacobiPolynomial(final, int, final, int, final, int)": [
            2,
            2,
            2
          ],
          "JacobiKey.equals(final, Object)": [
            2,
            2,
            2
          ],
          "PolynomialsUtils.shift(final, double[], final, double)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialsUtilsTest.java"
    },
    {
      "src_name": "MultivariateFunctionPenaltyAdapter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateFunctionPenaltyAdapter.java",
      "class_declaration": "public class MultivariateFunctionPenaltyAdapter implements MultivariateFunction ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "MultivariateFunctionPenaltyAdapter.value(double[])": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateFunctionPenaltyAdapterTest.java"
    },
    {
      "src_name": "Kurtosis",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/moment/Kurtosis.java",
      "class_declaration": "public class Kurtosis extends AbstractStorelessUnivariateStatistic implements Serializable ",
      "methods_under_test": {
        "=1": {
          "Kurtosis.copy()": [
            1,
            1,
            1
          ],
          "Kurtosis.copy(Kurtosis, Kurtosis)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Kurtosis.increment(final, double)": [
            2,
            2,
            2
          ],
          "Kurtosis.getResult()": [
            3,
            3,
            3
          ],
          "Kurtosis.clear()": [
            2,
            2,
            2
          ],
          "Kurtosis.evaluate(final, double[], final, int, final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/moment/KurtosisTest.java"
    },
    {
      "src_name": "LocalizedFormats",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java",
      "error": "local variable 'class_name' referenced before assignment",
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/exception/util/LocalizedFormatsTest.java"
    },
    {
      "src_name": "IntervalsSet",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet.java",
      "class_declaration": "public class IntervalsSet extends AbstractRegion<Euclidean1D, Euclidean1D> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalsSetTest.java"
    },
    {
      "src_name": "BinomialDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/BinomialDistribution.java",
      "class_declaration": "public class BinomialDistribution extends AbstractIntegerDistribution ",
      "methods_under_test": {
        "=1": {
          "BinomialDistribution.getNumericalVariance()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BinomialDistribution.probability(int)": [
            2,
            2,
            2
          ],
          "BinomialDistribution.cumulativeProbability(int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java"
    },
    {
      "src_name": "SynchronizedSummaryStatistics",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatistics.java",
      "class_declaration": "public class SynchronizedSummaryStatistics extends SummaryStatistics ",
      "methods_under_test": {
        "=1": {
          "SynchronizedSummaryStatistics.addValue(double)": [
            1,
            1,
            1
          ],
          "SynchronizedSummaryStatistics.toString()": [
            1,
            1,
            1
          ],
          "SynchronizedSummaryStatistics.clear()": [
            1,
            1,
            1
          ],
          "SynchronizedSummaryStatistics.equals(Object)": [
            1,
            1,
            1
          ],
          "SynchronizedSummaryStatistics.hashCode()": [
            1,
            1,
            1
          ],
          "SynchronizedSummaryStatistics.copy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SynchronizedSummaryStatistics.copy(SynchronizedSummaryStatistics, SynchronizedSummaryStatistics)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/SynchronizedSummaryStatisticsTest.java"
    },
    {
      "src_name": "Skewness",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/moment/Skewness.java",
      "class_declaration": "public class Skewness extends AbstractStorelessUnivariateStatistic implements Serializable ",
      "methods_under_test": {
        "=1": {
          "Skewness.copy()": [
            1,
            1,
            1
          ],
          "Skewness.copy(Skewness, Skewness)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Skewness.increment(final, double)": [
            2,
            2,
            2
          ],
          "Skewness.getResult()": [
            4,
            4,
            4
          ],
          "Skewness.clear()": [
            2,
            2,
            2
          ],
          "Skewness.evaluate(final, double[], final, int, final, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/moment/SkewnessTest.java"
    },
    {
      "src_name": "MultivariateDifferentiableMultiStartOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizer.java",
      "class_declaration": "@Deprecated\npublic class MultivariateDifferentiableMultiStartOptimizer extends BaseMultivariateMultiStartOptimizer<MultivariateDifferentiableFunction> implements MultivariateDifferentiableOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java"
    },
    {
      "src_name": "SimpsonIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/SimpsonIntegrator.java",
      "class_declaration": "public class SimpsonIntegrator extends BaseAbstractUnivariateIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SimpsonIntegrator.doIntegrate()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/integration/SimpsonIntegratorTest.java"
    },
    {
      "src_name": "NotStrictlyPositiveException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/NotStrictlyPositiveException.java",
      "class_declaration": "public class NotStrictlyPositiveException extends NumberIsTooSmallException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/exception/NotStrictlyPositiveExceptionTest.java"
    },
    {
      "src_name": "CorrelatedRandomVectorGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/CorrelatedRandomVectorGenerator.java",
      "class_declaration": "public class CorrelatedRandomVectorGenerator implements RandomVectorGenerator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "CorrelatedRandomVectorGenerator.nextVector()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/CorrelatedRandomVectorGeneratorTest.java"
    },
    {
      "src_name": "SemiVariance",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/moment/SemiVariance.java",
      "class_declaration": "public class SemiVariance extends AbstractUnivariateStatistic implements Serializable ",
      "methods_under_test": {
        "=1": {
          "SemiVariance.copy()": [
            1,
            1,
            1
          ],
          "SemiVariance.copy(final, SemiVariance, SemiVariance)": [
            1,
            1,
            1
          ],
          "SemiVariance.evaluate(final, double[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "SemiVariance.evaluate(final, double[], Direction)": [
            1,
            1,
            1
          ],
          "SemiVariance.evaluate(final, double[], final, double)": [
            1,
            1,
            1
          ],
          "SemiVariance.evaluate(final, double[], final, double, final, Direction)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SemiVariance.evaluate(final, double[], final, double, final, Direction, final, boolean, final, int, final, int)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/moment/SemiVarianceTest.java"
    },
    {
      "src_name": "StableRandomGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/StableRandomGenerator.java",
      "class_declaration": "public class StableRandomGenerator implements NormalizedRandomGenerator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "StableRandomGenerator.nextNormalizedDouble()": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/StableRandomGeneratorTest.java"
    },
    {
      "src_name": "CycleCrossover",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/CycleCrossover.java",
      "class_declaration": "public class CycleCrossover <T> implements CrossoverPolicy ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "CycleCrossover.crossover(final, Chromosome, final, Chromosome)": [
            2,
            2,
            2
          ],
          "CycleCrossover.mate(final, AbstractListChromosome<T>, final, AbstractListChromosome<T>)": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/CycleCrossoverTest.java"
    },
    {
      "src_name": "GaussNewtonOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java",
      "class_declaration": "public class GaussNewtonOptimizer extends AbstractLeastSquaresOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {
          "GaussNewtonOptimizer.doOptimize()": [
            16,
            16,
            16
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java"
    },
    {
      "src_name": "FunctionUtils",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java",
      "class_declaration": "public class FunctionUtils ",
      "methods_under_test": {
        "=1": {
          "FunctionUtils.compose()": [
            1,
            1,
            1
          ],
          "FunctionUtils.add()": [
            1,
            1,
            1
          ],
          "FunctionUtils.multiply()": [
            1,
            1,
            1
          ],
          "FunctionUtils.combine(final, BivariateFunction, final, UnivariateFunction, final, UnivariateFunction)": [
            1,
            1,
            1
          ],
          "FunctionUtils.collector(final, BivariateFunction, final, UnivariateFunction, final, double)": [
            1,
            1,
            1
          ],
          "FunctionUtils.collector(final, BivariateFunction, final, double)": [
            1,
            1,
            1
          ],
          "FunctionUtils.fix1stArgument(final, BivariateFunction, final, double)": [
            1,
            1,
            1
          ],
          "FunctionUtils.fix2ndArgument(final, BivariateFunction, final, double)": [
            1,
            1,
            1
          ],
          "FunctionUtils.toDifferentiableUnivariateFunction(final, UnivariateDifferentiableFunction)": [
            1,
            1,
            1
          ],
          "FunctionUtils.toUnivariateDifferential(final, DifferentiableUnivariateFunction)": [
            1,
            1,
            1
          ],
          "FunctionUtils.toDifferentiableMultivariateFunction(final, MultivariateDifferentiableFunction)": [
            1,
            1,
            1
          ],
          "FunctionUtils.toMultivariateDifferentiableFunction(final, DifferentiableMultivariateFunction)": [
            1,
            1,
            1
          ],
          "FunctionUtils.toDifferentiableMultivariateVectorFunction(final, MultivariateDifferentiableVectorFunction)": [
            1,
            1,
            1
          ],
          "FunctionUtils.toMultivariateDifferentiableVectorFunction(final, DifferentiableMultivariateVectorFunction)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FunctionUtils.sample(UnivariateFunction, double, double, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java"
    },
    {
      "src_name": "LinearInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/LinearInterpolator.java",
      "class_declaration": "public class LinearInterpolator implements UnivariateInterpolator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "LinearInterpolator.interpolate(double, [], double, [])": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/interpolation/LinearInterpolatorTest.java"
    },
    {
      "src_name": "SchurTransformer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/SchurTransformer.java",
      "class_declaration": "class SchurTransformer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SchurTransformer.getP()": [
            2,
            2,
            2
          ],
          "SchurTransformer.getPT()": [
            2,
            2,
            2
          ],
          "SchurTransformer.getT()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java"
    },
    {
      "src_name": "PearsonsCorrelation",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/correlation/PearsonsCorrelation.java",
      "class_declaration": "public class PearsonsCorrelation ",
      "methods_under_test": {
        "=1": {
          "PearsonsCorrelation.computeCorrelationMatrix(double[][])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PearsonsCorrelation.getCorrelationStandardErrors()": [
            3,
            3,
            3
          ],
          "PearsonsCorrelation.getCorrelationPValues()": [
            4,
            4,
            4
          ],
          "PearsonsCorrelation.computeCorrelationMatrix(RealMatrix)": [
            3,
            3,
            3
          ],
          "PearsonsCorrelation.correlation(final, double[], final, double[])": [
            5,
            5,
            5
          ],
          "PearsonsCorrelation.covarianceToCorrelation(RealMatrix)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/correlation/PearsonsCorrelationTest.java"
    },
    {
      "src_name": "NumberIsTooLargeException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/NumberIsTooLargeException.java",
      "class_declaration": "public class NumberIsTooLargeException extends MathIllegalNumberException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/exception/NumberIsTooLargeExceptionTest.java"
    },
    {
      "src_name": "BitsStreamGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
      "class_declaration": "public abstract class BitsStreamGenerator implements RandomGenerator,\n               Serializable ",
      "methods_under_test": {
        "=1": {
          "BitsStreamGenerator.nextBoolean()": [
            1,
            1,
            1
          ],
          "BitsStreamGenerator.nextDouble()": [
            1,
            1,
            1
          ],
          "BitsStreamGenerator.nextFloat()": [
            1,
            1,
            1
          ],
          "BitsStreamGenerator.nextInt()": [
            1,
            1,
            1
          ],
          "BitsStreamGenerator.nextLong()": [
            1,
            1,
            1
          ],
          "BitsStreamGenerator.clear()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BitsStreamGenerator.nextBytes(byte[])": [
            2,
            2,
            2
          ],
          "BitsStreamGenerator.nextGaussian()": [
            2,
            2,
            2
          ],
          "BitsStreamGenerator.nextInt(int)": [
            4,
            4,
            4
          ],
          "BitsStreamGenerator.nextLong(long)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/BitsStreamGeneratorTest.java"
    },
    {
      "src_name": "OutOfRangeException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/OutOfRangeException.java",
      "class_declaration": "public class OutOfRangeException extends MathIllegalNumberException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/exception/OutOfRangeExceptionTest.java"
    },
    {
      "src_name": "StorelessCovariance",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java",
      "class_declaration": "public class StorelessCovariance extends Covariance ",
      "methods_under_test": {
        "=1": {
          "StorelessCovariance.getCovariance(final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StorelessCovariance.increment(final, double[])": [
            2,
            2,
            2
          ],
          "StorelessCovariance.append(StorelessCovariance)": [
            2,
            2,
            2
          ],
          "StorelessCovariance.getData()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java"
    },
    {
      "src_name": "Median",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Median.java",
      "class_declaration": "public class Median extends Percentile implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/rank/MedianTest.java"
    },
    {
      "src_name": "SparseRealVector",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/SparseRealVector.java",
      "class_declaration": "@Deprecated\npublic abstract class SparseRealVector extends RealVector ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/SparseRealVectorTest.java"
    },
    {
      "src_name": "FractionField",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fraction/FractionField.java",
      "class_declaration": "public class FractionField implements Field<Fraction>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fraction/FractionFieldTest.java"
    },
    {
      "src_name": "DfpMath",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/dfp/DfpMath.java",
      "class_declaration": "public class DfpMath ",
      "methods_under_test": {
        "=1": {
          "DfpMath.split(final, Dfp)": [
            1,
            1,
            1
          ],
          "DfpMath.splitDiv(final, Dfp[], final, Dfp[])": [
            1,
            1,
            1
          ],
          "DfpMath.tan(final, Dfp)": [
            1,
            1,
            1
          ],
          "DfpMath.asin(final, Dfp)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DfpMath.split(final, DfpField, final, String)": [
            8,
            8,
            8
          ],
          "DfpMath.splitMult(final, Dfp[], final, Dfp[])": [
            2,
            2,
            2
          ],
          "DfpMath.splitPow(final, Dfp[], int)": [
            7,
            7,
            7
          ],
          "DfpMath.pow(Dfp, int)": [
            6,
            6,
            6
          ],
          "DfpMath.exp(final, Dfp)": [
            3,
            3,
            3
          ],
          "DfpMath.expInternal(final, Dfp)": [
            3,
            3,
            3
          ],
          "DfpMath.log(Dfp)": [
            5,
            5,
            5
          ],
          "DfpMath.logInternal(final, Dfp, [])": [
            3,
            3,
            3
          ],
          "DfpMath.sinInternal(Dfp, [])": [
            3,
            3,
            3
          ],
          "DfpMath.cosInternal(Dfp, [])": [
            3,
            3,
            3
          ],
          "DfpMath.sin(final, Dfp)": [
            5,
            5,
            5
          ],
          "DfpMath.cos(Dfp)": [
            5,
            5,
            5
          ],
          "DfpMath.atanInternal(final, Dfp)": [
            3,
            3,
            3
          ],
          "DfpMath.atan(final, Dfp)": [
            7,
            7,
            7
          ],
          "DfpMath.acos(Dfp)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {
          "DfpMath.pow(Dfp, final, Dfp)": [
            28,
            28,
            28
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/dfp/DfpMathTest.java"
    },
    {
      "src_name": "PowellOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/direct/PowellOptimizer.java",
      "class_declaration": "@Deprecated\npublic class PowellOptimizer extends BaseAbstractMultivariateOptimizer<MultivariateFunction> implements MultivariateOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "LineSearch.search(final, double[], final, double[])": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java"
    },
    {
      "src_name": "FastHadamardTransformer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/transform/FastHadamardTransformer.java",
      "class_declaration": "public class FastHadamardTransformer implements RealTransformer, Serializable ",
      "methods_under_test": {
        "=1": {
          "FastHadamardTransformer.transform(final, UnivariateFunction, final, double, final, double, final, int, final, TransformType)": [
            1,
            1,
            1
          ],
          "FastHadamardTransformer.transform(final, int[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FastHadamardTransformer.transform(final, double[], final, TransformType)": [
            2,
            2,
            2
          ],
          "FastHadamardTransformer.fht(double[])": [
            5,
            5,
            5
          ],
          "FastHadamardTransformer.fht(int[])": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/transform/FastHadamardTransformerTest.java"
    },
    {
      "src_name": "RectangularCholeskyDecomposition",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
      "class_declaration": "public class RectangularCholeskyDecomposition ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java"
    },
    {
      "src_name": "Interval",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Interval.java",
      "class_declaration": "public class Interval ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "Interval.checkPoint(final, double, final, double)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/oned/IntervalTest.java"
    },
    {
      "src_name": "MatrixDimensionMismatchException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/MatrixDimensionMismatchException.java",
      "class_declaration": "public class MatrixDimensionMismatchException extends MultiDimensionMismatchException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/MatrixDimensionMismatchExceptionTest.java"
    },
    {
      "src_name": "CurveFitter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/CurveFitter.java",
      "class_declaration": "public class CurveFitter <T extends ParametricUnivariateFunction> ",
      "methods_under_test": {
        "=1": {
          "CurveFitter.addObservedPoint(double, double)": [
            1,
            1,
            1
          ],
          "CurveFitter.addObservedPoint(double, double, double)": [
            1,
            1,
            1
          ],
          "CurveFitter.addObservedPoint(WeightedObservedPoint)": [
            1,
            1,
            1
          ],
          "CurveFitter.clearObservations()": [
            1,
            1,
            1
          ],
          "CurveFitter.fit(T, final, double[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CurveFitter.fit(int, T, final, double[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/CurveFitterTest.java"
    },
    {
      "src_name": "RiddersSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/RiddersSolver.java",
      "class_declaration": "public class RiddersSolver extends AbstractUnivariateSolver ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "RiddersSolver.doSolve()": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/solvers/RiddersSolverTest.java"
    },
    {
      "src_name": "SummaryStatistics",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/SummaryStatistics.java",
      "class_declaration": "public class SummaryStatistics implements StatisticalSummary, Serializable ",
      "methods_under_test": {
        "=1": {
          "SummaryStatistics.getPopulationVariance()": [
            1,
            1,
            1
          ],
          "SummaryStatistics.toString()": [
            1,
            1,
            1
          ],
          "SummaryStatistics.hashCode()": [
            1,
            1,
            1
          ],
          "SummaryStatistics.setSumImpl(StorelessUnivariateStatistic)": [
            1,
            1,
            1
          ],
          "SummaryStatistics.setSumsqImpl(StorelessUnivariateStatistic)": [
            1,
            1,
            1
          ],
          "SummaryStatistics.setMinImpl(StorelessUnivariateStatistic)": [
            1,
            1,
            1
          ],
          "SummaryStatistics.setMaxImpl(StorelessUnivariateStatistic)": [
            1,
            1,
            1
          ],
          "SummaryStatistics.setSumLogImpl(StorelessUnivariateStatistic)": [
            1,
            1,
            1
          ],
          "SummaryStatistics.setGeoMeanImpl(StorelessUnivariateStatistic)": [
            1,
            1,
            1
          ],
          "SummaryStatistics.setMeanImpl(StorelessUnivariateStatistic)": [
            1,
            1,
            1
          ],
          "SummaryStatistics.setVarianceImpl(StorelessUnivariateStatistic)": [
            1,
            1,
            1
          ],
          "SummaryStatistics.copy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SummaryStatistics.addValue(double)": [
            4,
            4,
            4
          ],
          "SummaryStatistics.getStandardDeviation()": [
            3,
            3,
            3
          ],
          "SummaryStatistics.clear()": [
            3,
            3,
            3
          ],
          "SummaryStatistics.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "SummaryStatistics.copy(SummaryStatistics, SummaryStatistics)": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/SummaryStatisticsTest.java"
    },
    {
      "src_name": "DerivativeStructure",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java",
      "class_declaration": "public class DerivativeStructure implements RealFieldElement<DerivativeStructure>, Serializable ",
      "methods_under_test": {
        "=1": {
          "DerivativeStructure.add(final, double)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.add(final, DerivativeStructure)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.subtract(final, double)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.subtract(final, DerivativeStructure)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.multiply(final, int)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.multiply(final, DerivativeStructure)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.divide(final, DerivativeStructure)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.remainder(final, double)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.remainder(final, DerivativeStructure)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.ceil()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.floor()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.rint()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.round()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.signum()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.hypot(final, DerivativeStructure, final, DerivativeStructure)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.reciprocal()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.sqrt()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.cbrt()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.rootN(final, int)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.pow(final, double)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.pow(final, int)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.pow(final, DerivativeStructure)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.exp()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.expm1()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.log()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.log1p()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.log10()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.cos()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.sin()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.tan()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.acos()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.asin()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.atan()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.atan2(final, DerivativeStructure)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.atan2(final, DerivativeStructure, final, DerivativeStructure)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.cosh()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.sinh()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.tanh()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.acosh()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.asinh()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.atanh()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.taylor()": [
            1,
            1,
            1
          ],
          "DerivativeStructure.linearCombination(final, DerivativeStructure, final, DerivativeStructure, final, DerivativeStructure, final, DerivativeStructure)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.linearCombination(final, double, final, DerivativeStructure, final, double, final, DerivativeStructure)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.linearCombination(final, DerivativeStructure, final, DerivativeStructure, final, DerivativeStructure, final, DerivativeStructure, final, DerivativeStructure, final, DerivativeStructure)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.linearCombination(final, double, final, DerivativeStructure, final, double, final, DerivativeStructure, final, double, final, DerivativeStructure)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.linearCombination(final, DerivativeStructure, final, DerivativeStructure, final, DerivativeStructure, final, DerivativeStructure, final, DerivativeStructure, final, DerivativeStructure, final, DerivativeStructure, final, DerivativeStructure)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.linearCombination(final, double, final, DerivativeStructure, final, double, final, DerivativeStructure, final, double, final, DerivativeStructure, final, double, final, DerivativeStructure)": [
            1,
            1,
            1
          ],
          "DerivativeStructure.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DerivativeStructure.multiply(final, double)": [
            2,
            2,
            2
          ],
          "DerivativeStructure.divide(final, double)": [
            2,
            2,
            2
          ],
          "DerivativeStructure.negate()": [
            2,
            2,
            2
          ],
          "DerivativeStructure.abs()": [
            3,
            3,
            3
          ],
          "DerivativeStructure.copySign(final, DerivativeStructure)": [
            2,
            2,
            2
          ],
          "DerivativeStructure.copySign(final, double)": [
            2,
            2,
            2
          ],
          "DerivativeStructure.scalb(final, int)": [
            2,
            2,
            2
          ],
          "DerivativeStructure.hypot(final, DerivativeStructure)": [
            6,
            6,
            6
          ],
          "DerivativeStructure.compose()": [
            2,
            2,
            2
          ],
          "DerivativeStructure.toDegrees()": [
            2,
            2,
            2
          ],
          "DerivativeStructure.toRadians()": [
            2,
            2,
            2
          ],
          "DerivativeStructure.linearCombination(final, DerivativeStructure[], final, DerivativeStructure[])": [
            4,
            4,
            4
          ],
          "DerivativeStructure.linearCombination(final, double[], final, DerivativeStructure[])": [
            3,
            3,
            3
          ],
          "DerivativeStructure.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java"
    },
    {
      "src_name": "ZipfDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/ZipfDistribution.java",
      "class_declaration": "public class ZipfDistribution extends AbstractIntegerDistribution ",
      "methods_under_test": {
        "=1": {
          "ZipfDistribution.calculateNumericalMean()": [
            1,
            1,
            1
          ],
          "ZipfDistribution.calculateNumericalVariance()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ZipfDistribution.probability(final, int)": [
            2,
            2,
            2
          ],
          "ZipfDistribution.cumulativeProbability(final, int)": [
            3,
            3,
            3
          ],
          "ZipfDistribution.getNumericalMean()": [
            2,
            2,
            2
          ],
          "ZipfDistribution.getNumericalVariance()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/ZipfDistributionTest.java"
    },
    {
      "src_name": "FractionFormat",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fraction/FractionFormat.java",
      "class_declaration": "public class FractionFormat extends AbstractFormat ",
      "methods_under_test": {
        "=1": {
          "FractionFormat.formatFraction(Fraction)": [
            1,
            1,
            1
          ],
          "FractionFormat.getImproperInstance(final, Locale)": [
            1,
            1,
            1
          ],
          "FractionFormat.getProperInstance(final, Locale)": [
            1,
            1,
            1
          ],
          "FractionFormat.format(final, Fraction, final, StringBuffer, final, FieldPosition)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FractionFormat.format(final, Object, final, StringBuffer, final, FieldPosition)": [
            3,
            3,
            3
          ],
          "FractionFormat.parse(final, String)": [
            2,
            2,
            2
          ],
          "FractionFormat.parse(final, String, final, ParsePosition)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fraction/FractionFormatTest.java"
    },
    {
      "src_name": "EulerStepInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/EulerStepInterpolator.java",
      "class_declaration": "class EulerStepInterpolator extends RungeKuttaStepInterpolator ",
      "methods_under_test": {
        "=1": {
          "EulerStepInterpolator.doCopy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EulerStepInterpolator.computeInterpolatedStateAndDerivatives(final, double, final, double)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/EulerStepInterpolatorTest.java"
    },
    {
      "src_name": "GeometricDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/GeometricDistribution.java",
      "class_declaration": "public class GeometricDistribution extends AbstractIntegerDistribution ",
      "methods_under_test": {
        "=1": {
          "GeometricDistribution.getNumericalMean()": [
            1,
            1,
            1
          ],
          "GeometricDistribution.getNumericalVariance()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GeometricDistribution.probability(int)": [
            2,
            2,
            2
          ],
          "GeometricDistribution.cumulativeProbability(int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/GeometricDistributionTest.java"
    },
    {
      "src_name": "SimpleVectorValueChecker",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/SimpleVectorValueChecker.java",
      "class_declaration": "public class SimpleVectorValueChecker extends AbstractConvergenceChecker<PointVectorValuePair> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/SimpleVectorValueCheckerTest.java"
    },
    {
      "src_name": "BracketingNthOrderBrentSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver.java",
      "class_declaration": "public class BracketingNthOrderBrentSolver extends AbstractUnivariateSolver implements BracketedUnivariateSolver<UnivariateFunction> ",
      "methods_under_test": {
        "=1": {
          "BracketingNthOrderBrentSolver.solve(int, UnivariateFunction, double, double, AllowedSolution)": [
            1,
            1,
            1
          ],
          "BracketingNthOrderBrentSolver.solve(int, UnivariateFunction, double, double, double, AllowedSolution)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {
          "BracketingNthOrderBrentSolver.doSolve()": [
            19,
            19,
            19
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolverTest.java"
    },
    {
      "src_name": "ManhattanDistance",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/distance/ManhattanDistance.java",
      "class_declaration": "public class ManhattanDistance implements DistanceMeasure ",
      "methods_under_test": {
        "=1": {
          "ManhattanDistance.compute(double[], double[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ml/distance/ManhattanDistanceTest.java"
    },
    {
      "src_name": "RandomKey",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/RandomKey.java",
      "class_declaration": "public abstract class RandomKey <T> extends AbstractListChromosome<Double> implements PermutationChromosome<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/RandomKeyTest.java"
    },
    {
      "src_name": "FieldHermiteInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolator.java",
      "class_declaration": "public class FieldHermiteInterpolator <T extends FieldElement<T>> ",
      "methods_under_test": {
        "=1": {
          "FieldHermiteInterpolator.addSamplePoint(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FieldHermiteInterpolator.value(T)": [
            4,
            4,
            4
          ],
          "FieldHermiteInterpolator.derivatives(T, int)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/interpolation/FieldHermiteInterpolatorTest.java"
    },
    {
      "src_name": "BOBYQAOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java",
      "class_declaration": "public class BOBYQAOptimizer extends MultivariateOptimizer ",
      "methods_under_test": {
        "=1": {
          "BOBYQAOptimizer.doOptimize()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizerTest.java"
    },
    {
      "src_name": "BinaryMutation",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/BinaryMutation.java",
      "class_declaration": "public class BinaryMutation implements MutationPolicy ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BinaryMutation.mutate(Chromosome)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/BinaryMutationTest.java"
    },
    {
      "src_name": "PointValuePair",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/PointValuePair.java",
      "class_declaration": "@Deprecated\npublic class PointValuePair extends Pair<double[], Double> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java"
    },
    {
      "src_name": "DSCompiler",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java",
      "class_declaration": "public class DSCompiler ",
      "methods_under_test": {
        "=1": {
          "DSCompiler.getPartialDerivativeOrders(final, int)": [
            1,
            1,
            1
          ],
          "DSCompiler.linearCombination(final, double, final, double[], final, int, final, double, final, double[], final, int, final, double[], final, int)": [
            1,
            1,
            1
          ],
          "DSCompiler.linearCombination(final, double, final, double[], final, int, final, double, final, double[], final, int, final, double, final, double[], final, int, final, double[], final, int)": [
            1,
            1,
            1
          ],
          "DSCompiler.linearCombination(final, double, final, double[], final, int, final, double, final, double[], final, int, final, double, final, double[], final, int, final, double, final, double[], final, int, final, double[], final, int)": [
            1,
            1,
            1
          ],
          "DSCompiler.add(final, double[], final, int, final, double[], final, int, final, double[], final, int)": [
            1,
            1,
            1
          ],
          "DSCompiler.subtract(final, double[], final, int, final, double[], final, int, final, double[], final, int)": [
            1,
            1,
            1
          ],
          "DSCompiler.multiply(final, double[], final, int, final, double[], final, int, final, double[], final, int)": [
            1,
            1,
            1
          ],
          "DSCompiler.divide(final, double[], final, int, final, double[], final, int, final, double[], final, int)": [
            1,
            1,
            1
          ],
          "DSCompiler.remainder(final, double[], final, int, final, double[], final, int, final, double[], final, int)": [
            1,
            1,
            1
          ],
          "DSCompiler.pow(final, double[], final, int, final, double[], final, int, final, double[], final, int)": [
            1,
            1,
            1
          ],
          "DSCompiler.exp(final, double[], final, int, final, double[], final, int)": [
            1,
            1,
            1
          ],
          "DSCompiler.expm1(final, double[], final, int, final, double[], final, int)": [
            1,
            1,
            1
          ],
          "DSCompiler.compose(final, double[], final, int, final, double[], final, double[], final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DSCompiler.getCompiler(int, int)": [
            7,
            7,
            7
          ],
          "DSCompiler.getPartialDerivativeIndex()": [
            2,
            2,
            2
          ],
          "DSCompiler.pow(final, double[], final, int, final, double, final, double[], final, int)": [
            3,
            3,
            3
          ],
          "DSCompiler.pow(final, double[], final, int, final, int, final, double[], final, int)": [
            6,
            6,
            6
          ],
          "DSCompiler.rootN(final, double[], final, int, final, int, final, double[], final, int)": [
            4,
            4,
            4
          ],
          "DSCompiler.log(final, double[], final, int, final, double[], final, int)": [
            3,
            3,
            3
          ],
          "DSCompiler.log1p(final, double[], final, int, final, double[], final, int)": [
            3,
            3,
            3
          ],
          "DSCompiler.log10(final, double[], final, int, final, double[], final, int)": [
            3,
            3,
            3
          ],
          "DSCompiler.cos(final, double[], final, int, final, double[], final, int)": [
            3,
            3,
            3
          ],
          "DSCompiler.sin(final, double[], final, int, final, double[], final, int)": [
            3,
            3,
            3
          ],
          "DSCompiler.tan(final, double[], final, int, final, double[], final, int)": [
            7,
            7,
            7
          ],
          "DSCompiler.acos(final, double[], final, int, final, double[], final, int)": [
            7,
            7,
            7
          ],
          "DSCompiler.asin(final, double[], final, int, final, double[], final, int)": [
            7,
            7,
            7
          ],
          "DSCompiler.atan(final, double[], final, int, final, double[], final, int)": [
            7,
            7,
            7
          ],
          "DSCompiler.atan2(final, double[], final, int, final, double[], final, int, final, double[], final, int)": [
            4,
            4,
            4
          ],
          "DSCompiler.cosh(final, double[], final, int, final, double[], final, int)": [
            3,
            3,
            3
          ],
          "DSCompiler.sinh(final, double[], final, int, final, double[], final, int)": [
            3,
            3,
            3
          ],
          "DSCompiler.tanh(final, double[], final, int, final, double[], final, int)": [
            7,
            7,
            7
          ],
          "DSCompiler.acosh(final, double[], final, int, final, double[], final, int)": [
            7,
            7,
            7
          ],
          "DSCompiler.asinh(final, double[], final, int, final, double[], final, int)": [
            7,
            7,
            7
          ],
          "DSCompiler.atanh(final, double[], final, int, final, double[], final, int)": [
            7,
            7,
            7
          ],
          "DSCompiler.taylor(final, double[], final, int)": [
            5,
            5,
            5
          ],
          "DSCompiler.checkCompatibility(final, DSCompiler)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/differentiation/DSCompilerTest.java"
    },
    {
      "src_name": "BigFractionFormat",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fraction/BigFractionFormat.java",
      "class_declaration": "public class BigFractionFormat extends AbstractFormat implements Serializable ",
      "methods_under_test": {
        "=1": {
          "BigFractionFormat.formatBigFraction(final, BigFraction)": [
            1,
            1,
            1
          ],
          "BigFractionFormat.getImproperInstance(final, Locale)": [
            1,
            1,
            1
          ],
          "BigFractionFormat.getProperInstance(final, Locale)": [
            1,
            1,
            1
          ],
          "BigFractionFormat.format(final, BigFraction, final, StringBuffer, final, FieldPosition)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BigFractionFormat.format(final, Object, final, StringBuffer, final, FieldPosition)": [
            4,
            4,
            4
          ],
          "BigFractionFormat.parse(final, String)": [
            2,
            2,
            2
          ],
          "BigFractionFormat.parse(final, String, final, ParsePosition)": [
            5,
            5,
            5
          ],
          "BigFractionFormat.parseNextBigInteger(final, String, final, ParsePosition)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fraction/BigFractionFormatTest.java"
    },
    {
      "src_name": "HarmonicOscillator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java",
      "class_declaration": "public class HarmonicOscillator implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "HarmonicOscillator.value(double)": [
            1,
            1,
            1
          ],
          "HarmonicOscillator.derivative()": [
            1,
            1,
            1
          ],
          "Parametric.value(double)": [
            1,
            1,
            1
          ],
          "Parametric.gradient(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "HarmonicOscillator.value(final, DerivativeStructure)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/function/HarmonicOscillatorTest.java"
    },
    {
      "src_name": "SimpleVectorValueChecker",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/SimpleVectorValueChecker.java",
      "class_declaration": "@Deprecated\npublic class SimpleVectorValueChecker extends AbstractConvergenceChecker<PointVectorValuePair> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/SimpleVectorValueCheckerTest.java"
    },
    {
      "src_name": "WeibullDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/WeibullDistribution.java",
      "class_declaration": "public class WeibullDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {
          "WeibullDistribution.calculateNumericalMean()": [
            1,
            1,
            1
          ],
          "WeibullDistribution.calculateNumericalVariance()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "WeibullDistribution.density(double)": [
            2,
            2,
            2
          ],
          "WeibullDistribution.cumulativeProbability(double)": [
            2,
            2,
            2
          ],
          "WeibullDistribution.inverseCumulativeProbability(double)": [
            4,
            4,
            4
          ],
          "WeibullDistribution.getNumericalMean()": [
            2,
            2,
            2
          ],
          "WeibullDistribution.getNumericalVariance()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/WeibullDistributionTest.java"
    },
    {
      "src_name": "RombergIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/RombergIntegrator.java",
      "class_declaration": "public class RombergIntegrator extends BaseAbstractUnivariateIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "RombergIntegrator.doIntegrate()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/integration/RombergIntegratorTest.java"
    },
    {
      "src_name": "FieldLUDecomposition",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/FieldLUDecomposition.java",
      "class_declaration": "public class FieldLUDecomposition <T extends FieldElement<T>> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "FieldLUDecomposition.getL()": [
            4,
            4,
            4
          ],
          "FieldLUDecomposition.getU()": [
            4,
            4,
            4
          ],
          "FieldLUDecomposition.getP()": [
            3,
            3,
            3
          ],
          "FieldLUDecomposition.getDeterminant()": [
            4,
            4,
            4
          ],
          "Solver.solve(FieldVector<T>)": [
            10,
            10,
            10
          ],
          "Solver.solve(ArrayFieldVector<T>)": [
            8,
            8,
            8
          ],
          "Solver.getInverse()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "Solver.solve(FieldMatrix<T>)": [
            12,
            12,
            12
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/FieldLUDecompositionTest.java"
    },
    {
      "src_name": "Dfp",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/dfp/Dfp.java",
      "class_declaration": "public class Dfp implements RealFieldElement<Dfp> ",
      "methods_under_test": {
        "=1": {
          "Dfp.newInstance()": [
            1,
            1,
            1
          ],
          "Dfp.newInstance(final, byte)": [
            1,
            1,
            1
          ],
          "Dfp.newInstance(final, int)": [
            1,
            1,
            1
          ],
          "Dfp.newInstance(final, long)": [
            1,
            1,
            1
          ],
          "Dfp.newInstance(final, double)": [
            1,
            1,
            1
          ],
          "Dfp.newInstance(final, String)": [
            1,
            1,
            1
          ],
          "Dfp.newInstance(final, byte, final, byte)": [
            1,
            1,
            1
          ],
          "Dfp.abs()": [
            1,
            1,
            1
          ],
          "Dfp.hashCode()": [
            1,
            1,
            1
          ],
          "Dfp.rint()": [
            1,
            1,
            1
          ],
          "Dfp.floor()": [
            1,
            1,
            1
          ],
          "Dfp.ceil()": [
            1,
            1,
            1
          ],
          "Dfp.log10K()": [
            1,
            1,
            1
          ],
          "Dfp.power10K(final, int)": [
            1,
            1,
            1
          ],
          "Dfp.negate()": [
            1,
            1,
            1
          ],
          "Dfp.subtract(final, Dfp)": [
            1,
            1,
            1
          ],
          "Dfp.reciprocal()": [
            1,
            1,
            1
          ],
          "Dfp.trap(int, String, Dfp, Dfp, Dfp)": [
            1,
            1,
            1
          ],
          "Dfp.classify()": [
            1,
            1,
            1
          ],
          "Dfp.copysign(final, Dfp, final, Dfp)": [
            1,
            1,
            1
          ],
          "Dfp.toSplitDouble()": [
            1,
            1,
            1
          ],
          "Dfp.add(final, double)": [
            1,
            1,
            1
          ],
          "Dfp.subtract(final, double)": [
            1,
            1,
            1
          ],
          "Dfp.multiply(final, double)": [
            1,
            1,
            1
          ],
          "Dfp.divide(final, double)": [
            1,
            1,
            1
          ],
          "Dfp.remainder(final, double)": [
            1,
            1,
            1
          ],
          "Dfp.round()": [
            1,
            1,
            1
          ],
          "Dfp.scalb(final, int)": [
            1,
            1,
            1
          ],
          "Dfp.hypot(final, Dfp)": [
            1,
            1,
            1
          ],
          "Dfp.cbrt()": [
            1,
            1,
            1
          ],
          "Dfp.rootN(final, int)": [
            1,
            1,
            1
          ],
          "Dfp.pow(final, double)": [
            1,
            1,
            1
          ],
          "Dfp.pow(final, int)": [
            1,
            1,
            1
          ],
          "Dfp.pow(final, Dfp)": [
            1,
            1,
            1
          ],
          "Dfp.exp()": [
            1,
            1,
            1
          ],
          "Dfp.expm1()": [
            1,
            1,
            1
          ],
          "Dfp.log()": [
            1,
            1,
            1
          ],
          "Dfp.log1p()": [
            1,
            1,
            1
          ],
          "Dfp.log10()": [
            1,
            1,
            1
          ],
          "Dfp.cos()": [
            1,
            1,
            1
          ],
          "Dfp.sin()": [
            1,
            1,
            1
          ],
          "Dfp.tan()": [
            1,
            1,
            1
          ],
          "Dfp.acos()": [
            1,
            1,
            1
          ],
          "Dfp.asin()": [
            1,
            1,
            1
          ],
          "Dfp.atan()": [
            1,
            1,
            1
          ],
          "Dfp.cosh()": [
            1,
            1,
            1
          ],
          "Dfp.sinh()": [
            1,
            1,
            1
          ],
          "Dfp.tanh()": [
            1,
            1,
            1
          ],
          "Dfp.acosh()": [
            1,
            1,
            1
          ],
          "Dfp.asinh()": [
            1,
            1,
            1
          ],
          "Dfp.atanh()": [
            1,
            1,
            1
          ],
          "Dfp.linearCombination(final, Dfp, final, Dfp, final, Dfp, final, Dfp)": [
            1,
            1,
            1
          ],
          "Dfp.linearCombination(final, double, final, Dfp, final, double, final, Dfp)": [
            1,
            1,
            1
          ],
          "Dfp.linearCombination(final, Dfp, final, Dfp, final, Dfp, final, Dfp, final, Dfp, final, Dfp)": [
            1,
            1,
            1
          ],
          "Dfp.linearCombination(final, double, final, Dfp, final, double, final, Dfp, final, double, final, Dfp)": [
            1,
            1,
            1
          ],
          "Dfp.linearCombination(final, Dfp, final, Dfp, final, Dfp, final, Dfp, final, Dfp, final, Dfp, final, Dfp, final, Dfp)": [
            1,
            1,
            1
          ],
          "Dfp.linearCombination(final, double, final, Dfp, final, double, final, Dfp, final, double, final, Dfp, final, double, final, Dfp)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Dfp.newInstance(final, Dfp)": [
            2,
            2,
            2
          ],
          "Dfp.shiftLeft()": [
            2,
            2,
            2
          ],
          "Dfp.shiftRight()": [
            2,
            2,
            2
          ],
          "Dfp.align(int)": [
            8,
            8,
            8
          ],
          "Dfp.lessThan(final, Dfp)": [
            3,
            3,
            3
          ],
          "Dfp.greaterThan(final, Dfp)": [
            3,
            3,
            3
          ],
          "Dfp.negativeOrNull()": [
            2,
            2,
            2
          ],
          "Dfp.strictlyNegative()": [
            2,
            2,
            2
          ],
          "Dfp.positiveOrNull()": [
            2,
            2,
            2
          ],
          "Dfp.strictlyPositive()": [
            2,
            2,
            2
          ],
          "Dfp.equals(final, Object)": [
            3,
            3,
            3
          ],
          "Dfp.unequal(final, Dfp)": [
            2,
            2,
            2
          ],
          "Dfp.remainder(final, Dfp)": [
            2,
            2,
            2
          ],
          "Dfp.intValue()": [
            5,
            5,
            5
          ],
          "Dfp.intLog10()": [
            4,
            4,
            4
          ],
          "Dfp.power10(final, int)": [
            5,
            5,
            5
          ],
          "Dfp.complement(int)": [
            3,
            3,
            3
          ],
          "Dfp.multiply(final, int)": [
            3,
            3,
            3
          ],
          "Dfp.divide(int)": [
            9,
            9,
            9
          ],
          "Dfp.toString()": [
            4,
            4,
            4
          ],
          "Dfp.dfp2sci()": [
            10,
            10,
            10
          ],
          "Dfp.dotrap(int, String, Dfp, Dfp)": [
            10,
            10,
            10
          ],
          "Dfp.signum()": [
            3,
            3,
            3
          ],
          "Dfp.copySign(final, Dfp)": [
            2,
            2,
            2
          ],
          "Dfp.copySign(final, double)": [
            2,
            2,
            2
          ],
          "Dfp.atan2(final, Dfp)": [
            3,
            3,
            3
          ],
          "Dfp.linearCombination(final, Dfp[], final, Dfp[])": [
            3,
            3,
            3
          ],
          "Dfp.linearCombination(final, double[], final, Dfp[])": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "Dfp.trunc(final, DfpField.RoundingMode)": [
            15,
            15,
            15
          ],
          "Dfp.round(int)": [
            15,
            15,
            15
          ],
          "Dfp.multiply(final, Dfp)": [
            17,
            17,
            17
          ],
          "Dfp.sqrt()": [
            14,
            14,
            14
          ],
          "Dfp.dfp2string()": [
            11,
            11,
            11
          ],
          "Dfp.nextAfter(final, Dfp)": [
            11,
            11,
            11
          ],
          "Dfp.toDouble()": [
            15,
            15,
            15
          ]
        },
        ">20": {
          "Dfp.add(final, Dfp)": [
            24,
            24,
            24
          ],
          "Dfp.divide(Dfp)": [
            31,
            31,
            31
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/dfp/DfpTest.java"
    },
    {
      "src_name": "FastSineTransformer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/transform/FastSineTransformer.java",
      "class_declaration": "public class FastSineTransformer implements RealTransformer, Serializable ",
      "methods_under_test": {
        "=1": {
          "FastSineTransformer.transform(final, UnivariateFunction, final, double, final, double, final, int, final, TransformType)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FastSineTransformer.transform(final, double[], final, TransformType)": [
            3,
            3,
            3
          ],
          "FastSineTransformer.fst(double[])": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/transform/FastSineTransformerTest.java"
    },
    {
      "src_name": "LaguerreSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/LaguerreSolver.java",
      "class_declaration": "public class LaguerreSolver extends AbstractPolynomialSolver ",
      "methods_under_test": {
        "=1": {
          "LaguerreSolver.solveAllComplex(double[], double)": [
            1,
            1,
            1
          ],
          "LaguerreSolver.solveComplex(double[], double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LaguerreSolver.doSolve()": [
            6,
            6,
            6
          ],
          "LaguerreSolver.laguerre(double, double, double, double)": [
            5,
            5,
            5
          ],
          "ComplexSolver.isRoot(double, double, Complex)": [
            2,
            2,
            2
          ],
          "ComplexSolver.solveAll(Complex, [], Complex)": [
            6,
            6,
            6
          ],
          "ComplexSolver.solve(Complex, [], Complex)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/solvers/LaguerreSolverTest.java"
    },
    {
      "src_name": "PolynomialFitter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/PolynomialFitter.java",
      "class_declaration": "public class PolynomialFitter extends CurveFitter<PolynomialFunction.Parametric> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java"
    },
    {
      "src_name": "TriDiagonalTransformer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/TriDiagonalTransformer.java",
      "class_declaration": "class TriDiagonalTransformer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "TriDiagonalTransformer.getQ()": [
            2,
            2,
            2
          ],
          "TriDiagonalTransformer.getQT()": [
            8,
            8,
            8
          ],
          "TriDiagonalTransformer.getT()": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/TriDiagonalTransformerTest.java"
    },
    {
      "src_name": "RotationOrder",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/RotationOrder.java",
      "class_declaration": "public final class RotationOrder ",
      "methods_under_test": {
        "=1": {
          "RotationOrder.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/RotationOrderTest.java"
    },
    {
      "src_name": "HighamHall54StepInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/HighamHall54StepInterpolator.java",
      "class_declaration": "class HighamHall54StepInterpolator extends RungeKuttaStepInterpolator ",
      "methods_under_test": {
        "=1": {
          "HighamHall54StepInterpolator.doCopy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "HighamHall54StepInterpolator.computeInterpolatedStateAndDerivatives(final, double, final, double)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/HighamHall54StepInterpolatorTest.java"
    },
    {
      "src_name": "Vector3DFormat",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormat.java",
      "class_declaration": "public class Vector3DFormat extends VectorFormat<Euclidean3D> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatTest.java"
    },
    {
      "src_name": "CholeskyDecomposition",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/CholeskyDecomposition.java",
      "class_declaration": "public class CholeskyDecomposition ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "CholeskyDecomposition.getL()": [
            2,
            2,
            2
          ],
          "CholeskyDecomposition.getLT()": [
            2,
            2,
            2
          ],
          "CholeskyDecomposition.getDeterminant()": [
            2,
            2,
            2
          ],
          "Solver.solve(final, RealVector)": [
            6,
            6,
            6
          ],
          "Solver.solve(RealMatrix)": [
            10,
            10,
            10
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/CholeskyDecompositionTest.java"
    },
    {
      "src_name": "ArrayRealVector",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/ArrayRealVector.java",
      "class_declaration": "public class ArrayRealVector extends RealVector implements Serializable ",
      "methods_under_test": {
        "=1": {
          "ArrayRealVector.copy()": [
            1,
            1,
            1
          ],
          "ArrayRealVector.map(UnivariateFunction)": [
            1,
            1,
            1
          ],
          "ArrayRealVector.append(ArrayRealVector)": [
            1,
            1,
            1
          ],
          "ArrayRealVector.append(double)": [
            1,
            1,
            1
          ],
          "ArrayRealVector.toArray()": [
            1,
            1,
            1
          ],
          "ArrayRealVector.toString()": [
            1,
            1,
            1
          ],
          "ArrayRealVector.checkVectorDimensions(RealVector)": [
            1,
            1,
            1
          ],
          "ArrayRealVector.checkVectorDimensions(int)": [
            1,
            1,
            1
          ],
          "ArrayRealVector.combine(double, double, RealVector)": [
            1,
            1,
            1
          ],
          "ArrayRealVector.walkInOptimizedOrder(final, RealVectorPreservingVisitor)": [
            1,
            1,
            1
          ],
          "ArrayRealVector.walkInOptimizedOrder(final, RealVectorPreservingVisitor, final, int, final, int)": [
            1,
            1,
            1
          ],
          "ArrayRealVector.walkInOptimizedOrder(final, RealVectorChangingVisitor)": [
            1,
            1,
            1
          ],
          "ArrayRealVector.walkInOptimizedOrder(final, RealVectorChangingVisitor, final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArrayRealVector.add(RealVector)": [
            5,
            5,
            5
          ],
          "ArrayRealVector.subtract(RealVector)": [
            5,
            5,
            5
          ],
          "ArrayRealVector.mapToSelf(UnivariateFunction)": [
            2,
            2,
            2
          ],
          "ArrayRealVector.mapAddToSelf(double)": [
            2,
            2,
            2
          ],
          "ArrayRealVector.mapSubtractToSelf(double)": [
            2,
            2,
            2
          ],
          "ArrayRealVector.mapMultiplyToSelf(double)": [
            2,
            2,
            2
          ],
          "ArrayRealVector.mapDivideToSelf(double)": [
            2,
            2,
            2
          ],
          "ArrayRealVector.ebeMultiply(RealVector)": [
            5,
            5,
            5
          ],
          "ArrayRealVector.ebeDivide(RealVector)": [
            5,
            5,
            5
          ],
          "ArrayRealVector.dotProduct(RealVector)": [
            3,
            3,
            3
          ],
          "ArrayRealVector.getNorm()": [
            2,
            2,
            2
          ],
          "ArrayRealVector.getL1Norm()": [
            2,
            2,
            2
          ],
          "ArrayRealVector.getLInfNorm()": [
            2,
            2,
            2
          ],
          "ArrayRealVector.getDistance(RealVector)": [
            5,
            5,
            5
          ],
          "ArrayRealVector.getL1Distance(RealVector)": [
            5,
            5,
            5
          ],
          "ArrayRealVector.getLInfDistance(RealVector)": [
            5,
            5,
            5
          ],
          "ArrayRealVector.outerProduct(RealVector)": [
            7,
            7,
            7
          ],
          "ArrayRealVector.getEntry(int)": [
            2,
            2,
            2
          ],
          "ArrayRealVector.append(RealVector)": [
            3,
            3,
            3
          ],
          "ArrayRealVector.getSubVector(int, int)": [
            3,
            3,
            3
          ],
          "ArrayRealVector.setEntry(int, double)": [
            3,
            3,
            3
          ],
          "ArrayRealVector.addToEntry(int, double)": [
            2,
            2,
            2
          ],
          "ArrayRealVector.setSubVector(int, RealVector)": [
            6,
            6,
            6
          ],
          "ArrayRealVector.setSubVector(int, double[])": [
            3,
            3,
            3
          ],
          "ArrayRealVector.equals(Object)": [
            7,
            7,
            7
          ],
          "ArrayRealVector.hashCode()": [
            2,
            2,
            2
          ],
          "ArrayRealVector.combineToSelf(double, double, RealVector)": [
            4,
            4,
            4
          ],
          "ArrayRealVector.walkInDefaultOrder(final, RealVectorPreservingVisitor)": [
            2,
            2,
            2
          ],
          "ArrayRealVector.walkInDefaultOrder(final, RealVectorPreservingVisitor, final, int, final, int)": [
            2,
            2,
            2
          ],
          "ArrayRealVector.walkInDefaultOrder(final, RealVectorChangingVisitor)": [
            2,
            2,
            2
          ],
          "ArrayRealVector.walkInDefaultOrder(final, RealVectorChangingVisitor, final, int, final, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/ArrayRealVectorTest.java"
    },
    {
      "src_name": "NonLinearConjugateGradientOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizer.java",
      "class_declaration": "@Deprecated\npublic class NonLinearConjugateGradientOptimizer extends AbstractScalarDifferentiableOptimizer ",
      "methods_under_test": {
        "=1": {
          "IdentityPreconditioner.precondition(double[], double[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NonLinearConjugateGradientOptimizer.setInitialStep(final, double)": [
            3,
            3,
            3
          ],
          "NonLinearConjugateGradientOptimizer.doOptimize()": [
            5,
            5,
            5
          ],
          "LineSearchFunction.value(double)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java"
    },
    {
      "src_name": "ContinuousOutputModel",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/ContinuousOutputModel.java",
      "class_declaration": "public class ContinuousOutputModel implements StepHandler, Serializable ",
      "methods_under_test": {
        "=1": {
          "ContinuousOutputModel.init(double, double[], double)": [
            1,
            1,
            1
          ],
          "ContinuousOutputModel.getInterpolatedSecondaryState(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ContinuousOutputModel.append(final, ContinuousOutputModel)": [
            7,
            7,
            7
          ],
          "ContinuousOutputModel.handleStep(final, StepInterpolator, final, boolean)": [
            3,
            3,
            3
          ],
          "ContinuousOutputModel.setInterpolatedTime(final, double)": [
            10,
            10,
            10
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/ContinuousOutputModelTest.java"
    },
    {
      "src_name": "Sqrt",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java",
      "class_declaration": "public class Sqrt implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Sqrt.value(double)": [
            1,
            1,
            1
          ],
          "Sqrt.derivative()": [
            1,
            1,
            1
          ],
          "Sqrt.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java"
    },
    {
      "src_name": "EnumeratedIntegerDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistribution.java",
      "class_declaration": "public class EnumeratedIntegerDistribution extends AbstractIntegerDistribution ",
      "methods_under_test": {
        "=1": {
          "EnumeratedIntegerDistribution.probability(final, int)": [
            1,
            1,
            1
          ],
          "EnumeratedIntegerDistribution.sample()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EnumeratedIntegerDistribution.cumulativeProbability(final, int)": [
            3,
            3,
            3
          ],
          "EnumeratedIntegerDistribution.getNumericalMean()": [
            2,
            2,
            2
          ],
          "EnumeratedIntegerDistribution.getNumericalVariance()": [
            2,
            2,
            2
          ],
          "EnumeratedIntegerDistribution.getSupportLowerBound()": [
            3,
            3,
            3
          ],
          "EnumeratedIntegerDistribution.getSupportUpperBound()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/EnumeratedIntegerDistributionTest.java"
    },
    {
      "src_name": "EnumeratedRealDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/EnumeratedRealDistribution.java",
      "class_declaration": "public class EnumeratedRealDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {
          "EnumeratedRealDistribution.probability(final, double)": [
            1,
            1,
            1
          ],
          "EnumeratedRealDistribution.density(final, double)": [
            1,
            1,
            1
          ],
          "EnumeratedRealDistribution.sample()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EnumeratedRealDistribution.cumulativeProbability(final, double)": [
            3,
            3,
            3
          ],
          "EnumeratedRealDistribution.getNumericalMean()": [
            2,
            2,
            2
          ],
          "EnumeratedRealDistribution.getNumericalVariance()": [
            2,
            2,
            2
          ],
          "EnumeratedRealDistribution.getSupportLowerBound()": [
            3,
            3,
            3
          ],
          "EnumeratedRealDistribution.getSupportUpperBound()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/EnumeratedRealDistributionTest.java"
    },
    {
      "src_name": "OrderedCrossover",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/OrderedCrossover.java",
      "class_declaration": "public class OrderedCrossover <T> implements CrossoverPolicy ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "OrderedCrossover.crossover(final, Chromosome, final, Chromosome)": [
            2,
            2,
            2
          ],
          "OrderedCrossover.mate(final, AbstractListChromosome<T>, final, AbstractListChromosome<T>)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/OrderedCrossoverTest.java"
    },
    {
      "src_name": "Well1024a",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/Well1024a.java",
      "class_declaration": "public class Well1024a extends AbstractWell ",
      "methods_under_test": {
        "=1": {
          "Well1024a.next(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/Well1024aTest.java"
    },
    {
      "src_name": "BracketFinder",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/univariate/BracketFinder.java",
      "class_declaration": "public class BracketFinder ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BracketFinder.search(UnivariateFunction, GoalType, double, double)": [
            10,
            10,
            10
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/univariate/BracketFinderTest.java"
    },
    {
      "src_name": "NaturalRanking",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java",
      "class_declaration": "public class NaturalRanking implements RankingAlgorithm ",
      "methods_under_test": {
        "=1": {
          "IntDoublePair.compareTo(IntDoublePair)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {
          "NaturalRanking.rank(double[])": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/ranking/NaturalRankingTest.java"
    },
    {
      "src_name": "AbstractLeastSquaresOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java",
      "class_declaration": "public abstract class AbstractLeastSquaresOptimizer extends JacobianMultivariateVectorOptimizer ",
      "methods_under_test": {
        "=1": {
          "AbstractLeastSquaresOptimizer.computeWeightedJacobian(double[])": [
            1,
            1,
            1
          ],
          "AbstractLeastSquaresOptimizer.computeCost(double[])": [
            1,
            1,
            1
          ],
          "AbstractLeastSquaresOptimizer.computeCovariances(double[], double)": [
            1,
            1,
            1
          ],
          "AbstractLeastSquaresOptimizer.optimize()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractLeastSquaresOptimizer.computeSigma(double[], double)": [
            2,
            2,
            2
          ],
          "AbstractLeastSquaresOptimizer.computeResiduals(double[])": [
            3,
            3,
            3
          ],
          "AbstractLeastSquaresOptimizer.parseOptimizationData()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java"
    },
    {
      "src_name": "MaxCountExceededException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/MaxCountExceededException.java",
      "class_declaration": "public class MaxCountExceededException extends MathIllegalStateException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/exception/MaxCountExceededExceptionTest.java"
    },
    {
      "src_name": "Plane",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Plane.java",
      "class_declaration": "public class Plane implements Hyperplane<Euclidean3D>, Embedding<Euclidean3D, Euclidean2D> ",
      "methods_under_test": {
        "=1": {
          "Plane.copySelf()": [
            1,
            1,
            1
          ],
          "Plane.reset(final, Vector3D, final, Vector3D)": [
            1,
            1,
            1
          ],
          "Plane.reset(final, Plane)": [
            1,
            1,
            1
          ],
          "Plane.revertSelf()": [
            1,
            1,
            1
          ],
          "Plane.toSubSpace(final, Vector<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "Plane.toSpace(final, Vector<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "Plane.getPointAt(final, Vector2D, final, double)": [
            1,
            1,
            1
          ],
          "Plane.isSimilarTo(final, Plane)": [
            1,
            1,
            1
          ],
          "Plane.rotate(final, Vector3D, final, Rotation)": [
            1,
            1,
            1
          ],
          "Plane.translate(final, Vector3D)": [
            1,
            1,
            1
          ],
          "Plane.wholeHyperplane()": [
            1,
            1,
            1
          ],
          "Plane.wholeSpace()": [
            1,
            1,
            1
          ],
          "Plane.contains(final, Vector3D)": [
            1,
            1,
            1
          ],
          "Plane.getOffset(final, Plane)": [
            1,
            1,
            1
          ],
          "Plane.getOffset(final, Vector<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "Plane.sameOrientationAs(final, Hyperplane<Euclidean3D>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Plane.intersection(final, Line)": [
            2,
            2,
            2
          ],
          "Plane.intersection(final, Plane)": [
            2,
            2,
            2
          ],
          "Plane.intersection(final, Plane, final, Plane, final, Plane)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PlaneTest.java"
    },
    {
      "src_name": "SingularValueDecomposition",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java",
      "class_declaration": "public class SingularValueDecomposition ",
      "methods_under_test": {
        "=1": {
          "Solver.solve(final, RealVector)": [
            1,
            1,
            1
          ],
          "Solver.solve(final, RealMatrix)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SingularValueDecomposition.getUT()": [
            2,
            2,
            2
          ],
          "SingularValueDecomposition.getS()": [
            2,
            2,
            2
          ],
          "SingularValueDecomposition.getVT()": [
            2,
            2,
            2
          ],
          "SingularValueDecomposition.getCovariance(final, double)": [
            3,
            0,
            0
          ],
          "SingularValueDecomposition.getRank()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/SingularValueDecompositionTest.java"
    },
    {
      "src_name": "SmoothingPolynomialBicubicSplineInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java",
      "class_declaration": "public class SmoothingPolynomialBicubicSplineInterpolator extends BicubicSplineInterpolator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {
          "SmoothingPolynomialBicubicSplineInterpolator.interpolate(final, double[], final, double[], final, double[][])": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java"
    },
    {
      "src_name": "NumberIsTooSmallException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/NumberIsTooSmallException.java",
      "class_declaration": "public class NumberIsTooSmallException extends MathIllegalNumberException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/exception/NumberIsTooSmallExceptionTest.java"
    },
    {
      "src_name": "BigRealField",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/BigRealField.java",
      "class_declaration": "public class BigRealField implements Field<BigReal>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/BigRealFieldTest.java"
    },
    {
      "src_name": "BaseRuleFactory",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactory.java",
      "class_declaration": "public abstract class BaseRuleFactory <T extends Number> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BaseRuleFactory.getRule(int)": [
            3,
            3,
            3
          ],
          "BaseRuleFactory.getRuleInternal(int)": [
            4,
            4,
            4
          ],
          "BaseRuleFactory.addRule(Pair<T[], T[]>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/integration/gauss/BaseRuleFactoryTest.java"
    },
    {
      "src_name": "BracketingNthOrderBrentSolverDFP",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/dfp/BracketingNthOrderBrentSolverDFP.java",
      "class_declaration": "public class BracketingNthOrderBrentSolverDFP ",
      "methods_under_test": {
        "=1": {
          "BracketingNthOrderBrentSolverDFP.solve(final, int, final, UnivariateDfpFunction, final, Dfp, final, Dfp, final, AllowedSolution)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {
          "BracketingNthOrderBrentSolverDFP.solve(final, int, final, UnivariateDfpFunction, final, Dfp, final, Dfp, final, Dfp, final, AllowedSolution)": [
            19,
            19,
            19
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/dfp/BracketingNthOrderBrentSolverDFPTest.java"
    },
    {
      "src_name": "PolygonsSet",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java",
      "class_declaration": "public class PolygonsSet extends AbstractRegion<Euclidean2D, Euclidean1D> ",
      "methods_under_test": {
        "=1": {
          "Vertex.bindWith(final, Line)": [
            1,
            1,
            1
          ],
          "Vertex.setIncoming(final, Edge)": [
            1,
            1,
            1
          ],
          "Vertex.setOutgoing(final, Edge)": [
            1,
            1,
            1
          ],
          "Edge.setNode(final, BSPTree<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "Edge.split(final, Line)": [
            1,
            1,
            1
          ],
          "ComparableSegment.compareTo(final, ComparableSegment)": [
            1,
            1,
            1
          ],
          "ComparableSegment.hashCode()": [
            1,
            1,
            1
          ],
          "SegmentsBuilder.visitOrder(final, BSPTree<Euclidean2D>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Vertex.sharedLineWith(final, Vertex)": [
            4,
            4,
            4
          ],
          "ComparableSegment.equals(final, Object)": [
            4,
            4,
            4
          ],
          "SegmentsBuilder.visitInternalNode(final, BSPTree<Euclidean2D>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java"
    },
    {
      "src_name": "TDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/TDistribution.java",
      "class_declaration": "public class TDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {
          "TDistribution.density(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TDistribution.cumulativeProbability(double)": [
            3,
            3,
            3
          ],
          "TDistribution.getNumericalMean()": [
            2,
            2,
            2
          ],
          "TDistribution.getNumericalVariance()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/TDistributionTest.java"
    },
    {
      "src_name": "JacobianFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/differentiation/JacobianFunction.java",
      "class_declaration": "public class JacobianFunction implements MultivariateMatrixFunction ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "JacobianFunction.value(double[])": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/differentiation/JacobianFunctionTest.java"
    },
    {
      "src_name": "AbstractIntegerDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java",
      "class_declaration": "public abstract class AbstractIntegerDistribution implements IntegerDistribution, Serializable ",
      "methods_under_test": {
        "=1": {
          "AbstractIntegerDistribution.reseedRandomGenerator(long)": [
            1,
            1,
            1
          ],
          "AbstractIntegerDistribution.sample()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractIntegerDistribution.cumulativeProbability(int, int)": [
            2,
            2,
            2
          ],
          "AbstractIntegerDistribution.inverseCumulativeProbability(final, double)": [
            9,
            9,
            9
          ],
          "AbstractIntegerDistribution.solveInverseCumulativeProbability(final, double, int, int)": [
            4,
            4,
            4
          ],
          "AbstractIntegerDistribution.sample(int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/AbstractIntegerDistributionTest.java"
    },
    {
      "src_name": "Incrementor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/Incrementor.java",
      "class_declaration": "public class Incrementor ",
      "methods_under_test": {
        "=1": {
          "Incrementor.canIncrement()": [
            1,
            1,
            1
          ],
          "Incrementor.incrementCount(int)": [
            1,
            1,
            1
          ],
          "Incrementor.resetCount()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Incrementor.incrementCount()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/IncrementorTest.java"
    },
    {
      "src_name": "ParetoDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/ParetoDistribution.java",
      "class_declaration": "public class ParetoDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {
          "ParetoDistribution.cumulativeProbability(double, double)": [
            1,
            1,
            1
          ],
          "ParetoDistribution.sample()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ParetoDistribution.density(double)": [
            2,
            2,
            2
          ],
          "ParetoDistribution.cumulativeProbability(double)": [
            2,
            2,
            2
          ],
          "ParetoDistribution.getNumericalMean()": [
            2,
            2,
            2
          ],
          "ParetoDistribution.getNumericalVariance()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/ParetoDistributionTest.java"
    },
    {
      "src_name": "LUDecomposition",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/LUDecomposition.java",
      "class_declaration": "public class LUDecomposition ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "LUDecomposition.getL()": [
            4,
            4,
            4
          ],
          "LUDecomposition.getU()": [
            4,
            4,
            4
          ],
          "LUDecomposition.getP()": [
            3,
            3,
            3
          ],
          "LUDecomposition.getDeterminant()": [
            4,
            4,
            4
          ],
          "Solver.solve(RealVector)": [
            8,
            8,
            8
          ]
        },
        "11-20": {
          "Solver.solve(RealMatrix)": [
            12,
            12,
            12
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/LUDecompositionTest.java"
    },
    {
      "src_name": "Product",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/summary/Product.java",
      "class_declaration": "public class Product extends AbstractStorelessUnivariateStatistic implements Serializable, WeightedEvaluation ",
      "methods_under_test": {
        "=1": {
          "Product.increment(final, double)": [
            1,
            1,
            1
          ],
          "Product.clear()": [
            1,
            1,
            1
          ],
          "Product.evaluate(final, double[], final, double[])": [
            1,
            1,
            1
          ],
          "Product.copy()": [
            1,
            1,
            1
          ],
          "Product.copy(Product, Product)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Product.evaluate(final, double[], final, int, final, int)": [
            3,
            3,
            3
          ],
          "Product.evaluate(final, double[], final, double[], final, int, final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/summary/ProductTest.java"
    },
    {
      "src_name": "Well44497a",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/Well44497a.java",
      "class_declaration": "public class Well44497a extends AbstractWell ",
      "methods_under_test": {
        "=1": {
          "Well44497a.next(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/Well44497aTest.java"
    },
    {
      "src_name": "SecantSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/SecantSolver.java",
      "class_declaration": "public class SecantSolver extends AbstractUnivariateSolver ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SecantSolver.doSolve()": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/solvers/SecantSolverTest.java"
    },
    {
      "src_name": "StatisticalSummaryValues",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/StatisticalSummaryValues.java",
      "class_declaration": "public class StatisticalSummaryValues implements Serializable,\n    StatisticalSummary ",
      "methods_under_test": {
        "=1": {
          "StatisticalSummaryValues.hashCode()": [
            1,
            1,
            1
          ],
          "StatisticalSummaryValues.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StatisticalSummaryValues.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/StatisticalSummaryValuesTest.java"
    },
    {
      "src_name": "ArgUtils",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/util/ArgUtils.java",
      "class_declaration": "public class ArgUtils ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ArgUtils.flatten(Object[])": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/exception/util/ArgUtilsTest.java"
    },
    {
      "src_name": "TooManyEvaluationsException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/TooManyEvaluationsException.java",
      "class_declaration": "public class TooManyEvaluationsException extends MaxCountExceededException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/exception/TooManyEvaluationsExceptionTest.java"
    },
    {
      "src_name": "ExceptionContext",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java",
      "class_declaration": "public class ExceptionContext implements Serializable ",
      "methods_under_test": {
        "=1": {
          "ExceptionContext.addMessage(Localizable)": [
            1,
            1,
            1
          ],
          "ExceptionContext.setValue(String, Object)": [
            1,
            1,
            1
          ],
          "ExceptionContext.getValue(String)": [
            1,
            1,
            1
          ],
          "ExceptionContext.getMessage(final, Locale)": [
            1,
            1,
            1
          ],
          "ExceptionContext.getMessage(final, Locale, final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/exception/util/ExceptionContextTest.java"
    },
    {
      "src_name": "UniformCrossover",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/UniformCrossover.java",
      "class_declaration": "public class UniformCrossover <T> implements CrossoverPolicy ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "UniformCrossover.crossover(final, Chromosome, final, Chromosome)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java"
    },
    {
      "src_name": "ArrayFieldVector",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java",
      "class_declaration": "public class ArrayFieldVector <T extends FieldElement<T>> implements FieldVector<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "ArrayFieldVector.copy()": [
            1,
            1,
            1
          ],
          "ArrayFieldVector.projection(FieldVector<T>)": [
            1,
            1,
            1
          ],
          "ArrayFieldVector.projection(ArrayFieldVector<T>)": [
            1,
            1,
            1
          ],
          "ArrayFieldVector.getEntry(int)": [
            1,
            1,
            1
          ],
          "ArrayFieldVector.append(ArrayFieldVector<T>)": [
            1,
            1,
            1
          ],
          "ArrayFieldVector.append(T)": [
            1,
            1,
            1
          ],
          "ArrayFieldVector.toArray()": [
            1,
            1,
            1
          ],
          "ArrayFieldVector.checkVectorDimensions(FieldVector<T>)": [
            1,
            1,
            1
          ],
          "ArrayFieldVector.checkVectorDimensions(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArrayFieldVector.add(FieldVector<T>)": [
            4,
            4,
            4
          ],
          "ArrayFieldVector.add(ArrayFieldVector<T>)": [
            2,
            2,
            2
          ],
          "ArrayFieldVector.subtract(FieldVector<T>)": [
            4,
            4,
            4
          ],
          "ArrayFieldVector.subtract(ArrayFieldVector<T>)": [
            2,
            2,
            2
          ],
          "ArrayFieldVector.mapAdd(T)": [
            2,
            2,
            2
          ],
          "ArrayFieldVector.mapAddToSelf(T)": [
            2,
            2,
            2
          ],
          "ArrayFieldVector.mapSubtract(T)": [
            2,
            2,
            2
          ],
          "ArrayFieldVector.mapSubtractToSelf(T)": [
            2,
            2,
            2
          ],
          "ArrayFieldVector.mapMultiply(T)": [
            2,
            2,
            2
          ],
          "ArrayFieldVector.mapMultiplyToSelf(T)": [
            2,
            2,
            2
          ],
          "ArrayFieldVector.mapDivide(T)": [
            2,
            2,
            2
          ],
          "ArrayFieldVector.mapDivideToSelf(T)": [
            2,
            2,
            2
          ],
          "ArrayFieldVector.mapInv()": [
            3,
            3,
            3
          ],
          "ArrayFieldVector.mapInvToSelf()": [
            3,
            3,
            3
          ],
          "ArrayFieldVector.ebeMultiply(FieldVector<T>)": [
            4,
            4,
            4
          ],
          "ArrayFieldVector.ebeMultiply(ArrayFieldVector<T>)": [
            2,
            2,
            2
          ],
          "ArrayFieldVector.ebeDivide(FieldVector<T>)": [
            5,
            5,
            5
          ],
          "ArrayFieldVector.ebeDivide(ArrayFieldVector<T>)": [
            3,
            3,
            3
          ],
          "ArrayFieldVector.dotProduct(FieldVector<T>)": [
            4,
            4,
            4
          ],
          "ArrayFieldVector.dotProduct(ArrayFieldVector<T>)": [
            2,
            2,
            2
          ],
          "ArrayFieldVector.outerProduct(FieldVector<T>)": [
            5,
            5,
            5
          ],
          "ArrayFieldVector.outerProduct(ArrayFieldVector<T>)": [
            3,
            3,
            3
          ],
          "ArrayFieldVector.append(FieldVector<T>)": [
            3,
            3,
            3
          ],
          "ArrayFieldVector.getSubVector(int, int)": [
            3,
            3,
            3
          ],
          "ArrayFieldVector.setEntry(int, T)": [
            3,
            3,
            3
          ],
          "ArrayFieldVector.setSubVector(int, FieldVector<T>)": [
            7,
            7,
            7
          ],
          "ArrayFieldVector.set(int, ArrayFieldVector<T>)": [
            3,
            3,
            3
          ],
          "ArrayFieldVector.hashCode()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "ArrayFieldVector.equals(Object)": [
            14,
            14,
            14
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/ArrayFieldVectorTest.java"
    },
    {
      "src_name": "PolynomialFunctionLagrangeForm",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionLagrangeForm.java",
      "class_declaration": "public class PolynomialFunctionLagrangeForm implements UnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "PolynomialFunctionLagrangeForm.value(double)": [
            1,
            1,
            1
          ],
          "PolynomialFunctionLagrangeForm.degree()": [
            1,
            1,
            1
          ],
          "PolynomialFunctionLagrangeForm.getInterpolatingPoints()": [
            1,
            1,
            1
          ],
          "PolynomialFunctionLagrangeForm.getInterpolatingValues()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PolynomialFunctionLagrangeForm.getCoefficients()": [
            2,
            2,
            2
          ],
          "PolynomialFunctionLagrangeForm.evaluate(double, [], double, [], double)": [
            2,
            2,
            2
          ],
          "PolynomialFunctionLagrangeForm.computeCoefficients()": [
            8,
            8,
            8
          ],
          "PolynomialFunctionLagrangeForm.verifyInterpolationArray(double, [], double, [], boolean)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionLagrangeFormTest.java"
    },
    {
      "src_name": "MultivariateMultiStartOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/MultivariateMultiStartOptimizer.java",
      "class_declaration": "@Deprecated\npublic class MultivariateMultiStartOptimizer extends BaseMultivariateMultiStartOptimizer<MultivariateFunction> implements MultivariateOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/MultivariateMultiStartOptimizerTest.java"
    },
    {
      "src_name": "GraggBulirschStoerStepInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerStepInterpolator.java",
      "class_declaration": "class GraggBulirschStoerStepInterpolator extends AbstractStepInterpolator ",
      "methods_under_test": {
        "=1": {
          "GraggBulirschStoerStepInterpolator.doCopy()": [
            1,
            1,
            1
          ],
          "GraggBulirschStoerStepInterpolator.writeExternal(final, ObjectOutput)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GraggBulirschStoerStepInterpolator.computeCoefficients(final, int, final, double)": [
            3,
            3,
            3
          ],
          "GraggBulirschStoerStepInterpolator.estimateError(final, double[])": [
            3,
            3,
            3
          ],
          "GraggBulirschStoerStepInterpolator.computeInterpolatedStateAndDerivatives(final, double, final, double)": [
            5,
            5,
            5
          ],
          "GraggBulirschStoerStepInterpolator.readExternal(final, ObjectInput)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java"
    },
    {
      "src_name": "SphericalCoordinates",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinates.java",
      "class_declaration": "public class SphericalCoordinates implements Serializable ",
      "methods_under_test": {
        "=1": {
          "SphericalCoordinates.toCartesianGradient(final, double[])": [
            1,
            1,
            1
          ],
          "SphericalCoordinates.toCartesianHessian(final, double[][], final, double[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SphericalCoordinatesTest.java"
    },
    {
      "src_name": "ClassicalRungeKuttaStepInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java",
      "class_declaration": "class ClassicalRungeKuttaStepInterpolator extends RungeKuttaStepInterpolator ",
      "methods_under_test": {
        "=1": {
          "ClassicalRungeKuttaStepInterpolator.doCopy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ClassicalRungeKuttaStepInterpolator.computeInterpolatedStateAndDerivatives(final, double, final, double)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/ClassicalRungeKuttaStepInterpolatorTest.java"
    },
    {
      "src_name": "Beta",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/special/Beta.java",
      "class_declaration": "public class Beta ",
      "methods_under_test": {
        "=1": {
          "Beta.regularizedBeta(double, double, double)": [
            1,
            1,
            1
          ],
          "Beta.regularizedBeta(double, double, double, double)": [
            1,
            1,
            1
          ],
          "Beta.regularizedBeta(double, double, double, int)": [
            1,
            1,
            1
          ],
          "Beta.logBeta(double, double, double, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Beta.regularizedBeta(double, final, double, final, double, double, int)": [
            6,
            6,
            6
          ]
        },
        "11-20": {
          "Beta.logBeta(final, double, final, double)": [
            16,
            16,
            16
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/special/BetaTest.java"
    },
    {
      "src_name": "Well19937a",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/Well19937a.java",
      "class_declaration": "public class Well19937a extends AbstractWell ",
      "methods_under_test": {
        "=1": {
          "Well19937a.next(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/Well19937aTest.java"
    },
    {
      "src_name": "MatrixUtils",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
      "class_declaration": "public class MatrixUtils ",
      "methods_under_test": {
        "=1": {
          "MatrixUtils.createRealMatrix(final, int, final, int)": [
            1,
            1,
            1
          ],
          "MatrixUtils.createFieldMatrix(final, Field<T>, final, int, final, int)": [
            1,
            1,
            1
          ],
          "MatrixUtils.checkSymmetric(RealMatrix, double)": [
            1,
            1,
            1
          ],
          "MatrixUtils.isSymmetric(RealMatrix, double)": [
            1,
            1,
            1
          ],
          "MatrixUtils.checkMatrixIndex(final, AnyMatrix, final, int, final, int)": [
            1,
            1,
            1
          ],
          "MatrixUtils.checkRowIndex(final, AnyMatrix, final, int)": [
            1,
            1,
            1
          ],
          "MatrixUtils.checkColumnIndex(final, AnyMatrix, final, int)": [
            1,
            1,
            1
          ],
          "MatrixUtils.checkAdditionCompatible(final, AnyMatrix, final, AnyMatrix)": [
            1,
            1,
            1
          ],
          "MatrixUtils.checkSubtractionCompatible(final, AnyMatrix, final, AnyMatrix)": [
            1,
            1,
            1
          ],
          "MatrixUtils.checkMultiplicationCompatible(final, AnyMatrix, final, AnyMatrix)": [
            1,
            1,
            1
          ],
          "MatrixUtils.fractionMatrixToRealMatrix(final, FieldMatrix<Fraction>)": [
            1,
            1,
            1
          ],
          "MatrixUtils.bigFractionMatrixToRealMatrix(final, FieldMatrix<BigFraction>)": [
            1,
            1,
            1
          ],
          "MatrixUtils.serializeRealVector(final, RealVector, final, ObjectOutputStream)": [
            1,
            1,
            1
          ],
          "MatrixUtils.serializeRealMatrix(final, RealMatrix, final, ObjectOutputStream)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MatrixUtils.createRealMatrix(double[][])": [
            2,
            2,
            2
          ],
          "MatrixUtils.createFieldMatrix(T[][])": [
            2,
            2,
            2
          ],
          "MatrixUtils.createRealIdentityMatrix(int)": [
            2,
            2,
            2
          ],
          "MatrixUtils.createFieldIdentityMatrix(final, Field<T>, final, int)": [
            2,
            2,
            2
          ],
          "MatrixUtils.createRealDiagonalMatrix(final, double[])": [
            2,
            2,
            2
          ],
          "MatrixUtils.createFieldDiagonalMatrix(final, T[])": [
            2,
            2,
            2
          ],
          "MatrixUtils.createRealVector(double[])": [
            2,
            2,
            2
          ],
          "MatrixUtils.createFieldVector(final, T[])": [
            3,
            3,
            3
          ],
          "MatrixUtils.createRowRealMatrix(double[])": [
            3,
            3,
            3
          ],
          "MatrixUtils.createRowFieldMatrix(final, T[])": [
            4,
            4,
            4
          ],
          "MatrixUtils.createColumnRealMatrix(double[])": [
            3,
            3,
            3
          ],
          "MatrixUtils.createColumnFieldMatrix(final, T[])": [
            4,
            4,
            4
          ],
          "MatrixUtils.checkSubMatrixIndex(final, AnyMatrix, final, int, final, int, final, int, final, int)": [
            2,
            2,
            2
          ],
          "MatrixUtils.checkSubMatrixIndex(final, AnyMatrix, final, int[], final, int[])": [
            6,
            6,
            6
          ],
          "MatrixUtils.deserializeRealVector(final, Object, final, String, final, ObjectInputStream)": [
            3,
            3,
            3
          ],
          "MatrixUtils.deserializeRealMatrix(final, Object, final, String, final, ObjectInputStream)": [
            4,
            4,
            4
          ],
          "MatrixUtils.solveLowerTriangularSystem(RealMatrix, RealVector)": [
            3,
            3,
            3
          ],
          "MatrixUtils.solveUpperTriangularSystem(RealMatrix, RealVector)": [
            3,
            3,
            3
          ],
          "MatrixUtils.blockInverse(RealMatrix, int)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java"
    },
    {
      "src_name": "Fraction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fraction/Fraction.java",
      "class_declaration": "public class Fraction extends Number implements FieldElement<Fraction>, Comparable<Fraction>, Serializable ",
      "methods_under_test": {
        "=1": {
          "Fraction.compareTo(Fraction)": [
            1,
            1,
            1
          ],
          "Fraction.doubleValue()": [
            1,
            1,
            1
          ],
          "Fraction.floatValue()": [
            1,
            1,
            1
          ],
          "Fraction.hashCode()": [
            1,
            1,
            1
          ],
          "Fraction.intValue()": [
            1,
            1,
            1
          ],
          "Fraction.longValue()": [
            1,
            1,
            1
          ],
          "Fraction.reciprocal()": [
            1,
            1,
            1
          ],
          "Fraction.add(Fraction)": [
            1,
            1,
            1
          ],
          "Fraction.add(final, int)": [
            1,
            1,
            1
          ],
          "Fraction.subtract(Fraction)": [
            1,
            1,
            1
          ],
          "Fraction.subtract(final, int)": [
            1,
            1,
            1
          ],
          "Fraction.multiply(final, int)": [
            1,
            1,
            1
          ],
          "Fraction.divide(final, int)": [
            1,
            1,
            1
          ],
          "Fraction.percentageValue()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Fraction.abs()": [
            2,
            2,
            2
          ],
          "Fraction.equals(Object)": [
            3,
            3,
            3
          ],
          "Fraction.negate()": [
            2,
            2,
            2
          ],
          "Fraction.multiply(Fraction)": [
            3,
            3,
            3
          ],
          "Fraction.divide(Fraction)": [
            3,
            3,
            3
          ],
          "Fraction.getReducedFraction(int, int)": [
            6,
            6,
            6
          ],
          "Fraction.toString()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fraction/FractionTest.java"
    },
    {
      "src_name": "GaussIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegrator.java",
      "class_declaration": "public class GaussIntegrator ",
      "methods_under_test": {
        "=1": {
          "GaussIntegrator.getPoint(int)": [
            1,
            1,
            1
          ],
          "GaussIntegrator.getWeight(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GaussIntegrator.integrate(UnivariateFunction)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorTest.java"
    },
    {
      "src_name": "TrapezoidIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegrator.java",
      "class_declaration": "public class TrapezoidIntegrator extends BaseAbstractUnivariateIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "TrapezoidIntegrator.stage(final, BaseAbstractUnivariateIntegrator, final, int)": [
            4,
            4,
            4
          ],
          "TrapezoidIntegrator.doIntegrate()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/integration/TrapezoidIntegratorTest.java"
    },
    {
      "src_name": "SparseFieldVector",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java",
      "class_declaration": "@Deprecated\npublic class SparseFieldVector <T extends FieldElement<T>> implements FieldVector<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "SparseFieldVector.append(T)": [
            1,
            1,
            1
          ],
          "SparseFieldVector.copy()": [
            1,
            1,
            1
          ],
          "SparseFieldVector.getEntry(int)": [
            1,
            1,
            1
          ],
          "SparseFieldVector.mapAdd(T)": [
            1,
            1,
            1
          ],
          "SparseFieldVector.mapDivide(T)": [
            1,
            1,
            1
          ],
          "SparseFieldVector.mapInv()": [
            1,
            1,
            1
          ],
          "SparseFieldVector.mapMultiply(T)": [
            1,
            1,
            1
          ],
          "SparseFieldVector.mapSubtract(T)": [
            1,
            1,
            1
          ],
          "SparseFieldVector.mapSubtractToSelf(T)": [
            1,
            1,
            1
          ],
          "SparseFieldVector.projection(FieldVector<T>)": [
            1,
            1,
            1
          ],
          "SparseFieldVector.set(T)": [
            1,
            1,
            1
          ],
          "SparseFieldVector.setEntry(int, T)": [
            1,
            1,
            1
          ],
          "SparseFieldVector.setSubVector(int, FieldVector<T>)": [
            1,
            1,
            1
          ],
          "SparseFieldVector.checkVectorDimensions(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SparseFieldVector.add(SparseFieldVector<T>)": [
            3,
            3,
            3
          ],
          "SparseFieldVector.append(SparseFieldVector<T>)": [
            2,
            2,
            2
          ],
          "SparseFieldVector.append(FieldVector<T>)": [
            4,
            4,
            4
          ],
          "SparseFieldVector.dotProduct(FieldVector<T>)": [
            2,
            2,
            2
          ],
          "SparseFieldVector.ebeDivide(FieldVector<T>)": [
            2,
            2,
            2
          ],
          "SparseFieldVector.ebeMultiply(FieldVector<T>)": [
            2,
            2,
            2
          ],
          "SparseFieldVector.getSubVector(int, int)": [
            4,
            4,
            4
          ],
          "SparseFieldVector.mapAddToSelf(T)": [
            2,
            2,
            2
          ],
          "SparseFieldVector.mapDivideToSelf(T)": [
            2,
            2,
            2
          ],
          "SparseFieldVector.mapInvToSelf()": [
            2,
            2,
            2
          ],
          "SparseFieldVector.mapMultiplyToSelf(T)": [
            2,
            2,
            2
          ],
          "SparseFieldVector.outerProduct(SparseFieldVector<T>)": [
            3,
            3,
            3
          ],
          "SparseFieldVector.outerProduct(FieldVector<T>)": [
            5,
            5,
            5
          ],
          "SparseFieldVector.subtract(SparseFieldVector<T>)": [
            3,
            3,
            3
          ],
          "SparseFieldVector.subtract(FieldVector<T>)": [
            5,
            5,
            5
          ],
          "SparseFieldVector.toArray()": [
            2,
            2,
            2
          ],
          "SparseFieldVector.add(FieldVector<T>)": [
            4,
            4,
            4
          ],
          "SparseFieldVector.hashCode()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "SparseFieldVector.equals(Object)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/SparseFieldVectorTest.java"
    },
    {
      "src_name": "EuclideanDistance",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/distance/EuclideanDistance.java",
      "class_declaration": "public class EuclideanDistance implements DistanceMeasure ",
      "methods_under_test": {
        "=1": {
          "EuclideanDistance.compute(double[], double[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ml/distance/EuclideanDistanceTest.java"
    },
    {
      "src_name": "MullerSolver2",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/MullerSolver2.java",
      "class_declaration": "public class MullerSolver2 extends AbstractUnivariateSolver ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "MullerSolver2.doSolve()": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/solvers/MullerSolver2Test.java"
    },
    {
      "src_name": "BrentOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
      "class_declaration": "@Deprecated\npublic class BrentOptimizer extends BaseAbstractUnivariateOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {
          "BrentOptimizer.doOptimize()": [
            17,
            15,
            15
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java"
    },
    {
      "src_name": "SimplexTableau",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java",
      "class_declaration": "@Deprecated class SimplexTableau implements Serializable ",
      "methods_under_test": {
        "=1": {
          "SimplexTableau.divideRow(final, int, final, double)": [
            1,
            1,
            1
          ],
          "SimplexTableau.subtractRow(final, int, final, int, final, double)": [
            1,
            1,
            1
          ],
          "SimplexTableau.getEntry(final, int, final, int)": [
            1,
            1,
            1
          ],
          "SimplexTableau.setEntry(final, int, final, int, final, double)": [
            1,
            1,
            1
          ],
          "SimplexTableau.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SimplexTableau.initializeColumnLabels()": [
            6,
            6,
            6
          ],
          "SimplexTableau.createTableau(final, boolean)": [
            8,
            8,
            8
          ],
          "SimplexTableau.normalizeConstraints(Collection<LinearConstraint>)": [
            2,
            2,
            2
          ],
          "SimplexTableau.getInvertedCoefficientSum(final, RealVector)": [
            2,
            2,
            2
          ],
          "SimplexTableau.getBasicRow(final, int)": [
            4,
            4,
            4
          ],
          "SimplexTableau.dropPhase1Objective()": [
            10,
            10,
            10
          ],
          "SimplexTableau.getSolution()": [
            5,
            5,
            5
          ],
          "SimplexTableau.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/linear/SimplexTableauTest.java"
    },
    {
      "src_name": "HessenbergTransformer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/HessenbergTransformer.java",
      "class_declaration": "class HessenbergTransformer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "HessenbergTransformer.getP()": [
            10,
            10,
            10
          ],
          "HessenbergTransformer.getPT()": [
            2,
            2,
            2
          ],
          "HessenbergTransformer.getH()": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/HessenbergTransformerTest.java"
    },
    {
      "src_name": "MicrosphereInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/MicrosphereInterpolator.java",
      "class_declaration": "public class MicrosphereInterpolator implements MultivariateInterpolator ",
      "methods_under_test": {
        "=1": {
          "MicrosphereInterpolator.interpolate(final, double[][], final, double[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/interpolation/MicrosphereInterpolatorTest.java"
    },
    {
      "src_name": "RandomDataGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java",
      "class_declaration": "public class RandomDataGenerator implements RandomData, Serializable ",
      "methods_under_test": {
        "=1": {
          "RandomDataGenerator.nextInt(final, int, final, int)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.nextSecureInt(final, int, final, int)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.nextPoisson(double)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.nextExponential(double)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.nextGamma(double, double)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.nextHypergeometric(int, int, int)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.nextPascal(int, double)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.nextT(double)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.nextWeibull(double, double)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.nextZipf(int, double)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.nextBeta(double, double)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.nextBinomial(int, double)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.nextCauchy(double, double)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.nextChiSquare(double)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.nextF(double, double)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.nextUniform(double, double)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.reSeed(long)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.reSeedSecure()": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.reSeedSecure(long)": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.reSeed()": [
            1,
            1,
            1
          ],
          "RandomDataGenerator.setSecureAlgorithm(String, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "RandomDataGenerator.nextHexString(int)": [
            4,
            4,
            4
          ],
          "RandomDataGenerator.nextLong(final, long, final, long)": [
            7,
            7,
            7
          ],
          "RandomDataGenerator.nextSecureHexString(int)": [
            6,
            6,
            6
          ],
          "RandomDataGenerator.nextSecureLong(final, long, final, long)": [
            7,
            7,
            7
          ],
          "RandomDataGenerator.nextGaussian(double, double)": [
            2,
            2,
            2
          ],
          "RandomDataGenerator.nextUniform(double, double, boolean)": [
            6,
            6,
            6
          ],
          "RandomDataGenerator.nextPermutation(int, int)": [
            3,
            3,
            3
          ],
          "RandomDataGenerator.nextSample(Collection<?>, int)": [
            4,
            4,
            4
          ],
          "RandomDataGenerator.getRandomGenerator()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java"
    },
    {
      "src_name": "GammaDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/GammaDistribution.java",
      "class_declaration": "public class GammaDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "GammaDistribution.density(double)": [
            3,
            3,
            3
          ],
          "GammaDistribution.cumulativeProbability(double)": [
            2,
            2,
            2
          ],
          "GammaDistribution.sample()": [
            10,
            10,
            10
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/GammaDistributionTest.java"
    },
    {
      "src_name": "MultivariateFunctionMappingAdapter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateFunctionMappingAdapter.java",
      "class_declaration": "public class MultivariateFunctionMappingAdapter implements MultivariateFunction ",
      "methods_under_test": {
        "=1": {
          "NoBoundsMapper.unboundedToBounded(final, double)": [
            1,
            1,
            1
          ],
          "NoBoundsMapper.boundedToUnbounded(final, double)": [
            1,
            1,
            1
          ],
          "LowerBoundMapper.unboundedToBounded(final, double)": [
            1,
            1,
            1
          ],
          "LowerBoundMapper.boundedToUnbounded(final, double)": [
            1,
            1,
            1
          ],
          "UpperBoundMapper.unboundedToBounded(final, double)": [
            1,
            1,
            1
          ],
          "UpperBoundMapper.boundedToUnbounded(final, double)": [
            1,
            1,
            1
          ],
          "LowerUpperBoundMapper.unboundedToBounded(final, double)": [
            1,
            1,
            1
          ],
          "LowerUpperBoundMapper.boundedToUnbounded(final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MultivariateFunctionMappingAdapter.unboundedToBounded(double[])": [
            2,
            2,
            2
          ],
          "MultivariateFunctionMappingAdapter.boundedToUnbounded(double[])": [
            2,
            2,
            2
          ],
          "MultivariateFunctionMappingAdapter.value(double[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateFunctionMappingAdapterTest.java"
    },
    {
      "src_name": "Array2DRowRealMatrix",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/Array2DRowRealMatrix.java",
      "class_declaration": "public class Array2DRowRealMatrix extends AbstractRealMatrix implements Serializable ",
      "methods_under_test": {
        "=1": {
          "Array2DRowRealMatrix.createMatrix(final, int, final, int)": [
            1,
            1,
            1
          ],
          "Array2DRowRealMatrix.copy()": [
            1,
            1,
            1
          ],
          "Array2DRowRealMatrix.getEntry(final, int, final, int)": [
            1,
            1,
            1
          ],
          "Array2DRowRealMatrix.setEntry(final, int, final, int, final, double)": [
            1,
            1,
            1
          ],
          "Array2DRowRealMatrix.addToEntry(final, int, final, int, final, double)": [
            1,
            1,
            1
          ],
          "Array2DRowRealMatrix.multiplyEntry(final, int, final, int, final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Array2DRowRealMatrix.add(final, Array2DRowRealMatrix)": [
            3,
            3,
            3
          ],
          "Array2DRowRealMatrix.subtract(final, Array2DRowRealMatrix)": [
            3,
            3,
            3
          ],
          "Array2DRowRealMatrix.multiply(final, Array2DRowRealMatrix)": [
            5,
            5,
            5
          ],
          "Array2DRowRealMatrix.setSubMatrix(final, double[][], final, int, final, int)": [
            9,
            9,
            9
          ],
          "Array2DRowRealMatrix.operate(final, double[])": [
            4,
            4,
            4
          ],
          "Array2DRowRealMatrix.preMultiply(final, double[])": [
            4,
            4,
            4
          ],
          "Array2DRowRealMatrix.walkInRowOrder(final, RealMatrixChangingVisitor)": [
            3,
            3,
            3
          ],
          "Array2DRowRealMatrix.walkInRowOrder(final, RealMatrixPreservingVisitor)": [
            3,
            3,
            3
          ],
          "Array2DRowRealMatrix.walkInRowOrder(final, RealMatrixChangingVisitor, final, int, final, int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "Array2DRowRealMatrix.walkInRowOrder(final, RealMatrixPreservingVisitor, final, int, final, int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "Array2DRowRealMatrix.walkInColumnOrder(final, RealMatrixChangingVisitor)": [
            3,
            3,
            3
          ],
          "Array2DRowRealMatrix.walkInColumnOrder(final, RealMatrixPreservingVisitor)": [
            3,
            3,
            3
          ],
          "Array2DRowRealMatrix.walkInColumnOrder(final, RealMatrixChangingVisitor, final, int, final, int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "Array2DRowRealMatrix.walkInColumnOrder(final, RealMatrixPreservingVisitor, final, int, final, int, final, int, final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/Array2DRowRealMatrixTest.java"
    },
    {
      "src_name": "Line",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java",
      "class_declaration": "public class Line implements Embedding<Euclidean3D, Euclidean1D> ",
      "methods_under_test": {
        "=1": {
          "Line.revert()": [
            1,
            1,
            1
          ],
          "Line.getAbscissa(final, Vector3D)": [
            1,
            1,
            1
          ],
          "Line.pointAt(final, double)": [
            1,
            1,
            1
          ],
          "Line.toSubSpace(final, Vector<Euclidean3D>)": [
            1,
            1,
            1
          ],
          "Line.toSpace(final, Vector<Euclidean1D>)": [
            1,
            1,
            1
          ],
          "Line.isSimilarTo(final, Line)": [
            1,
            1,
            1
          ],
          "Line.contains(final, Vector3D)": [
            1,
            1,
            1
          ],
          "Line.distance(final, Vector3D)": [
            1,
            1,
            1
          ],
          "Line.intersection(final, Line)": [
            1,
            1,
            1
          ],
          "Line.wholeLine()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Line.reset(final, Vector3D, final, Vector3D)": [
            2,
            2,
            2
          ],
          "Line.distance(final, Line)": [
            2,
            2,
            2
          ],
          "Line.closestPoint(final, Line)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java"
    },
    {
      "src_name": "Well44497b",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/Well44497b.java",
      "class_declaration": "public class Well44497b extends AbstractWell ",
      "methods_under_test": {
        "=1": {
          "Well44497b.next(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/Well44497bTest.java"
    },
    {
      "src_name": "DormandPrince853StepInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator.java",
      "class_declaration": "class DormandPrince853StepInterpolator extends RungeKuttaStepInterpolator ",
      "methods_under_test": {
        "=1": {
          "DormandPrince853StepInterpolator.doCopy()": [
            1,
            1,
            1
          ],
          "DormandPrince853StepInterpolator.storeTime(final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DormandPrince853StepInterpolator.reinitialize(final, AbstractIntegrator, final, double[], final, double[][], final, boolean, final, EquationsMapper, final, EquationsMapper[])": [
            3,
            3,
            3
          ],
          "DormandPrince853StepInterpolator.computeInterpolatedStateAndDerivatives(final, double, final, double)": [
            9,
            9,
            9
          ],
          "DormandPrince853StepInterpolator.doFinalize()": [
            5,
            5,
            5
          ],
          "DormandPrince853StepInterpolator.writeExternal(final, ObjectOutput)": [
            3,
            3,
            3
          ],
          "DormandPrince853StepInterpolator.readExternal(final, ObjectInput)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolatorTest.java"
    },
    {
      "src_name": "FirstMoment",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/moment/FirstMoment.java",
      "class_declaration": "class FirstMoment extends AbstractStorelessUnivariateStatistic implements Serializable ",
      "methods_under_test": {
        "=1": {
          "FirstMoment.clear()": [
            1,
            1,
            1
          ],
          "FirstMoment.copy()": [
            1,
            1,
            1
          ],
          "FirstMoment.copy(FirstMoment, FirstMoment)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FirstMoment.increment(final, double)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/moment/FirstMomentTest.java"
    },
    {
      "src_name": "MultiKMeansPlusPlusClusterer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java",
      "class_declaration": "public class MultiKMeansPlusPlusClusterer <T extends Clusterable> extends Clusterer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClustererTest.java"
    },
    {
      "src_name": "ComplexUtils",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/complex/ComplexUtils.java",
      "class_declaration": "public class ComplexUtils ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ComplexUtils.polar2Complex(double, double)": [
            2,
            2,
            2
          ],
          "ComplexUtils.convertToComplex(double[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/complex/ComplexUtilsTest.java"
    },
    {
      "src_name": "UnivariateMultiStartOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/univariate/UnivariateMultiStartOptimizer.java",
      "class_declaration": "@Deprecated\npublic class UnivariateMultiStartOptimizer <FUNC extends UnivariateFunction> implements BaseUnivariateOptimizer<FUNC> ",
      "methods_under_test": {
        "=1": {
          "UnivariateMultiStartOptimizer.optimize(int, final, FUNC, final, GoalType, final, double, final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnivariateMultiStartOptimizer.getOptima()": [
            2,
            2,
            2
          ],
          "UnivariateMultiStartOptimizer.optimize(int, final, FUNC, final, GoalType, final, double, final, double, final, double)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/univariate/UnivariateMultiStartOptimizerTest.java"
    },
    {
      "src_name": "Well19937c",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/Well19937c.java",
      "class_declaration": "public class Well19937c extends AbstractWell ",
      "methods_under_test": {
        "=1": {
          "Well19937c.next(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/Well19937cTest.java"
    },
    {
      "src_name": "SimplePointChecker",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/SimplePointChecker.java",
      "class_declaration": "@Deprecated\npublic class SimplePointChecker <PAIR extends Pair<double[], ? extends Object>> extends AbstractConvergenceChecker<PAIR> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/SimplePointCheckerTest.java"
    },
    {
      "src_name": "NewtonSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/NewtonSolver.java",
      "class_declaration": "@Deprecated\npublic class NewtonSolver extends AbstractDifferentiableUnivariateSolver ",
      "methods_under_test": {
        "=1": {
          "NewtonSolver.solve(int, final, DifferentiableUnivariateFunction, final, double, final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NewtonSolver.doSolve()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/solvers/NewtonSolverTest.java"
    },
    {
      "src_name": "PointVectorValuePair",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/PointVectorValuePair.java",
      "class_declaration": "@Deprecated\npublic class PointVectorValuePair extends Pair<double[], double[]> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java"
    },
    {
      "src_name": "BigFractionField",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fraction/BigFractionField.java",
      "class_declaration": "public class BigFractionField implements Field<BigFraction>, Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fraction/BigFractionFieldTest.java"
    },
    {
      "src_name": "PegasusSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/PegasusSolver.java",
      "class_declaration": "public class PegasusSolver extends BaseSecantSolver ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/solvers/PegasusSolverTest.java"
    },
    {
      "src_name": "BOBYQAOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizer.java",
      "class_declaration": "@Deprecated\npublic class BOBYQAOptimizer extends BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction> implements MultivariateOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java"
    },
    {
      "src_name": "AggregateSummaryStatistics",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatistics.java",
      "class_declaration": "public class AggregateSummaryStatistics implements StatisticalSummary,\n        Serializable ",
      "methods_under_test": {
        "=1": {
          "AggregateSummaryStatistics.createContributingStatistics()": [
            1,
            1,
            1
          ],
          "AggregatingSummaryStatistics.addValue(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AggregateSummaryStatistics.getMax()": [
            2,
            2,
            2
          ],
          "AggregateSummaryStatistics.getMean()": [
            2,
            2,
            2
          ],
          "AggregateSummaryStatistics.getMin()": [
            2,
            2,
            2
          ],
          "AggregateSummaryStatistics.getN()": [
            2,
            2,
            2
          ],
          "AggregateSummaryStatistics.getStandardDeviation()": [
            2,
            2,
            2
          ],
          "AggregateSummaryStatistics.getSum()": [
            2,
            2,
            2
          ],
          "AggregateSummaryStatistics.getVariance()": [
            2,
            2,
            2
          ],
          "AggregateSummaryStatistics.getSumOfLogs()": [
            2,
            2,
            2
          ],
          "AggregateSummaryStatistics.getGeometricMean()": [
            2,
            2,
            2
          ],
          "AggregateSummaryStatistics.getSumsq()": [
            2,
            2,
            2
          ],
          "AggregateSummaryStatistics.getSecondMoment()": [
            2,
            2,
            2
          ],
          "AggregateSummaryStatistics.getSummary()": [
            2,
            2,
            2
          ],
          "AggregateSummaryStatistics.aggregate(Collection<SummaryStatistics>)": [
            8,
            8,
            8
          ],
          "AggregatingSummaryStatistics.equals(Object)": [
            3,
            3,
            3
          ],
          "AggregatingSummaryStatistics.hashCode()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/AggregateSummaryStatisticsTest.java"
    },
    {
      "src_name": "HighamHall54Integrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/HighamHall54Integrator.java",
      "class_declaration": "public class HighamHall54Integrator extends EmbeddedRungeKuttaIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "HighamHall54Integrator.estimateError(final, double[][], final, double[], final, double[], final, double)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/HighamHall54IntegratorTest.java"
    },
    {
      "src_name": "PolynomialFitter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/fitting/PolynomialFitter.java",
      "class_declaration": "@Deprecated\npublic class PolynomialFitter extends CurveFitter<PolynomialFunction.Parametric> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java"
    },
    {
      "src_name": "BicubicSplineInterpolatingFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunction.java",
      "class_declaration": "public class BicubicSplineInterpolatingFunction implements BivariateFunction ",
      "methods_under_test": {
        "=1": {
          "BicubicSplineInterpolatingFunction.value(double, double)": [
            1,
            1,
            1
          ],
          "BicubicSplineInterpolatingFunction.partialDerivativeX(double, double)": [
            1,
            1,
            1
          ],
          "BicubicSplineInterpolatingFunction.partialDerivativeY(double, double)": [
            1,
            1,
            1
          ],
          "BicubicSplineInterpolatingFunction.partialDerivativeXX(double, double)": [
            1,
            1,
            1
          ],
          "BicubicSplineInterpolatingFunction.partialDerivativeYY(double, double)": [
            1,
            1,
            1
          ],
          "BicubicSplineInterpolatingFunction.partialDerivativeXY(double, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BicubicSplineInterpolatingFunction.isValidPoint(double, double)": [
            3,
            3,
            3
          ],
          "BicubicSplineFunction.value(double, double)": [
            3,
            3,
            3
          ],
          "BicubicSplineFunction.partialDerivativeX()": [
            2,
            2,
            2
          ],
          "BicubicSplineFunction.partialDerivativeY()": [
            2,
            2,
            2
          ],
          "BicubicSplineFunction.partialDerivativeXX()": [
            2,
            2,
            2
          ],
          "BicubicSplineFunction.partialDerivativeYY()": [
            2,
            2,
            2
          ],
          "BicubicSplineFunction.partialDerivativeXY()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java"
    },
    {
      "src_name": "FiniteDifferencesDifferentiator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiator.java",
      "class_declaration": "public class FiniteDifferencesDifferentiator implements UnivariateFunctionDifferentiator, UnivariateVectorFunctionDifferentiator,\n               UnivariateMatrixFunctionDifferentiator, Serializable ",
      "methods_under_test": {
        "=1": {
          "FiniteDifferencesDifferentiator.differentiate(final, UnivariateFunction)": [
            1,
            1,
            1
          ],
          "FiniteDifferencesDifferentiator.differentiate(final, UnivariateVectorFunction)": [
            1,
            1,
            1
          ],
          "FiniteDifferencesDifferentiator.differentiate(final, UnivariateMatrixFunction)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/differentiation/FiniteDifferencesDifferentiatorTest.java"
    },
    {
      "src_name": "PolynomialFunctionNewtonForm",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java",
      "class_declaration": "public class PolynomialFunctionNewtonForm implements UnivariateDifferentiableFunction ",
      "methods_under_test": {
        "=1": {
          "PolynomialFunctionNewtonForm.value(double)": [
            1,
            1,
            1
          ],
          "PolynomialFunctionNewtonForm.degree()": [
            1,
            1,
            1
          ],
          "PolynomialFunctionNewtonForm.getNewtonCoefficients()": [
            1,
            1,
            1
          ],
          "PolynomialFunctionNewtonForm.getCenters()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PolynomialFunctionNewtonForm.value(final, DerivativeStructure)": [
            2,
            2,
            2
          ],
          "PolynomialFunctionNewtonForm.getCoefficients()": [
            2,
            2,
            2
          ],
          "PolynomialFunctionNewtonForm.evaluate(double, [], double, [], double)": [
            2,
            2,
            2
          ],
          "PolynomialFunctionNewtonForm.computeCoefficients()": [
            4,
            4,
            4
          ],
          "PolynomialFunctionNewtonForm.verifyInputArray(double, [], double, [])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonFormTest.java"
    },
    {
      "src_name": "DormandPrince54Integrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince54Integrator.java",
      "class_declaration": "public class DormandPrince54Integrator extends EmbeddedRungeKuttaIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "DormandPrince54Integrator.estimateError(final, double[][], final, double[], final, double[], final, double)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince54IntegratorTest.java"
    },
    {
      "src_name": "PointVectorValuePair",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/PointVectorValuePair.java",
      "class_declaration": "public class PointVectorValuePair extends Pair<double[], double[]> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/PointVectorValuePairTest.java"
    },
    {
      "src_name": "RRQRDecomposition",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/RRQRDecomposition.java",
      "class_declaration": "public class RRQRDecomposition extends QRDecomposition ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "RRQRDecomposition.decompose(double[][])": [
            2,
            2,
            2
          ],
          "RRQRDecomposition.performHouseholderReflection(int, double[][])": [
            5,
            5,
            5
          ],
          "RRQRDecomposition.getP()": [
            3,
            3,
            3
          ],
          "RRQRDecomposition.getRank(final, double)": [
            3,
            3,
            3
          ],
          "Solver.solve(RealVector)": [
            2,
            2,
            2
          ],
          "Solver.solve(RealMatrix)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/RRQRDecompositionTest.java"
    },
    {
      "src_name": "UniformRandomGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/UniformRandomGenerator.java",
      "class_declaration": "public class UniformRandomGenerator implements NormalizedRandomGenerator ",
      "methods_under_test": {
        "=1": {
          "UniformRandomGenerator.nextNormalizedDouble()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/UniformRandomGeneratorTest.java"
    },
    {
      "src_name": "PowellOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java",
      "class_declaration": "public class PowellOptimizer extends MultivariateOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "PowellOptimizer.doOptimize()": [
            7,
            7,
            7
          ],
          "LineSearch.search(final, double[], final, double[])": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java"
    },
    {
      "src_name": "SimpleValueChecker",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/SimpleValueChecker.java",
      "class_declaration": "public class SimpleValueChecker extends AbstractConvergenceChecker<PointValuePair> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/SimpleValueCheckerTest.java"
    },
    {
      "src_name": "Frequency",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/Frequency.java",
      "class_declaration": "public class Frequency implements Serializable ",
      "methods_under_test": {
        "=1": {
          "Frequency.addValue(Comparable<?>)": [
            1,
            1,
            1
          ],
          "Frequency.addValue(int)": [
            1,
            1,
            1
          ],
          "Frequency.addValue(long)": [
            1,
            1,
            1
          ],
          "Frequency.addValue(char)": [
            1,
            1,
            1
          ],
          "Frequency.clear()": [
            1,
            1,
            1
          ],
          "Frequency.valuesIterator()": [
            1,
            1,
            1
          ],
          "Frequency.entrySetIterator()": [
            1,
            1,
            1
          ],
          "Frequency.getCount(int)": [
            1,
            1,
            1
          ],
          "Frequency.getCount(long)": [
            1,
            1,
            1
          ],
          "Frequency.getCount(char)": [
            1,
            1,
            1
          ],
          "Frequency.getPct(int)": [
            1,
            1,
            1
          ],
          "Frequency.getPct(long)": [
            1,
            1,
            1
          ],
          "Frequency.getPct(char)": [
            1,
            1,
            1
          ],
          "Frequency.getCumFreq(int)": [
            1,
            1,
            1
          ],
          "Frequency.getCumFreq(long)": [
            1,
            1,
            1
          ],
          "Frequency.getCumFreq(char)": [
            1,
            1,
            1
          ],
          "Frequency.getCumPct(int)": [
            1,
            1,
            1
          ],
          "Frequency.getCumPct(long)": [
            1,
            1,
            1
          ],
          "Frequency.getCumPct(char)": [
            1,
            1,
            1
          ],
          "Frequency.merge(final, Frequency)": [
            1,
            1,
            1
          ],
          "Frequency.merge(final, Collection<Frequency>)": [
            1,
            1,
            1
          ],
          "NaturalComparator.compare(Comparable<T>, Comparable<T>)": [
            1,
            1,
            1
          ],
          "Frequency.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Frequency.toString()": [
            2,
            2,
            2
          ],
          "Frequency.incrementValue(Comparable<?>, long)": [
            3,
            3,
            3
          ],
          "Frequency.getSumFreq()": [
            2,
            2,
            2
          ],
          "Frequency.getCount(Comparable<?>)": [
            5,
            5,
            5
          ],
          "Frequency.getPct(Comparable<?>)": [
            2,
            2,
            2
          ],
          "Frequency.getCumPct(Comparable<?>)": [
            2,
            2,
            2
          ],
          "Frequency.getMode()": [
            5,
            5,
            5
          ],
          "Frequency.equals(Object)": [
            6,
            6,
            6
          ]
        },
        "11-20": {
          "Frequency.getCumFreq(Comparable<?>)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/FrequencyTest.java"
    },
    {
      "src_name": "Gaussian",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java",
      "class_declaration": "public class Gaussian implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Gaussian.value(double)": [
            1,
            1,
            1
          ],
          "Gaussian.derivative()": [
            1,
            1,
            1
          ],
          "Parametric.value(double)": [
            1,
            1,
            1
          ],
          "Parametric.gradient(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Gaussian.value(final, DerivativeStructure)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/function/GaussianTest.java"
    },
    {
      "src_name": "AbstractLeastSquaresOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java",
      "class_declaration": "public abstract class AbstractLeastSquaresOptimizer <OPTIM extends AbstractLeastSquaresOptimizer<OPTIM>> extends AbstractOptimizer<PointVectorValuePair, OPTIM> implements WithTarget<OPTIM>,\n               WithWeight<OPTIM>,\n               WithModelAndJacobian<OPTIM>,\n               WithStartPoint<OPTIM> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java"
    },
    {
      "src_name": "BicubicSplineInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolator.java",
      "class_declaration": "public class BicubicSplineInterpolator implements BivariateGridInterpolator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {
          "BicubicSplineInterpolator.interpolate(final, double[], final, double[], final, double[][])": [
            14,
            14,
            14
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatorTest.java"
    },
    {
      "src_name": "VectorialCovariance",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/moment/VectorialCovariance.java",
      "class_declaration": "public class VectorialCovariance implements Serializable ",
      "methods_under_test": {
        "=1": {
          "VectorialCovariance.clear()": [
            1,
            1,
            1
          ],
          "VectorialCovariance.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "VectorialCovariance.increment(double[])": [
            4,
            4,
            4
          ],
          "VectorialCovariance.getResult()": [
            4,
            4,
            4
          ],
          "VectorialCovariance.equals(Object)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/moment/VectorialCovarianceTest.java"
    },
    {
      "src_name": "TransformerMap",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/TransformerMap.java",
      "class_declaration": "public class TransformerMap implements NumberTransformer, Serializable ",
      "methods_under_test": {
        "=1": {
          "TransformerMap.containsClass(Class<?>)": [
            1,
            1,
            1
          ],
          "TransformerMap.containsTransformer(NumberTransformer)": [
            1,
            1,
            1
          ],
          "TransformerMap.getTransformer(Class<?>)": [
            1,
            1,
            1
          ],
          "TransformerMap.putTransformer(Class<?>, NumberTransformer)": [
            1,
            1,
            1
          ],
          "TransformerMap.removeTransformer(Class<?>)": [
            1,
            1,
            1
          ],
          "TransformerMap.clear()": [
            1,
            1,
            1
          ],
          "TransformerMap.classes()": [
            1,
            1,
            1
          ],
          "TransformerMap.transformers()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TransformerMap.transform(Object)": [
            3,
            3,
            3
          ],
          "TransformerMap.equals(Object)": [
            7,
            7,
            7
          ],
          "TransformerMap.hashCode()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/TransformerMapTest.java"
    },
    {
      "src_name": "Max",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Max.java",
      "class_declaration": "public class Max extends AbstractStorelessUnivariateStatistic implements Serializable ",
      "methods_under_test": {
        "=1": {
          "Max.clear()": [
            1,
            1,
            1
          ],
          "Max.copy()": [
            1,
            1,
            1
          ],
          "Max.copy(Max, Max)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Max.increment(final, double)": [
            2,
            2,
            2
          ],
          "Max.evaluate(final, double[], final, int, final, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/rank/MaxTest.java"
    },
    {
      "src_name": "FastMath",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/FastMath.java",
      "class_declaration": "public class FastMath ",
      "methods_under_test": {
        "=1": {
          "FastMath.sqrt(final, double)": [
            1,
            1,
            1
          ],
          "FastMath.acosh(final, double)": [
            1,
            1,
            1
          ],
          "FastMath.signum(final, double)": [
            1,
            1,
            1
          ],
          "FastMath.signum(final, float)": [
            1,
            1,
            1
          ],
          "FastMath.nextUp(final, double)": [
            1,
            1,
            1
          ],
          "FastMath.nextUp(final, float)": [
            1,
            1,
            1
          ],
          "FastMath.random()": [
            1,
            1,
            1
          ],
          "FastMath.exp(double)": [
            1,
            1,
            1
          ],
          "FastMath.expm1(double)": [
            1,
            1,
            1
          ],
          "FastMath.log(final, double)": [
            1,
            1,
            1
          ],
          "FastMath.log(double, double)": [
            1,
            1,
            1
          ],
          "FastMath.atan(double)": [
            1,
            1,
            1
          ],
          "FastMath.abs(final, int)": [
            1,
            1,
            1
          ],
          "FastMath.abs(final, long)": [
            1,
            1,
            1
          ],
          "FastMath.abs(final, float)": [
            1,
            1,
            1
          ],
          "FastMath.abs(double)": [
            1,
            1,
            1
          ],
          "FastMath.round(double)": [
            1,
            1,
            1
          ],
          "FastMath.round(final, float)": [
            1,
            1,
            1
          ],
          "FastMath.min(final, int, final, int)": [
            1,
            1,
            1
          ],
          "FastMath.min(final, long, final, long)": [
            1,
            1,
            1
          ],
          "FastMath.max(final, int, final, int)": [
            1,
            1,
            1
          ],
          "FastMath.max(final, long, final, long)": [
            1,
            1,
            1
          ],
          "FastMath.IEEEremainder(double, double)": [
            1,
            1,
            1
          ],
          "FastMath.getExponent(final, double)": [
            1,
            1,
            1
          ],
          "FastMath.getExponent(final, float)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FastMath.cosh(double)": [
            7,
            7,
            7
          ],
          "FastMath.sinh(double)": [
            10,
            10,
            10
          ],
          "FastMath.tanh(double)": [
            8,
            8,
            8
          ],
          "FastMath.asinh(double)": [
            6,
            6,
            6
          ],
          "FastMath.atanh(double)": [
            6,
            6,
            6
          ],
          "FastMath.log1p(final, double)": [
            6,
            6,
            6
          ],
          "FastMath.log10(final, double)": [
            2,
            2,
            2
          ],
          "FastMath.pow(double, int)": [
            5,
            5,
            5
          ],
          "FastMath.cos(double)": [
            10,
            10,
            10
          ],
          "FastMath.tan(double)": [
            10,
            10,
            10
          ],
          "FastMath.asin(double)": [
            6,
            6,
            6
          ],
          "FastMath.acos(double)": [
            7,
            7,
            7
          ],
          "FastMath.cbrt(double)": [
            5,
            5,
            5
          ],
          "FastMath.toRadians(double)": [
            3,
            3,
            3
          ],
          "FastMath.toDegrees(double)": [
            2,
            2,
            2
          ],
          "FastMath.ulp(double)": [
            2,
            2,
            2
          ],
          "FastMath.ulp(float)": [
            2,
            2,
            2
          ],
          "FastMath.nextAfter(double, double)": [
            7,
            7,
            7
          ],
          "FastMath.nextAfter(final, float, final, double)": [
            7,
            7,
            7
          ],
          "FastMath.floor(double)": [
            5,
            5,
            5
          ],
          "FastMath.ceil(double)": [
            4,
            4,
            4
          ],
          "FastMath.rint(double)": [
            4,
            4,
            4
          ],
          "FastMath.min(final, float, final, float)": [
            5,
            5,
            5
          ],
          "FastMath.min(final, double, final, double)": [
            5,
            5,
            5
          ],
          "FastMath.max(final, float, final, float)": [
            5,
            5,
            5
          ],
          "FastMath.max(final, double, final, double)": [
            5,
            5,
            5
          ],
          "FastMath.hypot(final, double, final, double)": [
            6,
            6,
            6
          ],
          "FastMath.copySign(double, double)": [
            2,
            2,
            2
          ],
          "FastMath.copySign(float, float)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "FastMath.sin(double)": [
            13,
            13,
            13
          ],
          "FastMath.scalb(final, double, final, int)": [
            14,
            14,
            14
          ],
          "FastMath.scalb(final, float, final, int)": [
            14,
            14,
            14
          ]
        },
        ">20": {
          "FastMath.pow(double, double)": [
            29,
            29,
            29
          ],
          "FastMath.atan2(double, double)": [
            24,
            24,
            24
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/FastMathTest.java"
    },
    {
      "src_name": "LevenbergMarquardtOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java",
      "class_declaration": "@Deprecated\npublic class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {
          "LevenbergMarquardtOptimizer.doOptimize()": [
            28,
            0,
            0
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java"
    },
    {
      "src_name": "NordsieckStepInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/sampling/NordsieckStepInterpolator.java",
      "class_declaration": "public class NordsieckStepInterpolator extends AbstractStepInterpolator ",
      "methods_under_test": {
        "=1": {
          "NordsieckStepInterpolator.doCopy()": [
            1,
            1,
            1
          ],
          "NordsieckStepInterpolator.reinitialize(final, double[], final, boolean, final, EquationsMapper, final, EquationsMapper[])": [
            1,
            1,
            1
          ],
          "NordsieckStepInterpolator.reinitialize(final, double, final, double, final, double[], final, Array2DRowRealMatrix)": [
            1,
            1,
            1
          ],
          "NordsieckStepInterpolator.getInterpolatedStateVariation()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NordsieckStepInterpolator.rescale(final, double)": [
            4,
            4,
            4
          ],
          "NordsieckStepInterpolator.computeInterpolatedStateAndDerivatives(final, double, final, double)": [
            3,
            3,
            3
          ],
          "NordsieckStepInterpolator.writeExternal(final, ObjectOutput)": [
            5,
            5,
            5
          ],
          "NordsieckStepInterpolator.readExternal(final, ObjectInput)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/sampling/NordsieckStepInterpolatorTest.java"
    },
    {
      "src_name": "Complex",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/complex/Complex.java",
      "class_declaration": "public class Complex implements FieldElement<Complex>, Serializable ",
      "methods_under_test": {
        "=1": {
          "Complex.pow(Complex)": [
            1,
            1,
            1
          ],
          "Complex.pow(double)": [
            1,
            1,
            1
          ],
          "Complex.sqrt1z()": [
            1,
            1,
            1
          ],
          "Complex.createComplex(double, double)": [
            1,
            1,
            1
          ],
          "Complex.readResolve()": [
            1,
            1,
            1
          ],
          "Complex.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Complex.abs()": [
            7,
            7,
            7
          ],
          "Complex.add(Complex)": [
            2,
            2,
            2
          ],
          "Complex.add(double)": [
            2,
            2,
            2
          ],
          "Complex.conjugate()": [
            2,
            2,
            2
          ],
          "Complex.divide(Complex)": [
            6,
            6,
            6
          ],
          "Complex.divide(double)": [
            4,
            4,
            4
          ],
          "Complex.reciprocal()": [
            6,
            6,
            6
          ],
          "Complex.equals(Object)": [
            4,
            4,
            4
          ],
          "Complex.hashCode()": [
            2,
            2,
            2
          ],
          "Complex.multiply(Complex)": [
            3,
            3,
            3
          ],
          "Complex.multiply(final, int)": [
            3,
            3,
            3
          ],
          "Complex.multiply(double)": [
            3,
            3,
            3
          ],
          "Complex.negate()": [
            2,
            2,
            2
          ],
          "Complex.subtract(Complex)": [
            2,
            2,
            2
          ],
          "Complex.subtract(double)": [
            2,
            2,
            2
          ],
          "Complex.acos()": [
            2,
            2,
            2
          ],
          "Complex.asin()": [
            2,
            2,
            2
          ],
          "Complex.atan()": [
            2,
            2,
            2
          ],
          "Complex.cos()": [
            2,
            2,
            2
          ],
          "Complex.cosh()": [
            2,
            2,
            2
          ],
          "Complex.exp()": [
            2,
            2,
            2
          ],
          "Complex.log()": [
            2,
            2,
            2
          ],
          "Complex.sin()": [
            2,
            2,
            2
          ],
          "Complex.sinh()": [
            2,
            2,
            2
          ],
          "Complex.sqrt()": [
            5,
            5,
            5
          ],
          "Complex.tan()": [
            4,
            4,
            4
          ],
          "Complex.tanh()": [
            4,
            4,
            4
          ],
          "Complex.nthRoot(int)": [
            5,
            5,
            5
          ],
          "Complex.valueOf(double, double)": [
            2,
            2,
            2
          ],
          "Complex.valueOf(double)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/complex/ComplexTest.java"
    },
    {
      "src_name": "AdamsBashforthIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/AdamsBashforthIntegrator.java",
      "class_declaration": "public class AdamsBashforthIntegrator extends AdamsIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "AdamsBashforthIntegrator.integrate(final, ExpandableStatefulODE, final, double)": [
            10,
            10,
            10
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/AdamsBashforthIntegratorTest.java"
    },
    {
      "src_name": "ValueServer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/ValueServer.java",
      "class_declaration": "public class ValueServer ",
      "methods_under_test": {
        "=1": {
          "ValueServer.fill(double[])": [
            1,
            1,
            1
          ],
          "ValueServer.computeDistribution()": [
            1,
            1,
            1
          ],
          "ValueServer.computeDistribution(int)": [
            1,
            1,
            1
          ],
          "ValueServer.reSeed(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ValueServer.getNext()": [
            7,
            7,
            7
          ],
          "ValueServer.fill(int)": [
            2,
            2,
            2
          ],
          "ValueServer.resetReplayFile()": [
            4,
            4,
            4
          ],
          "ValueServer.closeReplayFile()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/ValueServerTest.java"
    },
    {
      "src_name": "PoissonDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/PoissonDistribution.java",
      "class_declaration": "public class PoissonDistribution extends AbstractIntegerDistribution ",
      "methods_under_test": {
        "=1": {
          "PoissonDistribution.normalApproximateProbability(int)": [
            1,
            1,
            1
          ],
          "PoissonDistribution.sample()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PoissonDistribution.probability(int)": [
            3,
            3,
            3
          ],
          "PoissonDistribution.cumulativeProbability(int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/PoissonDistributionTest.java"
    },
    {
      "src_name": "UniformRealDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java",
      "class_declaration": "public class UniformRealDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {
          "UniformRealDistribution.getNumericalVariance()": [
            1,
            1,
            1
          ],
          "UniformRealDistribution.sample()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UniformRealDistribution.density(double)": [
            2,
            2,
            2
          ],
          "UniformRealDistribution.cumulativeProbability(double)": [
            3,
            3,
            3
          ],
          "UniformRealDistribution.inverseCumulativeProbability(final, double)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java"
    },
    {
      "src_name": "EventFilter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/events/EventFilter.java",
      "class_declaration": "public class EventFilter implements EventHandler ",
      "methods_under_test": {
        "=1": {
          "EventFilter.eventOccurred(double, double[], boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EventFilter.init(double, double[], double)": [
            3,
            3,
            3
          ],
          "EventFilter.resetState(double, double[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "EventFilter.g(double, double[])": [
            19,
            19,
            19
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/events/EventFilterTest.java"
    },
    {
      "src_name": "NevilleInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/NevilleInterpolator.java",
      "class_declaration": "public class NevilleInterpolator implements UnivariateInterpolator,\n    Serializable ",
      "methods_under_test": {
        "=1": {
          "NevilleInterpolator.interpolate(double, [], double, [])": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/interpolation/NevilleInterpolatorTest.java"
    },
    {
      "src_name": "MathUtils",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/MathUtils.java",
      "class_declaration": "public final class MathUtils ",
      "methods_under_test": {
        "=1": {
          "MathUtils.hash(double)": [
            1,
            1,
            1
          ],
          "MathUtils.hash(double[])": [
            1,
            1,
            1
          ],
          "MathUtils.normalizeAngle(double, double)": [
            1,
            1,
            1
          ],
          "MathUtils.reduce(double, double, double)": [
            1,
            1,
            1
          ],
          "MathUtils.checkFinite(final, double)": [
            1,
            1,
            1
          ],
          "MathUtils.checkFinite(final, double[])": [
            1,
            1,
            1
          ],
          "MathUtils.checkNotNull(Object, Localizable)": [
            1,
            1,
            1
          ],
          "MathUtils.checkNotNull(Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MathUtils.copySign(byte, byte)": [
            4,
            4,
            4
          ],
          "MathUtils.copySign(short, short)": [
            4,
            4,
            4
          ],
          "MathUtils.copySign(int, int)": [
            4,
            4,
            4
          ],
          "MathUtils.copySign(long, long)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/MathUtilsTest.java"
    },
    {
      "src_name": "MultivariateFunctionPenaltyAdapter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/direct/MultivariateFunctionPenaltyAdapter.java",
      "class_declaration": "@Deprecated\npublic class MultivariateFunctionPenaltyAdapter implements MultivariateFunction ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "MultivariateFunctionPenaltyAdapter.value(double[])": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java"
    },
    {
      "src_name": "UnitSphereRandomVectorGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/UnitSphereRandomVectorGenerator.java",
      "class_declaration": "public class UnitSphereRandomVectorGenerator implements RandomVectorGenerator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "UnitSphereRandomVectorGenerator.nextVector()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/UnitSphereRandomVectorGeneratorTest.java"
    },
    {
      "src_name": "BiDiagonalTransformer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/BiDiagonalTransformer.java",
      "class_declaration": "class BiDiagonalTransformer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BiDiagonalTransformer.getU()": [
            9,
            9,
            9
          ],
          "BiDiagonalTransformer.getB()": [
            6,
            6,
            6
          ],
          "BiDiagonalTransformer.getV()": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/BiDiagonalTransformerTest.java"
    },
    {
      "src_name": "TournamentSelection",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/TournamentSelection.java",
      "class_declaration": "public class TournamentSelection implements SelectionPolicy ",
      "methods_under_test": {
        "=1": {
          "TournamentSelection.select(final, Population)": [
            1,
            1,
            1
          ],
          "TournamentSelection.setArity(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/TournamentSelectionTest.java"
    },
    {
      "src_name": "RegulaFalsiSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/RegulaFalsiSolver.java",
      "class_declaration": "public class RegulaFalsiSolver extends BaseSecantSolver ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/solvers/RegulaFalsiSolverTest.java"
    },
    {
      "src_name": "Pair",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/Pair.java",
      "class_declaration": "public class Pair <K, V> ",
      "methods_under_test": {
        "=1": {
          "Pair.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Pair.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/PairTest.java"
    },
    {
      "src_name": "MultidimensionalCounter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/MultidimensionalCounter.java",
      "class_declaration": "public class MultidimensionalCounter implements Iterable<Integer> ",
      "methods_under_test": {
        "=1": {
          "Iterator.getCount(int)": [
            1,
            1,
            1
          ],
          "Iterator.remove()": [
            1,
            1,
            1
          ],
          "MultidimensionalCounter.iterator()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Iterator.hasNext()": [
            3,
            3,
            3
          ],
          "Iterator.next()": [
            3,
            3,
            3
          ],
          "MultidimensionalCounter.getCounts(int)": [
            4,
            4,
            4
          ],
          "MultidimensionalCounter.getCount()": [
            4,
            4,
            4
          ],
          "MultidimensionalCounter.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/MultidimensionalCounterTest.java"
    },
    {
      "src_name": "RealMatrixFormat",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
      "class_declaration": "public class RealMatrixFormat ",
      "methods_under_test": {
        "=1": {
          "RealMatrixFormat.getInstance(final, Locale)": [
            1,
            1,
            1
          ],
          "RealMatrixFormat.format(RealMatrix)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "RealMatrixFormat.format(RealMatrix, StringBuffer, FieldPosition)": [
            5,
            5,
            5
          ],
          "RealMatrixFormat.parse(String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "RealMatrixFormat.parse(String, ParsePosition)": [
            16,
            16,
            16
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/RealMatrixFormatTest.java"
    },
    {
      "src_name": "MersenneTwister",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/MersenneTwister.java",
      "class_declaration": "public class MersenneTwister extends BitsStreamGenerator implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "MersenneTwister.setSeed(int)": [
            2,
            2,
            2
          ],
          "MersenneTwister.setSeed(int[])": [
            7,
            7,
            7
          ],
          "MersenneTwister.next(int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/MersenneTwisterTest.java"
    },
    {
      "src_name": "Quaternion",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/complex/Quaternion.java",
      "class_declaration": "public final class Quaternion implements Serializable ",
      "methods_under_test": {
        "=1": {
          "Quaternion.multiply(final, Quaternion, final, Quaternion)": [
            1,
            1,
            1
          ],
          "Quaternion.multiply(final, Quaternion)": [
            1,
            1,
            1
          ],
          "Quaternion.add(final, Quaternion, final, Quaternion)": [
            1,
            1,
            1
          ],
          "Quaternion.add(final, Quaternion)": [
            1,
            1,
            1
          ],
          "Quaternion.subtract(final, Quaternion, final, Quaternion)": [
            1,
            1,
            1
          ],
          "Quaternion.subtract(final, Quaternion)": [
            1,
            1,
            1
          ],
          "Quaternion.dotProduct(final, Quaternion, final, Quaternion)": [
            1,
            1,
            1
          ],
          "Quaternion.dotProduct(final, Quaternion)": [
            1,
            1,
            1
          ],
          "Quaternion.equals(final, Quaternion, final, double)": [
            1,
            1,
            1
          ],
          "Quaternion.isUnitQuaternion(double)": [
            1,
            1,
            1
          ],
          "Quaternion.isPureQuaternion(double)": [
            1,
            1,
            1
          ],
          "Quaternion.multiply(final, double)": [
            1,
            1,
            1
          ],
          "Quaternion.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Quaternion.normalize()": [
            2,
            2,
            2
          ],
          "Quaternion.equals(Object)": [
            3,
            3,
            3
          ],
          "Quaternion.hashCode()": [
            2,
            2,
            2
          ],
          "Quaternion.getPositivePolarForm()": [
            3,
            3,
            3
          ],
          "Quaternion.getInverse()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/complex/QuaternionTest.java"
    },
    {
      "src_name": "BigFraction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fraction/BigFraction.java",
      "class_declaration": "public class BigFraction extends Number implements FieldElement<BigFraction>, Comparable<BigFraction>, Serializable ",
      "methods_under_test": {
        "=1": {
          "BigFraction.abs()": [
            1,
            1,
            1
          ],
          "BigFraction.add(final, BigInteger)": [
            1,
            1,
            1
          ],
          "BigFraction.add(final, int)": [
            1,
            1,
            1
          ],
          "BigFraction.add(final, long)": [
            1,
            1,
            1
          ],
          "BigFraction.bigDecimalValue()": [
            1,
            1,
            1
          ],
          "BigFraction.bigDecimalValue(final, int)": [
            1,
            1,
            1
          ],
          "BigFraction.bigDecimalValue(final, int, final, int)": [
            1,
            1,
            1
          ],
          "BigFraction.compareTo(final, BigFraction)": [
            1,
            1,
            1
          ],
          "BigFraction.divide(final, int)": [
            1,
            1,
            1
          ],
          "BigFraction.divide(final, long)": [
            1,
            1,
            1
          ],
          "BigFraction.hashCode()": [
            1,
            1,
            1
          ],
          "BigFraction.intValue()": [
            1,
            1,
            1
          ],
          "BigFraction.longValue()": [
            1,
            1,
            1
          ],
          "BigFraction.multiply(final, int)": [
            1,
            1,
            1
          ],
          "BigFraction.multiply(final, long)": [
            1,
            1,
            1
          ],
          "BigFraction.negate()": [
            1,
            1,
            1
          ],
          "BigFraction.percentageValue()": [
            1,
            1,
            1
          ],
          "BigFraction.pow(final, double)": [
            1,
            1,
            1
          ],
          "BigFraction.reciprocal()": [
            1,
            1,
            1
          ],
          "BigFraction.reduce()": [
            1,
            1,
            1
          ],
          "BigFraction.subtract(final, int)": [
            1,
            1,
            1
          ],
          "BigFraction.subtract(final, long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BigFraction.getReducedFraction(final, int, final, int)": [
            2,
            2,
            2
          ],
          "BigFraction.add(final, BigFraction)": [
            4,
            4,
            4
          ],
          "BigFraction.divide(final, BigInteger)": [
            3,
            3,
            3
          ],
          "BigFraction.divide(final, BigFraction)": [
            3,
            3,
            3
          ],
          "BigFraction.doubleValue()": [
            2,
            2,
            2
          ],
          "BigFraction.equals(final, Object)": [
            3,
            3,
            3
          ],
          "BigFraction.floatValue()": [
            2,
            2,
            2
          ],
          "BigFraction.multiply(final, BigInteger)": [
            2,
            2,
            2
          ],
          "BigFraction.multiply(final, BigFraction)": [
            3,
            3,
            3
          ],
          "BigFraction.pow(final, int)": [
            2,
            2,
            2
          ],
          "BigFraction.pow(final, long)": [
            2,
            2,
            2
          ],
          "BigFraction.pow(final, BigInteger)": [
            2,
            2,
            2
          ],
          "BigFraction.subtract(final, BigInteger)": [
            2,
            2,
            2
          ],
          "BigFraction.subtract(final, BigFraction)": [
            4,
            4,
            4
          ],
          "BigFraction.toString()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java"
    },
    {
      "src_name": "TriangularDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/TriangularDistribution.java",
      "class_declaration": "public class TriangularDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "TriangularDistribution.density(double)": [
            5,
            5,
            5
          ],
          "TriangularDistribution.cumulativeProbability(double)": [
            5,
            5,
            5
          ],
          "TriangularDistribution.inverseCumulativeProbability(double)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/TriangularDistributionTest.java"
    },
    {
      "src_name": "ResizableDoubleArray",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java",
      "class_declaration": "public class ResizableDoubleArray implements DoubleArray, Serializable ",
      "methods_under_test": {
        "=1": {
          "ResizableDoubleArray.addElements(double[])": [
            1,
            1,
            1
          ],
          "ResizableDoubleArray.checkContractExpand(float, float)": [
            1,
            1,
            1
          ],
          "ResizableDoubleArray.clear()": [
            1,
            1,
            1
          ],
          "ResizableDoubleArray.contract()": [
            1,
            1,
            1
          ],
          "ResizableDoubleArray.discardFrontElements(int)": [
            1,
            1,
            1
          ],
          "ResizableDoubleArray.discardMostRecentElements(int)": [
            1,
            1,
            1
          ],
          "ResizableDoubleArray.getElements()": [
            1,
            1,
            1
          ],
          "ResizableDoubleArray.setContractionCriteria(float)": [
            1,
            1,
            1
          ],
          "ResizableDoubleArray.compute(MathArrays.Function)": [
            1,
            1,
            1
          ],
          "ResizableDoubleArray.setExpansionFactor(float)": [
            1,
            1,
            1
          ],
          "ResizableDoubleArray.start()": [
            1,
            1,
            1
          ],
          "ResizableDoubleArray.copy()": [
            1,
            1,
            1
          ],
          "ResizableDoubleArray.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ResizableDoubleArray.addElement(double)": [
            2,
            2,
            2
          ],
          "ResizableDoubleArray.addElementRolling(double)": [
            3,
            3,
            3
          ],
          "ResizableDoubleArray.substituteMostRecentElement(double)": [
            2,
            2,
            2
          ],
          "ResizableDoubleArray.checkContractExpand(double, double)": [
            3,
            3,
            3
          ],
          "ResizableDoubleArray.expand()": [
            2,
            2,
            2
          ],
          "ResizableDoubleArray.getElement(int)": [
            3,
            3,
            3
          ],
          "ResizableDoubleArray.getExpansionMode()": [
            3,
            3,
            3
          ],
          "ResizableDoubleArray.setElement(int, double)": [
            4,
            4,
            4
          ],
          "ResizableDoubleArray.setExpansionMode(int)": [
            5,
            5,
            5
          ],
          "ResizableDoubleArray.setNumElements(int)": [
            3,
            3,
            3
          ],
          "ResizableDoubleArray.copy(ResizableDoubleArray, ResizableDoubleArray)": [
            2,
            2,
            2
          ],
          "ResizableDoubleArray.equals(Object)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java"
    },
    {
      "src_name": "Segment",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Segment.java",
      "class_declaration": "public class Segment ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "Segment.distance(final, Vector2D)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SegmentTest.java"
    },
    {
      "src_name": "ListPopulation",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java",
      "class_declaration": "public abstract class ListPopulation implements Population ",
      "methods_under_test": {
        "=1": {
          "ListPopulation.toString()": [
            1,
            1,
            1
          ],
          "ListPopulation.iterator()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ListPopulation.setChromosomes(final, List<Chromosome>)": [
            3,
            3,
            3
          ],
          "ListPopulation.addChromosomes(final, Collection<Chromosome>)": [
            2,
            2,
            2
          ],
          "ListPopulation.addChromosome(final, Chromosome)": [
            2,
            2,
            2
          ],
          "ListPopulation.getFittestChromosome()": [
            3,
            3,
            3
          ],
          "ListPopulation.setPopulationLimit(final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java"
    },
    {
      "src_name": "BracketFinder",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/univariate/BracketFinder.java",
      "class_declaration": "@Deprecated\npublic class BracketFinder ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BracketFinder.search(UnivariateFunction, GoalType, double, double)": [
            10,
            10,
            10
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/univariate/BracketFinderTest.java"
    },
    {
      "src_name": "ExponentialDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/ExponentialDistribution.java",
      "class_declaration": "public class ExponentialDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {
          "ExponentialDistribution.getNumericalVariance()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ExponentialDistribution.density(double)": [
            2,
            2,
            2
          ],
          "ExponentialDistribution.cumulativeProbability(double)": [
            2,
            2,
            2
          ],
          "ExponentialDistribution.inverseCumulativeProbability(double)": [
            3,
            3,
            3
          ],
          "ExponentialDistribution.sample()": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/ExponentialDistributionTest.java"
    },
    {
      "src_name": "SimplePointChecker",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/SimplePointChecker.java",
      "class_declaration": "public class SimplePointChecker <PAIR extends Pair<double[], ? extends Object>> extends AbstractConvergenceChecker<PAIR> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/SimplePointCheckerTest.java"
    },
    {
      "src_name": "CMAESOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java",
      "class_declaration": "public class CMAESOptimizer extends MultivariateOptimizer ",
      "methods_under_test": {
        "=1": {
          "CMAESOptimizer.optimize()": [
            1,
            1,
            1
          ],
          "DoubleIndex.compareTo(DoubleIndex)": [
            1,
            1,
            1
          ],
          "DoubleIndex.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CMAESOptimizer.parseOptimizationData()": [
            4,
            4,
            4
          ],
          "DoubleIndex.equals(Object)": [
            3,
            3,
            3
          ],
          "FitnessFunction.value(final, double[])": [
            2,
            2,
            2
          ],
          "FitnessFunction.isFeasible(final, double[])": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {
          "CMAESOptimizer.doOptimize()": [
            24,
            24,
            24
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java"
    },
    {
      "src_name": "ArithmeticUtils",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java",
      "class_declaration": "public final class ArithmeticUtils ",
      "methods_under_test": {
        "=1": {
          "ArithmeticUtils.addAndCheck(long, long)": [
            1,
            1,
            1
          ],
          "ArithmeticUtils.isPowerOfTwo(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArithmeticUtils.addAndCheck(int, int)": [
            2,
            2,
            2
          ],
          "ArithmeticUtils.binomialCoefficient(final, int, final, int)": [
            9,
            9,
            9
          ],
          "ArithmeticUtils.binomialCoefficientDouble(final, int, final, int)": [
            6,
            6,
            6
          ],
          "ArithmeticUtils.binomialCoefficientLog(final, int, final, int)": [
            8,
            8,
            8
          ],
          "ArithmeticUtils.factorial(final, int)": [
            3,
            3,
            3
          ],
          "ArithmeticUtils.factorialDouble(final, int)": [
            3,
            3,
            3
          ],
          "ArithmeticUtils.factorialLog(final, int)": [
            4,
            4,
            4
          ],
          "ArithmeticUtils.gcd(final, long, final, long)": [
            10,
            10,
            10
          ],
          "ArithmeticUtils.lcm(int, int)": [
            3,
            3,
            3
          ],
          "ArithmeticUtils.lcm(long, long)": [
            3,
            3,
            3
          ],
          "ArithmeticUtils.mulAndCheck(int, int)": [
            2,
            2,
            2
          ],
          "ArithmeticUtils.subAndCheck(int, int)": [
            2,
            2,
            2
          ],
          "ArithmeticUtils.subAndCheck(long, long)": [
            3,
            3,
            3
          ],
          "ArithmeticUtils.pow(final, int, int)": [
            4,
            4,
            4
          ],
          "ArithmeticUtils.pow(final, int, long)": [
            4,
            4,
            4
          ],
          "ArithmeticUtils.pow(final, long, int)": [
            4,
            4,
            4
          ],
          "ArithmeticUtils.pow(final, long, long)": [
            4,
            4,
            4
          ],
          "ArithmeticUtils.pow(final, BigInteger, int)": [
            2,
            2,
            2
          ],
          "ArithmeticUtils.pow(final, BigInteger, long)": [
            4,
            4,
            4
          ],
          "ArithmeticUtils.pow(final, BigInteger, BigInteger)": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "ArithmeticUtils.gcd(int, int)": [
            11,
            11,
            11
          ],
          "ArithmeticUtils.mulAndCheck(long, long)": [
            11,
            11,
            11
          ],
          "ArithmeticUtils.stirlingS2(final, int, final, int)": [
            14,
            14,
            14
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/ArithmeticUtilsTest.java"
    },
    {
      "src_name": "FourthMoment",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/moment/FourthMoment.java",
      "class_declaration": "class FourthMoment extends ThirdMoment implements Serializable ",
      "methods_under_test": {
        "=1": {
          "FourthMoment.clear()": [
            1,
            1,
            1
          ],
          "FourthMoment.copy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FourthMoment.increment(final, double)": [
            2,
            2,
            2
          ],
          "FourthMoment.copy(FourthMoment, FourthMoment)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/moment/FourthMomentTest.java"
    },
    {
      "src_name": "NotPositiveException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/NotPositiveException.java",
      "class_declaration": "public class NotPositiveException extends NumberIsTooSmallException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/exception/NotPositiveExceptionTest.java"
    },
    {
      "src_name": "GradientFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/differentiation/GradientFunction.java",
      "class_declaration": "public class GradientFunction implements MultivariateVectorFunction ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "GradientFunction.value(double[])": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/differentiation/GradientFunctionTest.java"
    },
    {
      "src_name": "RandomKeyMutation",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/RandomKeyMutation.java",
      "class_declaration": "public class RandomKeyMutation implements MutationPolicy ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "RandomKeyMutation.mutate(final, Chromosome)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/RandomKeyMutationTest.java"
    },
    {
      "src_name": "GaussianFitter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/fitting/GaussianFitter.java",
      "class_declaration": "@Deprecated\npublic class GaussianFitter extends CurveFitter<Gaussian.Parametric> ",
      "methods_under_test": {
        "=1": {
          "ParameterGuesser.guess()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/fitting/GaussianFitterTest.java"
    },
    {
      "src_name": "HarmonicFitter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java",
      "class_declaration": "@Deprecated\npublic class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> ",
      "methods_under_test": {
        "=1": {
          "ParameterGuesser.guess()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java"
    },
    {
      "src_name": "LevenbergMarquardtOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java",
      "class_declaration": "public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {
          "LevenbergMarquardtOptimizer.doOptimize()": [
            28,
            0,
            0
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java"
    },
    {
      "src_name": "OLSMultipleLinearRegression",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/regression/OLSMultipleLinearRegression.java",
      "class_declaration": "public class OLSMultipleLinearRegression extends AbstractMultipleLinearRegression ",
      "methods_under_test": {
        "=1": {
          "OLSMultipleLinearRegression.newSampleData(double[], double[][])": [
            1,
            1,
            1
          ],
          "OLSMultipleLinearRegression.newSampleData(double[], int, int)": [
            1,
            1,
            1
          ],
          "OLSMultipleLinearRegression.calculateResidualSumOfSquares()": [
            1,
            1,
            1
          ],
          "OLSMultipleLinearRegression.calculateRSquared()": [
            1,
            1,
            1
          ],
          "OLSMultipleLinearRegression.newXSampleData(double[][])": [
            1,
            1,
            1
          ],
          "OLSMultipleLinearRegression.calculateBeta()": [
            1,
            1,
            1
          ],
          "OLSMultipleLinearRegression.calculateBetaVariance()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "OLSMultipleLinearRegression.calculateHat()": [
            4,
            4,
            4
          ],
          "OLSMultipleLinearRegression.calculateTotalSumOfSquares()": [
            3,
            3,
            3
          ],
          "OLSMultipleLinearRegression.calculateAdjustedRSquared()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/regression/OLSMultipleLinearRegressionTest.java"
    },
    {
      "src_name": "Line",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Line.java",
      "class_declaration": "public class Line implements Hyperplane<Euclidean2D>, Embedding<Euclidean2D, Euclidean1D> ",
      "methods_under_test": {
        "=1": {
          "Line.copySelf()": [
            1,
            1,
            1
          ],
          "Line.reset(final, Vector2D, final, double)": [
            1,
            1,
            1
          ],
          "Line.toSubSpace(final, Vector<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "Line.toSpace(final, Vector<Euclidean1D>)": [
            1,
            1,
            1
          ],
          "Line.wholeHyperplane()": [
            1,
            1,
            1
          ],
          "Line.wholeSpace()": [
            1,
            1,
            1
          ],
          "Line.getOffset(final, Line)": [
            1,
            1,
            1
          ],
          "Line.getOffset(final, Vector<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "Line.sameOrientationAs(final, Hyperplane<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "Line.getPointAt(final, Vector1D, final, double)": [
            1,
            1,
            1
          ],
          "Line.contains(final, Vector2D)": [
            1,
            1,
            1
          ],
          "Line.distance(final, Vector2D)": [
            1,
            1,
            1
          ],
          "Line.isParallelTo(final, Line)": [
            1,
            1,
            1
          ],
          "Line.translateToPoint(final, Vector2D)": [
            1,
            1,
            1
          ],
          "Line.setAngle(final, double)": [
            1,
            1,
            1
          ],
          "Line.setOriginOffset(final, double)": [
            1,
            1,
            1
          ],
          "Line.getTransform(final, AffineTransform)": [
            1,
            1,
            1
          ],
          "LineTransform.apply(final, Vector<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "LineTransform.apply(final, Hyperplane<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "LineTransform.apply(final, SubHyperplane<Euclidean1D>, final, Hyperplane<Euclidean2D>, final, Hyperplane<Euclidean2D>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Line.reset(final, Vector2D, final, Vector2D)": [
            3,
            3,
            3
          ],
          "Line.revertSelf()": [
            2,
            2,
            2
          ],
          "Line.intersection(final, Line)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/LineTest.java"
    },
    {
      "src_name": "DBSCANClusterer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/clustering/DBSCANClusterer.java",
      "class_declaration": "public class DBSCANClusterer <T extends Clusterable> extends Clusterer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ml/clustering/DBSCANClustererTest.java"
    },
    {
      "src_name": "CMAESOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
      "class_declaration": "@Deprecated\npublic class CMAESOptimizer extends BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction> implements MultivariateOptimizer ",
      "methods_under_test": {
        "=1": {
          "DoubleIndex.compareTo(DoubleIndex)": [
            1,
            1,
            1
          ],
          "DoubleIndex.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DoubleIndex.equals(Object)": [
            3,
            3,
            3
          ],
          "FitnessFunction.value(final, double[])": [
            2,
            2,
            2
          ],
          "FitnessFunction.isFeasible(final, double[])": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java"
    },
    {
      "src_name": "TricubicSplineInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolator.java",
      "class_declaration": "public class TricubicSplineInterpolator implements TrivariateGridInterpolator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {
          "TricubicSplineInterpolator.interpolate(final, double[], final, double[], final, double[], final, double[][][])": [
            23,
            23,
            23
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatorTest.java"
    },
    {
      "src_name": "ChebyshevDistance",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/distance/ChebyshevDistance.java",
      "class_declaration": "public class ChebyshevDistance implements DistanceMeasure ",
      "methods_under_test": {
        "=1": {
          "ChebyshevDistance.compute(double[], double[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ml/distance/ChebyshevDistanceTest.java"
    },
    {
      "src_name": "EuclideanDoublePoint",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePoint.java",
      "class_declaration": "@Deprecated\npublic class EuclideanDoublePoint implements Clusterable<EuclideanDoublePoint>, Serializable ",
      "methods_under_test": {
        "=1": {
          "EuclideanDoublePoint.distanceFrom(final, EuclideanDoublePoint)": [
            1,
            1,
            1
          ],
          "EuclideanDoublePoint.hashCode()": [
            1,
            1,
            1
          ],
          "EuclideanDoublePoint.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EuclideanDoublePoint.centroidOf(final, Collection<EuclideanDoublePoint>)": [
            4,
            4,
            4
          ],
          "EuclideanDoublePoint.equals(final, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java"
    },
    {
      "src_name": "Erf",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/special/Erf.java",
      "class_declaration": "public class Erf ",
      "methods_under_test": {
        "=1": {
          "Erf.erfcInv(final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Erf.erf(double)": [
            2,
            2,
            2
          ],
          "Erf.erfc(double)": [
            2,
            2,
            2
          ],
          "Erf.erf(double, double)": [
            4,
            4,
            4
          ],
          "Erf.erfInv(final, double)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/special/ErfTest.java"
    },
    {
      "src_name": "SubLine",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java",
      "class_declaration": "public class SubLine extends AbstractSubHyperplane<Euclidean2D, Euclidean1D> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java"
    },
    {
      "src_name": "MullerSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/MullerSolver.java",
      "class_declaration": "public class MullerSolver extends AbstractUnivariateSolver ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "MullerSolver.doSolve()": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/solvers/MullerSolverTest.java"
    },
    {
      "src_name": "GaussianRandomGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/GaussianRandomGenerator.java",
      "class_declaration": "public class GaussianRandomGenerator implements NormalizedRandomGenerator ",
      "methods_under_test": {
        "=1": {
          "GaussianRandomGenerator.nextNormalizedDouble()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/GaussianRandomGeneratorTest.java"
    },
    {
      "src_name": "BisectionSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/BisectionSolver.java",
      "class_declaration": "public class BisectionSolver extends AbstractUnivariateSolver ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BisectionSolver.doSolve()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/solvers/BisectionSolverTest.java"
    },
    {
      "src_name": "BlockRealMatrix",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java",
      "class_declaration": "public class BlockRealMatrix extends AbstractRealMatrix implements Serializable ",
      "methods_under_test": {
        "=1": {
          "BlockRealMatrix.createMatrix(final, int, final, int)": [
            1,
            1,
            1
          ],
          "BlockRealMatrix.getEntry(final, int, final, int)": [
            1,
            1,
            1
          ],
          "BlockRealMatrix.setEntry(final, int, final, int, final, double)": [
            1,
            1,
            1
          ],
          "BlockRealMatrix.addToEntry(final, int, final, int, final, double)": [
            1,
            1,
            1
          ],
          "BlockRealMatrix.multiplyEntry(final, int, final, int, final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BlockRealMatrix.toBlocksLayout(final, double[][])": [
            6,
            6,
            6
          ],
          "BlockRealMatrix.createBlocksLayout(final, int, final, int)": [
            3,
            3,
            3
          ],
          "BlockRealMatrix.copy()": [
            2,
            2,
            2
          ],
          "BlockRealMatrix.add(final, RealMatrix)": [
            7,
            7,
            7
          ],
          "BlockRealMatrix.add(final, BlockRealMatrix)": [
            3,
            3,
            3
          ],
          "BlockRealMatrix.subtract(final, RealMatrix)": [
            7,
            7,
            7
          ],
          "BlockRealMatrix.subtract(final, BlockRealMatrix)": [
            3,
            3,
            3
          ],
          "BlockRealMatrix.scalarAdd(final, double)": [
            3,
            3,
            3
          ],
          "BlockRealMatrix.scalarMultiply(final, double)": [
            3,
            3,
            3
          ],
          "BlockRealMatrix.multiply(final, RealMatrix)": [
            9,
            9,
            9
          ],
          "BlockRealMatrix.multiply(BlockRealMatrix)": [
            8,
            8,
            8
          ],
          "BlockRealMatrix.getData()": [
            4,
            4,
            4
          ],
          "BlockRealMatrix.getNorm()": [
            6,
            6,
            6
          ],
          "BlockRealMatrix.getFrobeniusNorm()": [
            3,
            3,
            3
          ],
          "BlockRealMatrix.getSubMatrix(final, int, final, int, final, int, final, int)": [
            6,
            6,
            6
          ],
          "BlockRealMatrix.setSubMatrix(final, double[][], final, int, final, int)": [
            4,
            4,
            4
          ],
          "BlockRealMatrix.getRowMatrix(final, int)": [
            3,
            3,
            3
          ],
          "BlockRealMatrix.setRowMatrix(final, int, final, RealMatrix)": [
            3,
            3,
            3
          ],
          "BlockRealMatrix.setRowMatrix(final, int, final, BlockRealMatrix)": [
            2,
            2,
            2
          ],
          "BlockRealMatrix.getColumnMatrix(final, int)": [
            4,
            4,
            4
          ],
          "BlockRealMatrix.setColumnMatrix(final, int, final, RealMatrix)": [
            3,
            3,
            3
          ],
          "BlockRealMatrix.setColumnMatrix(final, int, final, BlockRealMatrix)": [
            2,
            2,
            2
          ],
          "BlockRealMatrix.getRowVector(final, int)": [
            2,
            2,
            2
          ],
          "BlockRealMatrix.setRowVector(final, int, final, RealVector)": [
            3,
            3,
            3
          ],
          "BlockRealMatrix.getColumnVector(final, int)": [
            3,
            3,
            3
          ],
          "BlockRealMatrix.setColumnVector(final, int, final, RealVector)": [
            3,
            3,
            3
          ],
          "BlockRealMatrix.getRow(final, int)": [
            2,
            2,
            2
          ],
          "BlockRealMatrix.setRow(final, int, final, double[])": [
            2,
            2,
            2
          ],
          "BlockRealMatrix.getColumn(final, int)": [
            3,
            3,
            3
          ],
          "BlockRealMatrix.setColumn(final, int, final, double[])": [
            2,
            2,
            2
          ],
          "BlockRealMatrix.transpose()": [
            5,
            5,
            5
          ],
          "BlockRealMatrix.operate(final, double[])": [
            7,
            7,
            7
          ],
          "BlockRealMatrix.preMultiply(final, double[])": [
            7,
            7,
            7
          ],
          "BlockRealMatrix.walkInRowOrder(final, RealMatrixChangingVisitor)": [
            5,
            5,
            5
          ],
          "BlockRealMatrix.walkInRowOrder(final, RealMatrixPreservingVisitor)": [
            5,
            5,
            5
          ],
          "BlockRealMatrix.walkInRowOrder(final, RealMatrixChangingVisitor, final, int, final, int, final, int, final, int)": [
            5,
            5,
            5
          ],
          "BlockRealMatrix.walkInRowOrder(final, RealMatrixPreservingVisitor, final, int, final, int, final, int, final, int)": [
            5,
            5,
            5
          ],
          "BlockRealMatrix.walkInOptimizedOrder(final, RealMatrixChangingVisitor)": [
            5,
            5,
            5
          ],
          "BlockRealMatrix.walkInOptimizedOrder(final, RealMatrixPreservingVisitor)": [
            5,
            5,
            5
          ],
          "BlockRealMatrix.walkInOptimizedOrder(final, RealMatrixChangingVisitor, final, int, final, int, final, int, final, int)": [
            5,
            5,
            5
          ],
          "BlockRealMatrix.walkInOptimizedOrder(final, RealMatrixPreservingVisitor, final, int, final, int, final, int, final, int)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/BlockRealMatrixTest.java"
    },
    {
      "src_name": "FieldVector3D",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3D.java",
      "class_declaration": "public class FieldVector3D <T extends RealFieldElement<T>> implements Serializable ",
      "methods_under_test": {
        "=1": {
          "FieldVector3D.toArray()": [
            1,
            1,
            1
          ],
          "FieldVector3D.toVector3D()": [
            1,
            1,
            1
          ],
          "FieldVector3D.add(final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.add(final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.add(final, T, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.add(final, T, final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.add(final, double, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.add(final, double, final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.subtract(final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.subtract(final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.subtract(final, T, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.subtract(final, T, final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.subtract(final, double, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.subtract(final, double, final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.angle(final, Vector3D, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.negate()": [
            1,
            1,
            1
          ],
          "FieldVector3D.scalarMultiply(final, T)": [
            1,
            1,
            1
          ],
          "FieldVector3D.scalarMultiply(final, double)": [
            1,
            1,
            1
          ],
          "FieldVector3D.dotProduct(final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.dotProduct(final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.crossProduct(final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.crossProduct(final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distance1(final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distance1(final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distance(final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distance(final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distanceSq(final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distanceSq(final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.dotProduct(final, FieldVector3D<T>, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.dotProduct(final, FieldVector3D<T>, final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.dotProduct(final, Vector3D, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.crossProduct(final, FieldVector3D<T>, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.crossProduct(final, FieldVector3D<T>, final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.crossProduct(final, Vector3D, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distance1(final, FieldVector3D<T>, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distance1(final, FieldVector3D<T>, final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distance1(final, Vector3D, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distance(final, FieldVector3D<T>, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distance(final, FieldVector3D<T>, final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distance(final, Vector3D, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distanceInf(final, FieldVector3D<T>, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distanceInf(final, FieldVector3D<T>, final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distanceInf(final, Vector3D, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distanceSq(final, FieldVector3D<T>, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distanceSq(final, FieldVector3D<T>, final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldVector3D.distanceSq(final, Vector3D, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldVector3D.toString()": [
            1,
            1,
            1
          ],
          "FieldVector3D.toString(final, NumberFormat)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FieldVector3D.getNormInf()": [
            5,
            5,
            5
          ],
          "FieldVector3D.normalize()": [
            2,
            2,
            2
          ],
          "FieldVector3D.orthogonal()": [
            5,
            5,
            5
          ],
          "FieldVector3D.angle(final, FieldVector3D<T>, final, FieldVector3D<T>)": [
            4,
            4,
            4
          ],
          "FieldVector3D.angle(final, FieldVector3D<T>, final, Vector3D)": [
            4,
            4,
            4
          ],
          "FieldVector3D.equals(Object)": [
            4,
            4,
            4
          ],
          "FieldVector3D.hashCode()": [
            2,
            2,
            2
          ],
          "FieldVector3D.distanceInf(final, FieldVector3D<T>)": [
            5,
            5,
            5
          ],
          "FieldVector3D.distanceInf(final, Vector3D)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldVector3DTest.java"
    },
    {
      "src_name": "MultiStartMultivariateVectorOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java",
      "class_declaration": "public class MultiStartMultivariateVectorOptimizer extends BaseMultiStartMultivariateOptimizer<PointVectorValuePair> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java"
    },
    {
      "src_name": "Percentile",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Percentile.java",
      "class_declaration": "public class Percentile extends AbstractUnivariateStatistic implements Serializable ",
      "methods_under_test": {
        "=1": {
          "Percentile.evaluate(final, double)": [
            1,
            1,
            1
          ],
          "Percentile.evaluate(final, double[], final, double)": [
            1,
            1,
            1
          ],
          "Percentile.evaluate(final, double[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "Percentile.copy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Percentile.setData(final, double[])": [
            2,
            2,
            2
          ],
          "Percentile.setData(final, double[], final, int, final, int)": [
            2,
            2,
            2
          ],
          "Percentile.evaluate(final, double[], final, int, final, int, final, double)": [
            7,
            7,
            7
          ],
          "Percentile.medianOf3(final, double[], final, int, final, int)": [
            5,
            5,
            5
          ],
          "Percentile.setQuantile(final, double)": [
            2,
            2,
            2
          ],
          "Percentile.copy(Percentile, Percentile)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/rank/PercentileTest.java"
    },
    {
      "src_name": "KMeansPlusPlusClusterer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClusterer.java",
      "class_declaration": "public class KMeansPlusPlusClusterer <T extends Clusterable> extends Clusterer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ml/clustering/KMeansPlusPlusClustererTest.java"
    },
    {
      "src_name": "ContinuedFraction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
      "class_declaration": "public abstract class ContinuedFraction ",
      "methods_under_test": {
        "=1": {
          "ContinuedFraction.evaluate(double)": [
            1,
            1,
            1
          ],
          "ContinuedFraction.evaluate(double, double)": [
            1,
            1,
            1
          ],
          "ContinuedFraction.evaluate(double, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ContinuedFraction.evaluate(double, double, int)": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/ContinuedFractionTest.java"
    },
    {
      "src_name": "DiagonalMatrix",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java",
      "class_declaration": "public class DiagonalMatrix extends AbstractRealMatrix implements Serializable ",
      "methods_under_test": {
        "=1": {
          "DiagonalMatrix.copy()": [
            1,
            1,
            1
          ],
          "DiagonalMatrix.getEntry(final, int, final, int)": [
            1,
            1,
            1
          ],
          "DiagonalMatrix.operate(final, double[])": [
            1,
            1,
            1
          ],
          "DiagonalMatrix.preMultiply(final, double[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DiagonalMatrix.createMatrix(final, int, final, int)": [
            2,
            2,
            2
          ],
          "DiagonalMatrix.add(final, DiagonalMatrix)": [
            2,
            2,
            2
          ],
          "DiagonalMatrix.subtract(final, DiagonalMatrix)": [
            2,
            2,
            2
          ],
          "DiagonalMatrix.multiply(final, DiagonalMatrix)": [
            2,
            2,
            2
          ],
          "DiagonalMatrix.multiply(final, RealMatrix)": [
            5,
            5,
            5
          ],
          "DiagonalMatrix.getData()": [
            2,
            2,
            2
          ],
          "DiagonalMatrix.setEntry(final, int, final, int, final, double)": [
            3,
            3,
            3
          ],
          "DiagonalMatrix.addToEntry(final, int, final, int, final, double)": [
            3,
            3,
            3
          ],
          "DiagonalMatrix.multiplyEntry(final, int, final, int, final, double)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/DiagonalMatrixTest.java"
    },
    {
      "src_name": "Sinc",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Sinc.java",
      "class_declaration": "public class Sinc implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Sinc.derivative()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Sinc.value(final, double)": [
            3,
            3,
            3
          ],
          "Sinc.value(final, DerivativeStructure)": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/function/SincTest.java"
    },
    {
      "src_name": "GillStepInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/GillStepInterpolator.java",
      "class_declaration": "class GillStepInterpolator extends RungeKuttaStepInterpolator ",
      "methods_under_test": {
        "=1": {
          "GillStepInterpolator.doCopy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GillStepInterpolator.computeInterpolatedStateAndDerivatives(final, double, final, double)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/GillStepInterpolatorTest.java"
    },
    {
      "src_name": "AbstractRealDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java",
      "class_declaration": "public abstract class AbstractRealDistribution implements RealDistribution, Serializable ",
      "methods_under_test": {
        "=1": {
          "AbstractRealDistribution.cumulativeProbability(double, double)": [
            1,
            1,
            1
          ],
          "AbstractRealDistribution.reseedRandomGenerator(long)": [
            1,
            1,
            1
          ],
          "AbstractRealDistribution.sample()": [
            1,
            1,
            1
          ],
          "AbstractRealDistribution.probability(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractRealDistribution.probability(double, double)": [
            2,
            2,
            2
          ],
          "AbstractRealDistribution.sample(int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "AbstractRealDistribution.inverseCumulativeProbability(final, double)": [
            16,
            16,
            16
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/AbstractRealDistributionTest.java"
    },
    {
      "src_name": "BrentOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java",
      "class_declaration": "public class BrentOptimizer extends UnivariateOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {
          "BrentOptimizer.doOptimize()": [
            17,
            15,
            15
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/univariate/BrentOptimizerTest.java"
    },
    {
      "src_name": "LoessInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/LoessInterpolator.java",
      "class_declaration": "public class LoessInterpolator implements UnivariateInterpolator, Serializable ",
      "methods_under_test": {
        "=1": {
          "LoessInterpolator.interpolate(final, double[], final, double[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LoessInterpolator.smooth(final, double[], final, double[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "LoessInterpolator.smooth(final, double[], final, double[], final, double[])": [
            16,
            16,
            16
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/interpolation/LoessInterpolatorTest.java"
    },
    {
      "src_name": "SobolSequenceGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/SobolSequenceGenerator.java",
      "class_declaration": "public class SobolSequenceGenerator implements RandomVectorGenerator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SobolSequenceGenerator.nextVector()": [
            4,
            4,
            4
          ],
          "SobolSequenceGenerator.skipTo(final, int)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/SobolSequenceGeneratorTest.java"
    },
    {
      "src_name": "SimpleRegression",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/regression/SimpleRegression.java",
      "class_declaration": "public class SimpleRegression implements Serializable, UpdatingMultipleLinearRegression ",
      "methods_under_test": {
        "=1": {
          "SimpleRegression.addData(final, double[][])": [
            1,
            1,
            1
          ],
          "SimpleRegression.removeData(double[][])": [
            1,
            1,
            1
          ],
          "SimpleRegression.clear()": [
            1,
            1,
            1
          ],
          "SimpleRegression.hasIntercept()": [
            1,
            1,
            1
          ],
          "SimpleRegression.getRSquare()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SimpleRegression.addData(final, double, final, double)": [
            4,
            4,
            4
          ],
          "SimpleRegression.append(SimpleRegression)": [
            3,
            3,
            3
          ],
          "SimpleRegression.removeData(final, double, final, double)": [
            3,
            3,
            3
          ],
          "SimpleRegression.addObservation(final, double[], final, double)": [
            2,
            2,
            2
          ],
          "SimpleRegression.addObservations(final, double[][], final, double[])": [
            5,
            5,
            5
          ],
          "SimpleRegression.predict(final, double)": [
            2,
            2,
            2
          ],
          "SimpleRegression.getSlope()": [
            3,
            3,
            3
          ],
          "SimpleRegression.getTotalSumSquares()": [
            2,
            2,
            2
          ],
          "SimpleRegression.getXSumSquares()": [
            2,
            2,
            2
          ],
          "SimpleRegression.getMeanSquareError()": [
            2,
            2,
            2
          ],
          "SimpleRegression.getR()": [
            2,
            2,
            2
          ],
          "SimpleRegression.getInterceptStdErr()": [
            2,
            2,
            2
          ],
          "SimpleRegression.getSlopeConfidenceInterval(final, double)": [
            3,
            3,
            3
          ],
          "SimpleRegression.getSignificance()": [
            2,
            2,
            2
          ],
          "SimpleRegression.regress()": [
            7,
            7,
            7
          ]
        },
        "11-20": {
          "SimpleRegression.regress(int[])": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/regression/SimpleRegressionTest.java"
    },
    {
      "src_name": "ThreeEighthesIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/ThreeEighthesIntegrator.java",
      "class_declaration": "public class ThreeEighthesIntegrator extends RungeKuttaIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/ThreeEighthesIntegratorTest.java"
    },
    {
      "src_name": "BrentSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/BrentSolver.java",
      "class_declaration": "public class BrentSolver extends AbstractUnivariateSolver ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BrentSolver.doSolve()": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/solvers/BrentSolverTest.java"
    },
    {
      "src_name": "PointValuePair",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/PointValuePair.java",
      "class_declaration": "public class PointValuePair extends Pair<double[], Double> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/PointValuePairTest.java"
    },
    {
      "src_name": "ThreeEighthesStepInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/ThreeEighthesStepInterpolator.java",
      "class_declaration": "class ThreeEighthesStepInterpolator extends RungeKuttaStepInterpolator ",
      "methods_under_test": {
        "=1": {
          "ThreeEighthesStepInterpolator.doCopy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ThreeEighthesStepInterpolator.computeInterpolatedStateAndDerivatives(final, double, final, double)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/ThreeEighthesStepInterpolatorTest.java"
    },
    {
      "src_name": "SynchronizedMultivariateSummaryStatistics",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java",
      "class_declaration": "public class SynchronizedMultivariateSummaryStatistics extends MultivariateSummaryStatistics ",
      "methods_under_test": {
        "=1": {
          "SynchronizedMultivariateSummaryStatistics.addValue(double[])": [
            1,
            1,
            1
          ],
          "SynchronizedMultivariateSummaryStatistics.toString()": [
            1,
            1,
            1
          ],
          "SynchronizedMultivariateSummaryStatistics.clear()": [
            1,
            1,
            1
          ],
          "SynchronizedMultivariateSummaryStatistics.equals(Object)": [
            1,
            1,
            1
          ],
          "SynchronizedMultivariateSummaryStatistics.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/SynchronizedMultivariateSummaryStatisticsTest.java"
    },
    {
      "src_name": "BlockFieldMatrix",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/BlockFieldMatrix.java",
      "class_declaration": "public class BlockFieldMatrix <T extends FieldElement<T>> extends AbstractFieldMatrix<T> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/BlockFieldMatrixTest.java"
    },
    {
      "src_name": "OnePointCrossover",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/OnePointCrossover.java",
      "class_declaration": "public class OnePointCrossover <T> implements CrossoverPolicy ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "OnePointCrossover.crossover(final, Chromosome, final, Chromosome)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/OnePointCrossoverTest.java"
    },
    {
      "src_name": "GaussianFitter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/GaussianFitter.java",
      "class_declaration": "public class GaussianFitter extends CurveFitter<Gaussian.Parametric> ",
      "methods_under_test": {
        "=1": {
          "ParameterGuesser.guess()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/GaussianFitterTest.java"
    },
    {
      "src_name": "Sum",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/summary/Sum.java",
      "class_declaration": "public class Sum extends AbstractStorelessUnivariateStatistic implements Serializable ",
      "methods_under_test": {
        "=1": {
          "Sum.increment(final, double)": [
            1,
            1,
            1
          ],
          "Sum.clear()": [
            1,
            1,
            1
          ],
          "Sum.evaluate(final, double[], final, double[])": [
            1,
            1,
            1
          ],
          "Sum.copy()": [
            1,
            1,
            1
          ],
          "Sum.copy(Sum, Sum)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Sum.evaluate(final, double[], final, int, final, int)": [
            3,
            3,
            3
          ],
          "Sum.evaluate(final, double[], final, double[], final, int, final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/summary/SumTest.java"
    },
    {
      "src_name": "StatUtils",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/StatUtils.java",
      "class_declaration": "public final class StatUtils ",
      "methods_under_test": {
        "=1": {
          "StatUtils.sum(final, double[])": [
            1,
            1,
            1
          ],
          "StatUtils.sum(final, double[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "StatUtils.sumSq(final, double[])": [
            1,
            1,
            1
          ],
          "StatUtils.sumSq(final, double[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "StatUtils.product(final, double[])": [
            1,
            1,
            1
          ],
          "StatUtils.product(final, double[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "StatUtils.sumLog(final, double[])": [
            1,
            1,
            1
          ],
          "StatUtils.sumLog(final, double[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "StatUtils.mean(final, double[])": [
            1,
            1,
            1
          ],
          "StatUtils.mean(final, double[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "StatUtils.geometricMean(final, double[])": [
            1,
            1,
            1
          ],
          "StatUtils.geometricMean(final, double[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "StatUtils.variance(final, double[])": [
            1,
            1,
            1
          ],
          "StatUtils.variance(final, double[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "StatUtils.variance(final, double[], final, double, final, int, final, int)": [
            1,
            1,
            1
          ],
          "StatUtils.variance(final, double[], final, double)": [
            1,
            1,
            1
          ],
          "StatUtils.populationVariance(final, double[])": [
            1,
            1,
            1
          ],
          "StatUtils.populationVariance(final, double[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "StatUtils.populationVariance(final, double[], final, double, final, int, final, int)": [
            1,
            1,
            1
          ],
          "StatUtils.populationVariance(final, double[], final, double)": [
            1,
            1,
            1
          ],
          "StatUtils.max(final, double[])": [
            1,
            1,
            1
          ],
          "StatUtils.max(final, double[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "StatUtils.min(final, double[])": [
            1,
            1,
            1
          ],
          "StatUtils.min(final, double[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "StatUtils.percentile(final, double[], final, double)": [
            1,
            1,
            1
          ],
          "StatUtils.percentile(final, double[], final, int, final, int, final, double)": [
            1,
            1,
            1
          ],
          "StatUtils.meanDifference(final, double[], final, double[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StatUtils.sumDifference(final, double[], final, double[])": [
            4,
            4,
            4
          ],
          "StatUtils.varianceDifference(final, double[], final, double[], double)": [
            4,
            4,
            4
          ],
          "StatUtils.normalize(final, double[])": [
            3,
            3,
            3
          ],
          "StatUtils.mode(double[])": [
            2,
            2,
            2
          ],
          "StatUtils.mode(double[], final, int, final, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java"
    },
    {
      "src_name": "IllinoisSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/IllinoisSolver.java",
      "class_declaration": "public class IllinoisSolver extends BaseSecantSolver ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/solvers/IllinoisSolverTest.java"
    },
    {
      "src_name": "FastCosineTransformer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/transform/FastCosineTransformer.java",
      "class_declaration": "public class FastCosineTransformer implements RealTransformer, Serializable ",
      "methods_under_test": {
        "=1": {
          "FastCosineTransformer.transform(final, UnivariateFunction, final, double, final, double, final, int, final, TransformType)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FastCosineTransformer.transform(final, double[], final, TransformType)": [
            4,
            4,
            4
          ],
          "FastCosineTransformer.fct(double[])": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/transform/FastCosineTransformerTest.java"
    },
    {
      "src_name": "AbstractRandomGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/AbstractRandomGenerator.java",
      "class_declaration": "public abstract class AbstractRandomGenerator implements RandomGenerator ",
      "methods_under_test": {
        "=1": {
          "AbstractRandomGenerator.clear()": [
            1,
            1,
            1
          ],
          "AbstractRandomGenerator.nextInt()": [
            1,
            1,
            1
          ],
          "AbstractRandomGenerator.nextLong()": [
            1,
            1,
            1
          ],
          "AbstractRandomGenerator.nextBoolean()": [
            1,
            1,
            1
          ],
          "AbstractRandomGenerator.nextFloat()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractRandomGenerator.setSeed(int[])": [
            2,
            2,
            2
          ],
          "AbstractRandomGenerator.nextBytes(byte[])": [
            5,
            5,
            5
          ],
          "AbstractRandomGenerator.nextInt(int)": [
            2,
            2,
            2
          ],
          "AbstractRandomGenerator.nextGaussian()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/AbstractRandomGeneratorTest.java"
    },
    {
      "src_name": "KolmogorovSmirnovDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/KolmogorovSmirnovDistribution.java",
      "class_declaration": "public class KolmogorovSmirnovDistribution implements Serializable ",
      "methods_under_test": {
        "=1": {
          "KolmogorovSmirnovDistribution.cdf(double)": [
            1,
            1,
            1
          ],
          "KolmogorovSmirnovDistribution.cdfExact(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "KolmogorovSmirnovDistribution.cdf(double, boolean)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/KolmogorovSmirnovDistributionTest.java"
    },
    {
      "src_name": "OneWayAnova",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/inference/OneWayAnova.java",
      "class_declaration": "public class OneWayAnova ",
      "methods_under_test": {
        "=1": {
          "OneWayAnova.anovaFValue(final, Collection<double[]>)": [
            1,
            1,
            1
          ],
          "OneWayAnova.anovaPValue(final, Collection<double[]>)": [
            1,
            1,
            1
          ],
          "OneWayAnova.anovaPValue(final, Collection<SummaryStatistics>, final, boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "OneWayAnova.anovaTest(final, Collection<double[]>, final, double)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/inference/OneWayAnovaTest.java"
    },
    {
      "src_name": "Variance",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/moment/Variance.java",
      "class_declaration": "public class Variance extends AbstractStorelessUnivariateStatistic implements Serializable, WeightedEvaluation ",
      "methods_under_test": {
        "=1": {
          "Variance.evaluate(final, double[], final, double[])": [
            1,
            1,
            1
          ],
          "Variance.evaluate(final, double[], final, double)": [
            1,
            1,
            1
          ],
          "Variance.evaluate(final, double[], final, double[], final, double)": [
            1,
            1,
            1
          ],
          "Variance.copy()": [
            1,
            1,
            1
          ],
          "Variance.copy(Variance, Variance)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Variance.increment(final, double)": [
            2,
            2,
            2
          ],
          "Variance.getResult()": [
            5,
            5,
            5
          ],
          "Variance.clear()": [
            2,
            2,
            2
          ],
          "Variance.evaluate(final, double[])": [
            2,
            2,
            2
          ],
          "Variance.evaluate(final, double[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "Variance.evaluate(final, double[], final, double[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "Variance.evaluate(final, double[], final, double, final, int, final, int)": [
            6,
            6,
            6
          ],
          "Variance.evaluate(final, double[], final, double[], final, double, final, int, final, int)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/moment/VarianceTest.java"
    },
    {
      "src_name": "Min",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Min.java",
      "class_declaration": "public class Min extends AbstractStorelessUnivariateStatistic implements Serializable ",
      "methods_under_test": {
        "=1": {
          "Min.clear()": [
            1,
            1,
            1
          ],
          "Min.copy()": [
            1,
            1,
            1
          ],
          "Min.copy(Min, Min)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Min.increment(final, double)": [
            2,
            2,
            2
          ],
          "Min.evaluate(final, double[], final, int, final, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/rank/MinTest.java"
    },
    {
      "src_name": "Logit",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Logit.java",
      "class_declaration": "public class Logit implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Logit.value(double)": [
            1,
            1,
            1
          ],
          "Logit.derivative()": [
            1,
            1,
            1
          ],
          "Parametric.value(double)": [
            1,
            1,
            1
          ],
          "Parametric.gradient(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Logit.value(final, DerivativeStructure)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/function/LogitTest.java"
    },
    {
      "src_name": "SimpleUnivariateValueChecker",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java",
      "class_declaration": "@Deprecated\npublic class SimpleUnivariateValueChecker extends AbstractConvergenceChecker<UnivariatePointValuePair> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueCheckerTest.java"
    },
    {
      "src_name": "RandomAdaptor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/RandomAdaptor.java",
      "class_declaration": "public class RandomAdaptor extends Random implements RandomGenerator ",
      "methods_under_test": {
        "=1": {
          "RandomAdaptor.createAdaptor(RandomGenerator)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "RandomAdaptor.nextBoolean()": [
            2,
            2,
            2
          ],
          "RandomAdaptor.nextBytes(byte[])": [
            2,
            2,
            2
          ],
          "RandomAdaptor.nextDouble()": [
            2,
            2,
            2
          ],
          "RandomAdaptor.nextFloat()": [
            2,
            2,
            2
          ],
          "RandomAdaptor.nextGaussian()": [
            2,
            2,
            2
          ],
          "RandomAdaptor.nextInt()": [
            2,
            2,
            2
          ],
          "RandomAdaptor.nextInt(int)": [
            2,
            2,
            2
          ],
          "RandomAdaptor.nextLong()": [
            2,
            2,
            2
          ],
          "RandomAdaptor.setSeed(int)": [
            3,
            3,
            3
          ],
          "RandomAdaptor.setSeed(int[])": [
            3,
            3,
            3
          ],
          "RandomAdaptor.setSeed(long)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/RandomAdaptorTest.java"
    },
    {
      "src_name": "NonMonotonicSequenceException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/NonMonotonicSequenceException.java",
      "class_declaration": "public class NonMonotonicSequenceException extends MathIllegalNumberException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/exception/NonMonotonicSequenceExceptionTest.java"
    },
    {
      "src_name": "DBSCANClusterer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/clustering/DBSCANClusterer.java",
      "class_declaration": "@Deprecated\npublic class DBSCANClusterer <T extends Clusterable<T>> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "DBSCANClusterer.cluster(final, Collection<T>)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java"
    },
    {
      "src_name": "PolynomialSplineFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java",
      "class_declaration": "public class PolynomialSplineFunction implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "PolynomialSplineFunction.derivative()": [
            1,
            1,
            1
          ],
          "PolynomialSplineFunction.getPolynomials()": [
            1,
            1,
            1
          ],
          "PolynomialSplineFunction.getKnots()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PolynomialSplineFunction.value(double)": [
            4,
            4,
            4
          ],
          "PolynomialSplineFunction.polynomialSplineDerivative()": [
            2,
            2,
            2
          ],
          "PolynomialSplineFunction.value(final, DerivativeStructure)": [
            4,
            4,
            4
          ],
          "PolynomialSplineFunction.isValidPoint(double)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunctionTest.java"
    },
    {
      "src_name": "EmpiricalDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/EmpiricalDistribution.java",
      "class_declaration": "public class EmpiricalDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {
          "ArrayDataAdapter.computeStats()": [
            1,
            1,
            1
          ],
          "ArrayDataAdapter.computeBinStats()": [
            1,
            1,
            1
          ],
          "EmpiricalDistribution.getGeneratorUpperBounds()": [
            1,
            1,
            1
          ],
          "EmpiricalDistribution.reSeed(long)": [
            1,
            1,
            1
          ],
          "EmpiricalDistribution.probability(double)": [
            1,
            1,
            1
          ],
          "EmpiricalDistribution.sample()": [
            1,
            1,
            1
          ],
          "EmpiricalDistribution.reseedRandomGenerator(long)": [
            1,
            1,
            1
          ],
          "EmpiricalDistribution.kB(int)": [
            1,
            1,
            1
          ],
          "EmpiricalDistribution.getKernel(SummaryStatistics)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EmpiricalDistribution.load(double[])": [
            3,
            3,
            3
          ],
          "EmpiricalDistribution.load(URL)": [
            4,
            4,
            4
          ],
          "EmpiricalDistribution.load(File)": [
            3,
            3,
            3
          ],
          "StreamDataAdapter.computeBinStats()": [
            2,
            2,
            2
          ],
          "StreamDataAdapter.computeStats()": [
            2,
            2,
            2
          ],
          "EmpiricalDistribution.getNextValue()": [
            6,
            6,
            6
          ],
          "EmpiricalDistribution.getUpperBounds()": [
            2,
            2,
            2
          ],
          "EmpiricalDistribution.density(double)": [
            2,
            2,
            2
          ],
          "EmpiricalDistribution.cumulativeProbability(double)": [
            3,
            3,
            3
          ],
          "EmpiricalDistribution.inverseCumulativeProbability(final, double)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java"
    },
    {
      "src_name": "DfpDec",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/dfp/DfpDec.java",
      "class_declaration": "public class DfpDec extends Dfp ",
      "methods_under_test": {
        "=1": {
          "DfpDec.newInstance()": [
            1,
            1,
            1
          ],
          "DfpDec.newInstance(final, byte)": [
            1,
            1,
            1
          ],
          "DfpDec.newInstance(final, int)": [
            1,
            1,
            1
          ],
          "DfpDec.newInstance(final, long)": [
            1,
            1,
            1
          ],
          "DfpDec.newInstance(final, double)": [
            1,
            1,
            1
          ],
          "DfpDec.newInstance(final, String)": [
            1,
            1,
            1
          ],
          "DfpDec.newInstance(final, byte, final, byte)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DfpDec.newInstance(final, Dfp)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "DfpDec.nextAfter(Dfp)": [
            13,
            13,
            13
          ]
        },
        ">20": {
          "DfpDec.round(int)": [
            21,
            21,
            21
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/dfp/DfpDecTest.java"
    },
    {
      "src_name": "ConjugateGradient",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/ConjugateGradient.java",
      "class_declaration": "public class ConjugateGradient extends PreconditionedIterativeLinearSolver ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ConjugateGradient.solveInPlace(final, RealLinearOperator, final, RealLinearOperator, final, RealVector, final, RealVector)": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/ConjugateGradientTest.java"
    },
    {
      "src_name": "NormalDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/NormalDistribution.java",
      "class_declaration": "public class NormalDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {
          "NormalDistribution.density(double)": [
            1,
            1,
            1
          ],
          "NormalDistribution.cumulativeProbability(double, double)": [
            1,
            1,
            1
          ],
          "NormalDistribution.getNumericalVariance()": [
            1,
            1,
            1
          ],
          "NormalDistribution.sample()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NormalDistribution.cumulativeProbability(double)": [
            2,
            2,
            2
          ],
          "NormalDistribution.inverseCumulativeProbability(final, double)": [
            2,
            2,
            2
          ],
          "NormalDistribution.probability(double, double)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/NormalDistributionTest.java"
    },
    {
      "src_name": "MultivariateNormalMixtureExpectationMaximization",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java",
      "class_declaration": "public class MultivariateNormalMixtureExpectationMaximization ",
      "methods_under_test": {
        "=1": {
          "MultivariateNormalMixtureExpectationMaximization.fit(MixtureMultivariateNormalDistribution)": [
            1,
            1,
            1
          ],
          "DataRow.compareTo(final, DataRow)": [
            1,
            1,
            1
          ],
          "DataRow.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MultivariateNormalMixtureExpectationMaximization.estimate(final, double[][], final, int)": [
            8,
            8,
            8
          ],
          "DataRow.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "MultivariateNormalMixtureExpectationMaximization.fit(final, MixtureMultivariateNormalDistribution, final, int, final, double)": [
            15,
            15,
            15
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/fitting/MultivariateNormalMixtureExpectationMaximizationTest.java"
    },
    {
      "src_name": "AVLTree",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java",
      "class_declaration": "public class AVLTree <T extends Comparable<T>> ",
      "methods_under_test": {
        "=1": {
          "AVLTree.size()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AVLTree.insert(final, T)": [
            3,
            3,
            3
          ],
          "AVLTree.delete(final, T)": [
            5,
            5,
            5
          ],
          "AVLTree.getNotSmaller(final, T)": [
            5,
            5,
            5
          ],
          "AVLTree.getNotLarger(final, T)": [
            5,
            5,
            5
          ],
          "Node.size()": [
            2,
            2,
            2
          ],
          "Node.getSmallest()": [
            2,
            2,
            2
          ],
          "Node.getLargest()": [
            2,
            2,
            2
          ],
          "Node.getPrevious()": [
            5,
            5,
            5
          ],
          "Node.getNext()": [
            5,
            5,
            5
          ],
          "Node.insert(final, T)": [
            4,
            4,
            4
          ],
          "Node.delete()": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTreeTest.java"
    },
    {
      "src_name": "StandardDeviation",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/moment/StandardDeviation.java",
      "class_declaration": "public class StandardDeviation extends AbstractStorelessUnivariateStatistic implements Serializable ",
      "methods_under_test": {
        "=1": {
          "StandardDeviation.increment(final, double)": [
            1,
            1,
            1
          ],
          "StandardDeviation.clear()": [
            1,
            1,
            1
          ],
          "StandardDeviation.evaluate(final, double[])": [
            1,
            1,
            1
          ],
          "StandardDeviation.evaluate(final, double[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "StandardDeviation.evaluate(final, double[], final, double, final, int, final, int)": [
            1,
            1,
            1
          ],
          "StandardDeviation.evaluate(final, double[], final, double)": [
            1,
            1,
            1
          ],
          "StandardDeviation.copy()": [
            1,
            1,
            1
          ],
          "StandardDeviation.copy(StandardDeviation, StandardDeviation)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/moment/StandardDeviationTest.java"
    },
    {
      "src_name": "NewtonRaphsonSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolver.java",
      "class_declaration": "public class NewtonRaphsonSolver extends AbstractUnivariateDifferentiableSolver ",
      "methods_under_test": {
        "=1": {
          "NewtonRaphsonSolver.solve(int, final, UnivariateDifferentiableFunction, final, double, final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NewtonRaphsonSolver.doSolve()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/solvers/NewtonRaphsonSolverTest.java"
    },
    {
      "src_name": "SynchronizedDescriptiveStatistics",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatistics.java",
      "class_declaration": "public class SynchronizedDescriptiveStatistics extends DescriptiveStatistics ",
      "methods_under_test": {
        "=1": {
          "SynchronizedDescriptiveStatistics.addValue(double)": [
            1,
            1,
            1
          ],
          "SynchronizedDescriptiveStatistics.apply(UnivariateStatistic)": [
            1,
            1,
            1
          ],
          "SynchronizedDescriptiveStatistics.clear()": [
            1,
            1,
            1
          ],
          "SynchronizedDescriptiveStatistics.getElement(int)": [
            1,
            1,
            1
          ],
          "SynchronizedDescriptiveStatistics.toString()": [
            1,
            1,
            1
          ],
          "SynchronizedDescriptiveStatistics.copy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SynchronizedDescriptiveStatistics.copy(SynchronizedDescriptiveStatistics, SynchronizedDescriptiveStatistics)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/SynchronizedDescriptiveStatisticsTest.java"
    },
    {
      "src_name": "LegendreGaussIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegrator.java",
      "class_declaration": "@Deprecated\npublic class LegendreGaussIntegrator extends BaseAbstractUnivariateIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "LegendreGaussIntegrator.doIntegrate()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/integration/LegendreGaussIntegratorTest.java"
    },
    {
      "src_name": "SynchronizedRandomGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/SynchronizedRandomGenerator.java",
      "class_declaration": "public class SynchronizedRandomGenerator implements RandomGenerator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SynchronizedRandomGenerator.nextBytes(byte[])": [
            2,
            2,
            2
          ],
          "SynchronizedRandomGenerator.nextInt()": [
            2,
            2,
            2
          ],
          "SynchronizedRandomGenerator.nextInt(int)": [
            2,
            2,
            2
          ],
          "SynchronizedRandomGenerator.nextLong()": [
            2,
            2,
            2
          ],
          "SynchronizedRandomGenerator.nextBoolean()": [
            2,
            2,
            2
          ],
          "SynchronizedRandomGenerator.nextFloat()": [
            2,
            2,
            2
          ],
          "SynchronizedRandomGenerator.nextDouble()": [
            2,
            2,
            2
          ],
          "SynchronizedRandomGenerator.nextGaussian()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/SynchronizedRandomGeneratorTest.java"
    },
    {
      "src_name": "DefaultTransformer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/DefaultTransformer.java",
      "class_declaration": "public class DefaultTransformer implements NumberTransformer, Serializable ",
      "methods_under_test": {
        "=1": {
          "DefaultTransformer.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DefaultTransformer.transform(Object)": [
            4,
            4,
            4
          ],
          "DefaultTransformer.equals(Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/DefaultTransformerTest.java"
    },
    {
      "src_name": "MidpointStepInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/MidpointStepInterpolator.java",
      "class_declaration": "class MidpointStepInterpolator extends RungeKuttaStepInterpolator ",
      "methods_under_test": {
        "=1": {
          "MidpointStepInterpolator.doCopy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MidpointStepInterpolator.computeInterpolatedStateAndDerivatives(final, double, final, double)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/MidpointStepInterpolatorTest.java"
    },
    {
      "src_name": "AbstractLeastSquaresOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java",
      "class_declaration": "@Deprecated\npublic abstract class AbstractLeastSquaresOptimizer extends BaseAbstractMultivariateVectorOptimizer<DifferentiableMultivariateVectorFunction> implements DifferentiableMultivariateVectorOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java"
    },
    {
      "src_name": "GillIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/GillIntegrator.java",
      "class_declaration": "public class GillIntegrator extends RungeKuttaIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/GillIntegratorTest.java"
    },
    {
      "src_name": "SimpleUnivariateValueChecker",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker.java",
      "class_declaration": "public class SimpleUnivariateValueChecker extends AbstractConvergenceChecker<UnivariatePointValuePair> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/univariate/SimpleUnivariateValueCheckerTest.java"
    },
    {
      "src_name": "FuzzyKMeansClusterer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClusterer.java",
      "class_declaration": "public class FuzzyKMeansClusterer <T extends Clusterable> extends Clusterer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClustererTest.java"
    },
    {
      "src_name": "KMeansPlusPlusClusterer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/clustering/KMeansPlusPlusClusterer.java",
      "class_declaration": "@Deprecated\npublic class KMeansPlusPlusClusterer <T extends Clusterable<T>> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "KMeansPlusPlusClusterer.cluster(final, Collection<T>, final, int, int, int)": [
            6,
            6,
            6
          ],
          "KMeansPlusPlusClusterer.cluster(final, Collection<T>, final, int, final, int)": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/clustering/KMeansPlusPlusClustererTest.java"
    },
    {
      "src_name": "ElitisticListPopulation",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java",
      "class_declaration": "public class ElitisticListPopulation extends ListPopulation ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ElitisticListPopulation.nextGeneration()": [
            2,
            2,
            2
          ],
          "ElitisticListPopulation.setElitismRate(final, double)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java"
    },
    {
      "src_name": "Sigmoid",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java",
      "class_declaration": "public class Sigmoid implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Sigmoid.derivative()": [
            1,
            1,
            1
          ],
          "Sigmoid.value(double)": [
            1,
            1,
            1
          ],
          "Parametric.value(double)": [
            1,
            1,
            1
          ],
          "Parametric.gradient(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Sigmoid.value(final, DerivativeStructure)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/function/SigmoidTest.java"
    },
    {
      "src_name": "Primes",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/primes/Primes.java",
      "class_declaration": "public class Primes ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "Primes.isPrime(int)": [
            4,
            4,
            4
          ],
          "Primes.nextPrime(int)": [
            9,
            9,
            9
          ],
          "Primes.primeFactors(int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/primes/PrimesTest.java"
    },
    {
      "src_name": "UncorrelatedRandomVectorGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/UncorrelatedRandomVectorGenerator.java",
      "class_declaration": "public class UncorrelatedRandomVectorGenerator implements RandomVectorGenerator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "UncorrelatedRandomVectorGenerator.nextVector()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/UncorrelatedRandomVectorGeneratorTest.java"
    },
    {
      "src_name": "MidpointIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/MidpointIntegrator.java",
      "class_declaration": "public class MidpointIntegrator extends RungeKuttaIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/MidpointIntegratorTest.java"
    },
    {
      "src_name": "FixedGenerationCount",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/FixedGenerationCount.java",
      "class_declaration": "public class FixedGenerationCount implements StoppingCondition ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "FixedGenerationCount.isSatisfied(final, Population)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/FixedGenerationCountTest.java"
    },
    {
      "src_name": "StepFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/StepFunction.java",
      "class_declaration": "public class StepFunction implements UnivariateFunction ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "StepFunction.value(double)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/function/StepFunctionTest.java"
    },
    {
      "src_name": "DividedDifferenceInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/DividedDifferenceInterpolator.java",
      "class_declaration": "public class DividedDifferenceInterpolator implements UnivariateInterpolator, Serializable ",
      "methods_under_test": {
        "=1": {
          "DividedDifferenceInterpolator.interpolate(double, [], double, [])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DividedDifferenceInterpolator.computeDividedDifference(final, double, [], final, double, [])": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/interpolation/DividedDifferenceInterpolatorTest.java"
    },
    {
      "src_name": "SparseFieldMatrix",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/SparseFieldMatrix.java",
      "class_declaration": "@Deprecated\npublic class SparseFieldMatrix <T extends FieldElement<T>> extends AbstractFieldMatrix<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/SparseFieldMatrixTest.java"
    },
    {
      "src_name": "IterativeLegendreGaussIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator.java",
      "class_declaration": "public class IterativeLegendreGaussIntegrator extends BaseAbstractUnivariateIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "IterativeLegendreGaussIntegrator.doIntegrate()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegratorTest.java"
    },
    {
      "src_name": "EigenDecomposition",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java",
      "class_declaration": "public class EigenDecomposition ",
      "methods_under_test": {
        "=1": {
          "EigenDecomposition.getRealEigenvalue(final, int)": [
            1,
            1,
            1
          ],
          "EigenDecomposition.getImagEigenvalue(final, int)": [
            1,
            1,
            1
          ],
          "EigenDecomposition.getEigenvector(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EigenDecomposition.getV()": [
            3,
            3,
            3
          ],
          "EigenDecomposition.getD()": [
            5,
            5,
            5
          ],
          "EigenDecomposition.getVT()": [
            3,
            3,
            3
          ],
          "EigenDecomposition.hasComplexEigenvalues()": [
            3,
            3,
            3
          ],
          "EigenDecomposition.getDeterminant()": [
            2,
            2,
            2
          ],
          "EigenDecomposition.getSquareRoot()": [
            4,
            4,
            4
          ],
          "EigenDecomposition.getSolver()": [
            2,
            2,
            2
          ],
          "Solver.solve(final, RealVector)": [
            5,
            5,
            5
          ],
          "Solver.solve(RealMatrix)": [
            8,
            8,
            8
          ],
          "Solver.getInverse()": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java"
    },
    {
      "src_name": "GraggBulirschStoerIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerIntegrator.java",
      "class_declaration": "public class GraggBulirschStoerIntegrator extends AdaptiveStepsizeIntegrator ",
      "methods_under_test": {
        "=1": {
          "GraggBulirschStoerIntegrator.addStepHandler(final, StepHandler)": [
            1,
            1,
            1
          ],
          "GraggBulirschStoerIntegrator.addEventHandler(final, EventHandler, final, double, final, double, final, int, final, UnivariateSolver)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GraggBulirschStoerIntegrator.setStabilityCheck(final, boolean, final, int, final, int, final, double)": [
            3,
            3,
            3
          ],
          "GraggBulirschStoerIntegrator.setControlFactors(final, double, final, double, final, double, final, double)": [
            6,
            6,
            6
          ],
          "GraggBulirschStoerIntegrator.setOrderControl(final, int, final, double, final, double)": [
            4,
            4,
            4
          ],
          "GraggBulirschStoerIntegrator.setInterpolationControl(final, boolean, final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {
          "GraggBulirschStoerIntegrator.integrate(final, ExpandableStatefulODE, final, double)": [
            56,
            0,
            0
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerIntegratorTest.java"
    },
    {
      "src_name": "HarmonicFitter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/HarmonicFitter.java",
      "class_declaration": "public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> ",
      "methods_under_test": {
        "=1": {
          "ParameterGuesser.guess()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/HarmonicFitterTest.java"
    },
    {
      "src_name": "ChiSquaredDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/ChiSquaredDistribution.java",
      "class_declaration": "public class ChiSquaredDistribution extends AbstractRealDistribution ",
      "methods_under_test": {
        "=1": {
          "ChiSquaredDistribution.density(double)": [
            1,
            1,
            1
          ],
          "ChiSquaredDistribution.cumulativeProbability(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/ChiSquaredDistributionTest.java"
    }
  ],
  "src_test_fuzz_match": [
    {
      "src_name": "BaseSecantSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/BaseSecantSolver.java",
      "class_declaration": "public abstract class BaseSecantSolver extends AbstractUnivariateSolver implements BracketedUnivariateSolver<UnivariateFunction> ",
      "methods_under_test": {
        "=1": {
          "BaseSecantSolver.solve(final, int, final, UnivariateFunction, final, double, final, double, final, AllowedSolution)": [
            1,
            1,
            1
          ],
          "BaseSecantSolver.solve(final, int, final, UnivariateFunction, final, double, final, double, final, double, final, AllowedSolution)": [
            1,
            1,
            1
          ],
          "BaseSecantSolver.solve(final, int, final, UnivariateFunction, final, double, final, double, final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {
          "BaseSecantSolver.doSolve()": [
            25,
            25,
            25
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/solvers/BaseSecantSolverAbstractTest.java"
    },
    {
      "src_name": "PermutationChromosome",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/PermutationChromosome.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/DummyListChromosome.java"
    },
    {
      "src_name": "GeneticAlgorithm",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/GeneticAlgorithm.java",
      "class_declaration": "public class GeneticAlgorithm ",
      "methods_under_test": {
        "=1": {
          "GeneticAlgorithm.setRandomGenerator(final, RandomGenerator)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GeneticAlgorithm.evolve(final, Population, final, StoppingCondition)": [
            2,
            2,
            2
          ],
          "GeneticAlgorithm.nextGeneration(final, Population)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/GeneticAlgorithmTestPermutations.java"
    },
    {
      "src_name": "Decimal64Field",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/Decimal64Field.java",
      "class_declaration": "public class Decimal64Field implements Field<Decimal64> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/FieldMatrixImplTest.java"
    },
    {
      "src_name": "Abs",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Abs.java",
      "class_declaration": "public class Abs implements UnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Abs.value(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java"
    },
    {
      "src_name": "Min",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Min.java",
      "class_declaration": "public class Min implements BivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Min.value(double, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java"
    },
    {
      "src_name": "RungeKuttaStepInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator.java",
      "class_declaration": "abstract class RungeKuttaStepInterpolator extends AbstractStepInterpolator ",
      "methods_under_test": {
        "=1": {
          "RungeKuttaStepInterpolator.reinitialize(final, AbstractIntegrator, final, double[], final, double[][], final, boolean, final, EquationsMapper, final, EquationsMapper[])": [
            1,
            1,
            1
          ],
          "RungeKuttaStepInterpolator.shift()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "RungeKuttaStepInterpolator.writeExternal(final, ObjectOutput)": [
            2,
            2,
            2
          ],
          "RungeKuttaStepInterpolator.readExternal(final, ObjectInput)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/sampling/StepInterpolatorTestUtils.java"
    },
    {
      "src_name": "Fitness",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/Fitness.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/FitnessCachingTest.java"
    },
    {
      "src_name": "CentroidCluster",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/clustering/CentroidCluster.java",
      "class_declaration": "public class CentroidCluster <T extends Clusterable> extends Cluster<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/userguide/ClusterAlgorithmComparison.java"
    },
    {
      "src_name": "Inverse",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Inverse.java",
      "class_declaration": "public class Inverse implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Inverse.value(double)": [
            1,
            1,
            1
          ],
          "Inverse.derivative()": [
            1,
            1,
            1
          ],
          "Inverse.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/InverseHilbertMatrix.java"
    },
    {
      "src_name": "Asin",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Asin.java",
      "class_declaration": "public class Asin implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Asin.value(double)": [
            1,
            1,
            1
          ],
          "Asin.derivative()": [
            1,
            1,
            1
          ],
          "Asin.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/SumSincFunction.java"
    },
    {
      "src_name": "SimplexOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java",
      "class_declaration": "public class SimplexOptimizer extends MultivariateOptimizer ",
      "methods_under_test": {
        "=1": {
          "SimplexOptimizer.optimize()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SimplexOptimizer.doOptimize()": [
            5,
            5,
            5
          ],
          "SimplexOptimizer.parseOptimizationData()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.java"
    },
    {
      "src_name": "Log",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Log.java",
      "class_declaration": "public class Log implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Log.value(double)": [
            1,
            1,
            1
          ],
          "Log.derivative()": [
            1,
            1,
            1
          ],
          "Log.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/summary/SumLogTest.java"
    }
  ],
  "src_without_tests": [
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NormalizedRandomGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/NormalizedRandomGenerator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DefaultRealMatrixChangingVisitor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/DefaultRealMatrixChangingVisitor.java",
      "class_declaration": "public class DefaultRealMatrixChangingVisitor implements RealMatrixChangingVisitor ",
      "methods_under_test": {
        "=1": {
          "DefaultRealMatrixChangingVisitor.visit(int, int, double)": [
            1,
            1,
            1
          ],
          "DefaultRealMatrixChangingVisitor.end()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Weight",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/Weight.java",
      "class_declaration": "@Deprecated\npublic class Weight implements OptimizationData ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CardanEulerSingularityException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/CardanEulerSingularityException.java",
      "class_declaration": "public class CardanEulerSingularityException extends MathIllegalStateException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DctNormalization",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/transform/DctNormalization.java",
      "error": "list index out of range"
    },
    {
      "src_name": "LinearConstraint",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/linear/LinearConstraint.java",
      "class_declaration": "public class LinearConstraint implements Serializable ",
      "methods_under_test": {
        "=1": {
          "LinearConstraint.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LinearConstraint.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseMultivariateVectorOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/BaseMultivariateVectorOptimizer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MicrosphereInterpolatingFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/MicrosphereInterpolatingFunction.java",
      "class_declaration": "public class MicrosphereInterpolatingFunction implements MultivariateFunction ",
      "methods_under_test": {
        "=1": {
          "MicrosphereSurfaceElement.normal()": [
            1,
            1,
            1
          ],
          "MicrosphereSurfaceElement.reset()": [
            1,
            1,
            1
          ],
          "MicrosphereSurfaceElement.illumination()": [
            1,
            1,
            1
          ],
          "MicrosphereSurfaceElement.sample()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MicrosphereSurfaceElement.store(final, double, final, Map.Entry<RealVector, Double>)": [
            2,
            2,
            2
          ],
          "MicrosphereInterpolatingFunction.value(double[])": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnivariateInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/UnivariateInterpolator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractListChromosome",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/AbstractListChromosome.java",
      "class_declaration": "public abstract class AbstractListChromosome <T> extends Chromosome ",
      "methods_under_test": {
        "=1": {
          "AbstractListChromosome.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JacobianMultivariateVectorOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer.java",
      "class_declaration": "public abstract class JacobianMultivariateVectorOptimizer extends MultivariateVectorOptimizer ",
      "methods_under_test": {
        "=1": {
          "JacobianMultivariateVectorOptimizer.computeJacobian(final, double[])": [
            1,
            1,
            1
          ],
          "JacobianMultivariateVectorOptimizer.optimize()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JacobianMultivariateVectorOptimizer.parseOptimizationData()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MultiDimensionMismatchException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/MultiDimensionMismatchException.java",
      "class_declaration": "public class MultiDimensionMismatchException extends MathIllegalArgumentException ",
      "methods_under_test": {
        "=1": {
          "MultiDimensionMismatchException.getWrongDimension(int)": [
            1,
            1,
            1
          ],
          "MultiDimensionMismatchException.getExpectedDimension(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "EventHandler",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/events/EventHandler.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SelectionPolicy",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/SelectionPolicy.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnboundedSolutionException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/linear/UnboundedSolutionException.java",
      "class_declaration": "@Deprecated\npublic class UnboundedSolutionException extends MathIllegalStateException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseAbstractUnivariateOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer.java",
      "class_declaration": "@Deprecated\npublic abstract class BaseAbstractUnivariateOptimizer implements UnivariateOptimizer ",
      "methods_under_test": {
        "=1": {
          "BaseAbstractUnivariateOptimizer.optimize(int, UnivariateFunction, GoalType, double, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BaseAbstractUnivariateOptimizer.computeObjectiveValue(double)": [
            2,
            2,
            2
          ],
          "BaseAbstractUnivariateOptimizer.optimize(int, UnivariateFunction, GoalType, double, double, double)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DifferentiableMultivariateVectorFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/DifferentiableMultivariateVectorFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "WeightedObservedPoint",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/WeightedObservedPoint.java",
      "class_declaration": "public class WeightedObservedPoint implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnivariateDfpFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/dfp/UnivariateDfpFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "IterationListener",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/IterationListener.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AdaptiveStepsizeIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator.java",
      "class_declaration": "public abstract class AdaptiveStepsizeIntegrator extends AbstractIntegrator ",
      "methods_under_test": {
        "=1": {
          "AdaptiveStepsizeIntegrator.setStepSizeControl(final, double, final, double, final, double, final, double)": [
            1,
            1,
            1
          ],
          "AdaptiveStepsizeIntegrator.setStepSizeControl(final, double, final, double, final, double[], final, double[])": [
            1,
            1,
            1
          ],
          "AdaptiveStepsizeIntegrator.resetInternalState()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AdaptiveStepsizeIntegrator.setInitialStepSize(final, double)": [
            3,
            3,
            3
          ],
          "AdaptiveStepsizeIntegrator.sanityChecks(final, ExpandableStatefulODE, final, double)": [
            2,
            2,
            2
          ],
          "AdaptiveStepsizeIntegrator.initializeStep(final, boolean, final, int, final, double[], final, double, final, double[], final, double[], final, double[], final, double[])": [
            9,
            9,
            9
          ],
          "AdaptiveStepsizeIntegrator.filterStep(final, double, final, boolean, final, boolean)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Exp",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Exp.java",
      "class_declaration": "public class Exp implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Exp.value(double)": [
            1,
            1,
            1
          ],
          "Exp.derivative()": [
            1,
            1,
            1
          ],
          "Exp.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractDifferentiableOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/general/AbstractDifferentiableOptimizer.java",
      "class_declaration": "@Deprecated\npublic abstract class AbstractDifferentiableOptimizer extends BaseAbstractMultivariateOptimizer<MultivariateDifferentiableFunction> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "FilterType",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/events/FilterType.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SumOfSquares",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/summary/SumOfSquares.java",
      "class_declaration": "public class SumOfSquares extends AbstractStorelessUnivariateStatistic implements Serializable ",
      "methods_under_test": {
        "=1": {
          "SumOfSquares.increment(final, double)": [
            1,
            1,
            1
          ],
          "SumOfSquares.clear()": [
            1,
            1,
            1
          ],
          "SumOfSquares.copy()": [
            1,
            1,
            1
          ],
          "SumOfSquares.copy(SumOfSquares, SumOfSquares)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SumOfSquares.evaluate(final, double[], final, int, final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/fitting/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DifferentiableMultivariateVectorOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorOptimizer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BaseMultivariateOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/BaseMultivariateOptimizer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnivariatePointValuePair",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair.java",
      "class_declaration": "@Deprecated\npublic class UnivariatePointValuePair implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DefaultIterativeLinearSolverEvent",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/DefaultIterativeLinearSolverEvent.java",
      "class_declaration": "public class DefaultIterativeLinearSolverEvent extends IterativeLinearSolverEvent ",
      "methods_under_test": {
        "=1": {
          "DefaultIterativeLinearSolverEvent.providesResidual()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DefaultIterativeLinearSolverEvent.getResidual()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ConvergenceChecker",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/ConvergenceChecker.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Transform",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/Transform.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AdamsIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/AdamsIntegrator.java",
      "class_declaration": "public abstract class AdamsIntegrator extends MultistepIntegrator ",
      "methods_under_test": {
        "=1": {
          "AdamsIntegrator.initializeHighOrderDerivatives(final, double, final, double[], final, double[][], final, double[][])": [
            1,
            1,
            1
          ],
          "AdamsIntegrator.updateHighOrderDerivativesPhase1(final, Array2DRowRealMatrix)": [
            1,
            1,
            1
          ],
          "AdamsIntegrator.updateHighOrderDerivativesPhase2(final, double[], final, double[], final, Array2DRowRealMatrix)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Cos",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Cos.java",
      "class_declaration": "public class Cos implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Cos.value(double)": [
            1,
            1,
            1
          ],
          "Cos.derivative()": [
            1,
            1,
            1
          ],
          "Cos.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractMultivariateRealDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution.java",
      "class_declaration": "public abstract class AbstractMultivariateRealDistribution implements MultivariateRealDistribution ",
      "methods_under_test": {
        "=1": {
          "AbstractMultivariateRealDistribution.reseedRandomGenerator(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractMultivariateRealDistribution.sample(final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FastMathLiteralArrays",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/FastMathLiteralArrays.java",
      "class_declaration": "class FastMathLiteralArrays ",
      "methods_under_test": {
        "=1": {
          "FastMathLiteralArrays.loadExpIntA()": [
            1,
            1,
            1
          ],
          "FastMathLiteralArrays.loadExpIntB()": [
            1,
            1,
            1
          ],
          "FastMathLiteralArrays.loadExpFracA()": [
            1,
            1,
            1
          ],
          "FastMathLiteralArrays.loadExpFracB()": [
            1,
            1,
            1
          ],
          "FastMathLiteralArrays.loadLnMant()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DifferentiableMultivariateVectorMultiStartOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateVectorMultiStartOptimizer.java",
      "class_declaration": "@Deprecated\npublic class DifferentiableMultivariateVectorMultiStartOptimizer extends BaseMultivariateVectorMultiStartOptimizer<DifferentiableMultivariateVectorFunction> implements DifferentiableMultivariateVectorOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NotANumberException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/NotANumberException.java",
      "class_declaration": "public class NotANumberException extends MathIllegalNumberException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseUnivariateOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/univariate/BaseUnivariateOptimizer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ProcessModel",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/filter/ProcessModel.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DifferentiableMultivariateFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/DifferentiableMultivariateFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "RealMatrix",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/RealMatrix.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/linear/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MaxEval",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/MaxEval.java",
      "class_declaration": "public class MaxEval implements OptimizationData ",
      "methods_under_test": {
        "=1": {
          "MaxEval.unlimited()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FractionConversionException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fraction/FractionConversionException.java",
      "class_declaration": "public class FractionConversionException extends ConvergenceException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Embedding",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/Embedding.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnivariateSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateSolver.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java",
      "class_declaration": "public abstract class AbstractIntegrator implements FirstOrderIntegrator ",
      "methods_under_test": {
        "=1": {
          "AbstractIntegrator.addStepHandler(final, StepHandler)": [
            1,
            1,
            1
          ],
          "AbstractIntegrator.clearStepHandlers()": [
            1,
            1,
            1
          ],
          "AbstractIntegrator.addEventHandler(final, EventHandler, final, double, final, double, final, int)": [
            1,
            1,
            1
          ],
          "AbstractIntegrator.addEventHandler(final, EventHandler, final, double, final, double, final, int, final, UnivariateSolver)": [
            1,
            1,
            1
          ],
          "AbstractIntegrator.clearEventHandlers()": [
            1,
            1,
            1
          ],
          "AbstractIntegrator.setEquations(final, ExpandableStatefulODE)": [
            1,
            1,
            1
          ],
          "AbstractIntegrator.computeDerivatives(final, double, final, double[], final, double[])": [
            1,
            1,
            1
          ],
          "AbstractIntegrator.setStateInitialized(final, boolean)": [
            1,
            1,
            1
          ],
          "AbstractIntegrator.sanityChecks(final, ExpandableStatefulODE, final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractIntegrator.getEventHandlers()": [
            2,
            2,
            2
          ],
          "AbstractIntegrator.initIntegration(final, double, final, double[], final, double)": [
            3,
            3,
            3
          ],
          "AbstractIntegrator.integrate(final, FirstOrderDifferentialEquations, final, double, final, double[], final, double, final, double[])": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "AbstractIntegrator.acceptStep(final, AbstractStepInterpolator, final, double[], final, double[], final, double)": [
            17,
            0,
            0
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/clustering/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Log10",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Log10.java",
      "class_declaration": "public class Log10 implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Log10.value(double)": [
            1,
            1,
            1
          ],
          "Log10.derivative()": [
            1,
            1,
            1
          ],
          "Log10.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JacobiPreconditioner",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java",
      "class_declaration": "public class JacobiPreconditioner extends RealLinearOperator ",
      "methods_under_test": {
        "=1": {
          "JacobiPreconditioner.operate(final, RealVector)": [
            1,
            1,
            1
          ],
          "JacobiPreconditioner.sqrt()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JacobiPreconditioner.create(final, RealLinearOperator)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NonNegativeConstraint",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/linear/NonNegativeConstraint.java",
      "class_declaration": "public class NonNegativeConstraint implements OptimizationData ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "InitialGuess",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/InitialGuess.java",
      "class_declaration": "public class InitialGuess implements OptimizationData ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ConvergenceException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/ConvergenceException.java",
      "class_declaration": "public class ConvergenceException extends MathIllegalStateException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "RealTransformer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/transform/RealTransformer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/primes/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SingularOperatorException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/SingularOperatorException.java",
      "class_declaration": "public class SingularOperatorException extends MathIllegalArgumentException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MathIllegalStateException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java",
      "class_declaration": "public class MathIllegalStateException extends IllegalStateException implements ExceptionContextProvider ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Localizable",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/util/Localizable.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ProperFractionFormat",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fraction/ProperFractionFormat.java",
      "class_declaration": "public class ProperFractionFormat extends FractionFormat ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ProperFractionFormat.format(Fraction, StringBuffer, FieldPosition)": [
            2,
            2,
            2
          ],
          "ProperFractionFormat.parse(String, ParsePosition)": [
            9,
            9,
            9
          ],
          "ProperFractionFormat.setWholeFormat(NumberFormat)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MultivariateOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer.java",
      "class_declaration": "public abstract class MultivariateOptimizer extends BaseMultivariateOptimizer<PointValuePair> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SingularMatrixException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/SingularMatrixException.java",
      "class_declaration": "public class SingularMatrixException extends MathIllegalArgumentException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/events/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "FieldVector",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/FieldVector.java",
      "error": "list index out of range"
    },
    {
      "src_name": "LegendreHighPrecisionRuleFactory",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java",
      "class_declaration": "public class LegendreHighPrecisionRuleFactory extends BaseRuleFactory<BigDecimal> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnivariatePointValuePair",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/univariate/UnivariatePointValuePair.java",
      "class_declaration": "public class UnivariatePointValuePair implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractDifferentiableUnivariateSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractDifferentiableUnivariateSolver.java",
      "class_declaration": "@Deprecated\npublic abstract class AbstractDifferentiableUnivariateSolver extends BaseAbstractUnivariateSolver<DifferentiableUnivariateFunction> implements DifferentiableUnivariateSolver ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Tanh",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Tanh.java",
      "class_declaration": "public class Tanh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Tanh.value(double)": [
            1,
            1,
            1
          ],
          "Tanh.derivative()": [
            1,
            1,
            1
          ],
          "Tanh.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DifferentiableUnivariateVectorFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/DifferentiableUnivariateVectorFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "CrossoverPolicy",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/CrossoverPolicy.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Field",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/Field.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ODEIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/ODEIntegrator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "LinearConstraint",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/linear/LinearConstraint.java",
      "class_declaration": "@Deprecated\npublic class LinearConstraint implements Serializable ",
      "methods_under_test": {
        "=1": {
          "LinearConstraint.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LinearConstraint.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FirstOrderDifferentialEquations",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/FirstOrderDifferentialEquations.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MultivariateDifferentiableVectorOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorOptimizer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "EnumeratedDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java",
      "class_declaration": "public class EnumeratedDistribution <T> implements Serializable ",
      "methods_under_test": {
        "=1": {
          "EnumeratedDistribution.reseedRandomGenerator(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EnumeratedDistribution.probability(final, T)": [
            3,
            3,
            3
          ],
          "EnumeratedDistribution.getPmf()": [
            2,
            2,
            2
          ],
          "EnumeratedDistribution.sample()": [
            3,
            3,
            3
          ],
          "EnumeratedDistribution.sample(int)": [
            3,
            3,
            3
          ],
          "EnumeratedDistribution.sample(int, final, T[])": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NonSquareOperatorException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/NonSquareOperatorException.java",
      "class_declaration": "public class NonSquareOperatorException extends DimensionMismatchException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractParameterizable",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/AbstractParameterizable.java",
      "class_declaration": "public abstract class AbstractParameterizable implements Parameterizable ",
      "methods_under_test": {
        "=1": {
          "AbstractParameterizable.complainIfNotSupported(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractParameterizable.isSupported(final, String)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NelderMeadSimplex",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex.java",
      "class_declaration": "public class NelderMeadSimplex extends AbstractSimplex ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {
          "NelderMeadSimplex.iterate(final, MultivariateFunction, final, Comparator<PointValuePair>)": [
            17,
            17,
            17
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MultistepIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/MultistepIntegrator.java",
      "class_declaration": "public abstract class MultistepIntegrator extends AdaptiveStepsizeIntegrator ",
      "methods_under_test": {
        "=1": {
          "MultistepIntegrator.setMinReduction(final, double)": [
            1,
            1,
            1
          ],
          "MultistepIntegrator.setMaxGrowth(final, double)": [
            1,
            1,
            1
          ],
          "MultistepIntegrator.setSafety(final, double)": [
            1,
            1,
            1
          ],
          "MultistepIntegrator.computeStepGrowShrinkFactor(final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MultistepIntegrator.start(final, double, final, double[], final, double)": [
            8,
            8,
            8
          ],
          "NordsieckInitializer.handleStep(StepInterpolator, boolean)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PreconditionedIterativeLinearSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/PreconditionedIterativeLinearSolver.java",
      "class_declaration": "public abstract class PreconditionedIterativeLinearSolver extends IterativeLinearSolver ",
      "methods_under_test": {
        "=1": {
          "PreconditionedIterativeLinearSolver.solve(final, RealLinearOperator, final, RealLinearOperator, final, RealVector, final, RealVector)": [
            1,
            1,
            1
          ],
          "PreconditionedIterativeLinearSolver.solve(final, RealLinearOperator, final, RealVector)": [
            1,
            1,
            1
          ],
          "PreconditionedIterativeLinearSolver.solve(final, RealLinearOperator, final, RealVector, final, RealVector)": [
            1,
            1,
            1
          ],
          "PreconditionedIterativeLinearSolver.solve(RealLinearOperator, RealLinearOperator, RealVector)": [
            1,
            1,
            1
          ],
          "PreconditionedIterativeLinearSolver.solveInPlace(final, RealLinearOperator, final, RealVector, final, RealVector)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PreconditionedIterativeLinearSolver.checkParameters(final, RealLinearOperator, final, RealLinearOperator, final, RealVector, final, RealVector)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ParameterJacobianProvider",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/ParameterJacobianProvider.java",
      "error": "list index out of range"
    },
    {
      "src_name": "LinearObjectiveFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/linear/LinearObjectiveFunction.java",
      "class_declaration": "@Deprecated\npublic class LinearObjectiveFunction implements Serializable ",
      "methods_under_test": {
        "=1": {
          "LinearObjectiveFunction.getValue(final, double[])": [
            1,
            1,
            1
          ],
          "LinearObjectiveFunction.getValue(final, RealVector)": [
            1,
            1,
            1
          ],
          "LinearObjectiveFunction.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LinearObjectiveFunction.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fraction/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SubPlane",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubPlane.java",
      "class_declaration": "public class SubPlane extends AbstractSubHyperplane<Euclidean3D, Euclidean2D> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ModelFunctionJacobian",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian.java",
      "class_declaration": "public class ModelFunctionJacobian implements OptimizationData ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MultivariateDifferentiableOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/MultivariateDifferentiableOptimizer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "FixedStepHandler",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/sampling/FixedStepHandler.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Transformer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/events/Transformer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ChromosomePair",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/ChromosomePair.java",
      "class_declaration": "public class ChromosomePair ",
      "methods_under_test": {
        "=1": {
          "ChromosomePair.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MaxIter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/MaxIter.java",
      "class_declaration": "public class MaxIter implements OptimizationData ",
      "methods_under_test": {
        "=1": {
          "MaxIter.unlimited()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/clustering/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ParameterizedODE",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/ParameterizedODE.java",
      "error": "list index out of range"
    },
    {
      "src_name": "FirstOrderIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/FirstOrderIntegrator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Array2DRowFieldMatrix",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/Array2DRowFieldMatrix.java",
      "class_declaration": "public class Array2DRowFieldMatrix <T extends FieldElement<T>> extends AbstractFieldMatrix<T> implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BaseUnivariateSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/BaseUnivariateSolver.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NaNStrategy",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/ranking/NaNStrategy.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Parameterizable",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/Parameterizable.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DefaultFieldMatrixChangingVisitor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/DefaultFieldMatrixChangingVisitor.java",
      "class_declaration": "public class DefaultFieldMatrixChangingVisitor <T extends FieldElement<T>> implements FieldMatrixChangingVisitor<T> ",
      "methods_under_test": {
        "=1": {
          "DefaultFieldMatrixChangingVisitor.visit(int, int, T)": [
            1,
            1,
            1
          ],
          "DefaultFieldMatrixChangingVisitor.end()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MainStateJacobianProvider",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/MainStateJacobianProvider.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NonSelfAdjointOperatorException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/NonSelfAdjointOperatorException.java",
      "class_declaration": "public class NonSelfAdjointOperatorException extends MathIllegalArgumentException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Vector",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/Vector.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractScalarDifferentiableOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/general/AbstractScalarDifferentiableOptimizer.java",
      "class_declaration": "@Deprecated\npublic abstract class AbstractScalarDifferentiableOptimizer extends BaseAbstractMultivariateOptimizer<DifferentiableMultivariateFunction> implements DifferentiableMultivariateOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FieldElement",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/FieldElement.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ObjectiveFunctionGradient",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunctionGradient.java",
      "class_declaration": "public class ObjectiveFunctionGradient implements OptimizationData ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnivariateDifferentiableSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/UnivariateDifferentiableSolver.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractUnivariateSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver.java",
      "class_declaration": "public abstract class AbstractUnivariateSolver extends BaseAbstractUnivariateSolver<UnivariateFunction> implements UnivariateSolver ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "EquationsMapper",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/EquationsMapper.java",
      "class_declaration": "public class EquationsMapper implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "EquationsMapper.extractEquationData(double[], double[])": [
            2,
            2,
            2
          ],
          "EquationsMapper.insertEquationData(double[], double[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "LinearOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/linear/LinearOptimizer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BracketedUnivariateSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/BracketedUnivariateSolver.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Atan2",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Atan2.java",
      "class_declaration": "public class Atan2 implements BivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Atan2.value(double, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "LinearConstraintSet",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/linear/LinearConstraintSet.java",
      "class_declaration": "public class LinearConstraintSet implements OptimizationData ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Vector2D",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java",
      "class_declaration": "public class Vector2D implements Vector<Euclidean2D> ",
      "methods_under_test": {
        "=1": {
          "Vector2D.toArray()": [
            1,
            1,
            1
          ],
          "Vector2D.add(Vector<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "Vector2D.add(double, Vector<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "Vector2D.subtract(Vector<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "Vector2D.subtract(double, Vector<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "Vector2D.negate()": [
            1,
            1,
            1
          ],
          "Vector2D.scalarMultiply(double)": [
            1,
            1,
            1
          ],
          "Vector2D.distance1(Vector<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "Vector2D.distance(Vector<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "Vector2D.distanceInf(Vector<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "Vector2D.distanceSq(Vector<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "Vector2D.dotProduct(final, Vector<Euclidean2D>)": [
            1,
            1,
            1
          ],
          "Vector2D.distance(Vector2D, Vector2D)": [
            1,
            1,
            1
          ],
          "Vector2D.distanceInf(Vector2D, Vector2D)": [
            1,
            1,
            1
          ],
          "Vector2D.distanceSq(Vector2D, Vector2D)": [
            1,
            1,
            1
          ],
          "Vector2D.toString()": [
            1,
            1,
            1
          ],
          "Vector2D.toString(final, NumberFormat)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Vector2D.normalize()": [
            2,
            2,
            2
          ],
          "Vector2D.equals(Object)": [
            4,
            4,
            4
          ],
          "Vector2D.hashCode()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ConjugateGradientFormula",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/general/ConjugateGradientFormula.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/distance/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DummyLocalizable",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/util/DummyLocalizable.java",
      "class_declaration": "public class DummyLocalizable implements Localizable ",
      "methods_under_test": {
        "=1": {
          "DummyLocalizable.getLocalizedString(Locale)": [
            1,
            1,
            1
          ],
          "DummyLocalizable.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/univariate/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "RealVectorChangingVisitor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/RealVectorChangingVisitor.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractSubHyperplane",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane.java",
      "class_declaration": "public abstract class AbstractSubHyperplane <S extends Space, T extends Space> implements SubHyperplane<S> ",
      "methods_under_test": {
        "=1": {
          "AbstractSubHyperplane.copySelf()": [
            1,
            1,
            1
          ],
          "AbstractSubHyperplane.reunite(final, SubHyperplane<S>)": [
            1,
            1,
            1
          ],
          "AbstractSubHyperplane.applyTransform(final, Transform<S, T>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnivariateDifferentiableFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiableFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DifferentiableUnivariateSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/DifferentiableUnivariateSolver.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/special/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Log1p",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Log1p.java",
      "class_declaration": "public class Log1p implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Log1p.value(double)": [
            1,
            1,
            1
          ],
          "Log1p.derivative()": [
            1,
            1,
            1
          ],
          "Log1p.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "RegressionResults",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/regression/RegressionResults.java",
      "class_declaration": "public class RegressionResults implements Serializable ",
      "methods_under_test": {
        "=1": {
          "RegressionResults.hasIntercept()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "RegressionResults.getParameterEstimate(int)": [
            3,
            3,
            3
          ],
          "RegressionResults.getParameterEstimates()": [
            2,
            2,
            2
          ],
          "RegressionResults.getStdErrorOfEstimate(int)": [
            4,
            4,
            4
          ],
          "RegressionResults.getStdErrorOfEstimates()": [
            4,
            4,
            4
          ],
          "RegressionResults.getCovarianceOfParameters(int, int)": [
            4,
            4,
            4
          ],
          "RegressionResults.getNumberOfParameters()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/BaseOptimizer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MultivariateOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/MultivariateOptimizer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Relationship",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/linear/Relationship.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractLinearOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer.java",
      "class_declaration": "@Deprecated\npublic abstract class AbstractLinearOptimizer implements LinearOptimizer ",
      "methods_under_test": {
        "=1": {
          "AbstractLinearOptimizer.restrictToNonNegative()": [
            1,
            1,
            1
          ],
          "AbstractLinearOptimizer.incrementIterationsCounter()": [
            1,
            1,
            1
          ],
          "AbstractLinearOptimizer.optimize(final, LinearObjectiveFunction, final, Collection<LinearConstraint>, final, GoalType, final, boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SubHyperplane",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/SubHyperplane.java",
      "class_declaration": "public static class SplitSubHyperplane <U extends Space> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MathInternalError",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/MathInternalError.java",
      "class_declaration": "public class MathInternalError extends MathIllegalStateException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Relationship",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/linear/Relationship.java",
      "error": "list index out of range"
    },
    {
      "src_name": "RungeKuttaIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java",
      "class_declaration": "public abstract class RungeKuttaIntegrator extends AbstractIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "RungeKuttaIntegrator.integrate(final, ExpandableStatefulODE, final, double)": [
            10,
            10,
            10
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Tan",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Tan.java",
      "class_declaration": "public class Tan implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Tan.value(double)": [
            1,
            1,
            1
          ],
          "Tan.derivative()": [
            1,
            1,
            1
          ],
          "Tan.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SecondOrderIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/SecondOrderIntegrator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MathArithmeticException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/MathArithmeticException.java",
      "class_declaration": "public class MathArithmeticException extends ArithmeticException implements ExceptionContextProvider ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MathIllegalArgumentException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/MathIllegalArgumentException.java",
      "class_declaration": "public class MathIllegalArgumentException extends IllegalArgumentException implements ExceptionContextProvider ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TrivariateFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/TrivariateFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "IterationEvent",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/IterationEvent.java",
      "class_declaration": "public class IterationEvent extends EventObject ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Multiply",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Multiply.java",
      "class_declaration": "public class Multiply implements BivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Multiply.value(double, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseMultivariateOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java",
      "class_declaration": "public abstract class BaseMultivariateOptimizer <PAIR> extends BaseOptimizer<PAIR> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "WithMaxEvaluations",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java",
      "error": "list index out of range"
    },
    {
      "src_name": "RegionFactory",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/RegionFactory.java",
      "class_declaration": "public class RegionFactory <S extends Space> ",
      "methods_under_test": {
        "=1": {
          "RegionFactory.union(final, Region<S>, final, Region<S>)": [
            1,
            1,
            1
          ],
          "RegionFactory.intersection(final, Region<S>, final, Region<S>)": [
            1,
            1,
            1
          ],
          "RegionFactory.xor(final, Region<S>, final, Region<S>)": [
            1,
            1,
            1
          ],
          "RegionFactory.difference(final, Region<S>, final, Region<S>)": [
            1,
            1,
            1
          ],
          "RegionFactory.getComplement(final, Region<S>)": [
            1,
            1,
            1
          ],
          "NodesCleaner.visitOrder(final, BSPTree<S>)": [
            1,
            1,
            1
          ],
          "NodesCleaner.visitInternalNode(final, BSPTree<S>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "RegionFactory.buildConvex()": [
            4,
            4,
            4
          ],
          "UnionMerger.merge(final, BSPTree<S>, final, BSPTree<S>, final, BSPTree<S>, final, boolean, final, boolean)": [
            2,
            2,
            2
          ],
          "IntersectionMerger.merge(final, BSPTree<S>, final, BSPTree<S>, final, BSPTree<S>, final, boolean, final, boolean)": [
            2,
            2,
            2
          ],
          "XorMerger.merge(final, BSPTree<S>, final, BSPTree<S>, final, BSPTree<S>, final, boolean, final, boolean)": [
            2,
            2,
            2
          ],
          "DifferenceMerger.merge(final, BSPTree<S>, final, BSPTree<S>, final, BSPTree<S>, final, boolean, final, boolean)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ISAACRandom",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/ISAACRandom.java",
      "class_declaration": "public class ISAACRandom extends BitsStreamGenerator implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ISAACRandom.setSeed(int[])": [
            4,
            4,
            4
          ],
          "ISAACRandom.next(int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FieldMatrixChangingVisitor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/FieldMatrixChangingVisitor.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SaddlePointExpansion",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/SaddlePointExpansion.java",
      "class_declaration": "final class SaddlePointExpansion ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SaddlePointExpansion.getStirlingError(double)": [
            3,
            3,
            3
          ],
          "SaddlePointExpansion.getDeviancePart(double, double)": [
            3,
            3,
            3
          ],
          "SaddlePointExpansion.logBinomialProbability(int, int, double, double)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnivariateOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/univariate/UnivariateOptimizer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "RandomData",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/RandomData.java",
      "error": "list index out of range"
    },
    {
      "src_name": "FieldDecompositionSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/FieldDecompositionSolver.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Segment",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Segment.java",
      "class_declaration": "public class Segment ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BSPTreeVisitor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor.java",
      "error": "list index out of range"
    },
    {
      "src_name": "OptimizationData",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/OptimizationData.java",
      "error": "list index out of range"
    },
    {
      "src_name": "JDKRandomGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/JDKRandomGenerator.java",
      "class_declaration": "public class JDKRandomGenerator extends Random implements RandomGenerator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DftNormalization",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/transform/DftNormalization.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnivariateFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/UnivariateFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/direct/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AllowedSolution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/AllowedSolution.java",
      "error": "list index out of range"
    },
    {
      "src_name": "PolynomialSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/PolynomialSolver.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SearchInterval",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/univariate/SearchInterval.java",
      "class_declaration": "public class SearchInterval implements OptimizationData ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Cosh",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Cosh.java",
      "class_declaration": "public class Cosh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Cosh.value(double)": [
            1,
            1,
            1
          ],
          "Cosh.derivative()": [
            1,
            1,
            1
          ],
          "Cosh.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SumOfLogs",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/summary/SumOfLogs.java",
      "class_declaration": "public class SumOfLogs extends AbstractStorelessUnivariateStatistic implements Serializable ",
      "methods_under_test": {
        "=1": {
          "SumOfLogs.increment(final, double)": [
            1,
            1,
            1
          ],
          "SumOfLogs.clear()": [
            1,
            1,
            1
          ],
          "SumOfLogs.copy()": [
            1,
            1,
            1
          ],
          "SumOfLogs.copy(SumOfLogs, SumOfLogs)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SumOfLogs.evaluate(final, double[], final, int, final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseAbstractMultivariateOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer.java",
      "class_declaration": "@Deprecated\npublic abstract class BaseAbstractMultivariateOptimizer <FUNC extends MultivariateFunction> implements BaseMultivariateOptimizer<FUNC> ",
      "methods_under_test": {
        "=1": {
          "BaseAbstractMultivariateOptimizer.optimize(int, FUNC, GoalType, double[])": [
            1,
            1,
            1
          ],
          "BaseAbstractMultivariateOptimizer.optimize(int, FUNC, GoalType)": [
            1,
            1,
            1
          ],
          "BaseAbstractMultivariateOptimizer.optimizeInternal(int, FUNC, GoalType, double[])": [
            1,
            1,
            1
          ],
          "BaseAbstractMultivariateOptimizer.optimizeInternal(int, FUNC, GoalType)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BaseAbstractMultivariateOptimizer.computeObjectiveValue(double[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CompositeFormat",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/CompositeFormat.java",
      "class_declaration": "public class CompositeFormat ",
      "methods_under_test": {
        "=1": {
          "CompositeFormat.getDefaultNumberFormat(final, Locale)": [
            1,
            1,
            1
          ],
          "CompositeFormat.parseAndIgnoreWhitespace(final, String, final, ParsePosition)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CompositeFormat.parseNextCharacter(final, String, final, ParsePosition)": [
            4,
            4,
            4
          ],
          "CompositeFormat.parseNumber(final, String, final, NumberFormat, final, ParsePosition)": [
            4,
            4,
            4
          ],
          "CompositeFormat.parseFixedstring(final, String, final, String, final, ParsePosition)": [
            2,
            2,
            2
          ],
          "CompositeFormat.formatDouble(final, double, final, NumberFormat, final, StringBuffer, final, FieldPosition)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DecompositionSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/DecompositionSolver.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Clusterable",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/clustering/Clusterable.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ModelFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/ModelFunction.java",
      "class_declaration": "public class ModelFunction implements OptimizationData ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/regression/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnknownParameterException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/UnknownParameterException.java",
      "class_declaration": "public class UnknownParameterException extends MathIllegalArgumentException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PollardRho",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/primes/PollardRho.java",
      "class_declaration": "class PollardRho ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "PollardRho.primeFactors(int)": [
            3,
            3,
            3
          ],
          "PollardRho.rhoBrent(final, int)": [
            9,
            9,
            9
          ],
          "PollardRho.gcdPositive(int, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Population",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/Population.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Euclidean3D",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Euclidean3D.java",
      "class_declaration": "public class Euclidean3D implements Serializable, Space ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "IterationManager",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/IterationManager.java",
      "class_declaration": "public class IterationManager ",
      "methods_under_test": {
        "=1": {
          "IterationManager.addIterationListener(final, IterationListener)": [
            1,
            1,
            1
          ],
          "IterationManager.fireInitializationEvent(final, IterationEvent)": [
            1,
            1,
            1
          ],
          "IterationManager.fireIterationPerformedEvent(final, IterationEvent)": [
            1,
            1,
            1
          ],
          "IterationManager.fireIterationStartedEvent(final, IterationEvent)": [
            1,
            1,
            1
          ],
          "IterationManager.fireTerminationEvent(final, IterationEvent)": [
            1,
            1,
            1
          ],
          "IterationManager.incrementIterationCount()": [
            1,
            1,
            1
          ],
          "IterationManager.removeIterationListener(final, IterationListener)": [
            1,
            1,
            1
          ],
          "IterationManager.resetIterationCount()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractRegion",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java",
      "class_declaration": "public abstract class AbstractRegion <S extends Space, T extends Space> implements Region<S> ",
      "methods_under_test": {
        "=1": {
          "AbstractRegion.copySelf()": [
            1,
            1,
            1
          ],
          "AbstractRegion.contains(final, Region<S>)": [
            1,
            1,
            1
          ],
          "AbstractRegion.checkPoint(final, Vector<S>)": [
            1,
            1,
            1
          ],
          "BoundaryBuilder.visitOrder(BSPTree<S>)": [
            1,
            1,
            1
          ],
          "AbstractRegion.getBoundarySize()": [
            1,
            1,
            1
          ],
          "AbstractRegion.setSize(final, double)": [
            1,
            1,
            1
          ],
          "AbstractRegion.setBarycenter(final, Vector<S>)": [
            1,
            1,
            1
          ],
          "AbstractRegion.side(final, Hyperplane<S>)": [
            1,
            1,
            1
          ],
          "Sides.rememberPlusFound()": [
            1,
            1,
            1
          ],
          "Sides.plusFound()": [
            1,
            1,
            1
          ],
          "Sides.rememberMinusFound()": [
            1,
            1,
            1
          ],
          "Sides.minusFound()": [
            1,
            1,
            1
          ],
          "AbstractRegion.intersection(final, SubHyperplane<S>)": [
            1,
            1,
            1
          ],
          "AbstractRegion.applyTransform(final, Transform<S, T>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractRegion.isEmpty(final, BSPTree<S>)": [
            2,
            2,
            2
          ],
          "AbstractRegion.checkPoint(final, BSPTree<S>, final, Vector<S>)": [
            2,
            2,
            2
          ],
          "AbstractRegion.getTree(final, boolean)": [
            2,
            2,
            2
          ],
          "BoundaryBuilder.visitInternalNode(BSPTree<S>)": [
            5,
            5,
            5
          ],
          "AbstractRegion.getSize()": [
            2,
            2,
            2
          ],
          "AbstractRegion.getBarycenter()": [
            2,
            2,
            2
          ],
          "AbstractRegion.recurseTransform(final, BSPTree<S>, final, Transform<S, T>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Euclidean1D",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Euclidean1D.java",
      "class_declaration": "public class Euclidean1D implements Serializable, Space ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractSimplex",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/direct/AbstractSimplex.java",
      "class_declaration": "@Deprecated\npublic abstract class AbstractSimplex implements OptimizationData ",
      "methods_under_test": {
        "=1": {
          "AbstractSimplex.getPoints()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractSimplex.build(final, double[])": [
            2,
            2,
            2
          ],
          "AbstractSimplex.evaluate(final, MultivariateFunction, final, Comparator<PointValuePair>)": [
            3,
            3,
            3
          ],
          "AbstractSimplex.replaceWorstPoint(PointValuePair, final, Comparator<PointValuePair>)": [
            3,
            3,
            3
          ],
          "AbstractSimplex.getPoint(int)": [
            2,
            2,
            2
          ],
          "AbstractSimplex.setPoint(int, PointValuePair)": [
            2,
            2,
            2
          ],
          "AbstractSimplex.setPoints(PointValuePair[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NumberTransformer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/NumberTransformer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MultivariateDifferentiableFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/differentiation/MultivariateDifferentiableFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MultivariateRealDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/MultivariateRealDistribution.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractFormat",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fraction/AbstractFormat.java",
      "class_declaration": "public abstract class AbstractFormat extends NumberFormat implements Serializable ",
      "methods_under_test": {
        "=1": {
          "AbstractFormat.getDefaultNumberFormat(final, Locale)": [
            1,
            1,
            1
          ],
          "AbstractFormat.parseAndIgnoreWhitespace(final, String, final, ParsePosition)": [
            1,
            1,
            1
          ],
          "AbstractFormat.format(final, double, final, StringBuffer, final, FieldPosition)": [
            1,
            1,
            1
          ],
          "AbstractFormat.format(final, long, final, StringBuffer, final, FieldPosition)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractFormat.setDenominatorFormat(final, NumberFormat)": [
            2,
            2,
            2
          ],
          "AbstractFormat.setNumeratorFormat(final, NumberFormat)": [
            2,
            2,
            2
          ],
          "AbstractFormat.parseNextCharacter(final, String, final, ParsePosition)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Preconditioner",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/general/Preconditioner.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NonSquareMatrixException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/NonSquareMatrixException.java",
      "class_declaration": "public class NonSquareMatrixException extends DimensionMismatchException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractUnivariateDifferentiableSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractUnivariateDifferentiableSolver.java",
      "class_declaration": "public abstract class AbstractUnivariateDifferentiableSolver extends BaseAbstractUnivariateSolver<UnivariateDifferentiableFunction> implements UnivariateDifferentiableSolver ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NestedLoops",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/NestedLoops.java",
      "class_declaration": "class NestedLoops ",
      "methods_under_test": {
        "=1": {
          "NestedLoops.add(final, Vector2D[])": [
            1,
            1,
            1
          ],
          "NestedLoops.correctOrientation()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FieldMatrix",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/FieldMatrix.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractFieldMatrix",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/AbstractFieldMatrix.java",
      "class_declaration": "public abstract class AbstractFieldMatrix <T extends FieldElement<T>> implements FieldMatrix<T> ",
      "methods_under_test": {
        "=1": {
          "AbstractFieldMatrix.buildArray(final, Field<T>, final, int, final, int)": [
            1,
            1,
            1
          ],
          "AbstractFieldMatrix.buildArray(final, Field<T>, final, int)": [
            1,
            1,
            1
          ],
          "AbstractFieldMatrix.preMultiply(final, FieldMatrix<T>)": [
            1,
            1,
            1
          ],
          "AbstractFieldMatrix.getRowVector(final, int)": [
            1,
            1,
            1
          ],
          "AbstractFieldMatrix.getColumnVector(final, int)": [
            1,
            1,
            1
          ],
          "AbstractFieldMatrix.transpose()": [
            1,
            1,
            1
          ],
          "AbstractFieldMatrix.walkInOptimizedOrder(final, FieldMatrixChangingVisitor<T>)": [
            1,
            1,
            1
          ],
          "AbstractFieldMatrix.walkInOptimizedOrder(final, FieldMatrixPreservingVisitor<T>)": [
            1,
            1,
            1
          ],
          "AbstractFieldMatrix.walkInOptimizedOrder(final, FieldMatrixChangingVisitor<T>, final, int, final, int, final, int, final, int)": [
            1,
            1,
            1
          ],
          "AbstractFieldMatrix.walkInOptimizedOrder(final, FieldMatrixPreservingVisitor<T>, final, int, final, int, final, int, final, int)": [
            1,
            1,
            1
          ],
          "AbstractFieldMatrix.checkRowIndex(final, int)": [
            1,
            1,
            1
          ],
          "AbstractFieldMatrix.checkColumnIndex(final, int)": [
            1,
            1,
            1
          ],
          "AbstractFieldMatrix.checkAdditionCompatible(final, FieldMatrix<T>)": [
            1,
            1,
            1
          ],
          "AbstractFieldMatrix.checkSubtractionCompatible(final, FieldMatrix<T>)": [
            1,
            1,
            1
          ],
          "AbstractFieldMatrix.checkMultiplicationCompatible(final, FieldMatrix<T>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractFieldMatrix.extractField(final, T[][])": [
            4,
            4,
            4
          ],
          "AbstractFieldMatrix.extractField(final, T[])": [
            2,
            2,
            2
          ],
          "AbstractFieldMatrix.add(FieldMatrix<T>)": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.subtract(final, FieldMatrix<T>)": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.scalarAdd(final, T)": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.scalarMultiply(final, T)": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.multiply(final, FieldMatrix<T>)": [
            4,
            4,
            4
          ],
          "AbstractFieldMatrix.power(final, int)": [
            9,
            9,
            9
          ],
          "AbstractFieldMatrix.getData()": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.getSubMatrix(final, int, final, int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.getSubMatrix(final, int[], final, int[])": [
            2,
            2,
            2
          ],
          "AbstractFieldMatrix.copySubMatrix(final, int, final, int, final, int, final, int, final, T[][])": [
            2,
            2,
            2
          ],
          "AbstractFieldMatrix.copySubMatrix(int[], int[], T[][])": [
            2,
            2,
            2
          ],
          "AbstractFieldMatrix.setSubMatrix(final, T[][], final, int, final, int)": [
            6,
            6,
            6
          ],
          "AbstractFieldMatrix.getRowMatrix(final, int)": [
            2,
            2,
            2
          ],
          "AbstractFieldMatrix.setRowMatrix(final, int, final, FieldMatrix<T>)": [
            2,
            2,
            2
          ],
          "AbstractFieldMatrix.getColumnMatrix(final, int)": [
            2,
            2,
            2
          ],
          "AbstractFieldMatrix.setColumnMatrix(final, int, final, FieldMatrix<T>)": [
            2,
            2,
            2
          ],
          "AbstractFieldMatrix.setRowVector(final, int, final, FieldVector<T>)": [
            2,
            2,
            2
          ],
          "AbstractFieldMatrix.setColumnVector(final, int, final, FieldVector<T>)": [
            2,
            2,
            2
          ],
          "AbstractFieldMatrix.getRow(final, int)": [
            2,
            2,
            2
          ],
          "AbstractFieldMatrix.setRow(final, int, final, T[])": [
            2,
            2,
            2
          ],
          "AbstractFieldMatrix.getColumn(final, int)": [
            2,
            2,
            2
          ],
          "AbstractFieldMatrix.setColumn(final, int, final, T[])": [
            2,
            2,
            2
          ],
          "AbstractFieldMatrix.getTrace()": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.operate(final, T[])": [
            4,
            4,
            4
          ],
          "AbstractFieldMatrix.operate(final, FieldVector<T>)": [
            6,
            6,
            6
          ],
          "AbstractFieldMatrix.preMultiply(final, T[])": [
            4,
            4,
            4
          ],
          "AbstractFieldMatrix.preMultiply(final, FieldVector<T>)": [
            6,
            6,
            6
          ],
          "AbstractFieldMatrix.walkInRowOrder(final, FieldMatrixChangingVisitor<T>)": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.walkInRowOrder(final, FieldMatrixPreservingVisitor<T>)": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.walkInRowOrder(final, FieldMatrixChangingVisitor<T>, final, int, final, int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.walkInRowOrder(final, FieldMatrixPreservingVisitor<T>, final, int, final, int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.walkInColumnOrder(final, FieldMatrixChangingVisitor<T>)": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.walkInColumnOrder(final, FieldMatrixPreservingVisitor<T>)": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.walkInColumnOrder(final, FieldMatrixChangingVisitor<T>, final, int, final, int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.walkInColumnOrder(final, FieldMatrixPreservingVisitor<T>, final, int, final, int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.toString()": [
            5,
            5,
            5
          ],
          "AbstractFieldMatrix.equals(final, Object)": [
            7,
            7,
            7
          ],
          "AbstractFieldMatrix.hashCode()": [
            3,
            3,
            3
          ],
          "AbstractFieldMatrix.checkSubMatrixIndex(final, int, final, int, final, int, final, int)": [
            2,
            2,
            2
          ],
          "AbstractFieldMatrix.checkSubMatrixIndex(final, int[], final, int[])": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractWell",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/AbstractWell.java",
      "class_declaration": "public abstract class AbstractWell extends BitsStreamGenerator implements Serializable ",
      "methods_under_test": {
        "=1": {
          "AbstractWell.setSeed(final, int)": [
            1,
            1,
            1
          ],
          "AbstractWell.setSeed(final, long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractWell.setSeed(final, int[])": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "WithStartPoint",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DefaultProcessModel",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/filter/DefaultProcessModel.java",
      "class_declaration": "public class DefaultProcessModel implements ProcessModel ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnivariateVectorFunctionDifferentiator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateVectorFunctionDifferentiator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NonPositiveDefiniteOperatorException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/NonPositiveDefiniteOperatorException.java",
      "class_declaration": "public class NonPositiveDefiniteOperatorException extends MathIllegalArgumentException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/moment/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Ulp",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Ulp.java",
      "class_declaration": "public class Ulp implements UnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Ulp.value(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SpearmansCorrelation",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.java",
      "class_declaration": "public class SpearmansCorrelation ",
      "methods_under_test": {
        "=1": {
          "SpearmansCorrelation.computeCorrelationMatrix(final, RealMatrix)": [
            1,
            1,
            1
          ],
          "SpearmansCorrelation.computeCorrelationMatrix(final, double[][])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SpearmansCorrelation.correlation(final, double[], final, double[])": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NoBracketingException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/NoBracketingException.java",
      "class_declaration": "public class NoBracketingException extends MathIllegalArgumentException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DefaultRealMatrixPreservingVisitor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor.java",
      "class_declaration": "public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor ",
      "methods_under_test": {
        "=1": {
          "DefaultRealMatrixPreservingVisitor.end()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ObjectiveFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction.java",
      "class_declaration": "public class ObjectiveFunction implements OptimizationData ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "EmbeddedRungeKuttaIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
      "class_declaration": "public abstract class EmbeddedRungeKuttaIntegrator extends AdaptiveStepsizeIntegrator ",
      "methods_under_test": {
        "=1": {
          "EmbeddedRungeKuttaIntegrator.setSafety(final, double)": [
            1,
            1,
            1
          ],
          "EmbeddedRungeKuttaIntegrator.setMinReduction(final, double)": [
            1,
            1,
            1
          ],
          "EmbeddedRungeKuttaIntegrator.setMaxGrowth(final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {
          "EmbeddedRungeKuttaIntegrator.integrate(final, ExpandableStatefulODE, final, double)": [
            20,
            20,
            20
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Signum",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Signum.java",
      "class_declaration": "public class Signum implements UnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Signum.value(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseAbstractUnivariateSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver.java",
      "class_declaration": "public abstract class BaseAbstractUnivariateSolver <FUNC extends UnivariateFunction> implements BaseUnivariateSolver<FUNC> ",
      "methods_under_test": {
        "=1": {
          "BaseAbstractUnivariateSolver.computeObjectiveValue(double)": [
            1,
            1,
            1
          ],
          "BaseAbstractUnivariateSolver.setup(int, FUNC, double, double, double)": [
            1,
            1,
            1
          ],
          "BaseAbstractUnivariateSolver.solve(int, FUNC, double, double, double)": [
            1,
            1,
            1
          ],
          "BaseAbstractUnivariateSolver.solve(int, FUNC, double, double)": [
            1,
            1,
            1
          ],
          "BaseAbstractUnivariateSolver.solve(int, FUNC, double)": [
            1,
            1,
            1
          ],
          "BaseAbstractUnivariateSolver.isBracketing(final, double, final, double)": [
            1,
            1,
            1
          ],
          "BaseAbstractUnivariateSolver.isSequence(final, double, final, double, final, double)": [
            1,
            1,
            1
          ],
          "BaseAbstractUnivariateSolver.verifyInterval(final, double, final, double)": [
            1,
            1,
            1
          ],
          "BaseAbstractUnivariateSolver.verifySequence(final, double, final, double, final, double)": [
            1,
            1,
            1
          ],
          "BaseAbstractUnivariateSolver.verifyBracketing(final, double, final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BaseAbstractUnivariateSolver.incrementEvaluationCount()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/differentiation/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NonPositiveDefiniteMatrixException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException.java",
      "class_declaration": "public class NonPositiveDefiniteMatrixException extends NumberIsTooSmallException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ParameterizedWrapper",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/ParameterizedWrapper.java",
      "class_declaration": "class ParameterizedWrapper implements ParameterizedODE ",
      "methods_under_test": {
        "=1": {
          "ParameterizedWrapper.computeDerivatives(double, double[], double[])": [
            1,
            1,
            1
          ],
          "ParameterizedWrapper.isSupported(String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ParameterizedWrapper.getParameter(String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/util/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "IllConditionedOperatorException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/IllConditionedOperatorException.java",
      "class_declaration": "public class IllConditionedOperatorException extends MathIllegalArgumentException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "LeastSquaresConverter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/LeastSquaresConverter.java",
      "class_declaration": "@Deprecated\npublic class LeastSquaresConverter implements MultivariateFunction ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "LeastSquaresConverter.value(final, double[])": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StepNormalizerBounds",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/sampling/StepNormalizerBounds.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Side",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/Side.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/linear/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnivariateIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/UnivariateIntegrator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "GaussIntegratorFactory",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java",
      "class_declaration": "public class GaussIntegratorFactory ",
      "methods_under_test": {
        "=1": {
          "GaussIntegratorFactory.legendre(int)": [
            1,
            1,
            1
          ],
          "GaussIntegratorFactory.legendre(int, double, double)": [
            1,
            1,
            1
          ],
          "GaussIntegratorFactory.legendreHighPrecision(int)": [
            1,
            1,
            1
          ],
          "GaussIntegratorFactory.legendreHighPrecision(int, double, double)": [
            1,
            1,
            1
          ],
          "GaussIntegratorFactory.hermite(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BivariateGridInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/BivariateGridInterpolator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Target",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Target.java",
      "class_declaration": "public class Target implements OptimizationData ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "HermiteRuleFactory",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/gauss/HermiteRuleFactory.java",
      "class_declaration": "public class HermiteRuleFactory extends BaseRuleFactory<Double> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Clusterer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/clustering/Clusterer.java",
      "class_declaration": "public abstract class Clusterer <T extends Clusterable> ",
      "methods_under_test": {
        "=1": {
          "Clusterer.distance(final, Clusterable, final, Clusterable)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Euclidean2D",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Euclidean2D.java",
      "class_declaration": "public class Euclidean2D implements Serializable, Space ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseAbstractUnivariateIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator.java",
      "class_declaration": "public abstract class BaseAbstractUnivariateIntegrator implements UnivariateIntegrator ",
      "methods_under_test": {
        "=1": {
          "BaseAbstractUnivariateIntegrator.setup(final, int, final, UnivariateFunction, final, double, final, double)": [
            1,
            1,
            1
          ],
          "BaseAbstractUnivariateIntegrator.integrate(final, int, final, UnivariateFunction, final, double, final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BaseAbstractUnivariateIntegrator.computeObjectiveValue(final, double)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "OptimizationData",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/OptimizationData.java",
      "error": "list index out of range"
    },
    {
      "src_name": "TrivariateGridInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/TrivariateGridInterpolator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/inference/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnivariateDifferentiableVectorFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiableVectorFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Pow",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Pow.java",
      "class_declaration": "public class Pow implements BivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Pow.value(double, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MathParseException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/MathParseException.java",
      "class_declaration": "public class MathParseException extends MathIllegalStateException implements ExceptionContextProvider ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ParameterConfiguration",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/ParameterConfiguration.java",
      "class_declaration": "class ParameterConfiguration implements Serializable ",
      "methods_under_test": {
        "=1": {
          "ParameterConfiguration.setHP(final, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DifferentiableUnivariateFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/DifferentiableUnivariateFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "OpenIntToFieldHashMap",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/OpenIntToFieldHashMap.java",
      "class_declaration": "public class OpenIntToFieldHashMap <T extends FieldElement<T>> implements Serializable ",
      "methods_under_test": {
        "=1": {
          "OpenIntToFieldHashMap.iterator()": [
            1,
            1,
            1
          ],
          "OpenIntToFieldHashMap.size()": [
            1,
            1,
            1
          ],
          "Iterator.hasNext()": [
            1,
            1,
            1
          ],
          "OpenIntToFieldHashMap.buildArray(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "OpenIntToFieldHashMap.get(final, int)": [
            5,
            5,
            5
          ],
          "OpenIntToFieldHashMap.remove(final, int)": [
            5,
            5,
            5
          ],
          "OpenIntToFieldHashMap.put(final, int, final, T)": [
            4,
            4,
            4
          ],
          "Iterator.key()": [
            3,
            3,
            3
          ],
          "Iterator.value()": [
            3,
            3,
            3
          ],
          "Iterator.advance()": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "OpenIntToFieldHashMap.containsKey(final, int)": [
            15,
            15,
            15
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnivariateFunctionDifferentiator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateFunctionDifferentiator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnboundedSolutionException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/linear/UnboundedSolutionException.java",
      "class_declaration": "public class UnboundedSolutionException extends MathIllegalStateException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "RealVectorPreservingVisitor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/RealVectorPreservingVisitor.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MultivariateVectorFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/MultivariateVectorFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "InvalidRepresentationException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/InvalidRepresentationException.java",
      "class_declaration": "public class InvalidRepresentationException extends MathIllegalArgumentException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractConvergenceChecker",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/AbstractConvergenceChecker.java",
      "class_declaration": "@Deprecated\npublic abstract class AbstractConvergenceChecker <PAIR> implements ConvergenceChecker<PAIR> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Target",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/Target.java",
      "class_declaration": "@Deprecated\npublic class Target implements OptimizationData ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DoublePoint",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/clustering/DoublePoint.java",
      "class_declaration": "public class DoublePoint implements Clusterable, Serializable ",
      "methods_under_test": {
        "=1": {
          "DoublePoint.hashCode()": [
            1,
            1,
            1
          ],
          "DoublePoint.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DoublePoint.equals(final, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MultivariateFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/MultivariateFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Atanh",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Atanh.java",
      "class_declaration": "public class Atanh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Atanh.value(double)": [
            1,
            1,
            1
          ],
          "Atanh.derivative()": [
            1,
            1,
            1
          ],
          "Atanh.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Ceil",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Ceil.java",
      "class_declaration": "public class Ceil implements UnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Ceil.value(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseAbstractMultivariateVectorOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java",
      "class_declaration": "@Deprecated\npublic abstract class BaseAbstractMultivariateVectorOptimizer <FUNC extends MultivariateVectorFunction> implements BaseMultivariateVectorOptimizer<FUNC> ",
      "methods_under_test": {
        "=1": {
          "BaseAbstractMultivariateVectorOptimizer.optimize(int, FUNC, double[], double[], double[])": [
            1,
            1,
            1
          ],
          "BaseAbstractMultivariateVectorOptimizer.optimize(int, FUNC)": [
            1,
            1,
            1
          ],
          "BaseAbstractMultivariateVectorOptimizer.optimizeInternal(int, FUNC)": [
            1,
            1,
            1
          ],
          "BaseAbstractMultivariateVectorOptimizer.setUp()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BaseAbstractMultivariateVectorOptimizer.computeObjectiveValue(double[])": [
            2,
            2,
            2
          ],
          "BaseAbstractMultivariateVectorOptimizer.optimizeInternal(final, int, final, FUNC, final, double[], final, double[], final, double[])": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ZeroException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/ZeroException.java",
      "class_declaration": "public class ZeroException extends MathIllegalNumberException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DstNormalization",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/transform/DstNormalization.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Vector1DFormat",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1DFormat.java",
      "class_declaration": "public class Vector1DFormat extends VectorFormat<Euclidean1D> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ParametricUnivariateFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/ParametricUnivariateFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Constant",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Constant.java",
      "class_declaration": "public class Constant implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Constant.value(double)": [
            1,
            1,
            1
          ],
          "Constant.derivative()": [
            1,
            1,
            1
          ],
          "Constant.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MathRuntimeException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/MathRuntimeException.java",
      "class_declaration": "public class MathRuntimeException extends RuntimeException implements ExceptionContextProvider ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Subtract",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Subtract.java",
      "class_declaration": "public class Subtract implements BivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Subtract.value(double, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractStepInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/sampling/AbstractStepInterpolator.java",
      "class_declaration": "public abstract class AbstractStepInterpolator implements StepInterpolator ",
      "methods_under_test": {
        "=1": {
          "AbstractStepInterpolator.reinitialize(final, double[], final, boolean, final, EquationsMapper, final, EquationsMapper[])": [
            1,
            1,
            1
          ],
          "AbstractStepInterpolator.copy()": [
            1,
            1,
            1
          ],
          "AbstractStepInterpolator.shift()": [
            1,
            1,
            1
          ],
          "AbstractStepInterpolator.storeTime(final, double)": [
            1,
            1,
            1
          ],
          "AbstractStepInterpolator.setSoftPreviousTime(final, double)": [
            1,
            1,
            1
          ],
          "AbstractStepInterpolator.setSoftCurrentTime(final, double)": [
            1,
            1,
            1
          ],
          "AbstractStepInterpolator.setInterpolatedTime(final, double)": [
            1,
            1,
            1
          ],
          "AbstractStepInterpolator.getInterpolatedState()": [
            1,
            1,
            1
          ],
          "AbstractStepInterpolator.getInterpolatedDerivatives()": [
            1,
            1,
            1
          ],
          "AbstractStepInterpolator.getInterpolatedSecondaryState(final, int)": [
            1,
            1,
            1
          ],
          "AbstractStepInterpolator.getInterpolatedSecondaryDerivatives(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractStepInterpolator.finalizeStep()": [
            2,
            2,
            2
          ],
          "AbstractStepInterpolator.writeBaseExternal(final, ObjectOutput)": [
            6,
            6,
            6
          ],
          "AbstractStepInterpolator.readBaseExternal(final, ObjectInput)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Weight",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java",
      "class_declaration": "public class Weight implements OptimizationData ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NullArgumentException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/NullArgumentException.java",
      "class_declaration": "public class NullArgumentException extends MathIllegalArgumentException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "LinearOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/linear/LinearOptimizer.java",
      "class_declaration": "public abstract class LinearOptimizer extends MultivariateOptimizer ",
      "methods_under_test": {
        "=1": {
          "LinearOptimizer.optimize()": [
            1,
            1,
            1
          ],
          "LinearOptimizer.parseOptimizationData()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Add",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Add.java",
      "class_declaration": "public class Add implements BivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Add.value(double, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SimpleBounds",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/SimpleBounds.java",
      "class_declaration": "public class SimpleBounds implements OptimizationData ",
      "methods_under_test": {
        "=1": {
          "SimpleBounds.unbounded(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/filter/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Space",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/Space.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/summary/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Max",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Max.java",
      "class_declaration": "public class Max implements BivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Max.value(double, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractSimplex",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex.java",
      "class_declaration": "public abstract class AbstractSimplex implements OptimizationData ",
      "methods_under_test": {
        "=1": {
          "AbstractSimplex.getPoints()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractSimplex.build(final, double[])": [
            2,
            2,
            2
          ],
          "AbstractSimplex.evaluate(final, MultivariateFunction, final, Comparator<PointValuePair>)": [
            3,
            3,
            3
          ],
          "AbstractSimplex.replaceWorstPoint(PointValuePair, final, Comparator<PointValuePair>)": [
            3,
            3,
            3
          ],
          "AbstractSimplex.getPoint(int)": [
            2,
            2,
            2
          ],
          "AbstractSimplex.setPoint(int, PointValuePair)": [
            2,
            2,
            2
          ],
          "AbstractSimplex.setPoints(PointValuePair[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MeasurementModel",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/filter/MeasurementModel.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MultiDirectionalSimplex",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex.java",
      "class_declaration": "public class MultiDirectionalSimplex extends AbstractSimplex ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "MultiDirectionalSimplex.iterate(final, MultivariateFunction, final, Comparator<PointValuePair>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnivariateOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/univariate/UnivariateOptimizer.java",
      "class_declaration": "public abstract class UnivariateOptimizer extends BaseOptimizer<UnivariatePointValuePair> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "IntegerDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/IntegerDistribution.java",
      "error": "list index out of range"
    },
    {
      "src_name": "StepNormalizerMode",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/sampling/StepNormalizerMode.java",
      "error": "list index out of range"
    },
    {
      "src_name": "TransformUtils",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/transform/TransformUtils.java",
      "class_declaration": "public class TransformUtils ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "TransformUtils.scaleArray(double[], double)": [
            2,
            2,
            2
          ],
          "TransformUtils.scaleArray(Complex[], double)": [
            2,
            2,
            2
          ],
          "TransformUtils.createRealImaginaryArray(final, Complex[])": [
            2,
            2,
            2
          ],
          "TransformUtils.createComplexArray(final, double[][])": [
            4,
            4,
            4
          ],
          "TransformUtils.exactLog2(final, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractMultipleLinearRegression",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/regression/AbstractMultipleLinearRegression.java",
      "class_declaration": "public abstract class AbstractMultipleLinearRegression implements\n        MultipleLinearRegression ",
      "methods_under_test": {
        "=1": {
          "AbstractMultipleLinearRegression.estimateRegressionParameters()": [
            1,
            1,
            1
          ],
          "AbstractMultipleLinearRegression.estimateResiduals()": [
            1,
            1,
            1
          ],
          "AbstractMultipleLinearRegression.estimateRegressionParametersVariance()": [
            1,
            1,
            1
          ],
          "AbstractMultipleLinearRegression.estimateRegressandVariance()": [
            1,
            1,
            1
          ],
          "AbstractMultipleLinearRegression.estimateErrorVariance()": [
            1,
            1,
            1
          ],
          "AbstractMultipleLinearRegression.estimateRegressionStandardError()": [
            1,
            1,
            1
          ],
          "AbstractMultipleLinearRegression.calculateYVariance()": [
            1,
            1,
            1
          ],
          "AbstractMultipleLinearRegression.calculateErrorVariance()": [
            1,
            1,
            1
          ],
          "AbstractMultipleLinearRegression.calculateResiduals()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractMultipleLinearRegression.newSampleData(double[], int, int)": [
            7,
            7,
            7
          ],
          "AbstractMultipleLinearRegression.newYSampleData(double[])": [
            3,
            3,
            3
          ],
          "AbstractMultipleLinearRegression.newXSampleData(double[][])": [
            7,
            7,
            7
          ],
          "AbstractMultipleLinearRegression.validateSampleData(double[][], double[])": [
            4,
            4,
            4
          ],
          "AbstractMultipleLinearRegression.validateCovarianceData(double[][], double[][])": [
            2,
            2,
            2
          ],
          "AbstractMultipleLinearRegression.estimateRegressionParametersStandardErrors()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseMultivariateVectorMultiStartOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/BaseMultivariateVectorMultiStartOptimizer.java",
      "class_declaration": "@Deprecated\npublic class BaseMultivariateVectorMultiStartOptimizer <FUNC extends MultivariateVectorFunction> implements BaseMultivariateVectorOptimizer<FUNC> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BaseMultivariateVectorMultiStartOptimizer.getOptima()": [
            2,
            2,
            2
          ],
          "BaseMultivariateVectorMultiStartOptimizer.optimize(int, final, FUNC, double[], double[], double[])": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BSPTree",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java",
      "class_declaration": "public class BSPTree <S extends Space> ",
      "methods_under_test": {
        "=1": {
          "BSPTree.setAttribute(final, Object)": [
            1,
            1,
            1
          ],
          "BSPTree.merge(final, BSPTree<S>, final, LeafMerger<S>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BSPTree.insertCut(final, Hyperplane<S>)": [
            3,
            3,
            3
          ],
          "BSPTree.copySelf()": [
            2,
            2,
            2
          ],
          "BSPTree.visit(final, BSPTreeVisitor<S>)": [
            8,
            8,
            8
          ],
          "BSPTree.getCell(final, Vector<S>)": [
            5,
            5,
            5
          ],
          "BSPTree.split(final, SubHyperplane<S>)": [
            8,
            8,
            8
          ],
          "BSPTree.insertInTree(final, BSPTree<S>, final, boolean)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MixtureMultivariateNormalDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateNormalDistribution.java",
      "class_declaration": "public class MixtureMultivariateNormalDistribution extends MixtureMultivariateRealDistribution<MultivariateNormalDistribution> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Acosh",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Acosh.java",
      "class_declaration": "public class Acosh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Acosh.value(double)": [
            1,
            1,
            1
          ],
          "Acosh.derivative()": [
            1,
            1,
            1
          ],
          "Acosh.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnivariateMatrixFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/UnivariateMatrixFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ConvergenceChecker",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/ConvergenceChecker.java",
      "error": "list index out of range"
    },
    {
      "src_name": "IterativeLinearSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/IterativeLinearSolver.java",
      "class_declaration": "public abstract class IterativeLinearSolver ",
      "methods_under_test": {
        "=1": {
          "IterativeLinearSolver.solve(final, RealLinearOperator, final, RealVector)": [
            1,
            1,
            1
          ],
          "IterativeLinearSolver.solve(RealLinearOperator, RealVector, RealVector)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "IterativeLinearSolver.checkParameters(final, RealLinearOperator, final, RealVector, final, RealVector)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Vector2DFormat",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2DFormat.java",
      "class_declaration": "public class Vector2DFormat extends VectorFormat<Euclidean2D> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractRealMatrix",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java",
      "class_declaration": "public abstract class AbstractRealMatrix extends RealLinearOperator implements RealMatrix ",
      "methods_under_test": {
        "=1": {
          "AbstractRealMatrix.preMultiply(final, RealMatrix)": [
            1,
            1,
            1
          ],
          "AbstractRealMatrix.getRowVector(final, int)": [
            1,
            1,
            1
          ],
          "AbstractRealMatrix.getColumnVector(final, int)": [
            1,
            1,
            1
          ],
          "AbstractRealMatrix.addToEntry(int, int, double)": [
            1,
            1,
            1
          ],
          "AbstractRealMatrix.multiplyEntry(int, int, double)": [
            1,
            1,
            1
          ],
          "AbstractRealMatrix.transpose()": [
            1,
            1,
            1
          ],
          "AbstractRealMatrix.walkInOptimizedOrder(final, RealMatrixChangingVisitor)": [
            1,
            1,
            1
          ],
          "AbstractRealMatrix.walkInOptimizedOrder(final, RealMatrixPreservingVisitor)": [
            1,
            1,
            1
          ],
          "AbstractRealMatrix.walkInOptimizedOrder(final, RealMatrixChangingVisitor, final, int, final, int, final, int, final, int)": [
            1,
            1,
            1
          ],
          "AbstractRealMatrix.walkInOptimizedOrder(final, RealMatrixPreservingVisitor, final, int, final, int, final, int, final, int)": [
            1,
            1,
            1
          ],
          "AbstractRealMatrix.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractRealMatrix.add(RealMatrix)": [
            3,
            3,
            3
          ],
          "AbstractRealMatrix.subtract(final, RealMatrix)": [
            3,
            3,
            3
          ],
          "AbstractRealMatrix.scalarAdd(final, double)": [
            3,
            3,
            3
          ],
          "AbstractRealMatrix.scalarMultiply(final, double)": [
            3,
            3,
            3
          ],
          "AbstractRealMatrix.multiply(final, RealMatrix)": [
            4,
            4,
            4
          ],
          "AbstractRealMatrix.power(final, int)": [
            10,
            10,
            10
          ],
          "AbstractRealMatrix.getData()": [
            3,
            3,
            3
          ],
          "AbstractRealMatrix.getSubMatrix(final, int, final, int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "AbstractRealMatrix.getSubMatrix(final, int[], final, int[])": [
            2,
            2,
            2
          ],
          "AbstractRealMatrix.copySubMatrix(final, int, final, int, final, int, final, int, final, double[][])": [
            4,
            4,
            4
          ],
          "AbstractRealMatrix.copySubMatrix(int[], int[], double[][])": [
            2,
            2,
            2
          ],
          "AbstractRealMatrix.setSubMatrix(final, double[][], final, int, final, int)": [
            5,
            5,
            5
          ],
          "AbstractRealMatrix.getRowMatrix(final, int)": [
            2,
            2,
            2
          ],
          "AbstractRealMatrix.setRowMatrix(final, int, final, RealMatrix)": [
            2,
            2,
            2
          ],
          "AbstractRealMatrix.getColumnMatrix(final, int)": [
            2,
            2,
            2
          ],
          "AbstractRealMatrix.setColumnMatrix(final, int, final, RealMatrix)": [
            2,
            2,
            2
          ],
          "AbstractRealMatrix.setRowVector(final, int, final, RealVector)": [
            2,
            2,
            2
          ],
          "AbstractRealMatrix.setColumnVector(final, int, final, RealVector)": [
            2,
            2,
            2
          ],
          "AbstractRealMatrix.getRow(final, int)": [
            2,
            2,
            2
          ],
          "AbstractRealMatrix.setRow(final, int, final, double[])": [
            2,
            2,
            2
          ],
          "AbstractRealMatrix.getColumn(final, int)": [
            2,
            2,
            2
          ],
          "AbstractRealMatrix.setColumn(final, int, final, double[])": [
            2,
            2,
            2
          ],
          "AbstractRealMatrix.getTrace()": [
            3,
            3,
            3
          ],
          "AbstractRealMatrix.operate(final, double[])": [
            4,
            4,
            4
          ],
          "AbstractRealMatrix.operate(final, RealVector)": [
            6,
            6,
            6
          ],
          "AbstractRealMatrix.preMultiply(final, double[])": [
            4,
            4,
            4
          ],
          "AbstractRealMatrix.preMultiply(final, RealVector)": [
            6,
            6,
            6
          ],
          "AbstractRealMatrix.walkInRowOrder(final, RealMatrixChangingVisitor)": [
            3,
            3,
            3
          ],
          "AbstractRealMatrix.walkInRowOrder(final, RealMatrixPreservingVisitor)": [
            3,
            3,
            3
          ],
          "AbstractRealMatrix.walkInRowOrder(final, RealMatrixChangingVisitor, final, int, final, int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "AbstractRealMatrix.walkInRowOrder(final, RealMatrixPreservingVisitor, final, int, final, int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "AbstractRealMatrix.walkInColumnOrder(final, RealMatrixChangingVisitor)": [
            3,
            3,
            3
          ],
          "AbstractRealMatrix.walkInColumnOrder(final, RealMatrixPreservingVisitor)": [
            3,
            3,
            3
          ],
          "AbstractRealMatrix.walkInColumnOrder(final, RealMatrixChangingVisitor, final, int, final, int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "AbstractRealMatrix.walkInColumnOrder(final, RealMatrixPreservingVisitor, final, int, final, int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "AbstractRealMatrix.equals(final, Object)": [
            7,
            7,
            7
          ],
          "AbstractRealMatrix.hashCode()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractConvergenceChecker",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/AbstractConvergenceChecker.java",
      "class_declaration": "public abstract class AbstractConvergenceChecker <PAIR> implements ConvergenceChecker<PAIR> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BoundaryAttribute",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/BoundaryAttribute.java",
      "class_declaration": "public class BoundaryAttribute <S extends Space> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TransformType",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/transform/TransformType.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BaseOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java",
      "class_declaration": "public abstract class BaseOptimizer <PAIR> ",
      "methods_under_test": {
        "=1": {
          "BaseOptimizer.optimize()": [
            1,
            1,
            1
          ],
          "BaseOptimizer.incrementEvaluationCount()": [
            1,
            1,
            1
          ],
          "BaseOptimizer.incrementIterationCount()": [
            1,
            1,
            1
          ],
          "BaseOptimizer.parseOptimizationData()": [
            1,
            1,
            1
          ],
          "MaxEvalCallback.trigger(int)": [
            1,
            1,
            1
          ],
          "MaxIterCallback.trigger(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "OutlineExtractor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/OutlineExtractor.java",
      "class_declaration": "public class OutlineExtractor ",
      "methods_under_test": {
        "=1": {
          "BoundaryProjector.visitOrder(final, BSPTree<Euclidean3D>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "OutlineExtractor.getOutline(final, PolyhedronsSet)": [
            6,
            6,
            6
          ],
          "BoundaryProjector.visitInternalNode(final, BSPTree<Euclidean3D>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DoubleArray",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/DoubleArray.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "WithMaxIterations",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UpdatingMultipleLinearRegression",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/regression/UpdatingMultipleLinearRegression.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BaseAbstractMultivariateSimpleBoundsOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java",
      "class_declaration": "@Deprecated\npublic abstract class BaseAbstractMultivariateSimpleBoundsOptimizer <FUNC extends MultivariateFunction> extends BaseAbstractMultivariateOptimizer<FUNC> implements BaseMultivariateOptimizer<FUNC>,\n               BaseMultivariateSimpleBoundsOptimizer<FUNC> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ProperBigFractionFormat",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fraction/ProperBigFractionFormat.java",
      "class_declaration": "public class ProperBigFractionFormat extends BigFractionFormat ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ProperBigFractionFormat.format(final, BigFraction, final, StringBuffer, final, FieldPosition)": [
            3,
            3,
            3
          ],
          "ProperBigFractionFormat.setWholeFormat(final, NumberFormat)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "ProperBigFractionFormat.parse(final, String, final, ParsePosition)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Expm1",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Expm1.java",
      "class_declaration": "public class Expm1 implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Expm1.value(double)": [
            1,
            1,
            1
          ],
          "Expm1.derivative()": [
            1,
            1,
            1
          ],
          "Expm1.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Sin",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Sin.java",
      "class_declaration": "public class Sin implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Sin.value(double)": [
            1,
            1,
            1
          ],
          "Sin.derivative()": [
            1,
            1,
            1
          ],
          "Sin.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Sinh",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Sinh.java",
      "class_declaration": "public class Sinh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Sinh.value(double)": [
            1,
            1,
            1
          ],
          "Sinh.derivative()": [
            1,
            1,
            1
          ],
          "Sinh.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "GoalType",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/GoalType.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NelderMeadSimplex",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/direct/NelderMeadSimplex.java",
      "class_declaration": "@Deprecated\npublic class NelderMeadSimplex extends AbstractSimplex ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {
          "NelderMeadSimplex.iterate(final, MultivariateFunction, final, Comparator<PointValuePair>)": [
            17,
            17,
            17
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StoppingCondition",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/StoppingCondition.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/sampling/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NonSymmetricMatrixException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/NonSymmetricMatrixException.java",
      "class_declaration": "public class NonSymmetricMatrixException extends MathIllegalArgumentException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MultivariateDifferentiableVectorFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/differentiation/MultivariateDifferentiableVectorFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Minus",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Minus.java",
      "class_declaration": "public class Minus implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Minus.value(double)": [
            1,
            1,
            1
          ],
          "Minus.derivative()": [
            1,
            1,
            1
          ],
          "Minus.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StatisticalMultivariateSummary",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/StatisticalMultivariateSummary.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/rank/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DifferentiableMultivariateOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateOptimizer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "StorelessBivariateCovariance",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java",
      "class_declaration": "class StorelessBivariateCovariance ",
      "methods_under_test": {
        "=1": {
          "StorelessBivariateCovariance.increment(final, double, final, double)": [
            1,
            1,
            1
          ],
          "StorelessBivariateCovariance.append(StorelessBivariateCovariance)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StorelessBivariateCovariance.getResult()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "VectorFormat",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/VectorFormat.java",
      "class_declaration": "public abstract class VectorFormat <S extends Space> ",
      "methods_under_test": {
        "=1": {
          "VectorFormat.format(Vector<S>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "VectorFormat.format(StringBuffer, FieldPosition)": [
            3,
            3,
            3
          ],
          "VectorFormat.parseCoordinates(int, String, ParsePosition)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "WeightedEvaluation",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/WeightedEvaluation.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnivariateDifferentiableMatrixFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiableMatrixFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NoFeasibleSolutionException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/linear/NoFeasibleSolutionException.java",
      "class_declaration": "public class NoFeasibleSolutionException extends MathIllegalStateException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ModelSpecificationException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/regression/ModelSpecificationException.java",
      "class_declaration": "public class ModelSpecificationException extends MathIllegalArgumentException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/ranking/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Floor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Floor.java",
      "class_declaration": "public class Floor implements UnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Floor.value(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AnyMatrix",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/AnyMatrix.java",
      "error": "list index out of range"
    },
    {
      "src_name": "FastMathCalc",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/util/FastMathCalc.java",
      "class_declaration": "class FastMathCalc ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "FastMathCalc.buildSinCosTables(double[], double[], double[], double[], int, double[], double[])": [
            4,
            4,
            4
          ],
          "FastMathCalc.slowCos(final, double, final, double, [])": [
            5,
            5,
            5
          ],
          "FastMathCalc.slowSin(final, double, final, double, [])": [
            5,
            5,
            5
          ],
          "FastMathCalc.slowexp(final, double, final, double, [])": [
            3,
            3,
            3
          ],
          "FastMathCalc.splitReciprocal(final, double, [], final, double, [])": [
            3,
            3,
            3
          ],
          "FastMathCalc.expint(int, final, double, [])": [
            4,
            4,
            4
          ],
          "FastMathCalc.slowLog(double)": [
            2,
            2,
            2
          ],
          "FastMathCalc.printarray(PrintStream, String, int, double[][])": [
            3,
            3,
            3
          ],
          "FastMathCalc.printarray(PrintStream, String, int, double[])": [
            2,
            2,
            2
          ],
          "FastMathCalc.format(double)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StepHandler",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/sampling/StepHandler.java",
      "error": "list index out of range"
    },
    {
      "src_name": "FieldMatrixPreservingVisitor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/FieldMatrixPreservingVisitor.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MixtureMultivariateRealDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java",
      "class_declaration": "public class MixtureMultivariateRealDistribution <T extends MultivariateRealDistribution> extends AbstractMultivariateRealDistribution ",
      "methods_under_test": {
        "=1": {
          "MixtureMultivariateRealDistribution.reseedRandomGenerator(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MixtureMultivariateRealDistribution.density(final, double[])": [
            2,
            2,
            2
          ],
          "MixtureMultivariateRealDistribution.sample()": [
            4,
            4,
            4
          ],
          "MixtureMultivariateRealDistribution.getComponents()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "GradientMultivariateOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/GradientMultivariateOptimizer.java",
      "class_declaration": "public abstract class GradientMultivariateOptimizer extends MultivariateOptimizer ",
      "methods_under_test": {
        "=1": {
          "GradientMultivariateOptimizer.computeObjectiveGradient(final, double[])": [
            1,
            1,
            1
          ],
          "GradientMultivariateOptimizer.optimize()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GradientMultivariateOptimizer.parseOptimizationData()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/general/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "LinearObjectiveFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/linear/LinearObjectiveFunction.java",
      "class_declaration": "public class LinearObjectiveFunction implements MultivariateFunction,\n               OptimizationData,\n               Serializable ",
      "methods_under_test": {
        "=1": {
          "LinearObjectiveFunction.value(final, double[])": [
            1,
            1,
            1
          ],
          "LinearObjectiveFunction.value(final, RealVector)": [
            1,
            1,
            1
          ],
          "LinearObjectiveFunction.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LinearObjectiveFunction.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DefaultFieldMatrixPreservingVisitor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/DefaultFieldMatrixPreservingVisitor.java",
      "class_declaration": "public class DefaultFieldMatrixPreservingVisitor <T extends FieldElement<T>> implements FieldMatrixPreservingVisitor<T> ",
      "methods_under_test": {
        "=1": {
          "DefaultFieldMatrixPreservingVisitor.end()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "LegendreRuleFactory",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreRuleFactory.java",
      "class_declaration": "public class LegendreRuleFactory extends BaseRuleFactory<Double> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "WeightedObservedPoint",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/fitting/WeightedObservedPoint.java",
      "class_declaration": "@Deprecated\npublic class WeightedObservedPoint implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NotFiniteNumberException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/NotFiniteNumberException.java",
      "class_declaration": "public class NotFiniteNumberException extends MathIllegalNumberException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "RealMatrixPreservingVisitor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/RealMatrixPreservingVisitor.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SubOrientedPoint",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint.java",
      "class_declaration": "public class SubOrientedPoint extends AbstractSubHyperplane<Euclidean1D, Euclidean1D> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Preconditioner",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/Preconditioner.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DfpField",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/dfp/DfpField.java",
      "class_declaration": "public class DfpField implements Field<Dfp> ",
      "methods_under_test": {
        "=1": {
          "DfpField.setRoundingMode(final, RoundingMode)": [
            1,
            1,
            1
          ],
          "DfpField.clearIEEEFlags()": [
            1,
            1,
            1
          ],
          "DfpField.setIEEEFlags(final, int)": [
            1,
            1,
            1
          ],
          "DfpField.setIEEEFlagsBits(final, int)": [
            1,
            1,
            1
          ],
          "DfpField.newDfp()": [
            1,
            1,
            1
          ],
          "DfpField.newDfp(final, byte)": [
            1,
            1,
            1
          ],
          "DfpField.newDfp(final, int)": [
            1,
            1,
            1
          ],
          "DfpField.newDfp(final, long)": [
            1,
            1,
            1
          ],
          "DfpField.newDfp(final, double)": [
            1,
            1,
            1
          ],
          "DfpField.newDfp(Dfp)": [
            1,
            1,
            1
          ],
          "DfpField.newDfp(final, String)": [
            1,
            1,
            1
          ],
          "DfpField.newDfp(final, byte, final, byte)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DfpField.computeExp(final, Dfp, final, Dfp)": [
            3,
            3,
            3
          ],
          "DfpField.computeLn(final, Dfp, final, Dfp, final, Dfp)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Atan",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Atan.java",
      "class_declaration": "public class Atan implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Atan.value(double)": [
            1,
            1,
            1
          ],
          "Atan.derivative()": [
            1,
            1,
            1
          ],
          "Atan.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Rint",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Rint.java",
      "class_declaration": "public class Rint implements UnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Rint.value(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "InitialGuess",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/InitialGuess.java",
      "class_declaration": "@Deprecated\npublic class InitialGuess implements OptimizationData ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Hyperplane",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/Hyperplane.java",
      "error": "list index out of range"
    },
    {
      "src_name": "IterativeLinearSolverEvent",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/IterativeLinearSolverEvent.java",
      "class_declaration": "public abstract class IterativeLinearSolverEvent extends IterationEvent ",
      "methods_under_test": {
        "=1": {
          "IterativeLinearSolverEvent.providesResidual()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseMultivariateSimpleBoundsOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/BaseMultivariateSimpleBoundsOptimizer.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Cbrt",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java",
      "class_declaration": "public class Cbrt implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Cbrt.value(double)": [
            1,
            1,
            1
          ],
          "Cbrt.derivative()": [
            1,
            1,
            1
          ],
          "Cbrt.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "WithConvergenceChecker",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java",
      "error": "list index out of range"
    },
    {
      "src_name": "RealFieldElement",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/RealFieldElement.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DistanceMeasure",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/distance/DistanceMeasure.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SecondOrderDifferentialEquations",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/SecondOrderDifferentialEquations.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "WithModelAndJacobian",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MutationPolicy",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/genetics/MutationPolicy.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MultivariateVectorOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java",
      "class_declaration": "public abstract class MultivariateVectorOptimizer extends BaseMultivariateOptimizer<PointVectorValuePair> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Clusterable",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/clustering/Clusterable.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "RealDistribution",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/distribution/RealDistribution.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Acos",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Acos.java",
      "class_declaration": "public class Acos implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Acos.value(double)": [
            1,
            1,
            1
          ],
          "Acos.derivative()": [
            1,
            1,
            1
          ],
          "Acos.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "RealLinearOperator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/RealLinearOperator.java",
      "class_declaration": "public abstract class RealLinearOperator ",
      "methods_under_test": {
        "=1": {
          "RealLinearOperator.operateTranspose(final, RealVector)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "WithTarget",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java",
      "error": "list index out of range"
    },
    {
      "src_name": "FieldRotation",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java",
      "class_declaration": "public class FieldRotation <T extends RealFieldElement<T>> implements Serializable ",
      "methods_under_test": {
        "=1": {
          "FieldRotation.revert()": [
            1,
            1,
            1
          ],
          "FieldRotation.getMatrix()": [
            1,
            1,
            1
          ],
          "FieldRotation.toRotation()": [
            1,
            1,
            1
          ],
          "FieldRotation.applyTo(final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldRotation.applyTo(final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldRotation.applyTo(final, T[], final, T[])": [
            1,
            1,
            1
          ],
          "FieldRotation.applyTo(final, double[], final, T[])": [
            1,
            1,
            1
          ],
          "FieldRotation.applyTo(final, Rotation, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldRotation.applyInverseTo(final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldRotation.applyInverseTo(final, Vector3D)": [
            1,
            1,
            1
          ],
          "FieldRotation.applyInverseTo(final, T[], final, T[])": [
            1,
            1,
            1
          ],
          "FieldRotation.applyInverseTo(final, double[], final, T[])": [
            1,
            1,
            1
          ],
          "FieldRotation.applyInverseTo(final, Rotation, final, FieldVector3D<T>)": [
            1,
            1,
            1
          ],
          "FieldRotation.applyTo(final, FieldRotation<T>)": [
            1,
            1,
            1
          ],
          "FieldRotation.applyTo(final, Rotation)": [
            1,
            1,
            1
          ],
          "FieldRotation.applyTo(final, Rotation, final, FieldRotation<T>)": [
            1,
            1,
            1
          ],
          "FieldRotation.applyInverseTo(final, FieldRotation<T>)": [
            1,
            1,
            1
          ],
          "FieldRotation.applyInverseTo(final, Rotation)": [
            1,
            1,
            1
          ],
          "FieldRotation.applyInverseTo(final, Rotation, final, FieldRotation<T>)": [
            1,
            1,
            1
          ],
          "FieldRotation.distance(final, FieldRotation<T>, final, FieldRotation<T>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FieldRotation.getAxis()": [
            3,
            3,
            3
          ],
          "FieldRotation.getAngle()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {
          "FieldRotation.getAngles(final, RotationOrder)": [
            25,
            25,
            25
          ]
        },
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AdamsNordsieckTransformer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/nonstiff/AdamsNordsieckTransformer.java",
      "class_declaration": "public class AdamsNordsieckTransformer ",
      "methods_under_test": {
        "=1": {
          "AdamsNordsieckTransformer.updateHighOrderDerivativesPhase1(final, Array2DRowRealMatrix)": [
            1,
            1,
            1
          ],
          "AdamsNordsieckTransformer.updateHighOrderDerivativesPhase2(final, double[], final, double[], final, Array2DRowRealMatrix)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AdamsNordsieckTransformer.getInstance(final, int)": [
            3,
            3,
            3
          ],
          "AdamsNordsieckTransformer.initializeHighOrderDerivatives(final, double, final, double[], final, double[][], final, double[][])": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/complex/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DummyStepHandler",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/sampling/DummyStepHandler.java",
      "class_declaration": "public class DummyStepHandler implements StepHandler ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/polynomials/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MultivariateMatrixFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/MultivariateMatrixFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Identity",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Identity.java",
      "class_declaration": "public class Identity implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Identity.value(double)": [
            1,
            1,
            1
          ],
          "Identity.derivative()": [
            1,
            1,
            1
          ],
          "Identity.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BoundarySizeVisitor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/BoundarySizeVisitor.java",
      "class_declaration": "class BoundarySizeVisitor <S extends Space> implements BSPTreeVisitor<S> ",
      "methods_under_test": {
        "=1": {
          "BoundarySizeVisitor.visitOrder(final, BSPTree<S>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BoundarySizeVisitor.visitInternalNode(final, BSPTree<S>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BivariateFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/BivariateFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/gauss/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Cluster",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ml/clustering/Cluster.java",
      "class_declaration": "public class Cluster <T extends Clusterable> implements Serializable ",
      "methods_under_test": {
        "=1": {
          "Cluster.addPoint(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "OrientedPoint",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint.java",
      "class_declaration": "public class OrientedPoint implements Hyperplane<Euclidean1D> ",
      "methods_under_test": {
        "=1": {
          "OrientedPoint.copySelf()": [
            1,
            1,
            1
          ],
          "OrientedPoint.getOffset(final, Vector<Euclidean1D>)": [
            1,
            1,
            1
          ],
          "OrientedPoint.wholeHyperplane()": [
            1,
            1,
            1
          ],
          "OrientedPoint.wholeSpace()": [
            1,
            1,
            1
          ],
          "OrientedPoint.sameOrientationAs(final, Hyperplane<Euclidean1D>)": [
            1,
            1,
            1
          ],
          "OrientedPoint.revertSelf()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "OpenMapRealVector",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
      "class_declaration": "@Deprecated\npublic class OpenMapRealVector extends SparseRealVector implements Serializable ",
      "methods_under_test": {
        "=1": {
          "OpenMapRealVector.isDefaultValue(double)": [
            1,
            1,
            1
          ],
          "OpenMapRealVector.append(double)": [
            1,
            1,
            1
          ],
          "OpenMapRealVector.copy()": [
            1,
            1,
            1
          ],
          "OpenMapRealVector.dotProduct(OpenMapRealVector)": [
            1,
            1,
            1
          ],
          "OpenMapRealVector.getEntry(int)": [
            1,
            1,
            1
          ],
          "OpenMapRealVector.mapAdd(double)": [
            1,
            1,
            1
          ],
          "OpenMapRealVector.setSubVector(int, RealVector)": [
            1,
            1,
            1
          ],
          "OpenMapRealVector.unitVector()": [
            1,
            1,
            1
          ],
          "OpenMapRealVector.sparseIterator()": [
            1,
            1,
            1
          ],
          "OpenMapSparseIterator.hasNext()": [
            1,
            1,
            1
          ],
          "OpenMapSparseIterator.next()": [
            1,
            1,
            1
          ],
          "OpenMapSparseIterator.remove()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "OpenMapRealVector.add(RealVector)": [
            3,
            3,
            3
          ],
          "OpenMapRealVector.add(OpenMapRealVector)": [
            3,
            3,
            3
          ],
          "OpenMapRealVector.append(OpenMapRealVector)": [
            2,
            2,
            2
          ],
          "OpenMapRealVector.append(RealVector)": [
            4,
            4,
            4
          ],
          "OpenMapRealVector.ebeDivide(RealVector)": [
            2,
            2,
            2
          ],
          "OpenMapRealVector.ebeMultiply(RealVector)": [
            6,
            6,
            6
          ],
          "OpenMapRealVector.getSubVector(int, int)": [
            4,
            4,
            4
          ],
          "OpenMapRealVector.getDistance(OpenMapRealVector)": [
            4,
            4,
            4
          ],
          "OpenMapRealVector.getDistance(RealVector)": [
            3,
            3,
            3
          ],
          "OpenMapRealVector.getL1Distance(OpenMapRealVector)": [
            4,
            4,
            4
          ],
          "OpenMapRealVector.getL1Distance(RealVector)": [
            3,
            3,
            3
          ],
          "OpenMapRealVector.getLInfDistance(RealVector)": [
            3,
            3,
            3
          ],
          "OpenMapRealVector.mapAddToSelf(double)": [
            2,
            2,
            2
          ],
          "OpenMapRealVector.setEntry(int, double)": [
            4,
            4,
            4
          ],
          "OpenMapRealVector.subtract(OpenMapRealVector)": [
            3,
            3,
            3
          ],
          "OpenMapRealVector.subtract(RealVector)": [
            3,
            3,
            3
          ],
          "OpenMapRealVector.unitize()": [
            2,
            2,
            2
          ],
          "OpenMapRealVector.toArray()": [
            2,
            2,
            2
          ],
          "OpenMapRealVector.hashCode()": [
            2,
            2,
            2
          ],
          "OpenMapRealVector.equals(Object)": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Asinh",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Asinh.java",
      "class_declaration": "public class Asinh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Asinh.value(double)": [
            1,
            1,
            1
          ],
          "Asinh.derivative()": [
            1,
            1,
            1
          ],
          "Asinh.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "RankingAlgorithm",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/ranking/RankingAlgorithm.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MathUnsupportedOperationException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/MathUnsupportedOperationException.java",
      "class_declaration": "public class MathUnsupportedOperationException extends UnsupportedOperationException implements ExceptionContextProvider ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/dfp/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnivariateObjectiveFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/univariate/UnivariateObjectiveFunction.java",
      "class_declaration": "public class UnivariateObjectiveFunction implements OptimizationData ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/fitting/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SmallPrimes",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/primes/SmallPrimes.java",
      "class_declaration": "class SmallPrimes ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SmallPrimes.smallTrialDivision(int, final, List<Integer>)": [
            3,
            3,
            3
          ],
          "SmallPrimes.boundedTrialDivision(int, int, List<Integer>)": [
            5,
            5,
            5
          ],
          "SmallPrimes.trialDivision(int)": [
            2,
            2,
            2
          ],
          "SmallPrimes.millerRabinPrimeTest(final, int)": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DifferentiableUnivariateMatrixFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/DifferentiableUnivariateMatrixFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnivariateMatrixFunctionDifferentiator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateMatrixFunctionDifferentiator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "RandomDataImpl",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java",
      "class_declaration": "@Deprecated\npublic class RandomDataImpl implements RandomData, Serializable ",
      "methods_under_test": {
        "=1": {
          "RandomDataImpl.nextHexString(int)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextInt(int, int)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextLong(long, long)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextSecureHexString(int)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextSecureInt(int, int)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextSecureLong(long, long)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextPoisson(double)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextGaussian(double, double)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextExponential(double)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextUniform(double, double)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextUniform(double, double, boolean)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextBeta(double, double)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextBinomial(int, double)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextCauchy(double, double)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextChiSquare(double)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextF(double, double)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextGamma(double, double)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextHypergeometric(int, int, int)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextPascal(int, double)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextT(double)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextWeibull(double, double)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextZipf(int, double)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.reSeed(long)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.reSeedSecure()": [
            1,
            1,
            1
          ],
          "RandomDataImpl.reSeedSecure(long)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.reSeed()": [
            1,
            1,
            1
          ],
          "RandomDataImpl.setSecureAlgorithm(String, String)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextPermutation(int, int)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextSample(Collection<?>, int)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextInversionDeviate(RealDistribution)": [
            1,
            1,
            1
          ],
          "RandomDataImpl.nextInversionDeviate(IntegerDistribution)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DefaultMeasurementModel",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/filter/DefaultMeasurementModel.java",
      "class_declaration": "public class DefaultMeasurementModel implements MeasurementModel ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Divide",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Divide.java",
      "class_declaration": "public class Divide implements BivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Divide.value(double, double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MultivariateInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/interpolation/MultivariateInterpolator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NoFeasibleSolutionException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/linear/NoFeasibleSolutionException.java",
      "class_declaration": "@Deprecated\npublic class NoFeasibleSolutionException extends MathIllegalStateException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Power",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/function/Power.java",
      "class_declaration": "public class Power implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction ",
      "methods_under_test": {
        "=1": {
          "Power.value(double)": [
            1,
            1,
            1
          ],
          "Power.derivative()": [
            1,
            1,
            1
          ],
          "Power.value(final, DerivativeStructure)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Vector1D",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/Vector1D.java",
      "class_declaration": "public class Vector1D implements Vector<Euclidean1D> ",
      "methods_under_test": {
        "=1": {
          "Vector1D.add(Vector<Euclidean1D>)": [
            1,
            1,
            1
          ],
          "Vector1D.add(double, Vector<Euclidean1D>)": [
            1,
            1,
            1
          ],
          "Vector1D.subtract(Vector<Euclidean1D>)": [
            1,
            1,
            1
          ],
          "Vector1D.subtract(double, Vector<Euclidean1D>)": [
            1,
            1,
            1
          ],
          "Vector1D.negate()": [
            1,
            1,
            1
          ],
          "Vector1D.scalarMultiply(double)": [
            1,
            1,
            1
          ],
          "Vector1D.distance1(Vector<Euclidean1D>)": [
            1,
            1,
            1
          ],
          "Vector1D.distance(Vector<Euclidean1D>)": [
            1,
            1,
            1
          ],
          "Vector1D.distanceInf(Vector<Euclidean1D>)": [
            1,
            1,
            1
          ],
          "Vector1D.distanceSq(Vector<Euclidean1D>)": [
            1,
            1,
            1
          ],
          "Vector1D.dotProduct(final, Vector<Euclidean1D>)": [
            1,
            1,
            1
          ],
          "Vector1D.distance(Vector1D, Vector1D)": [
            1,
            1,
            1
          ],
          "Vector1D.distanceInf(Vector1D, Vector1D)": [
            1,
            1,
            1
          ],
          "Vector1D.distanceSq(Vector1D, Vector1D)": [
            1,
            1,
            1
          ],
          "Vector1D.toString()": [
            1,
            1,
            1
          ],
          "Vector1D.toString(final, NumberFormat)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Vector1D.normalize()": [
            2,
            2,
            2
          ],
          "Vector1D.equals(Object)": [
            4,
            4,
            4
          ],
          "Vector1D.hashCode()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SymmetricGaussIntegrator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/integration/gauss/SymmetricGaussIntegrator.java",
      "class_declaration": "public class SymmetricGaussIntegrator extends GaussIntegrator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SymmetricGaussIntegrator.integrate(UnivariateFunction)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseMultivariateMultiStartOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/BaseMultivariateMultiStartOptimizer.java",
      "class_declaration": "@Deprecated\npublic class BaseMultivariateMultiStartOptimizer <FUNC extends MultivariateFunction> implements BaseMultivariateOptimizer<FUNC> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BaseMultivariateMultiStartOptimizer.getOptima()": [
            2,
            2,
            2
          ],
          "BaseMultivariateMultiStartOptimizer.optimize(int, final, FUNC, final, GoalType, double[])": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NotARotationMatrixException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/NotARotationMatrixException.java",
      "class_declaration": "public class NotARotationMatrixException extends MathIllegalArgumentException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "OrderedTuple",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple.java",
      "class_declaration": "public class OrderedTuple implements Comparable<OrderedTuple> ",
      "methods_under_test": {
        "=1": {
          "OrderedTuple.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "OrderedTuple.equals(final, Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "OrderedTuple.compareTo(final, OrderedTuple)": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/transform/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "WithWeight",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ParameterJacobianWrapper",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/ParameterJacobianWrapper.java",
      "class_declaration": "class ParameterJacobianWrapper implements ParameterJacobianProvider ",
      "methods_under_test": {
        "=1": {
          "ParameterJacobianWrapper.isSupported(String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ParameterJacobianWrapper.computeParameterJacobian(double, double[], double[], String, double[])": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TooManyIterationsException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/TooManyIterationsException.java",
      "class_declaration": "public class TooManyIterationsException extends MaxCountExceededException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ExceptionContextProvider",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/util/ExceptionContextProvider.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MultipleLinearRegression",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/regression/MultipleLinearRegression.java",
      "error": "list index out of range"
    },
    {
      "src_name": "StatisticalSummary",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/StatisticalSummary.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SecondaryEquations",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/SecondaryEquations.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BaseMultiStartMultivariateOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/BaseMultiStartMultivariateOptimizer.java",
      "class_declaration": "public abstract class BaseMultiStartMultivariateOptimizer <PAIR> extends BaseMultivariateOptimizer<PAIR> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/univariate/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/correlation/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "RealMatrixChangingVisitor",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/linear/RealMatrixChangingVisitor.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/AbstractOptimizer.java",
      "class_declaration": "public abstract class AbstractOptimizer <PAIR, OPTIM extends AbstractOptimizer<PAIR, OPTIM>> implements WithMaxEvaluations<OPTIM>,\n               WithMaxIterations<OPTIM>,\n               WithConvergenceChecker<PAIR, OPTIM> ",
      "methods_under_test": {
        "=1": {
          "AbstractOptimizer.self()": [
            1,
            1,
            1
          ],
          "AbstractOptimizer.withConvergenceChecker(ConvergenceChecker<PAIR>)": [
            1,
            1,
            1
          ],
          "AbstractOptimizer.withMaxEvaluations(int)": [
            1,
            1,
            1
          ],
          "AbstractOptimizer.withMaxIterations(int)": [
            1,
            1,
            1
          ],
          "AbstractOptimizer.optimize()": [
            1,
            1,
            1
          ],
          "AbstractOptimizer.incrementEvaluationCount()": [
            1,
            1,
            1
          ],
          "AbstractOptimizer.incrementIterationCount()": [
            1,
            1,
            1
          ],
          "MaxEvalCallback.trigger(int)": [
            1,
            1,
            1
          ],
          "MaxIterCallback.trigger(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DifferentiableMultivariateMultiStartOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/DifferentiableMultivariateMultiStartOptimizer.java",
      "class_declaration": "@Deprecated\npublic class DifferentiableMultivariateMultiStartOptimizer extends BaseMultivariateMultiStartOptimizer<DifferentiableMultivariateFunction> implements DifferentiableMultivariateOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StepInterpolator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/sampling/StepInterpolator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AbstractPolynomialSolver",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/solvers/AbstractPolynomialSolver.java",
      "class_declaration": "public abstract class AbstractPolynomialSolver extends BaseAbstractUnivariateSolver<PolynomialFunction> implements PolynomialSolver ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ExpandableStatefulODE",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/ode/ExpandableStatefulODE.java",
      "class_declaration": "public class ExpandableStatefulODE ",
      "methods_under_test": {
        "=1": {
          "ExpandableStatefulODE.setTime(final, double)": [
            1,
            1,
            1
          ],
          "ExpandableStatefulODE.getSecondaryState(final, int)": [
            1,
            1,
            1
          ],
          "ExpandableStatefulODE.getSecondaryStateDot(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ExpandableStatefulODE.getTotalDimension()": [
            3,
            3,
            3
          ],
          "ExpandableStatefulODE.computeDerivatives(final, double, final, double[], final, double[])": [
            2,
            2,
            2
          ],
          "ExpandableStatefulODE.addSecondaryEquations(final, SecondaryEquations)": [
            2,
            2,
            2
          ],
          "ExpandableStatefulODE.getSecondaryMappers()": [
            2,
            2,
            2
          ],
          "ExpandableStatefulODE.setPrimaryState(final, double[])": [
            2,
            2,
            2
          ],
          "ExpandableStatefulODE.setSecondaryState(final, int, final, double[])": [
            2,
            2,
            2
          ],
          "ExpandableStatefulODE.setCompleteState(final, double[])": [
            2,
            2,
            2
          ],
          "ExpandableStatefulODE.getCompleteState()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "GoalType",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/GoalType.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Region",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/Region.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnivariateVectorFunction",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/analysis/UnivariateVectorFunction.java",
      "error": "list index out of range"
    },
    {
      "src_name": "LeastSquaresConverter",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/LeastSquaresConverter.java",
      "class_declaration": "public class LeastSquaresConverter implements MultivariateFunction ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "LeastSquaresConverter.value(final, double[])": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/geometry/partitioning/package-info.java",
      "error": "list index out of range"
    },
    {
      "src_name": "TiesStrategy",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/ranking/TiesStrategy.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SimpleBounds",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/SimpleBounds.java",
      "class_declaration": "@Deprecated\npublic class SimpleBounds implements OptimizationData ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "RandomVectorGenerator",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/random/RandomVectorGenerator.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MultiDirectionalSimplex",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/direct/MultiDirectionalSimplex.java",
      "class_declaration": "@Deprecated\npublic class MultiDirectionalSimplex extends AbstractSimplex ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "MultiDirectionalSimplex.iterate(final, MultivariateFunction, final, Comparator<PointValuePair>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NoDataException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/NoDataException.java",
      "class_declaration": "public class NoDataException extends MathIllegalArgumentException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Cluster",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/clustering/Cluster.java",
      "class_declaration": "@Deprecated\npublic class Cluster <T extends Clusterable<T>> implements Serializable ",
      "methods_under_test": {
        "=1": {
          "Cluster.addPoint(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MathIllegalNumberException",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/exception/MathIllegalNumberException.java",
      "class_declaration": "public class MathIllegalNumberException extends MathIllegalArgumentException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SimplexOptimizer",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/direct/SimplexOptimizer.java",
      "class_declaration": "@SuppressWarnings(\"boxing\") \n@Deprecated\npublic class SimplexOptimizer extends BaseAbstractMultivariateOptimizer<MultivariateFunction> implements MultivariateOptimizer ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "package-info",
      "src_path": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/optimization/package-info.java",
      "error": "list index out of range"
    }
  ],
  "test_unpaired": [
    {
      "StepNormalizerOutputOverlapTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/sampling/StepNormalizerOutputOverlapTest.java"
    },
    {
      "LegendreTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreTest.java"
    },
    {
      "RandomStraightLinePointGenerator": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java"
    },
    {
      "StatisticalReferenceDatasetFactory": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/StatisticalReferenceDatasetFactory.java"
    },
    {
      "StatisticalReferenceDataset": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java"
    },
    {
      "SpearmansRankCorrelationTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/correlation/SpearmansRankCorrelationTest.java"
    },
    {
      "UnivariateStatisticAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/UnivariateStatisticAbstractTest.java"
    },
    {
      "TestBean": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/TestBean.java"
    },
    {
      "CircleProblem": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java"
    },
    {
      "FieldRotationDfpTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDfpTest.java"
    },
    {
      "UnmodifiableArrayRealVectorTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/UnmodifiableArrayRealVectorTest.java"
    },
    {
      "TTestTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/inference/TTestTest.java"
    },
    {
      "StorelessUnivariateStatisticAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java"
    },
    {
      "LUSolverTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/LUSolverTest.java"
    },
    {
      "QuinticFunction": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/QuinticFunction.java"
    },
    {
      "ExtendedFieldElementAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ExtendedFieldElementAbstractTest.java"
    },
    {
      "TestProblemAbstract": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/TestProblemAbstract.java"
    },
    {
      "LegendreParametricTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java"
    },
    {
      "RealFunctionValidation": "../../defects4j-subjects/Math-2f/src/test/maxima/special/RealFunctionValidation/RealFunctionValidation.java"
    },
    {
      "ComplexFormatAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/complex/ComplexFormatAbstractTest.java"
    },
    {
      "AbstractStorelessUnivariateStatistic": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/AbstractStorelessUnivariateStatistic.java"
    },
    {
      "UnmodifiableRealVectorAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/UnmodifiableRealVectorAbstractTest.java"
    },
    {
      "StatisticalReferenceDatasetFactory": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java"
    },
    {
      "AbstractLeastSquaresOptimizerTestValidation": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java"
    },
    {
      "GeneticAlgorithmTestBinary": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/GeneticAlgorithmTestBinary.java"
    },
    {
      "StatisticalReferenceDataset": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java"
    },
    {
      "RetryRunner": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/RetryRunner.java"
    },
    {
      "TestProblem2": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/TestProblem2.java"
    },
    {
      "StatisticalReferenceDataset": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/StatisticalReferenceDataset.java"
    },
    {
      "AbstractLeastSquaresOptimizerAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java"
    },
    {
      "TestProblem6": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/TestProblem6.java"
    },
    {
      "SumSqTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/summary/SumSqTest.java"
    },
    {
      "Vector3DFormatAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormatAbstractTest.java"
    },
    {
      "IntegerDistributionAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/IntegerDistributionAbstractTest.java"
    },
    {
      "FrenchRealVectorFormatTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/FrenchRealVectorFormatTest.java"
    },
    {
      "StorelessUnivariateStatistic": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/StorelessUnivariateStatistic.java"
    },
    {
      "AbstractUnivariateStatisticTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/AbstractUnivariateStatisticTest.java"
    },
    {
      "RRQRSolverTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/RRQRSolverTest.java"
    },
    {
      "RealVectorFormatAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/RealVectorFormatAbstractTest.java"
    },
    {
      "Decimal10": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/dfp/Decimal10.java"
    },
    {
      "TestUtilsTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/inference/TestUtilsTest.java"
    },
    {
      "MonitoredFunction": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/MonitoredFunction.java"
    },
    {
      "DummyBinaryChromosome": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/DummyBinaryChromosome.java"
    },
    {
      "RandomStraightLinePointGenerator": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/RandomStraightLinePointGenerator.java"
    },
    {
      "TestUtils": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/TestUtils.java"
    },
    {
      "TestUtils": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/inference/TestUtils.java"
    },
    {
      "TestProblem5": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/TestProblem5.java"
    },
    {
      "StepProblem": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/nonstiff/StepProblem.java"
    },
    {
      "ListUnivariateImplTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/ListUnivariateImplTest.java"
    },
    {
      "MultipleLinearRegressionAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/regression/MultipleLinearRegressionAbstractTest.java"
    },
    {
      "CircleProblem": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java"
    },
    {
      "DummyStepInterpolator": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/sampling/DummyStepInterpolator.java"
    },
    {
      "GTest": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/inference/GTest.java"
    },
    {
      "ChiSquareTestTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/inference/ChiSquareTestTest.java"
    },
    {
      "InteractionTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/moment/InteractionTest.java"
    },
    {
      "MannWhitneyUTestTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/inference/MannWhitneyUTestTest.java"
    },
    {
      "ReappearingEventTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/events/ReappearingEventTest.java"
    },
    {
      "GaussianQuadratureAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java"
    },
    {
      "HilbertMatrix": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/HilbertMatrix.java"
    },
    {
      "FastMathTestPerformance": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/FastMathTestPerformance.java"
    },
    {
      "AbstractLeastSquaresOptimizerAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java"
    },
    {
      "SimplexOptimizerNelderMeadTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.java"
    },
    {
      "TTest": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/inference/TTest.java"
    },
    {
      "UnivariateStatistic": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/UnivariateStatistic.java"
    },
    {
      "MultivariateNormalMixtureModelDistributionTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java"
    },
    {
      "StepNormalizerOutputTestBase": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/sampling/StepNormalizerOutputTestBase.java"
    },
    {
      "CertifiedDataAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/data/CertifiedDataAbstractTest.java"
    },
    {
      "MixedListUnivariateImplTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/MixedListUnivariateImplTest.java"
    },
    {
      "RealVectorAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/RealVectorAbstractTest.java"
    },
    {
      "CircleScalar": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/CircleScalar.java"
    },
    {
      "AbstractLeastSquaresOptimizerAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java"
    },
    {
      "SimplexOptimizerNelderMeadTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java"
    },
    {
      "LotteryTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/data/LotteryTest.java"
    },
    {
      "RandomCirclePointGenerator": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java"
    },
    {
      "OpenIntToFieldTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/OpenIntToFieldTest.java"
    },
    {
      "LegendreHighPrecisionTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionTest.java"
    },
    {
      "GTestTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java"
    },
    {
      "ExampleUtils": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/userguide/ExampleUtils.java"
    },
    {
      "TestProblemHandler": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/TestProblemHandler.java"
    },
    {
      "PerfTestUtils": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/PerfTestUtils.java"
    },
    {
      "RealDistributionAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java"
    },
    {
      "RealMatrixFormatAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/RealMatrixFormatAbstractTest.java"
    },
    {
      "FieldRotationDSTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotationDSTest.java"
    },
    {
      "Retry": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/Retry.java"
    },
    {
      "ChiSquareTest": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/inference/ChiSquareTest.java"
    },
    {
      "RandomStraightLinePointGenerator": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java"
    },
    {
      "TestProblem1": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/TestProblem1.java"
    },
    {
      "TestProblem4": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/TestProblem4.java"
    },
    {
      "ListUnivariateImpl": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/descriptive/ListUnivariateImpl.java"
    },
    {
      "CircleVectorial": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java"
    },
    {
      "StatisticalReferenceDatasetFactory": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java"
    },
    {
      "AbstractUnivariateStatistic": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/descriptive/AbstractUnivariateStatistic.java"
    },
    {
      "HermiteTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java"
    },
    {
      "OverlappingEventsTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/events/OverlappingEventsTest.java"
    },
    {
      "LowDiscrepancyGeneratorComparison": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/userguide/LowDiscrepancyGeneratorComparison.java"
    },
    {
      "StraightLineProblem": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/StraightLineProblem.java"
    },
    {
      "SimplexOptimizerMultiDirectionalTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java"
    },
    {
      "FrenchComplexFormatTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/complex/FrenchComplexFormatTest.java"
    },
    {
      "EigenSolverTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/EigenSolverTest.java"
    },
    {
      "DummyRandomKey": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/genetics/DummyRandomKey.java"
    },
    {
      "RandomCirclePointGenerator": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/RandomCirclePointGenerator.java"
    },
    {
      "HermiteParametricTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java"
    },
    {
      "RandomGeneratorAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/RandomGeneratorAbstractTest.java"
    },
    {
      "CircleVectorial": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java"
    },
    {
      "RandomCirclePointGenerator": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java"
    },
    {
      "QRSolverTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/QRSolverTest.java"
    },
    {
      "WilcoxonSignedRankTest": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/inference/WilcoxonSignedRankTest.java"
    },
    {
      "CircleScalar": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java"
    },
    {
      "CircleVectorial": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/CircleVectorial.java"
    },
    {
      "RetryRunnerTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/RetryRunnerTest.java"
    },
    {
      "XMinus5Function": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/XMinus5Function.java"
    },
    {
      "MannWhitneyUTest": "../../defects4j-subjects/Math-2f/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java"
    },
    {
      "CholeskySolverTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/CholeskySolverTest.java"
    },
    {
      "ISAACTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/random/ISAACTest.java"
    },
    {
      "DummyStepInterpolatorTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/sampling/DummyStepInterpolatorTest.java"
    },
    {
      "CircleProblem": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/CircleProblem.java"
    },
    {
      "LegendreHighPrecisionParametricTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java"
    },
    {
      "MinpackTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java"
    },
    {
      "SingularValueSolverTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/SingularValueSolverTest.java"
    },
    {
      "StraightLineProblem": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java"
    },
    {
      "FieldLUSolverTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/FieldLUSolverTest.java"
    },
    {
      "UnmodifiableOpenMapRealVectorTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/linear/UnmodifiableOpenMapRealVectorTest.java"
    },
    {
      "TestProblem3": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/TestProblem3.java"
    },
    {
      "StepNormalizerOutputTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/sampling/StepNormalizerOutputTest.java"
    },
    {
      "StraightLineProblem": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java"
    },
    {
      "TestProblemFactory": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/ode/TestProblemFactory.java"
    },
    {
      "CertifiedDataTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/CertifiedDataTest.java"
    },
    {
      "RealTransformerAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/transform/RealTransformerAbstractTest.java"
    },
    {
      "FrenchVector3DFormatTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/FrenchVector3DFormatTest.java"
    },
    {
      "FastMathStrictComparisonTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/FastMathStrictComparisonTest.java"
    },
    {
      "DoubleArrayAbstractTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/util/DoubleArrayAbstractTest.java"
    },
    {
      "WilcoxonSignedRankTestTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/inference/WilcoxonSignedRankTestTest.java"
    },
    {
      "MinpackTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java"
    },
    {
      "AbstractLeastSquaresOptimizerTestValidation": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java"
    },
    {
      "LewTest": "../../defects4j-subjects/Math-2f/src/test/java/org/apache/commons/math3/stat/data/LewTest.java"
    }
  ]
}