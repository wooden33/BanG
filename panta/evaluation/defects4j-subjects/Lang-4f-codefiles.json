{
  "src_test_exact_match": [
    {
      "src_name": "MutableTriple",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java",
      "class_declaration": "public class MutableTriple <L, M, R> extends Triple<L, M, R> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java"
    },
    {
      "src_name": "WordUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/WordUtils.java",
      "class_declaration": "public class WordUtils ",
      "methods_under_test": {
        "=1": {
          "WordUtils.wrap(final, String, final, int)": [
            1,
            1,
            1
          ],
          "WordUtils.capitalizeFully(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "WordUtils.wrap(final, String, int, String, final, boolean)": [
            9,
            9,
            9
          ],
          "WordUtils.capitalize(final, String)": [
            5,
            5,
            5
          ],
          "WordUtils.capitalizeFully(String)": [
            2,
            2,
            2
          ],
          "WordUtils.uncapitalize(final, String)": [
            5,
            5,
            5
          ],
          "WordUtils.swapCase(final, String)": [
            7,
            7,
            7
          ],
          "WordUtils.initials(final, String)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java"
    },
    {
      "src_name": "ToStringBuilder",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java",
      "class_declaration": "public class ToStringBuilder implements Builder<String> ",
      "methods_under_test": {
        "=1": {
          "ToStringBuilder.reflectionToString(final, Object)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.reflectionToString(final, Object, final, ToStringStyle)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.reflectionToString(final, Object, final, ToStringStyle, final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.reflectionToString(final, T, final, ToStringStyle, final, boolean, final, Class<? super T>)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, boolean[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, byte)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, byte[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, char)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, char[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, double)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, double[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, float)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, float[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, int)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, int[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, long)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, long[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, Object)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, Object[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, short)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, short[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, boolean[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, boolean[], final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, byte)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, byte[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, byte[], final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, char)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, char[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, char[], final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, double)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, double[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, double[], final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, float)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, float[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, float[], final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, int)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, int[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, int[], final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, long)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, long[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, long[], final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, Object)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, Object, final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, Object[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, Object[], final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, short)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, short[])": [
            1,
            1,
            1
          ],
          "ToStringBuilder.append(final, String, final, short[], final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.appendAsObjectToString(final, Object)": [
            1,
            1,
            1
          ],
          "ToStringBuilder.build()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ToStringBuilder.setDefaultStyle(final, ToStringStyle)": [
            2,
            2,
            2
          ],
          "ToStringBuilder.appendSuper(final, String)": [
            2,
            2,
            2
          ],
          "ToStringBuilder.appendToString(final, String)": [
            2,
            2,
            2
          ],
          "ToStringBuilder.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java"
    },
    {
      "src_name": "MutableFloat",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java",
      "class_declaration": "public class MutableFloat extends Number implements Comparable<MutableFloat>, Mutable<Number> ",
      "methods_under_test": {
        "=1": {
          "MutableFloat.setValue(final, float)": [
            1,
            1,
            1
          ],
          "MutableFloat.setValue(final, Number)": [
            1,
            1,
            1
          ],
          "MutableFloat.increment()": [
            1,
            1,
            1
          ],
          "MutableFloat.decrement()": [
            1,
            1,
            1
          ],
          "MutableFloat.add(final, float)": [
            1,
            1,
            1
          ],
          "MutableFloat.add(final, Number)": [
            1,
            1,
            1
          ],
          "MutableFloat.subtract(final, float)": [
            1,
            1,
            1
          ],
          "MutableFloat.subtract(final, Number)": [
            1,
            1,
            1
          ],
          "MutableFloat.intValue()": [
            1,
            1,
            1
          ],
          "MutableFloat.longValue()": [
            1,
            1,
            1
          ],
          "MutableFloat.floatValue()": [
            1,
            1,
            1
          ],
          "MutableFloat.doubleValue()": [
            1,
            1,
            1
          ],
          "MutableFloat.toFloat()": [
            1,
            1,
            1
          ],
          "MutableFloat.equals(final, Object)": [
            1,
            1,
            1
          ],
          "MutableFloat.hashCode()": [
            1,
            1,
            1
          ],
          "MutableFloat.compareTo(final, MutableFloat)": [
            1,
            1,
            1
          ],
          "MutableFloat.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java"
    },
    {
      "src_name": "StringUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/StringUtils.java",
      "class_declaration": "public class StringUtils ",
      "methods_under_test": {
        "=1": {
          "StringUtils.isEmpty(final, CharSequence)": [
            1,
            1,
            1
          ],
          "StringUtils.isNotEmpty(final, CharSequence)": [
            1,
            1,
            1
          ],
          "StringUtils.isNotBlank(final, CharSequence)": [
            1,
            1,
            1
          ],
          "StringUtils.trim(final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.trimToNull(final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.trimToEmpty(final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.strip(final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.stripToEmpty(final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.stripAll()": [
            1,
            1,
            1
          ],
          "StringUtils.ordinalIndexOf(final, CharSequence, final, CharSequence, final, int)": [
            1,
            1,
            1
          ],
          "StringUtils.indexOfIgnoreCase(final, CharSequence, final, CharSequence)": [
            1,
            1,
            1
          ],
          "StringUtils.lastOrdinalIndexOf(final, CharSequence, final, CharSequence, final, int)": [
            1,
            1,
            1
          ],
          "StringUtils.substringBetween(final, String, final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.split(final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.split(final, String, final, char)": [
            1,
            1,
            1
          ],
          "StringUtils.split(final, String, final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.split(final, String, final, String, final, int)": [
            1,
            1,
            1
          ],
          "StringUtils.splitByWholeSeparator(final, String, final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.splitByWholeSeparator(final, String, final, String, final, int)": [
            1,
            1,
            1
          ],
          "StringUtils.splitByWholeSeparatorPreserveAllTokens(final, String, final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.splitByWholeSeparatorPreserveAllTokens(final, String, final, String, final, int)": [
            1,
            1,
            1
          ],
          "StringUtils.splitPreserveAllTokens(final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.splitPreserveAllTokens(final, String, final, char)": [
            1,
            1,
            1
          ],
          "StringUtils.splitPreserveAllTokens(final, String, final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.splitPreserveAllTokens(final, String, final, String, final, int)": [
            1,
            1,
            1
          ],
          "StringUtils.splitByCharacterType(final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.splitByCharacterTypeCamelCase(final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.join()": [
            1,
            1,
            1
          ],
          "StringUtils.replaceOnce(final, String, final, String, final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.replacePattern(final, String, final, String, final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.removePattern(final, String, final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.replace(final, String, final, String, final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.replaceEach(final, String, final, String[], final, String[])": [
            1,
            1,
            1
          ],
          "StringUtils.replaceEachRepeatedly(final, String, final, String[], final, String[])": [
            1,
            1,
            1
          ],
          "StringUtils.chomp(final, String, final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.rightPad(final, String, final, int)": [
            1,
            1,
            1
          ],
          "StringUtils.leftPad(final, String, final, int)": [
            1,
            1,
            1
          ],
          "StringUtils.length(final, CharSequence)": [
            1,
            1,
            1
          ],
          "StringUtils.center(final, String, final, int)": [
            1,
            1,
            1
          ],
          "StringUtils.defaultString(final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.defaultString(final, String, final, String)": [
            1,
            1,
            1
          ],
          "StringUtils.defaultIfBlank(final, T, final, T)": [
            1,
            1,
            1
          ],
          "StringUtils.defaultIfEmpty(final, T, final, T)": [
            1,
            1,
            1
          ],
          "StringUtils.abbreviate(final, String, final, int)": [
            1,
            1,
            1
          ],
          "StringUtils.startsWith(final, CharSequence, final, CharSequence)": [
            1,
            1,
            1
          ],
          "StringUtils.startsWithIgnoreCase(final, CharSequence, final, CharSequence)": [
            1,
            1,
            1
          ],
          "StringUtils.endsWith(final, CharSequence, final, CharSequence)": [
            1,
            1,
            1
          ],
          "StringUtils.endsWithIgnoreCase(final, CharSequence, final, CharSequence)": [
            1,
            1,
            1
          ],
          "StringUtils.appendIfMissing(final, String, final, CharSequence)": [
            1,
            1,
            1
          ],
          "StringUtils.appendIfMissingIgnoreCase(final, String, final, CharSequence)": [
            1,
            1,
            1
          ],
          "StringUtils.prependIfMissing(final, String, final, CharSequence)": [
            1,
            1,
            1
          ],
          "StringUtils.prependIfMissingIgnoreCase(final, String, final, CharSequence)": [
            1,
            1,
            1
          ],
          "StringUtils.toString(final, byte[], final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StringUtils.isBlank(final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.stripToNull(String)": [
            2,
            2,
            2
          ],
          "StringUtils.strip(String, final, String)": [
            2,
            2,
            2
          ],
          "StringUtils.stripStart(final, String, final, String)": [
            6,
            6,
            6
          ],
          "StringUtils.stripEnd(final, String, final, String)": [
            6,
            6,
            6
          ],
          "StringUtils.stripAll(final, String[], final, String)": [
            3,
            3,
            3
          ],
          "StringUtils.stripAccents(final, String)": [
            2,
            2,
            2
          ],
          "StringUtils.equals(final, CharSequence, final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.equalsIgnoreCase(final, CharSequence, final, CharSequence)": [
            5,
            5,
            5
          ],
          "StringUtils.indexOf(final, CharSequence, final, int)": [
            2,
            2,
            2
          ],
          "StringUtils.indexOf(final, CharSequence, final, int, final, int)": [
            2,
            2,
            2
          ],
          "StringUtils.indexOf(final, CharSequence, final, CharSequence)": [
            2,
            2,
            2
          ],
          "StringUtils.indexOf(final, CharSequence, final, CharSequence, final, int)": [
            2,
            2,
            2
          ],
          "StringUtils.indexOfIgnoreCase(final, CharSequence, final, CharSequence, int)": [
            7,
            7,
            7
          ],
          "StringUtils.lastIndexOf(final, CharSequence, final, int)": [
            2,
            2,
            2
          ],
          "StringUtils.lastIndexOf(final, CharSequence, final, int, final, int)": [
            2,
            2,
            2
          ],
          "StringUtils.lastIndexOf(final, CharSequence, final, CharSequence)": [
            2,
            2,
            2
          ],
          "StringUtils.lastIndexOf(final, CharSequence, final, CharSequence, final, int)": [
            2,
            2,
            2
          ],
          "StringUtils.lastIndexOfIgnoreCase(final, CharSequence, final, CharSequence)": [
            2,
            2,
            2
          ],
          "StringUtils.lastIndexOfIgnoreCase(final, CharSequence, final, CharSequence, int)": [
            7,
            7,
            7
          ],
          "StringUtils.contains(final, CharSequence, final, int)": [
            2,
            2,
            2
          ],
          "StringUtils.contains(final, CharSequence, final, CharSequence)": [
            2,
            2,
            2
          ],
          "StringUtils.containsIgnoreCase(final, CharSequence, final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.containsWhitespace(final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.indexOfAny(final, CharSequence, final, String)": [
            2,
            2,
            2
          ],
          "StringUtils.containsAny(final, CharSequence)": [
            8,
            8,
            8
          ],
          "StringUtils.containsAny(final, CharSequence, final, CharSequence)": [
            2,
            2,
            2
          ],
          "StringUtils.indexOfAnyBut(final, CharSequence)": [
            7,
            7,
            7
          ],
          "StringUtils.indexOfAnyBut(final, CharSequence, final, CharSequence)": [
            6,
            6,
            6
          ],
          "StringUtils.containsOnly(final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.containsOnly(final, CharSequence, final, String)": [
            2,
            2,
            2
          ],
          "StringUtils.containsNone(final, CharSequence)": [
            8,
            8,
            8
          ],
          "StringUtils.containsNone(final, CharSequence, final, String)": [
            2,
            2,
            2
          ],
          "StringUtils.indexOfAny(final, CharSequence)": [
            6,
            6,
            6
          ],
          "StringUtils.lastIndexOfAny(final, CharSequence)": [
            5,
            5,
            5
          ],
          "StringUtils.substring(final, String, int)": [
            5,
            5,
            5
          ],
          "StringUtils.substring(final, String, int, int)": [
            8,
            8,
            8
          ],
          "StringUtils.left(final, String, final, int)": [
            4,
            4,
            4
          ],
          "StringUtils.right(final, String, final, int)": [
            4,
            4,
            4
          ],
          "StringUtils.mid(final, String, int, final, int)": [
            5,
            5,
            5
          ],
          "StringUtils.substringBefore(final, String, final, String)": [
            4,
            4,
            4
          ],
          "StringUtils.substringAfter(final, String, final, String)": [
            4,
            4,
            4
          ],
          "StringUtils.substringBeforeLast(final, String, final, String)": [
            3,
            3,
            3
          ],
          "StringUtils.substringAfterLast(final, String, final, String)": [
            4,
            4,
            4
          ],
          "StringUtils.substringBetween(final, String, final, String, final, String)": [
            4,
            4,
            4
          ],
          "StringUtils.substringsBetween(final, String, final, String, final, String)": [
            7,
            7,
            7
          ],
          "StringUtils.join(final, Object[], final, char)": [
            2,
            2,
            2
          ],
          "StringUtils.join(final, long[], final, char)": [
            2,
            2,
            2
          ],
          "StringUtils.join(final, int[], final, char)": [
            2,
            2,
            2
          ],
          "StringUtils.join(final, short[], final, char)": [
            2,
            2,
            2
          ],
          "StringUtils.join(final, byte[], final, char)": [
            2,
            2,
            2
          ],
          "StringUtils.join(final, char[], final, char)": [
            2,
            2,
            2
          ],
          "StringUtils.join(final, float[], final, char)": [
            2,
            2,
            2
          ],
          "StringUtils.join(final, double[], final, char)": [
            2,
            2,
            2
          ],
          "StringUtils.join(final, Object[], final, char, final, int, final, int)": [
            6,
            6,
            6
          ],
          "StringUtils.join(final, long[], final, char, final, int, final, int)": [
            5,
            5,
            5
          ],
          "StringUtils.join(final, int[], final, char, final, int, final, int)": [
            5,
            5,
            5
          ],
          "StringUtils.join(final, byte[], final, char, final, int, final, int)": [
            5,
            5,
            5
          ],
          "StringUtils.join(final, short[], final, char, final, int, final, int)": [
            5,
            5,
            5
          ],
          "StringUtils.join(final, char[], final, char, final, int, final, int)": [
            5,
            5,
            5
          ],
          "StringUtils.join(final, double[], final, char, final, int, final, int)": [
            5,
            5,
            5
          ],
          "StringUtils.join(final, float[], final, char, final, int, final, int)": [
            5,
            5,
            5
          ],
          "StringUtils.join(final, Object[], final, String)": [
            2,
            2,
            2
          ],
          "StringUtils.join(final, Object[], String, final, int, final, int)": [
            7,
            7,
            7
          ],
          "StringUtils.join(final, Iterator<?>, final, char)": [
            7,
            7,
            7
          ],
          "StringUtils.join(final, Iterator<?>, final, String)": [
            8,
            8,
            8
          ],
          "StringUtils.join(final, Iterable<?>, final, char)": [
            2,
            2,
            2
          ],
          "StringUtils.join(final, Iterable<?>, final, String)": [
            2,
            2,
            2
          ],
          "StringUtils.deleteWhitespace(final, String)": [
            5,
            5,
            5
          ],
          "StringUtils.removeStart(final, String, final, String)": [
            3,
            3,
            3
          ],
          "StringUtils.removeStartIgnoreCase(final, String, final, String)": [
            3,
            3,
            3
          ],
          "StringUtils.removeEnd(final, String, final, String)": [
            3,
            3,
            3
          ],
          "StringUtils.removeEndIgnoreCase(final, String, final, String)": [
            3,
            3,
            3
          ],
          "StringUtils.remove(final, String, final, String)": [
            2,
            2,
            2
          ],
          "StringUtils.remove(final, String, final, char)": [
            4,
            4,
            4
          ],
          "StringUtils.replace(final, String, final, String, final, String, int)": [
            5,
            5,
            5
          ],
          "StringUtils.replaceChars(final, String, final, char, final, char)": [
            2,
            2,
            2
          ],
          "StringUtils.replaceChars(final, String, final, String, String)": [
            7,
            7,
            7
          ],
          "StringUtils.overlay(final, String, String, int, int)": [
            8,
            8,
            8
          ],
          "StringUtils.chomp(final, String)": [
            7,
            7,
            7
          ],
          "StringUtils.chop(final, String)": [
            4,
            4,
            4
          ],
          "StringUtils.repeat(final, String, final, int)": [
            10,
            10,
            10
          ],
          "StringUtils.repeat(final, String, final, String, final, int)": [
            3,
            3,
            3
          ],
          "StringUtils.repeat(final, char, final, int)": [
            2,
            2,
            2
          ],
          "StringUtils.rightPad(final, String, final, int, final, char)": [
            4,
            4,
            4
          ],
          "StringUtils.rightPad(final, String, final, int, String)": [
            9,
            9,
            9
          ],
          "StringUtils.leftPad(final, String, final, int, final, char)": [
            4,
            4,
            4
          ],
          "StringUtils.leftPad(final, String, final, int, String)": [
            9,
            9,
            9
          ],
          "StringUtils.center(String, final, int, final, char)": [
            3,
            3,
            3
          ],
          "StringUtils.center(String, final, int, String)": [
            4,
            4,
            4
          ],
          "StringUtils.upperCase(final, String)": [
            2,
            2,
            2
          ],
          "StringUtils.upperCase(final, String, final, Locale)": [
            2,
            2,
            2
          ],
          "StringUtils.lowerCase(final, String)": [
            2,
            2,
            2
          ],
          "StringUtils.lowerCase(final, String, final, Locale)": [
            2,
            2,
            2
          ],
          "StringUtils.capitalize(final, String)": [
            2,
            2,
            2
          ],
          "StringUtils.uncapitalize(final, String)": [
            2,
            2,
            2
          ],
          "StringUtils.swapCase(final, String)": [
            6,
            6,
            6
          ],
          "StringUtils.countMatches(final, CharSequence, final, CharSequence)": [
            3,
            3,
            3
          ],
          "StringUtils.isAlpha(final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.isAlphaSpace(final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.isAlphanumeric(final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.isAlphanumericSpace(final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.isAsciiPrintable(final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.isNumeric(final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.isNumericSpace(final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.isWhitespace(final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.isAllLowerCase(final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.isAllUpperCase(final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.reverse(final, String)": [
            2,
            2,
            2
          ],
          "StringUtils.reverseDelimited(final, String, final, char)": [
            2,
            2,
            2
          ],
          "StringUtils.abbreviate(final, String, int, final, int)": [
            9,
            9,
            9
          ],
          "StringUtils.abbreviateMiddle(final, String, final, String, final, int)": [
            3,
            3,
            3
          ],
          "StringUtils.difference(final, String, final, String)": [
            4,
            4,
            4
          ],
          "StringUtils.indexOfDifference(final, CharSequence, final, CharSequence)": [
            6,
            6,
            6
          ],
          "StringUtils.getCommonPrefix()": [
            6,
            6,
            6
          ],
          "StringUtils.getLevenshteinDistance(CharSequence, CharSequence)": [
            8,
            8,
            8
          ],
          "StringUtils.startsWithAny(final, CharSequence)": [
            4,
            4,
            4
          ],
          "StringUtils.normalizeSpace(final, String)": [
            2,
            2,
            2
          ],
          "StringUtils.endsWithAny(final, CharSequence)": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "StringUtils.indexOfDifference()": [
            11,
            11,
            11
          ],
          "StringUtils.getLevenshteinDistance(CharSequence, CharSequence, final, int)": [
            14,
            14,
            14
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
    },
    {
      "src_name": "LookupTranslator",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
      "class_declaration": "public class LookupTranslator extends CharSequenceTranslator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "LookupTranslator.translate(final, CharSequence, final, int, final, Writer)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java"
    },
    {
      "src_name": "Conversion",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/Conversion.java",
      "class_declaration": "public class Conversion ",
      "methods_under_test": {
        "=1": {
          "Conversion.binaryToHexDigit(final, boolean[])": [
            1,
            1,
            1
          ],
          "Conversion.binaryToHexDigitMsb0_4bits(final, boolean[])": [
            1,
            1,
            1
          ],
          "Conversion.binaryBeMsb0ToHexDigit(final, boolean[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Conversion.hexDigitToInt(final, char)": [
            2,
            2,
            2
          ],
          "Conversion.intToHexDigit(final, int)": [
            2,
            2,
            2
          ],
          "Conversion.intArrayToLong(final, int[], final, int, final, long, final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.shortArrayToLong(final, short[], final, int, final, long, final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.shortArrayToInt(final, short[], final, int, final, int, final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.byteArrayToLong(final, byte[], final, int, final, long, final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.byteArrayToInt(final, byte[], final, int, final, int, final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.byteArrayToShort(final, byte[], final, int, final, short, final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.hexToLong(final, String, final, int, final, long, final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.hexToInt(final, String, final, int, final, int, final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.hexToShort(final, String, final, int, final, short, final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.hexToByte(final, String, final, int, final, byte, final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.binaryToLong(final, boolean[], final, int, final, long, final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.binaryToInt(final, boolean[], final, int, final, int, final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.binaryToShort(final, boolean[], final, int, final, short, final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.binaryToByte(final, boolean[], final, int, final, byte, final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.longToIntArray(final, long, final, int, final, int[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.longToShortArray(final, long, final, int, final, short[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.intToShortArray(final, int, final, int, final, short[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.longToByteArray(final, long, final, int, final, byte[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.intToByteArray(final, int, final, int, final, byte[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.shortToByteArray(final, short, final, int, final, byte[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.longToHex(final, long, final, int, final, String, final, int, final, int)": [
            5,
            5,
            5
          ],
          "Conversion.intToHex(final, int, final, int, final, String, final, int, final, int)": [
            5,
            5,
            5
          ],
          "Conversion.shortToHex(final, short, final, int, final, String, final, int, final, int)": [
            5,
            5,
            5
          ],
          "Conversion.byteToHex(final, byte, final, int, final, String, final, int, final, int)": [
            5,
            5,
            5
          ],
          "Conversion.longToBinary(final, long, final, int, final, boolean[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.intToBinary(final, int, final, int, final, boolean[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.shortToBinary(final, short, final, int, final, boolean[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.byteToBinary(final, byte, final, int, final, boolean[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.uuidToByteArray(final, UUID, final, byte[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "Conversion.byteArrayToUuid(final, byte[], final, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "Conversion.binaryToHexDigit(final, boolean[], final, int)": [
            18,
            18,
            18
          ],
          "Conversion.binaryToHexDigitMsb0_4bits(final, boolean[], final, int)": [
            19,
            19,
            19
          ],
          "Conversion.binaryBeMsb0ToHexDigit(boolean[], int)": [
            18,
            18,
            18
          ],
          "Conversion.intToHexDigitMsb0(final, int)": [
            17,
            17,
            17
          ]
        },
        ">20": {
          "Conversion.hexDigitMsb0ToInt(final, char)": [
            23,
            23,
            23
          ],
          "Conversion.hexDigitToBinary(final, char)": [
            23,
            23,
            23
          ],
          "Conversion.hexDigitMsb0ToBinary(final, char)": [
            23,
            23,
            23
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/ConversionTest.java"
    },
    {
      "src_name": "NumericEntityEscaper",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityEscaper.java",
      "class_declaration": "public class NumericEntityEscaper extends CodePointTranslator ",
      "methods_under_test": {
        "=1": {
          "NumericEntityEscaper.below(final, int)": [
            1,
            1,
            1
          ],
          "NumericEntityEscaper.above(final, int)": [
            1,
            1,
            1
          ],
          "NumericEntityEscaper.between(final, int, final, int)": [
            1,
            1,
            1
          ],
          "NumericEntityEscaper.outsideOf(final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NumericEntityEscaper.translate(final, int, final, Writer)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityEscaperTest.java"
    },
    {
      "src_name": "BackgroundInitializer",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/concurrent/BackgroundInitializer.java",
      "class_declaration": "public abstract class BackgroundInitializer <T> implements\n        ConcurrentInitializer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BackgroundInitializer.setExternalExecutor(final, ExecutorService)": [
            2,
            2,
            2
          ],
          "BackgroundInitializer.start()": [
            3,
            3,
            3
          ],
          "BackgroundInitializer.get()": [
            3,
            3,
            3
          ],
          "BackgroundInitializer.getFuture()": [
            2,
            2,
            2
          ],
          "InitializationTask.call()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java"
    },
    {
      "src_name": "NumericEntityUnescaper",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
      "class_declaration": "public class NumericEntityUnescaper extends CharSequenceTranslator ",
      "methods_under_test": {
        "=1": {
          "NumericEntityUnescaper.isSet(final, OPTION)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {
          "NumericEntityUnescaper.translate(final, CharSequence, final, int, final, Writer)": [
            12,
            12,
            12
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java"
    },
    {
      "src_name": "StringEscapeUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
      "class_declaration": "public class StringEscapeUtils ",
      "methods_under_test": {
        "=1": {
          "StringEscapeUtils.escapeJava(final, String)": [
            1,
            1,
            1
          ],
          "StringEscapeUtils.escapeEcmaScript(final, String)": [
            1,
            1,
            1
          ],
          "StringEscapeUtils.escapeJson(final, String)": [
            1,
            1,
            1
          ],
          "StringEscapeUtils.unescapeJava(final, String)": [
            1,
            1,
            1
          ],
          "StringEscapeUtils.unescapeEcmaScript(final, String)": [
            1,
            1,
            1
          ],
          "StringEscapeUtils.unescapeJson(final, String)": [
            1,
            1,
            1
          ],
          "StringEscapeUtils.escapeHtml4(final, String)": [
            1,
            1,
            1
          ],
          "StringEscapeUtils.escapeHtml3(final, String)": [
            1,
            1,
            1
          ],
          "StringEscapeUtils.unescapeHtml4(final, String)": [
            1,
            1,
            1
          ],
          "StringEscapeUtils.unescapeHtml3(final, String)": [
            1,
            1,
            1
          ],
          "StringEscapeUtils.escapeXml(final, String)": [
            1,
            1,
            1
          ],
          "StringEscapeUtils.unescapeXml(final, String)": [
            1,
            1,
            1
          ],
          "StringEscapeUtils.escapeCsv(final, String)": [
            1,
            1,
            1
          ],
          "StringEscapeUtils.unescapeCsv(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CsvEscaper.translate(final, CharSequence, final, int, final, Writer)": [
            3,
            3,
            3
          ],
          "CsvUnescaper.translate(final, CharSequence, final, int, final, Writer)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java"
    },
    {
      "src_name": "ConstantInitializer",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/concurrent/ConstantInitializer.java",
      "class_declaration": "public class ConstantInitializer <T> implements ConcurrentInitializer<T> ",
      "methods_under_test": {
        "=1": {
          "ConstantInitializer.hashCode()": [
            1,
            1,
            1
          ],
          "ConstantInitializer.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ConstantInitializer.equals(final, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/concurrent/ConstantInitializerTest.java"
    },
    {
      "src_name": "BasicThreadFactory",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java",
      "class_declaration": "public class BasicThreadFactory implements ThreadFactory ",
      "methods_under_test": {
        "=1": {
          "BasicThreadFactory.newThread(final, Runnable)": [
            1,
            1,
            1
          ],
          "Builder.daemon(final, boolean)": [
            1,
            1,
            1
          ],
          "Builder.priority(final, int)": [
            1,
            1,
            1
          ],
          "Builder.reset()": [
            1,
            1,
            1
          ],
          "Builder.build()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Builder.wrappedFactory(final, ThreadFactory)": [
            2,
            2,
            2
          ],
          "Builder.namingPattern(final, String)": [
            2,
            2,
            2
          ],
          "Builder.uncaughtExceptionHandler(final, Thread.UncaughtExceptionHandler)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java"
    },
    {
      "src_name": "DateFormatUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/time/DateFormatUtils.java",
      "class_declaration": "public class DateFormatUtils ",
      "methods_under_test": {
        "=1": {
          "DateFormatUtils.formatUTC(final, long, final, String)": [
            1,
            1,
            1
          ],
          "DateFormatUtils.formatUTC(final, Date, final, String)": [
            1,
            1,
            1
          ],
          "DateFormatUtils.formatUTC(final, long, final, String, final, Locale)": [
            1,
            1,
            1
          ],
          "DateFormatUtils.formatUTC(final, Date, final, String, final, Locale)": [
            1,
            1,
            1
          ],
          "DateFormatUtils.format(final, long, final, String)": [
            1,
            1,
            1
          ],
          "DateFormatUtils.format(final, Date, final, String)": [
            1,
            1,
            1
          ],
          "DateFormatUtils.format(final, Calendar, final, String)": [
            1,
            1,
            1
          ],
          "DateFormatUtils.format(final, long, final, String, final, TimeZone)": [
            1,
            1,
            1
          ],
          "DateFormatUtils.format(final, Date, final, String, final, TimeZone)": [
            1,
            1,
            1
          ],
          "DateFormatUtils.format(final, Calendar, final, String, final, TimeZone)": [
            1,
            1,
            1
          ],
          "DateFormatUtils.format(final, long, final, String, final, Locale)": [
            1,
            1,
            1
          ],
          "DateFormatUtils.format(final, Date, final, String, final, Locale)": [
            1,
            1,
            1
          ],
          "DateFormatUtils.format(final, Calendar, final, String, final, Locale)": [
            1,
            1,
            1
          ],
          "DateFormatUtils.format(final, long, final, String, final, TimeZone, final, Locale)": [
            1,
            1,
            1
          ],
          "DateFormatUtils.format(final, Date, final, String, final, TimeZone, final, Locale)": [
            1,
            1,
            1
          ],
          "DateFormatUtils.format(final, Calendar, final, String, final, TimeZone, final, Locale)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java"
    },
    {
      "src_name": "CharSequenceUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java",
      "class_declaration": "public class CharSequenceUtils ",
      "methods_under_test": {
        "=1": {
          "CharSequenceUtils.subSequence(final, CharSequence, final, int)": [
            1,
            1,
            1
          ],
          "CharSequenceUtils.indexOf(final, CharSequence, final, CharSequence, final, int)": [
            1,
            1,
            1
          ],
          "CharSequenceUtils.lastIndexOf(final, CharSequence, final, CharSequence, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CharSequenceUtils.indexOf(final, CharSequence, final, int, int)": [
            6,
            6,
            6
          ],
          "CharSequenceUtils.lastIndexOf(final, CharSequence, final, int, int)": [
            7,
            7,
            7
          ],
          "CharSequenceUtils.toCharArray(final, CharSequence)": [
            4,
            4,
            4
          ],
          "CharSequenceUtils.regionMatches(final, CharSequence, final, boolean, final, int, final, CharSequence, final, int, final, int)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java"
    },
    {
      "src_name": "JavaVersion",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/JavaVersion.java",
      "error": "local variable 'class_name' referenced before assignment",
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/JavaVersionTest.java"
    },
    {
      "src_name": "BooleanUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/BooleanUtils.java",
      "class_declaration": "public class BooleanUtils ",
      "methods_under_test": {
        "=1": {
          "BooleanUtils.isTrue(final, Boolean)": [
            1,
            1,
            1
          ],
          "BooleanUtils.isNotTrue(final, Boolean)": [
            1,
            1,
            1
          ],
          "BooleanUtils.isFalse(final, Boolean)": [
            1,
            1,
            1
          ],
          "BooleanUtils.isNotFalse(final, Boolean)": [
            1,
            1,
            1
          ],
          "BooleanUtils.toBoolean(final, Boolean)": [
            1,
            1,
            1
          ],
          "BooleanUtils.toBoolean(final, int)": [
            1,
            1,
            1
          ],
          "BooleanUtils.toBooleanObject(final, int)": [
            1,
            1,
            1
          ],
          "BooleanUtils.toInteger(final, boolean)": [
            1,
            1,
            1
          ],
          "BooleanUtils.toIntegerObject(final, boolean)": [
            1,
            1,
            1
          ],
          "BooleanUtils.toInteger(final, boolean, final, int, final, int)": [
            1,
            1,
            1
          ],
          "BooleanUtils.toIntegerObject(final, boolean, final, Integer, final, Integer)": [
            1,
            1,
            1
          ],
          "BooleanUtils.toBoolean(final, String)": [
            1,
            1,
            1
          ],
          "BooleanUtils.toStringTrueFalse(final, Boolean)": [
            1,
            1,
            1
          ],
          "BooleanUtils.toStringOnOff(final, Boolean)": [
            1,
            1,
            1
          ],
          "BooleanUtils.toStringYesNo(final, Boolean)": [
            1,
            1,
            1
          ],
          "BooleanUtils.toStringTrueFalse(final, boolean)": [
            1,
            1,
            1
          ],
          "BooleanUtils.toStringOnOff(final, boolean)": [
            1,
            1,
            1
          ],
          "BooleanUtils.toStringYesNo(final, boolean)": [
            1,
            1,
            1
          ],
          "BooleanUtils.toString(final, boolean, final, String, final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BooleanUtils.negate(final, Boolean)": [
            2,
            2,
            2
          ],
          "BooleanUtils.toBooleanDefaultIfNull(final, Boolean, final, boolean)": [
            2,
            2,
            2
          ],
          "BooleanUtils.toBooleanObject(final, Integer)": [
            2,
            2,
            2
          ],
          "BooleanUtils.toBoolean(final, int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "BooleanUtils.toBoolean(final, Integer, final, Integer, final, Integer)": [
            6,
            6,
            6
          ],
          "BooleanUtils.toBooleanObject(final, int, final, int, final, int, final, int)": [
            4,
            4,
            4
          ],
          "BooleanUtils.toBooleanObject(final, Integer, final, Integer, final, Integer, final, Integer)": [
            8,
            8,
            8
          ],
          "BooleanUtils.toIntegerObject(final, Boolean)": [
            2,
            2,
            2
          ],
          "BooleanUtils.toInteger(final, Boolean, final, int, final, int, final, int)": [
            2,
            2,
            2
          ],
          "BooleanUtils.toIntegerObject(final, Boolean, final, Integer, final, Integer, final, Integer)": [
            2,
            2,
            2
          ],
          "BooleanUtils.toBooleanObject(final, String, final, String, final, String, final, String)": [
            8,
            8,
            8
          ],
          "BooleanUtils.toBoolean(final, String, final, String, final, String)": [
            6,
            6,
            6
          ],
          "BooleanUtils.toString(final, Boolean, final, String, final, String, final, String)": [
            2,
            2,
            2
          ],
          "BooleanUtils.and()": [
            4,
            4,
            4
          ],
          "BooleanUtils.or()": [
            4,
            4,
            4
          ],
          "BooleanUtils.xor()": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "BooleanUtils.toBooleanObject(final, String)": [
            16,
            16,
            16
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
    },
    {
      "src_name": "MutableLong",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/mutable/MutableLong.java",
      "class_declaration": "public class MutableLong extends Number implements Comparable<MutableLong>, Mutable<Number> ",
      "methods_under_test": {
        "=1": {
          "MutableLong.setValue(final, long)": [
            1,
            1,
            1
          ],
          "MutableLong.setValue(final, Number)": [
            1,
            1,
            1
          ],
          "MutableLong.increment()": [
            1,
            1,
            1
          ],
          "MutableLong.decrement()": [
            1,
            1,
            1
          ],
          "MutableLong.add(final, long)": [
            1,
            1,
            1
          ],
          "MutableLong.add(final, Number)": [
            1,
            1,
            1
          ],
          "MutableLong.subtract(final, long)": [
            1,
            1,
            1
          ],
          "MutableLong.subtract(final, Number)": [
            1,
            1,
            1
          ],
          "MutableLong.intValue()": [
            1,
            1,
            1
          ],
          "MutableLong.longValue()": [
            1,
            1,
            1
          ],
          "MutableLong.floatValue()": [
            1,
            1,
            1
          ],
          "MutableLong.doubleValue()": [
            1,
            1,
            1
          ],
          "MutableLong.toLong()": [
            1,
            1,
            1
          ],
          "MutableLong.hashCode()": [
            1,
            1,
            1
          ],
          "MutableLong.compareTo(final, MutableLong)": [
            1,
            1,
            1
          ],
          "MutableLong.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MutableLong.equals(final, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java"
    },
    {
      "src_name": "EnumUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/EnumUtils.java",
      "class_declaration": "public class EnumUtils ",
      "methods_under_test": {
        "=1": {
          "EnumUtils.getEnumList(final, Class<E>)": [
            1,
            1,
            1
          ],
          "EnumUtils.generateBitVector(final, Class<E>)": [
            1,
            1,
            1
          ],
          "EnumUtils.processBitVector(final, Class<E>, final, long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EnumUtils.getEnumMap(final, Class<E>)": [
            2,
            2,
            2
          ],
          "EnumUtils.isValidEnum(final, Class<E>, final, String)": [
            5,
            5,
            5
          ],
          "EnumUtils.getEnum(final, Class<E>, final, String)": [
            4,
            4,
            4
          ],
          "EnumUtils.generateBitVector(final, Class<E>, final, Iterable<E>)": [
            2,
            2,
            2
          ],
          "EnumUtils.generateBitVectors(final, Class<E>, final, Iterable<E>)": [
            3,
            3,
            3
          ],
          "EnumUtils.generateBitVectors(final, Class<E>)": [
            2,
            2,
            2
          ],
          "EnumUtils.processBitVectors(final, Class<E>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
    },
    {
      "src_name": "EqualsBuilder",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java",
      "class_declaration": "public class EqualsBuilder implements Builder<Boolean> ",
      "methods_under_test": {
        "=1": {
          "EqualsBuilder.getRegisterPair(final, Object, final, Object)": [
            1,
            1,
            1
          ],
          "EqualsBuilder.isRegistered(final, Object, final, Object)": [
            1,
            1,
            1
          ],
          "EqualsBuilder.reflectionEquals(final, Object, final, Object, final, Collection<String>)": [
            1,
            1,
            1
          ],
          "EqualsBuilder.reflectionEquals(final, Object, final, Object)": [
            1,
            1,
            1
          ],
          "EqualsBuilder.reflectionEquals(final, Object, final, Object, final, boolean)": [
            1,
            1,
            1
          ],
          "EqualsBuilder.build()": [
            1,
            1,
            1
          ],
          "EqualsBuilder.setEquals(final, boolean)": [
            1,
            1,
            1
          ],
          "EqualsBuilder.reset()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EqualsBuilder.register(final, Object, final, Object)": [
            3,
            3,
            3
          ],
          "EqualsBuilder.unregister(final, Object, final, Object)": [
            4,
            4,
            4
          ],
          "EqualsBuilder.appendSuper(final, boolean)": [
            2,
            2,
            2
          ],
          "EqualsBuilder.append(final, long, final, long)": [
            2,
            2,
            2
          ],
          "EqualsBuilder.append(final, int, final, int)": [
            2,
            2,
            2
          ],
          "EqualsBuilder.append(final, short, final, short)": [
            2,
            2,
            2
          ],
          "EqualsBuilder.append(final, char, final, char)": [
            2,
            2,
            2
          ],
          "EqualsBuilder.append(final, byte, final, byte)": [
            2,
            2,
            2
          ],
          "EqualsBuilder.append(final, double, final, double)": [
            2,
            2,
            2
          ],
          "EqualsBuilder.append(final, float, final, float)": [
            2,
            2,
            2
          ],
          "EqualsBuilder.append(final, boolean, final, boolean)": [
            2,
            2,
            2
          ],
          "EqualsBuilder.append(final, Object[], final, Object[])": [
            6,
            6,
            6
          ],
          "EqualsBuilder.append(final, long[], final, long[])": [
            6,
            6,
            6
          ],
          "EqualsBuilder.append(final, int[], final, int[])": [
            6,
            6,
            6
          ],
          "EqualsBuilder.append(final, short[], final, short[])": [
            6,
            6,
            6
          ],
          "EqualsBuilder.append(final, char[], final, char[])": [
            6,
            6,
            6
          ],
          "EqualsBuilder.append(final, byte[], final, byte[])": [
            6,
            6,
            6
          ],
          "EqualsBuilder.append(final, double[], final, double[])": [
            6,
            6,
            6
          ],
          "EqualsBuilder.append(final, float[], final, float[])": [
            6,
            6,
            6
          ],
          "EqualsBuilder.append(final, boolean[], final, boolean[])": [
            6,
            6,
            6
          ]
        },
        "11-20": {
          "EqualsBuilder.reflectionEquals(final, Object, final, Object, final, boolean, final, Class<?>)": [
            12,
            12,
            12
          ],
          "EqualsBuilder.append(final, Object, final, Object)": [
            14,
            14,
            14
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java"
    },
    {
      "src_name": "MutableByte",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/mutable/MutableByte.java",
      "class_declaration": "public class MutableByte extends Number implements Comparable<MutableByte>, Mutable<Number> ",
      "methods_under_test": {
        "=1": {
          "MutableByte.setValue(final, byte)": [
            1,
            1,
            1
          ],
          "MutableByte.setValue(final, Number)": [
            1,
            1,
            1
          ],
          "MutableByte.increment()": [
            1,
            1,
            1
          ],
          "MutableByte.decrement()": [
            1,
            1,
            1
          ],
          "MutableByte.add(final, byte)": [
            1,
            1,
            1
          ],
          "MutableByte.add(final, Number)": [
            1,
            1,
            1
          ],
          "MutableByte.subtract(final, byte)": [
            1,
            1,
            1
          ],
          "MutableByte.subtract(final, Number)": [
            1,
            1,
            1
          ],
          "MutableByte.byteValue()": [
            1,
            1,
            1
          ],
          "MutableByte.intValue()": [
            1,
            1,
            1
          ],
          "MutableByte.longValue()": [
            1,
            1,
            1
          ],
          "MutableByte.floatValue()": [
            1,
            1,
            1
          ],
          "MutableByte.doubleValue()": [
            1,
            1,
            1
          ],
          "MutableByte.toByte()": [
            1,
            1,
            1
          ],
          "MutableByte.hashCode()": [
            1,
            1,
            1
          ],
          "MutableByte.compareTo(final, MutableByte)": [
            1,
            1,
            1
          ],
          "MutableByte.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MutableByte.equals(final, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java"
    },
    {
      "src_name": "CompositeFormat",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/CompositeFormat.java",
      "class_declaration": "public class CompositeFormat extends Format ",
      "methods_under_test": {
        "=1": {
          "CompositeFormat.format(final, Object, final, StringBuffer, final, FieldPosition)": [
            1,
            1,
            1
          ],
          "CompositeFormat.parseObject(final, String, final, ParsePosition)": [
            1,
            1,
            1
          ],
          "CompositeFormat.reformat(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/CompositeFormatTest.java"
    },
    {
      "src_name": "CharSetUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/CharSetUtils.java",
      "class_declaration": "public class CharSetUtils ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "CharSetUtils.squeeze(final, String)": [
            4,
            4,
            4
          ],
          "CharSetUtils.containsAny(final, String)": [
            4,
            4,
            4
          ],
          "CharSetUtils.count(final, String)": [
            4,
            4,
            4
          ],
          "CharSetUtils.keep(final, String)": [
            3,
            3,
            3
          ],
          "CharSetUtils.delete(final, String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
    },
    {
      "src_name": "MutableShort",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/mutable/MutableShort.java",
      "class_declaration": "public class MutableShort extends Number implements Comparable<MutableShort>, Mutable<Number> ",
      "methods_under_test": {
        "=1": {
          "MutableShort.setValue(final, short)": [
            1,
            1,
            1
          ],
          "MutableShort.setValue(final, Number)": [
            1,
            1,
            1
          ],
          "MutableShort.increment()": [
            1,
            1,
            1
          ],
          "MutableShort.decrement()": [
            1,
            1,
            1
          ],
          "MutableShort.add(final, short)": [
            1,
            1,
            1
          ],
          "MutableShort.add(final, Number)": [
            1,
            1,
            1
          ],
          "MutableShort.subtract(final, short)": [
            1,
            1,
            1
          ],
          "MutableShort.subtract(final, Number)": [
            1,
            1,
            1
          ],
          "MutableShort.shortValue()": [
            1,
            1,
            1
          ],
          "MutableShort.intValue()": [
            1,
            1,
            1
          ],
          "MutableShort.longValue()": [
            1,
            1,
            1
          ],
          "MutableShort.floatValue()": [
            1,
            1,
            1
          ],
          "MutableShort.doubleValue()": [
            1,
            1,
            1
          ],
          "MutableShort.toShort()": [
            1,
            1,
            1
          ],
          "MutableShort.hashCode()": [
            1,
            1,
            1
          ],
          "MutableShort.compareTo(final, MutableShort)": [
            1,
            1,
            1
          ],
          "MutableShort.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MutableShort.equals(final, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java"
    },
    {
      "src_name": "NumberUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
      "class_declaration": "public class NumberUtils ",
      "methods_under_test": {
        "=1": {
          "NumberUtils.toInt(final, String)": [
            1,
            1,
            1
          ],
          "NumberUtils.toLong(final, String)": [
            1,
            1,
            1
          ],
          "NumberUtils.toFloat(final, String)": [
            1,
            1,
            1
          ],
          "NumberUtils.toDouble(final, String)": [
            1,
            1,
            1
          ],
          "NumberUtils.toByte(final, String)": [
            1,
            1,
            1
          ],
          "NumberUtils.toShort(final, String)": [
            1,
            1,
            1
          ],
          "NumberUtils.min(final, double, final, double, final, double)": [
            1,
            1,
            1
          ],
          "NumberUtils.min(final, float, final, float, final, float)": [
            1,
            1,
            1
          ],
          "NumberUtils.max(final, double, final, double, final, double)": [
            1,
            1,
            1
          ],
          "NumberUtils.max(final, float, final, float, final, float)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NumberUtils.toInt(final, String, final, int)": [
            4,
            4,
            4
          ],
          "NumberUtils.toLong(final, String, final, long)": [
            4,
            4,
            4
          ],
          "NumberUtils.toFloat(final, String, final, float)": [
            4,
            4,
            4
          ],
          "NumberUtils.toDouble(final, String, final, double)": [
            4,
            4,
            4
          ],
          "NumberUtils.toByte(final, String, final, byte)": [
            4,
            4,
            4
          ],
          "NumberUtils.toShort(final, String, final, short)": [
            4,
            4,
            4
          ],
          "NumberUtils.createFloat(final, String)": [
            2,
            2,
            2
          ],
          "NumberUtils.createDouble(final, String)": [
            2,
            2,
            2
          ],
          "NumberUtils.createInteger(final, String)": [
            2,
            2,
            2
          ],
          "NumberUtils.createLong(final, String)": [
            2,
            2,
            2
          ],
          "NumberUtils.createBigInteger(final, String)": [
            6,
            6,
            6
          ],
          "NumberUtils.createBigDecimal(final, String)": [
            4,
            4,
            4
          ],
          "NumberUtils.min(final, long[])": [
            3,
            3,
            3
          ],
          "NumberUtils.min(final, int[])": [
            3,
            3,
            3
          ],
          "NumberUtils.min(final, short[])": [
            3,
            3,
            3
          ],
          "NumberUtils.min(final, byte[])": [
            3,
            3,
            3
          ],
          "NumberUtils.min(final, double[])": [
            4,
            4,
            4
          ],
          "NumberUtils.min(final, float[])": [
            4,
            4,
            4
          ],
          "NumberUtils.max(final, long[])": [
            3,
            3,
            3
          ],
          "NumberUtils.max(final, int[])": [
            3,
            3,
            3
          ],
          "NumberUtils.max(final, short[])": [
            3,
            3,
            3
          ],
          "NumberUtils.max(final, byte[])": [
            3,
            3,
            3
          ],
          "NumberUtils.max(final, double[])": [
            4,
            4,
            4
          ],
          "NumberUtils.max(final, float[])": [
            4,
            4,
            4
          ],
          "NumberUtils.min(long, final, long, final, long)": [
            3,
            3,
            3
          ],
          "NumberUtils.min(int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "NumberUtils.min(short, final, short, final, short)": [
            3,
            3,
            3
          ],
          "NumberUtils.min(byte, final, byte, final, byte)": [
            3,
            3,
            3
          ],
          "NumberUtils.max(long, final, long, final, long)": [
            3,
            3,
            3
          ],
          "NumberUtils.max(int, final, int, final, int)": [
            3,
            3,
            3
          ],
          "NumberUtils.max(short, final, short, final, short)": [
            3,
            3,
            3
          ],
          "NumberUtils.max(byte, final, byte, final, byte)": [
            3,
            3,
            3
          ],
          "NumberUtils.isDigits(final, String)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {
          "NumberUtils.createNumber(final, String)": [
            48,
            48,
            48
          ],
          "NumberUtils.isNumber(final, String)": [
            22,
            22,
            22
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
    },
    {
      "src_name": "ExceptionUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java",
      "class_declaration": "public class ExceptionUtils ",
      "methods_under_test": {
        "=1": {
          "ExceptionUtils.getCause(final, Throwable)": [
            1,
            1,
            1
          ],
          "ExceptionUtils.getRootCause(final, Throwable)": [
            1,
            1,
            1
          ],
          "ExceptionUtils.getThrowableCount(final, Throwable)": [
            1,
            1,
            1
          ],
          "ExceptionUtils.getThrowables(final, Throwable)": [
            1,
            1,
            1
          ],
          "ExceptionUtils.indexOfThrowable(final, Throwable, final, Class<?>)": [
            1,
            1,
            1
          ],
          "ExceptionUtils.indexOfThrowable(final, Throwable, final, Class<?>, final, int)": [
            1,
            1,
            1
          ],
          "ExceptionUtils.indexOfType(final, Throwable, final, Class<?>)": [
            1,
            1,
            1
          ],
          "ExceptionUtils.indexOfType(final, Throwable, final, Class<?>, final, int)": [
            1,
            1,
            1
          ],
          "ExceptionUtils.printRootCauseStackTrace(final, Throwable)": [
            1,
            1,
            1
          ],
          "ExceptionUtils.getStackTrace(final, Throwable)": [
            1,
            1,
            1
          ],
          "ExceptionUtils.getRootCauseMessage(final, Throwable)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ExceptionUtils.getCause(final, Throwable, String[])": [
            6,
            6,
            6
          ],
          "ExceptionUtils.getThrowableList(Throwable)": [
            2,
            2,
            2
          ],
          "ExceptionUtils.printRootCauseStackTrace(final, Throwable, final, PrintStream)": [
            4,
            4,
            4
          ],
          "ExceptionUtils.printRootCauseStackTrace(final, Throwable, final, PrintWriter)": [
            4,
            4,
            4
          ],
          "ExceptionUtils.getRootCauseStackTrace(final, Throwable)": [
            6,
            6,
            6
          ],
          "ExceptionUtils.removeCommonFrames(final, List<String>, final, List<String>)": [
            2,
            2,
            2
          ],
          "ExceptionUtils.getStackFrames(final, Throwable)": [
            2,
            2,
            2
          ],
          "ExceptionUtils.getStackFrames(final, String)": [
            2,
            2,
            2
          ],
          "ExceptionUtils.getStackFrameList(final, Throwable)": [
            4,
            4,
            4
          ],
          "ExceptionUtils.getMessage(final, Throwable)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
    },
    {
      "src_name": "Range",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/Range.java",
      "class_declaration": "public final class Range <T> implements Serializable ",
      "methods_under_test": {
        "=1": {
          "Range.is(final, T)": [
            1,
            1,
            1
          ],
          "Range.is(final, T, final, Comparator<T>)": [
            1,
            1,
            1
          ],
          "Range.between(final, T, final, T)": [
            1,
            1,
            1
          ],
          "Range.between(final, T, final, T, final, Comparator<T>)": [
            1,
            1,
            1
          ],
          "Range.toString(final, String)": [
            1,
            1,
            1
          ],
          "Range.compare(final, Object, final, Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Range.contains(final, T)": [
            2,
            2,
            2
          ],
          "Range.isAfter(final, T)": [
            2,
            2,
            2
          ],
          "Range.isStartedBy(final, T)": [
            2,
            2,
            2
          ],
          "Range.isEndedBy(final, T)": [
            2,
            2,
            2
          ],
          "Range.isBefore(final, T)": [
            2,
            2,
            2
          ],
          "Range.elementCompareTo(final, T)": [
            5,
            5,
            5
          ],
          "Range.containsRange(final, Range<T>)": [
            2,
            2,
            2
          ],
          "Range.isAfterRange(final, Range<T>)": [
            2,
            2,
            2
          ],
          "Range.isOverlappedBy(final, Range<T>)": [
            2,
            2,
            2
          ],
          "Range.isBeforeRange(final, Range<T>)": [
            2,
            2,
            2
          ],
          "Range.intersectionWith(final, Range<T>)": [
            3,
            3,
            3
          ],
          "Range.equals(final, Object)": [
            4,
            4,
            4
          ],
          "Range.hashCode()": [
            2,
            2,
            2
          ],
          "Range.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/RangeTest.java"
    },
    {
      "src_name": "ContextedException",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/exception/ContextedException.java",
      "class_declaration": "public class ContextedException extends Exception implements ExceptionContext ",
      "methods_under_test": {
        "=1": {
          "ContextedException.addContextValue(final, String, final, Object)": [
            1,
            1,
            1
          ],
          "ContextedException.setContextValue(final, String, final, Object)": [
            1,
            1,
            1
          ],
          "ContextedException.getContextValues(final, String)": [
            1,
            1,
            1
          ],
          "ContextedException.getFirstContextValue(final, String)": [
            1,
            1,
            1
          ],
          "ContextedException.getFormattedExceptionMessage(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java"
    },
    {
      "src_name": "DurationFormatUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java",
      "class_declaration": "public class DurationFormatUtils ",
      "methods_under_test": {
        "=1": {
          "DurationFormatUtils.formatDurationHMS(final, long)": [
            1,
            1,
            1
          ],
          "DurationFormatUtils.formatDurationISO(final, long)": [
            1,
            1,
            1
          ],
          "DurationFormatUtils.formatDuration(final, long, final, String)": [
            1,
            1,
            1
          ],
          "DurationFormatUtils.formatPeriodISO(final, long, final, long)": [
            1,
            1,
            1
          ],
          "DurationFormatUtils.formatPeriod(final, long, final, long, final, String)": [
            1,
            1,
            1
          ],
          "Token.increment()": [
            1,
            1,
            1
          ],
          "Token.hashCode()": [
            1,
            1,
            1
          ],
          "Token.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DurationFormatUtils.formatDuration(long, final, String, final, boolean)": [
            6,
            6,
            6
          ],
          "DurationFormatUtils.formatDurationWords(final, long, final, boolean, final, boolean)": [
            10,
            10,
            10
          ],
          "Token.containsTokenWithValue(final, Token[], final, Object)": [
            3,
            3,
            3
          ],
          "Token.equals(final, Object)": [
            6,
            6,
            6
          ]
        },
        "11-20": {
          "DurationFormatUtils.formatPeriod(final, long, final, long, final, String, final, boolean, final, TimeZone)": [
            20,
            20,
            20
          ],
          "DurationFormatUtils.format(final, Token[], final, int, final, int, final, int, final, int, final, int, final, int, int, final, boolean)": [
            11,
            11,
            11
          ],
          "DurationFormatUtils.lexx(final, String)": [
            15,
            15,
            15
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java"
    },
    {
      "src_name": "Validate",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/Validate.java",
      "class_declaration": "public class Validate ",
      "methods_under_test": {
        "=1": {
          "Validate.isTrue(final, boolean, final, String, final, long)": [
            1,
            1,
            1
          ],
          "Validate.isTrue(final, boolean, final, String, final, double)": [
            1,
            1,
            1
          ],
          "Validate.isTrue(final, boolean, final, String)": [
            1,
            1,
            1
          ],
          "Validate.isTrue(final, boolean)": [
            1,
            1,
            1
          ],
          "Validate.notNull(final, T)": [
            1,
            1,
            1
          ],
          "Validate.notEmpty(final, T[])": [
            1,
            1,
            1
          ],
          "Validate.notEmpty(final, T)": [
            1,
            1,
            1
          ],
          "Validate.notBlank(final, T)": [
            1,
            1,
            1
          ],
          "Validate.noNullElements(final, T[])": [
            1,
            1,
            1
          ],
          "Validate.noNullElements(final, T)": [
            1,
            1,
            1
          ],
          "Validate.validIndex(final, T[], final, int)": [
            1,
            1,
            1
          ],
          "Validate.validIndex(final, T, final, int)": [
            1,
            1,
            1
          ],
          "Validate.validState(final, boolean)": [
            1,
            1,
            1
          ],
          "Validate.validState(final, boolean, final, String)": [
            1,
            1,
            1
          ],
          "Validate.matchesPattern(final, CharSequence, final, String)": [
            1,
            1,
            1
          ],
          "Validate.matchesPattern(final, CharSequence, final, String, final, String)": [
            1,
            1,
            1
          ],
          "Validate.inclusiveBetween(final, T, final, T, final, Comparable<T>)": [
            1,
            1,
            1
          ],
          "Validate.inclusiveBetween(final, T, final, T, final, Comparable<T>, final, String)": [
            1,
            1,
            1
          ],
          "Validate.exclusiveBetween(final, T, final, T, final, Comparable<T>)": [
            1,
            1,
            1
          ],
          "Validate.exclusiveBetween(final, T, final, T, final, Comparable<T>, final, String)": [
            1,
            1,
            1
          ],
          "Validate.isInstanceOf(final, Class<?>, final, Object)": [
            1,
            1,
            1
          ],
          "Validate.isInstanceOf(final, Class<?>, final, Object, final, String)": [
            1,
            1,
            1
          ],
          "Validate.isAssignableFrom(final, Class<?>, final, Class<?>)": [
            1,
            1,
            1
          ],
          "Validate.isAssignableFrom(final, Class<?>, final, Class<?>, final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Validate.notNull(final, T, final, String)": [
            2,
            2,
            2
          ],
          "Validate.notEmpty(final, T[], final, String)": [
            3,
            3,
            3
          ],
          "Validate.notEmpty(final, T, final, String)": [
            3,
            3,
            3
          ],
          "Validate.notBlank(final, T, final, String)": [
            3,
            3,
            3
          ],
          "Validate.noNullElements(final, T[], final, String)": [
            3,
            3,
            3
          ],
          "Validate.noNullElements(final, T, final, String)": [
            3,
            3,
            3
          ],
          "Validate.validIndex(final, T[], final, int, final, String)": [
            2,
            2,
            2
          ],
          "Validate.validIndex(final, T, final, int, final, String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/ValidateTest.java"
    },
    {
      "src_name": "AnnotationUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/AnnotationUtils.java",
      "class_declaration": "public class AnnotationUtils ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "AnnotationUtils.hashCode(final, Annotation)": [
            10,
            10,
            10
          ],
          "AnnotationUtils.toString(final, Annotation)": [
            5,
            5,
            5
          ],
          "AnnotationUtils.isValidAnnotationMemberType(Class<?>)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "AnnotationUtils.equals(final, Annotation, final, Annotation)": [
            19,
            19,
            19
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java"
    },
    {
      "src_name": "MutableDouble",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java",
      "class_declaration": "public class MutableDouble extends Number implements Comparable<MutableDouble>, Mutable<Number> ",
      "methods_under_test": {
        "=1": {
          "MutableDouble.setValue(final, double)": [
            1,
            1,
            1
          ],
          "MutableDouble.setValue(final, Number)": [
            1,
            1,
            1
          ],
          "MutableDouble.increment()": [
            1,
            1,
            1
          ],
          "MutableDouble.decrement()": [
            1,
            1,
            1
          ],
          "MutableDouble.add(final, double)": [
            1,
            1,
            1
          ],
          "MutableDouble.add(final, Number)": [
            1,
            1,
            1
          ],
          "MutableDouble.subtract(final, double)": [
            1,
            1,
            1
          ],
          "MutableDouble.subtract(final, Number)": [
            1,
            1,
            1
          ],
          "MutableDouble.intValue()": [
            1,
            1,
            1
          ],
          "MutableDouble.longValue()": [
            1,
            1,
            1
          ],
          "MutableDouble.floatValue()": [
            1,
            1,
            1
          ],
          "MutableDouble.doubleValue()": [
            1,
            1,
            1
          ],
          "MutableDouble.toDouble()": [
            1,
            1,
            1
          ],
          "MutableDouble.equals(final, Object)": [
            1,
            1,
            1
          ],
          "MutableDouble.hashCode()": [
            1,
            1,
            1
          ],
          "MutableDouble.compareTo(final, MutableDouble)": [
            1,
            1,
            1
          ],
          "MutableDouble.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java"
    },
    {
      "src_name": "CharRange",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/CharRange.java",
      "class_declaration": "final class CharRange implements Iterable<Character>, Serializable ",
      "methods_under_test": {
        "=1": {
          "CharRange.is(final, char)": [
            1,
            1,
            1
          ],
          "CharRange.isNot(final, char)": [
            1,
            1,
            1
          ],
          "CharRange.isIn(final, char, final, char)": [
            1,
            1,
            1
          ],
          "CharRange.isNotIn(final, char, final, char)": [
            1,
            1,
            1
          ],
          "CharRange.contains(final, char)": [
            1,
            1,
            1
          ],
          "CharRange.hashCode()": [
            1,
            1,
            1
          ],
          "CharRange.iterator()": [
            1,
            1,
            1
          ],
          "CharacterIterator.hasNext()": [
            1,
            1,
            1
          ],
          "CharacterIterator.remove()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CharRange.contains(final, CharRange)": [
            5,
            5,
            5
          ],
          "CharRange.equals(final, Object)": [
            3,
            3,
            3
          ],
          "CharRange.toString()": [
            4,
            4,
            4
          ],
          "CharacterIterator.next()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
    },
    {
      "src_name": "BitField",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/BitField.java",
      "class_declaration": "public class BitField ",
      "methods_under_test": {
        "=1": {
          "BitField.getValue(final, int)": [
            1,
            1,
            1
          ],
          "BitField.getShortValue(final, short)": [
            1,
            1,
            1
          ],
          "BitField.getRawValue(final, int)": [
            1,
            1,
            1
          ],
          "BitField.getShortRawValue(final, short)": [
            1,
            1,
            1
          ],
          "BitField.isSet(final, int)": [
            1,
            1,
            1
          ],
          "BitField.isAllSet(final, int)": [
            1,
            1,
            1
          ],
          "BitField.setValue(final, int, final, int)": [
            1,
            1,
            1
          ],
          "BitField.setShortValue(final, short, final, short)": [
            1,
            1,
            1
          ],
          "BitField.clear(final, int)": [
            1,
            1,
            1
          ],
          "BitField.clearShort(final, short)": [
            1,
            1,
            1
          ],
          "BitField.clearByte(final, byte)": [
            1,
            1,
            1
          ],
          "BitField.set(final, int)": [
            1,
            1,
            1
          ],
          "BitField.setShort(final, short)": [
            1,
            1,
            1
          ],
          "BitField.setByte(final, byte)": [
            1,
            1,
            1
          ],
          "BitField.setBoolean(final, int, final, boolean)": [
            1,
            1,
            1
          ],
          "BitField.setShortBoolean(final, short, final, boolean)": [
            1,
            1,
            1
          ],
          "BitField.setByteBoolean(final, byte, final, boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/BitFieldTest.java"
    },
    {
      "src_name": "ToStringStyle",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
      "class_declaration": "public abstract class ToStringStyle implements Serializable ",
      "methods_under_test": {
        "=1": {
          "ToStringStyle.isRegistered(final, Object)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendSuper(final, StringBuffer, final, String)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendCyclicObject(final, StringBuffer, final, String, final, Object)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, Object)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, Collection<?>)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, Map<?, ?>)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendSummary(final, StringBuffer, final, String, final, Object)": [
            1,
            1,
            1
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, long)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, long)": [
            1,
            1,
            1
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, int)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, int)": [
            1,
            1,
            1
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, short)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, short)": [
            1,
            1,
            1
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, byte)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, byte)": [
            1,
            1,
            1
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, char)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, char)": [
            1,
            1,
            1
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, double)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, double)": [
            1,
            1,
            1
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, float)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, float)": [
            1,
            1,
            1
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendSummary(final, StringBuffer, final, String, final, Object[])": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendSummary(final, StringBuffer, final, String, final, long[])": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendSummary(final, StringBuffer, final, String, final, int[])": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendSummary(final, StringBuffer, final, String, final, short[])": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendSummary(final, StringBuffer, final, String, final, byte[])": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendSummary(final, StringBuffer, final, String, final, char[])": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendSummary(final, StringBuffer, final, String, final, double[])": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendSummary(final, StringBuffer, final, String, final, float[])": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendSummary(final, StringBuffer, final, String, final, boolean[])": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendContentStart(final, StringBuffer)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendContentEnd(final, StringBuffer)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendNullText(final, StringBuffer, final, String)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendFieldSeparator(final, StringBuffer)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendFieldEnd(final, StringBuffer, final, String)": [
            1,
            1,
            1
          ],
          "ToStringStyle.appendSummarySize(final, StringBuffer, final, String, final, int)": [
            1,
            1,
            1
          ],
          "ToStringStyle.getShortClassName(final, Class<?>)": [
            1,
            1,
            1
          ],
          "ToStringStyle.setUseClassName(final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringStyle.setUseShortClassName(final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringStyle.setUseIdentityHashCode(final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringStyle.setUseFieldNames(final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringStyle.setDefaultFullDetail(final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringStyle.setArrayContentDetail(final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringStyle.setFieldSeparatorAtStart(final, boolean)": [
            1,
            1,
            1
          ],
          "ToStringStyle.setFieldSeparatorAtEnd(final, boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ToStringStyle.register(final, Object)": [
            3,
            3,
            3
          ],
          "ToStringStyle.unregister(final, Object)": [
            4,
            4,
            4
          ],
          "ToStringStyle.appendToString(final, StringBuffer, final, String)": [
            4,
            4,
            4
          ],
          "ToStringStyle.appendStart(final, StringBuffer, final, Object)": [
            3,
            3,
            3
          ],
          "ToStringStyle.appendEnd(final, StringBuffer, final, Object)": [
            2,
            2,
            2
          ],
          "ToStringStyle.removeLastFieldSeparator(final, StringBuffer)": [
            5,
            5,
            5
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, Object, final, Boolean)": [
            2,
            2,
            2
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, Object[], final, Boolean)": [
            3,
            3,
            3
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, Object[])": [
            4,
            4,
            4
          ],
          "ToStringStyle.reflectionAppendArrayDetail(final, StringBuffer, final, String, final, Object)": [
            4,
            4,
            4
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, long[], final, Boolean)": [
            3,
            3,
            3
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, long[])": [
            3,
            3,
            3
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, int[], final, Boolean)": [
            3,
            3,
            3
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, int[])": [
            3,
            3,
            3
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, short[], final, Boolean)": [
            3,
            3,
            3
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, short[])": [
            3,
            3,
            3
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, byte[], final, Boolean)": [
            3,
            3,
            3
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, byte[])": [
            3,
            3,
            3
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, char[], final, Boolean)": [
            3,
            3,
            3
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, char[])": [
            3,
            3,
            3
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, double[], final, Boolean)": [
            3,
            3,
            3
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, double[])": [
            3,
            3,
            3
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, float[], final, Boolean)": [
            3,
            3,
            3
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, float[])": [
            3,
            3,
            3
          ],
          "ToStringStyle.append(final, StringBuffer, final, String, final, boolean[], final, Boolean)": [
            3,
            3,
            3
          ],
          "ToStringStyle.appendDetail(final, StringBuffer, final, String, final, boolean[])": [
            3,
            3,
            3
          ],
          "ToStringStyle.appendClassName(final, StringBuffer, final, Object)": [
            3,
            3,
            3
          ],
          "ToStringStyle.appendIdentityHashCode(final, StringBuffer, final, Object)": [
            2,
            2,
            2
          ],
          "ToStringStyle.appendFieldStart(final, StringBuffer, final, String)": [
            2,
            2,
            2
          ],
          "ToStringStyle.isFullDetail(final, Boolean)": [
            2,
            2,
            2
          ],
          "ToStringStyle.setArrayStart(String)": [
            2,
            2,
            2
          ],
          "ToStringStyle.setArrayEnd(String)": [
            2,
            2,
            2
          ],
          "ToStringStyle.setArraySeparator(String)": [
            2,
            2,
            2
          ],
          "ToStringStyle.setContentStart(String)": [
            2,
            2,
            2
          ],
          "ToStringStyle.setContentEnd(String)": [
            2,
            2,
            2
          ],
          "ToStringStyle.setFieldNameValueSeparator(String)": [
            2,
            2,
            2
          ],
          "ToStringStyle.setFieldSeparator(String)": [
            2,
            2,
            2
          ],
          "ToStringStyle.setNullText(String)": [
            2,
            2,
            2
          ],
          "ToStringStyle.setSizeStartText(String)": [
            2,
            2,
            2
          ],
          "ToStringStyle.setSizeEndText(String)": [
            2,
            2,
            2
          ],
          "ToStringStyle.setSummaryObjectStartText(String)": [
            2,
            2,
            2
          ],
          "ToStringStyle.setSummaryObjectEndText(String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {
          "ToStringStyle.appendInternal(final, StringBuffer, final, String, final, Object, final, boolean)": [
            27,
            27,
            27
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java"
    },
    {
      "src_name": "ObjectUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/ObjectUtils.java",
      "class_declaration": "public class ObjectUtils ",
      "methods_under_test": {
        "=1": {
          "ObjectUtils.defaultIfNull(final, T, final, T)": [
            1,
            1,
            1
          ],
          "ObjectUtils.notEqual(final, Object, final, Object)": [
            1,
            1,
            1
          ],
          "ObjectUtils.hashCode(final, Object)": [
            1,
            1,
            1
          ],
          "ObjectUtils.toString(final, Object)": [
            1,
            1,
            1
          ],
          "ObjectUtils.toString(final, Object, final, String)": [
            1,
            1,
            1
          ],
          "ObjectUtils.compare(final, T, final, T)": [
            1,
            1,
            1
          ],
          "ObjectUtils.median()": [
            1,
            1,
            1
          ],
          "ObjectUtils.median(final, Comparator<T>)": [
            1,
            1,
            1
          ],
          "ObjectUtils.cloneIfPossible(final, T)": [
            1,
            1,
            1
          ],
          "ObjectUtils.CONST(final, boolean)": [
            1,
            1,
            1
          ],
          "ObjectUtils.CONST(final, byte)": [
            1,
            1,
            1
          ],
          "ObjectUtils.CONST(final, char)": [
            1,
            1,
            1
          ],
          "ObjectUtils.CONST(final, short)": [
            1,
            1,
            1
          ],
          "ObjectUtils.CONST(final, int)": [
            1,
            1,
            1
          ],
          "ObjectUtils.CONST(final, long)": [
            1,
            1,
            1
          ],
          "ObjectUtils.CONST(final, float)": [
            1,
            1,
            1
          ],
          "ObjectUtils.CONST(final, double)": [
            1,
            1,
            1
          ],
          "ObjectUtils.CONST(final, T)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ObjectUtils.firstNonNull()": [
            4,
            4,
            4
          ],
          "ObjectUtils.equals(final, Object, final, Object)": [
            3,
            3,
            3
          ],
          "ObjectUtils.hashCodeMulti()": [
            3,
            3,
            3
          ],
          "ObjectUtils.identityToString(final, Object)": [
            2,
            2,
            2
          ],
          "ObjectUtils.identityToString(final, StringBuffer, final, Object)": [
            2,
            2,
            2
          ],
          "ObjectUtils.min()": [
            4,
            4,
            4
          ],
          "ObjectUtils.max()": [
            4,
            4,
            4
          ],
          "ObjectUtils.compare(final, T, final, T, final, boolean)": [
            4,
            4,
            4
          ],
          "ObjectUtils.mode()": [
            7,
            7,
            7
          ],
          "ObjectUtils.CONST_BYTE(final, int)": [
            2,
            2,
            2
          ],
          "ObjectUtils.CONST_SHORT(final, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "ObjectUtils.clone(final, T)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
    },
    {
      "src_name": "ContextedRuntimeException",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/exception/ContextedRuntimeException.java",
      "class_declaration": "public class ContextedRuntimeException extends RuntimeException implements ExceptionContext ",
      "methods_under_test": {
        "=1": {
          "ContextedRuntimeException.addContextValue(final, String, final, Object)": [
            1,
            1,
            1
          ],
          "ContextedRuntimeException.setContextValue(final, String, final, Object)": [
            1,
            1,
            1
          ],
          "ContextedRuntimeException.getContextValues(final, String)": [
            1,
            1,
            1
          ],
          "ContextedRuntimeException.getFirstContextValue(final, String)": [
            1,
            1,
            1
          ],
          "ContextedRuntimeException.getFormattedExceptionMessage(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java"
    },
    {
      "src_name": "StandardToStringStyle",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/builder/StandardToStringStyle.java",
      "class_declaration": "public class StandardToStringStyle extends ToStringStyle ",
      "methods_under_test": {
        "=1": {
          "StandardToStringStyle.setUseClassName(final, boolean)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setUseShortClassName(final, boolean)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setUseIdentityHashCode(final, boolean)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setUseFieldNames(final, boolean)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setDefaultFullDetail(final, boolean)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setArrayContentDetail(final, boolean)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setArrayStart(final, String)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setArrayEnd(final, String)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setArraySeparator(final, String)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setContentStart(final, String)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setContentEnd(final, String)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setFieldNameValueSeparator(final, String)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setFieldSeparator(final, String)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setFieldSeparatorAtStart(final, boolean)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setFieldSeparatorAtEnd(final, boolean)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setNullText(final, String)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setSizeStartText(final, String)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setSizeEndText(final, String)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setSummaryObjectStartText(final, String)": [
            1,
            1,
            1
          ],
          "StandardToStringStyle.setSummaryObjectEndText(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java"
    },
    {
      "src_name": "Triple",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/tuple/Triple.java",
      "class_declaration": "public abstract class Triple <L, M, R> implements Comparable<Triple<L, M, R>>, Serializable ",
      "methods_under_test": {
        "=1": {
          "Triple.of(final, L, final, M, final, R)": [
            1,
            1,
            1
          ],
          "Triple.compareTo(final, Triple<L, M, R>)": [
            1,
            1,
            1
          ],
          "Triple.hashCode()": [
            1,
            1,
            1
          ],
          "Triple.toString()": [
            1,
            1,
            1
          ],
          "Triple.toString(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Triple.equals(final, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/tuple/TripleTest.java"
    },
    {
      "src_name": "Pair",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/tuple/Pair.java",
      "class_declaration": "public abstract class Pair <L, R> implements Map.Entry<L, R>, Comparable<Pair<L, R>>, Serializable ",
      "methods_under_test": {
        "=1": {
          "Pair.of(final, L, final, R)": [
            1,
            1,
            1
          ],
          "Pair.compareTo(final, Pair<L, R>)": [
            1,
            1,
            1
          ],
          "Pair.hashCode()": [
            1,
            1,
            1
          ],
          "Pair.toString()": [
            1,
            1,
            1
          ],
          "Pair.toString(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Pair.equals(final, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/tuple/PairTest.java"
    },
    {
      "src_name": "StopWatch",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/time/StopWatch.java",
      "class_declaration": "public class StopWatch ",
      "methods_under_test": {
        "=1": {
          "StopWatch.reset()": [
            1,
            1,
            1
          ],
          "StopWatch.toString()": [
            1,
            1,
            1
          ],
          "StopWatch.toSplitString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StopWatch.start()": [
            3,
            3,
            3
          ],
          "StopWatch.stop()": [
            3,
            3,
            3
          ],
          "StopWatch.split()": [
            2,
            2,
            2
          ],
          "StopWatch.unsplit()": [
            2,
            2,
            2
          ],
          "StopWatch.suspend()": [
            2,
            2,
            2
          ],
          "StopWatch.resume()": [
            2,
            2,
            2
          ],
          "StopWatch.getNanoTime()": [
            4,
            4,
            4
          ],
          "StopWatch.getSplitNanoTime()": [
            2,
            2,
            2
          ],
          "StopWatch.getStartTime()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java"
    },
    {
      "src_name": "DateUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/time/DateUtils.java",
      "class_declaration": "public class DateUtils ",
      "methods_under_test": {
        "=1": {
          "DateUtils.parseDate(final, String)": [
            1,
            1,
            1
          ],
          "DateUtils.parseDate(final, String, final, Locale)": [
            1,
            1,
            1
          ],
          "DateUtils.parseDateStrictly(final, String)": [
            1,
            1,
            1
          ],
          "DateUtils.parseDateStrictly(final, String, final, Locale)": [
            1,
            1,
            1
          ],
          "DateUtils.addYears(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.addMonths(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.addWeeks(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.addDays(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.addHours(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.addMinutes(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.addSeconds(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.addMilliseconds(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.setYears(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.setMonths(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.setDays(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.setHours(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.setMinutes(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.setSeconds(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.setMilliseconds(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.toCalendar(final, Date)": [
            1,
            1,
            1
          ],
          "DateUtils.getFragmentInMilliseconds(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.getFragmentInSeconds(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.getFragmentInMinutes(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.getFragmentInHours(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.getFragmentInDays(final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.getFragmentInMilliseconds(final, Calendar, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.getFragmentInSeconds(final, Calendar, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.getFragmentInMinutes(final, Calendar, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.getFragmentInHours(final, Calendar, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.getFragmentInDays(final, Calendar, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.truncatedEquals(final, Calendar, final, Calendar, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.truncatedEquals(final, Date, final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.truncatedCompareTo(final, Calendar, final, Calendar, final, int)": [
            1,
            1,
            1
          ],
          "DateUtils.truncatedCompareTo(final, Date, final, Date, final, int)": [
            1,
            1,
            1
          ],
          "DateIterator.hasNext()": [
            1,
            1,
            1
          ],
          "DateIterator.remove()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DateUtils.isSameDay(final, Date, final, Date)": [
            2,
            2,
            2
          ],
          "DateUtils.isSameDay(final, Calendar, final, Calendar)": [
            2,
            2,
            2
          ],
          "DateUtils.isSameInstant(final, Date, final, Date)": [
            2,
            2,
            2
          ],
          "DateUtils.isSameInstant(final, Calendar, final, Calendar)": [
            2,
            2,
            2
          ],
          "DateUtils.isSameLocalTime(final, Calendar, final, Calendar)": [
            2,
            2,
            2
          ],
          "DateUtils.round(final, Date, final, int)": [
            2,
            2,
            2
          ],
          "DateUtils.round(final, Calendar, final, int)": [
            2,
            2,
            2
          ],
          "DateUtils.round(final, Object, final, int)": [
            4,
            4,
            4
          ],
          "DateUtils.truncate(final, Date, final, int)": [
            2,
            2,
            2
          ],
          "DateUtils.truncate(final, Calendar, final, int)": [
            2,
            2,
            2
          ],
          "DateUtils.truncate(final, Object, final, int)": [
            4,
            4,
            4
          ],
          "DateUtils.ceiling(final, Date, final, int)": [
            2,
            2,
            2
          ],
          "DateUtils.ceiling(final, Calendar, final, int)": [
            2,
            2,
            2
          ],
          "DateUtils.ceiling(final, Object, final, int)": [
            4,
            4,
            4
          ],
          "DateUtils.iterator(final, Date, final, int)": [
            2,
            2,
            2
          ],
          "DateUtils.iterator(final, Object, final, int)": [
            4,
            4,
            4
          ],
          "DateIterator.next()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "DateUtils.iterator(final, Calendar, final, int)": [
            19,
            19,
            19
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
    },
    {
      "src_name": "AtomicInitializer",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java",
      "class_declaration": "public abstract class AtomicInitializer <T> implements ConcurrentInitializer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "AtomicInitializer.get()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerTest.java"
    },
    {
      "src_name": "MutableInt",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/mutable/MutableInt.java",
      "class_declaration": "public class MutableInt extends Number implements Comparable<MutableInt>, Mutable<Number> ",
      "methods_under_test": {
        "=1": {
          "MutableInt.setValue(final, int)": [
            1,
            1,
            1
          ],
          "MutableInt.setValue(final, Number)": [
            1,
            1,
            1
          ],
          "MutableInt.increment()": [
            1,
            1,
            1
          ],
          "MutableInt.decrement()": [
            1,
            1,
            1
          ],
          "MutableInt.add(final, int)": [
            1,
            1,
            1
          ],
          "MutableInt.add(final, Number)": [
            1,
            1,
            1
          ],
          "MutableInt.subtract(final, int)": [
            1,
            1,
            1
          ],
          "MutableInt.subtract(final, Number)": [
            1,
            1,
            1
          ],
          "MutableInt.intValue()": [
            1,
            1,
            1
          ],
          "MutableInt.longValue()": [
            1,
            1,
            1
          ],
          "MutableInt.floatValue()": [
            1,
            1,
            1
          ],
          "MutableInt.doubleValue()": [
            1,
            1,
            1
          ],
          "MutableInt.toInteger()": [
            1,
            1,
            1
          ],
          "MutableInt.hashCode()": [
            1,
            1,
            1
          ],
          "MutableInt.compareTo(final, MutableInt)": [
            1,
            1,
            1
          ],
          "MutableInt.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MutableInt.equals(final, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java"
    },
    {
      "src_name": "UnicodeUnescaper",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/translate/UnicodeUnescaper.java",
      "class_declaration": "public class UnicodeUnescaper extends CharSequenceTranslator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "UnicodeUnescaper.translate(final, CharSequence, final, int, final, Writer)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/translate/UnicodeUnescaperTest.java"
    },
    {
      "src_name": "ImmutablePair",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/tuple/ImmutablePair.java",
      "class_declaration": "public final class ImmutablePair <L, R> extends Pair<L, R> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/tuple/ImmutablePairTest.java"
    },
    {
      "src_name": "FastDateFormat",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
      "class_declaration": "public class FastDateFormat extends Format implements DateParser, DatePrinter ",
      "methods_under_test": {
        "=1": {
          "FastDateFormat.getInstance(final, String)": [
            1,
            1,
            1
          ],
          "FastDateFormat.getInstance(final, String, final, TimeZone)": [
            1,
            1,
            1
          ],
          "FastDateFormat.getInstance(final, String, final, Locale)": [
            1,
            1,
            1
          ],
          "FastDateFormat.getInstance(final, String, final, TimeZone, final, Locale)": [
            1,
            1,
            1
          ],
          "FastDateFormat.getDateInstance(final, int)": [
            1,
            1,
            1
          ],
          "FastDateFormat.getDateInstance(final, int, final, Locale)": [
            1,
            1,
            1
          ],
          "FastDateFormat.getDateInstance(final, int, final, TimeZone)": [
            1,
            1,
            1
          ],
          "FastDateFormat.getDateInstance(final, int, final, TimeZone, final, Locale)": [
            1,
            1,
            1
          ],
          "FastDateFormat.getTimeInstance(final, int)": [
            1,
            1,
            1
          ],
          "FastDateFormat.getTimeInstance(final, int, final, Locale)": [
            1,
            1,
            1
          ],
          "FastDateFormat.getTimeInstance(final, int, final, TimeZone)": [
            1,
            1,
            1
          ],
          "FastDateFormat.getTimeInstance(final, int, final, TimeZone, final, Locale)": [
            1,
            1,
            1
          ],
          "FastDateFormat.getDateTimeInstance(final, int, final, int)": [
            1,
            1,
            1
          ],
          "FastDateFormat.getDateTimeInstance(final, int, final, int, final, Locale)": [
            1,
            1,
            1
          ],
          "FastDateFormat.getDateTimeInstance(final, int, final, int, final, TimeZone)": [
            1,
            1,
            1
          ],
          "FastDateFormat.getDateTimeInstance(final, int, final, int, final, TimeZone, final, Locale)": [
            1,
            1,
            1
          ],
          "FastDateFormat.format(final, Object, final, StringBuffer, final, FieldPosition)": [
            1,
            1,
            1
          ],
          "FastDateFormat.format(final, long)": [
            1,
            1,
            1
          ],
          "FastDateFormat.format(final, Date)": [
            1,
            1,
            1
          ],
          "FastDateFormat.format(final, Calendar)": [
            1,
            1,
            1
          ],
          "FastDateFormat.format(final, long, final, StringBuffer)": [
            1,
            1,
            1
          ],
          "FastDateFormat.format(final, Date, final, StringBuffer)": [
            1,
            1,
            1
          ],
          "FastDateFormat.format(final, Calendar, final, StringBuffer)": [
            1,
            1,
            1
          ],
          "FastDateFormat.parse(final, String)": [
            1,
            1,
            1
          ],
          "FastDateFormat.parse(final, String, final, ParsePosition)": [
            1,
            1,
            1
          ],
          "FastDateFormat.parseObject(final, String, final, ParsePosition)": [
            1,
            1,
            1
          ],
          "FastDateFormat.hashCode()": [
            1,
            1,
            1
          ],
          "FastDateFormat.toString()": [
            1,
            1,
            1
          ],
          "FastDateFormat.applyRules(final, Calendar, final, StringBuffer)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FastDateFormat.equals(final, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java"
    },
    {
      "src_name": "ConstructorUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java",
      "class_declaration": "public class ConstructorUtils ",
      "methods_under_test": {
        "=1": {
          "ConstructorUtils.getAccessibleConstructor(final, Constructor<T>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ConstructorUtils.invokeConstructor(final, Class<T>)": [
            2,
            2,
            2
          ],
          "ConstructorUtils.invokeConstructor(final, Class<T>, Object[], Class<?>[])": [
            4,
            4,
            4
          ],
          "ConstructorUtils.invokeExactConstructor(final, Class<T>)": [
            2,
            2,
            2
          ],
          "ConstructorUtils.invokeExactConstructor(final, Class<T>, Object[], Class<?>[])": [
            4,
            4,
            4
          ],
          "ConstructorUtils.getAccessibleConstructor(final, Class<T>)": [
            3,
            3,
            3
          ],
          "ConstructorUtils.getMatchingAccessibleConstructor(final, Class<T>)": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java"
    },
    {
      "src_name": "ArrayUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/ArrayUtils.java",
      "class_declaration": "public class ArrayUtils ",
      "methods_under_test": {
        "=1": {
          "ArrayUtils.toString(final, Object)": [
            1,
            1,
            1
          ],
          "ArrayUtils.hashCode(final, Object)": [
            1,
            1,
            1
          ],
          "ArrayUtils.isEquals(final, Object, final, Object)": [
            1,
            1,
            1
          ],
          "ArrayUtils.toArray()": [
            1,
            1,
            1
          ],
          "ArrayUtils.indexOf(final, Object[], final, Object)": [
            1,
            1,
            1
          ],
          "ArrayUtils.lastIndexOf(final, Object[], final, Object)": [
            1,
            1,
            1
          ],
          "ArrayUtils.contains(final, Object[], final, Object)": [
            1,
            1,
            1
          ],
          "ArrayUtils.indexOf(final, long[], final, long)": [
            1,
            1,
            1
          ],
          "ArrayUtils.lastIndexOf(final, long[], final, long)": [
            1,
            1,
            1
          ],
          "ArrayUtils.contains(final, long[], final, long)": [
            1,
            1,
            1
          ],
          "ArrayUtils.indexOf(final, int[], final, int)": [
            1,
            1,
            1
          ],
          "ArrayUtils.lastIndexOf(final, int[], final, int)": [
            1,
            1,
            1
          ],
          "ArrayUtils.contains(final, int[], final, int)": [
            1,
            1,
            1
          ],
          "ArrayUtils.indexOf(final, short[], final, short)": [
            1,
            1,
            1
          ],
          "ArrayUtils.lastIndexOf(final, short[], final, short)": [
            1,
            1,
            1
          ],
          "ArrayUtils.contains(final, short[], final, short)": [
            1,
            1,
            1
          ],
          "ArrayUtils.indexOf(final, char[], final, char)": [
            1,
            1,
            1
          ],
          "ArrayUtils.lastIndexOf(final, char[], final, char)": [
            1,
            1,
            1
          ],
          "ArrayUtils.contains(final, char[], final, char)": [
            1,
            1,
            1
          ],
          "ArrayUtils.indexOf(final, byte[], final, byte)": [
            1,
            1,
            1
          ],
          "ArrayUtils.lastIndexOf(final, byte[], final, byte)": [
            1,
            1,
            1
          ],
          "ArrayUtils.contains(final, byte[], final, byte)": [
            1,
            1,
            1
          ],
          "ArrayUtils.indexOf(final, double[], final, double)": [
            1,
            1,
            1
          ],
          "ArrayUtils.indexOf(final, double[], final, double, final, double)": [
            1,
            1,
            1
          ],
          "ArrayUtils.lastIndexOf(final, double[], final, double)": [
            1,
            1,
            1
          ],
          "ArrayUtils.lastIndexOf(final, double[], final, double, final, double)": [
            1,
            1,
            1
          ],
          "ArrayUtils.contains(final, double[], final, double)": [
            1,
            1,
            1
          ],
          "ArrayUtils.contains(final, double[], final, double, final, double)": [
            1,
            1,
            1
          ],
          "ArrayUtils.indexOf(final, float[], final, float)": [
            1,
            1,
            1
          ],
          "ArrayUtils.lastIndexOf(final, float[], final, float)": [
            1,
            1,
            1
          ],
          "ArrayUtils.contains(final, float[], final, float)": [
            1,
            1,
            1
          ],
          "ArrayUtils.indexOf(final, boolean[], final, boolean)": [
            1,
            1,
            1
          ],
          "ArrayUtils.lastIndexOf(final, boolean[], final, boolean)": [
            1,
            1,
            1
          ],
          "ArrayUtils.contains(final, boolean[], final, boolean)": [
            1,
            1,
            1
          ],
          "ArrayUtils.isEmpty(final, Object[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isEmpty(final, long[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isEmpty(final, int[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isEmpty(final, short[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isEmpty(final, char[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isEmpty(final, byte[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isEmpty(final, double[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isEmpty(final, float[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isEmpty(final, boolean[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isNotEmpty(final, T[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isNotEmpty(final, long[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isNotEmpty(final, int[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isNotEmpty(final, short[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isNotEmpty(final, char[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isNotEmpty(final, byte[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isNotEmpty(final, double[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isNotEmpty(final, float[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.isNotEmpty(final, boolean[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, boolean[], final, boolean)": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, byte[], final, byte)": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, char[], final, char)": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, double[], final, double)": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, float[], final, float)": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, int[], final, int)": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, long[], final, long)": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, short[], final, short)": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, boolean[], final, int, final, boolean)": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, char[], final, int, final, char)": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, byte[], final, int, final, byte)": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, short[], final, int, final, short)": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, int[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, long[], final, int, final, long)": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, float[], final, int, final, float)": [
            1,
            1,
            1
          ],
          "ArrayUtils.add(final, double[], final, int, final, double)": [
            1,
            1,
            1
          ],
          "ArrayUtils.remove(final, T[], final, int)": [
            1,
            1,
            1
          ],
          "ArrayUtils.remove(final, boolean[], final, int)": [
            1,
            1,
            1
          ],
          "ArrayUtils.remove(final, byte[], final, int)": [
            1,
            1,
            1
          ],
          "ArrayUtils.remove(final, char[], final, int)": [
            1,
            1,
            1
          ],
          "ArrayUtils.remove(final, double[], final, int)": [
            1,
            1,
            1
          ],
          "ArrayUtils.remove(final, float[], final, int)": [
            1,
            1,
            1
          ],
          "ArrayUtils.remove(final, int[], final, int)": [
            1,
            1,
            1
          ],
          "ArrayUtils.remove(final, long[], final, int)": [
            1,
            1,
            1
          ],
          "ArrayUtils.remove(final, short[], final, int)": [
            1,
            1,
            1
          ],
          "ArrayUtils.removeAll(final, T[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.removeAll(final, byte[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.removeAll(final, short[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.removeAll(final, int[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.removeAll(final, char[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.removeAll(final, long[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.removeAll(final, float[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.removeAll(final, double[])": [
            1,
            1,
            1
          ],
          "ArrayUtils.removeAll(final, boolean[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArrayUtils.toString(final, Object, final, String)": [
            2,
            2,
            2
          ],
          "ArrayUtils.toMap(final, Object[])": [
            6,
            6,
            6
          ],
          "ArrayUtils.clone(final, T[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.clone(final, long[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.clone(final, int[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.clone(final, short[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.clone(final, char[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.clone(final, byte[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.clone(final, double[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.clone(final, float[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.clone(final, boolean[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, Object[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, String[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, long[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, int[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, short[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, char[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, byte[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, double[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, float[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, boolean[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, Long[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, Integer[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, Short[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, Character[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, Byte[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, Double[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, Float[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.nullToEmpty(final, Boolean[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.subarray(final, T[], int, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.subarray(final, long[], int, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.subarray(final, int[], int, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.subarray(final, short[], int, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.subarray(final, char[], int, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.subarray(final, byte[], int, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.subarray(final, double[], int, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.subarray(final, float[], int, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.subarray(final, boolean[], int, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.isSameLength(final, Object[], final, Object[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.isSameLength(final, long[], final, long[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.isSameLength(final, int[], final, int[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.isSameLength(final, short[], final, short[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.isSameLength(final, char[], final, char[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.isSameLength(final, byte[], final, byte[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.isSameLength(final, double[], final, double[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.isSameLength(final, float[], final, float[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.isSameLength(final, boolean[], final, boolean[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.getLength(final, Object)": [
            2,
            2,
            2
          ],
          "ArrayUtils.isSameType(final, Object, final, Object)": [
            2,
            2,
            2
          ],
          "ArrayUtils.reverse(final, Object[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.reverse(final, long[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.reverse(final, int[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.reverse(final, short[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.reverse(final, char[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.reverse(final, byte[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.reverse(final, double[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.reverse(final, float[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.reverse(final, boolean[])": [
            2,
            2,
            2
          ],
          "ArrayUtils.indexOf(final, Object[], final, Object, int)": [
            9,
            9,
            9
          ],
          "ArrayUtils.lastIndexOf(final, Object[], final, Object, int)": [
            10,
            10,
            10
          ],
          "ArrayUtils.indexOf(final, long[], final, long, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.lastIndexOf(final, long[], final, long, int)": [
            6,
            6,
            6
          ],
          "ArrayUtils.indexOf(final, int[], final, int, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.lastIndexOf(final, int[], final, int, int)": [
            6,
            6,
            6
          ],
          "ArrayUtils.indexOf(final, short[], final, short, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.lastIndexOf(final, short[], final, short, int)": [
            6,
            6,
            6
          ],
          "ArrayUtils.indexOf(final, char[], final, char, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.lastIndexOf(final, char[], final, char, int)": [
            6,
            6,
            6
          ],
          "ArrayUtils.indexOf(final, byte[], final, byte, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.lastIndexOf(final, byte[], final, byte, int)": [
            6,
            6,
            6
          ],
          "ArrayUtils.indexOf(final, double[], final, double, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.indexOf(final, double[], final, double, int, final, double)": [
            5,
            5,
            5
          ],
          "ArrayUtils.lastIndexOf(final, double[], final, double, int)": [
            6,
            6,
            6
          ],
          "ArrayUtils.lastIndexOf(final, double[], final, double, int, final, double)": [
            6,
            6,
            6
          ],
          "ArrayUtils.indexOf(final, float[], final, float, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.lastIndexOf(final, float[], final, float, int)": [
            6,
            6,
            6
          ],
          "ArrayUtils.indexOf(final, boolean[], final, boolean, int)": [
            5,
            5,
            5
          ],
          "ArrayUtils.lastIndexOf(final, boolean[], final, boolean, int)": [
            6,
            6,
            6
          ],
          "ArrayUtils.toPrimitive(final, Character[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.toPrimitive(final, Character[], final, char)": [
            4,
            4,
            4
          ],
          "ArrayUtils.toObject(final, char[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.toPrimitive(final, Long[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.toPrimitive(final, Long[], final, long)": [
            4,
            4,
            4
          ],
          "ArrayUtils.toObject(final, long[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.toPrimitive(final, Integer[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.toPrimitive(final, Integer[], final, int)": [
            4,
            4,
            4
          ],
          "ArrayUtils.toObject(final, int[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.toPrimitive(final, Short[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.toPrimitive(final, Short[], final, short)": [
            4,
            4,
            4
          ],
          "ArrayUtils.toObject(final, short[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.toPrimitive(final, Byte[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.toPrimitive(final, Byte[], final, byte)": [
            4,
            4,
            4
          ],
          "ArrayUtils.toObject(final, byte[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.toPrimitive(final, Double[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.toPrimitive(final, Double[], final, double)": [
            4,
            4,
            4
          ],
          "ArrayUtils.toObject(final, double[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.toPrimitive(final, Float[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.toPrimitive(final, Float[], final, float)": [
            4,
            4,
            4
          ],
          "ArrayUtils.toObject(final, float[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.toPrimitive(final, Boolean[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.toPrimitive(final, Boolean[], final, boolean)": [
            4,
            4,
            4
          ],
          "ArrayUtils.toObject(final, boolean[])": [
            4,
            4,
            4
          ],
          "ArrayUtils.addAll(final, T[])": [
            5,
            5,
            5
          ],
          "ArrayUtils.addAll(final, boolean[])": [
            3,
            3,
            3
          ],
          "ArrayUtils.addAll(final, char[])": [
            3,
            3,
            3
          ],
          "ArrayUtils.addAll(final, byte[])": [
            3,
            3,
            3
          ],
          "ArrayUtils.addAll(final, short[])": [
            3,
            3,
            3
          ],
          "ArrayUtils.addAll(final, int[])": [
            3,
            3,
            3
          ],
          "ArrayUtils.addAll(final, long[])": [
            3,
            3,
            3
          ],
          "ArrayUtils.addAll(final, float[])": [
            3,
            3,
            3
          ],
          "ArrayUtils.addAll(final, double[])": [
            3,
            3,
            3
          ],
          "ArrayUtils.add(final, T[], final, T)": [
            3,
            3,
            3
          ],
          "ArrayUtils.add(final, T[], final, int, final, T)": [
            3,
            3,
            3
          ],
          "ArrayUtils.removeElement(final, T[], final, Object)": [
            2,
            2,
            2
          ],
          "ArrayUtils.removeElement(final, boolean[], final, boolean)": [
            2,
            2,
            2
          ],
          "ArrayUtils.removeElement(final, byte[], final, byte)": [
            2,
            2,
            2
          ],
          "ArrayUtils.removeElement(final, char[], final, char)": [
            2,
            2,
            2
          ],
          "ArrayUtils.removeElement(final, double[], final, double)": [
            2,
            2,
            2
          ],
          "ArrayUtils.removeElement(final, float[], final, float)": [
            2,
            2,
            2
          ],
          "ArrayUtils.removeElement(final, int[], final, int)": [
            2,
            2,
            2
          ],
          "ArrayUtils.removeElement(final, long[], final, long)": [
            2,
            2,
            2
          ],
          "ArrayUtils.removeElement(final, short[], final, short)": [
            2,
            2,
            2
          ],
          "ArrayUtils.removeElements(final, T[])": [
            7,
            7,
            7
          ],
          "ArrayUtils.removeElements(final, byte[])": [
            7,
            7,
            7
          ],
          "ArrayUtils.removeElements(final, short[])": [
            7,
            7,
            7
          ],
          "ArrayUtils.removeElements(final, int[])": [
            7,
            7,
            7
          ],
          "ArrayUtils.removeElements(final, char[])": [
            7,
            7,
            7
          ],
          "ArrayUtils.removeElements(final, long[])": [
            7,
            7,
            7
          ],
          "ArrayUtils.removeElements(final, float[])": [
            7,
            7,
            7
          ],
          "ArrayUtils.removeElements(final, double[])": [
            7,
            7,
            7
          ],
          "ArrayUtils.removeElements(final, boolean[])": [
            7,
            7,
            7
          ],
          "ArrayUtils.removeAll(final, Object)": [
            9,
            9,
            9
          ],
          "ArrayUtils.removeAll(final, Object, final, BitSet)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
    },
    {
      "src_name": "CharEncoding",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/CharEncoding.java",
      "class_declaration": "public class CharEncoding ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "CharEncoding.isSupported(final, String)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/CharEncodingTest.java"
    },
    {
      "src_name": "FastDatePrinter",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "class_declaration": "public class FastDatePrinter implements DatePrinter, Serializable ",
      "methods_under_test": {
        "=1": {
          "FastDatePrinter.format(final, long)": [
            1,
            1,
            1
          ],
          "FastDatePrinter.format(final, Date)": [
            1,
            1,
            1
          ],
          "FastDatePrinter.format(final, Calendar)": [
            1,
            1,
            1
          ],
          "FastDatePrinter.format(final, long, final, StringBuffer)": [
            1,
            1,
            1
          ],
          "FastDatePrinter.format(final, Date, final, StringBuffer)": [
            1,
            1,
            1
          ],
          "FastDatePrinter.format(final, Calendar, final, StringBuffer)": [
            1,
            1,
            1
          ],
          "FastDatePrinter.hashCode()": [
            1,
            1,
            1
          ],
          "FastDatePrinter.toString()": [
            1,
            1,
            1
          ],
          "CharacterLiteral.estimateLength()": [
            1,
            1,
            1
          ],
          "CharacterLiteral.appendTo(final, StringBuffer, final, Calendar)": [
            1,
            1,
            1
          ],
          "StringLiteral.estimateLength()": [
            1,
            1,
            1
          ],
          "StringLiteral.appendTo(final, StringBuffer, final, Calendar)": [
            1,
            1,
            1
          ],
          "TextField.appendTo(final, StringBuffer, final, Calendar)": [
            1,
            1,
            1
          ],
          "UnpaddedNumberField.estimateLength()": [
            1,
            1,
            1
          ],
          "UnpaddedNumberField.appendTo(final, StringBuffer, final, Calendar)": [
            1,
            1,
            1
          ],
          "UnpaddedMonthField.estimateLength()": [
            1,
            1,
            1
          ],
          "UnpaddedMonthField.appendTo(final, StringBuffer, final, Calendar)": [
            1,
            1,
            1
          ],
          "PaddedNumberField.estimateLength()": [
            1,
            1,
            1
          ],
          "PaddedNumberField.appendTo(final, StringBuffer, final, Calendar)": [
            1,
            1,
            1
          ],
          "TwoDigitNumberField.estimateLength()": [
            1,
            1,
            1
          ],
          "TwoDigitNumberField.appendTo(final, StringBuffer, final, Calendar)": [
            1,
            1,
            1
          ],
          "TwoDigitYearField.estimateLength()": [
            1,
            1,
            1
          ],
          "TwoDigitYearField.appendTo(final, StringBuffer, final, Calendar)": [
            1,
            1,
            1
          ],
          "TwoDigitYearField.appendTo(final, StringBuffer, final, int)": [
            1,
            1,
            1
          ],
          "TwoDigitMonthField.estimateLength()": [
            1,
            1,
            1
          ],
          "TwoDigitMonthField.appendTo(final, StringBuffer, final, Calendar)": [
            1,
            1,
            1
          ],
          "TwoDigitMonthField.appendTo(final, StringBuffer, final, int)": [
            1,
            1,
            1
          ],
          "TwelveHourField.estimateLength()": [
            1,
            1,
            1
          ],
          "TwelveHourField.appendTo(final, StringBuffer, final, int)": [
            1,
            1,
            1
          ],
          "TwentyFourHourField.appendTo(final, StringBuffer, final, int)": [
            1,
            1,
            1
          ],
          "TimeZoneNameRule.estimateLength()": [
            1,
            1,
            1
          ],
          "TimeZoneNumberRule.estimateLength()": [
            1,
            1,
            1
          ],
          "TimeZoneDisplayKey.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FastDatePrinter.parseToken(final, String, final, int[])": [
            8,
            8,
            8
          ],
          "FastDatePrinter.selectNumberRule(final, int, final, int)": [
            4,
            4,
            4
          ],
          "FastDatePrinter.format(final, Object, final, StringBuffer, final, FieldPosition)": [
            4,
            4,
            4
          ],
          "FastDatePrinter.applyRules(final, Calendar, final, StringBuffer)": [
            2,
            2,
            2
          ],
          "FastDatePrinter.equals(final, Object)": [
            2,
            2,
            2
          ],
          "TextField.estimateLength()": [
            3,
            3,
            3
          ],
          "UnpaddedNumberField.appendTo(final, StringBuffer, final, int)": [
            4,
            4,
            4
          ],
          "UnpaddedMonthField.appendTo(final, StringBuffer, final, int)": [
            3,
            3,
            3
          ],
          "PaddedNumberField.appendTo(final, StringBuffer, final, int)": [
            6,
            6,
            6
          ],
          "TwoDigitNumberField.appendTo(final, StringBuffer, final, int)": [
            3,
            3,
            3
          ],
          "TwelveHourField.appendTo(final, StringBuffer, final, Calendar)": [
            2,
            2,
            2
          ],
          "TwentyFourHourField.estimateLength()": [
            2,
            2,
            2
          ],
          "TwentyFourHourField.appendTo(final, StringBuffer, final, Calendar)": [
            2,
            2,
            2
          ],
          "FastDatePrinter.getTimeZoneDisplay(final, TimeZone, final, boolean, final, int, final, Locale)": [
            3,
            3,
            3
          ],
          "TimeZoneNameRule.appendTo(final, StringBuffer, final, Calendar)": [
            3,
            3,
            3
          ],
          "TimeZoneNumberRule.appendTo(final, StringBuffer, final, Calendar)": [
            3,
            3,
            3
          ],
          "TimeZoneDisplayKey.equals(final, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {
          "FastDatePrinter.parsePattern()": [
            30,
            30,
            30
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java"
    },
    {
      "src_name": "HashCodeBuilder",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
      "class_declaration": "public class HashCodeBuilder implements Builder<Integer> ",
      "methods_under_test": {
        "=1": {
          "HashCodeBuilder.isRegistered(final, Object)": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.reflectionHashCode(final, int, final, int, final, Object)": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.reflectionHashCode(final, int, final, int, final, Object, final, boolean)": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.reflectionHashCode(final, Object, final, boolean)": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.reflectionHashCode(final, Object, final, Collection<String>)": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.reflectionHashCode(final, Object)": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.append(final, boolean)": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.append(final, byte)": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.append(final, char)": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.append(final, double)": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.append(final, float)": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.append(final, int)": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.append(final, long)": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.append(final, short)": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.appendSuper(final, int)": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.toHashCode()": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.build()": [
            1,
            1,
            1
          ],
          "HashCodeBuilder.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "HashCodeBuilder.reflectionHashCode(final, int, final, int, final, T, final, boolean, final, Class<? super T>)": [
            3,
            3,
            3
          ],
          "HashCodeBuilder.register(final, Object)": [
            3,
            3,
            3
          ],
          "HashCodeBuilder.unregister(final, Object)": [
            4,
            4,
            4
          ],
          "HashCodeBuilder.append(final, boolean[])": [
            3,
            3,
            3
          ],
          "HashCodeBuilder.append(final, byte[])": [
            3,
            3,
            3
          ],
          "HashCodeBuilder.append(final, char[])": [
            3,
            3,
            3
          ],
          "HashCodeBuilder.append(final, double[])": [
            3,
            3,
            3
          ],
          "HashCodeBuilder.append(final, float[])": [
            3,
            3,
            3
          ],
          "HashCodeBuilder.append(final, int[])": [
            3,
            3,
            3
          ],
          "HashCodeBuilder.append(final, long[])": [
            3,
            3,
            3
          ],
          "HashCodeBuilder.append(final, Object[])": [
            3,
            3,
            3
          ],
          "HashCodeBuilder.append(final, short[])": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "HashCodeBuilder.append(final, Object)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java"
    },
    {
      "src_name": "ConcurrentUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java",
      "class_declaration": "public class ConcurrentUtils ",
      "methods_under_test": {
        "=1": {
          "ConcurrentUtils.handleCause(final, ExecutionException)": [
            1,
            1,
            1
          ],
          "ConcurrentUtils.handleCauseUnchecked(final, ExecutionException)": [
            1,
            1,
            1
          ],
          "ConcurrentUtils.initialize(final, ConcurrentInitializer<T>)": [
            1,
            1,
            1
          ],
          "ConcurrentUtils.constantFuture(final, T)": [
            1,
            1,
            1
          ],
          "ConstantFuture.get(final, long, final, TimeUnit)": [
            1,
            1,
            1
          ],
          "ConstantFuture.cancel(final, boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ConcurrentUtils.extractCause(final, ExecutionException)": [
            2,
            2,
            2
          ],
          "ConcurrentUtils.extractCauseUnchecked(final, ExecutionException)": [
            2,
            2,
            2
          ],
          "ConcurrentUtils.checkedException(final, Throwable)": [
            2,
            2,
            2
          ],
          "ConcurrentUtils.initializeUnchecked(final, ConcurrentInitializer<T>)": [
            2,
            2,
            2
          ],
          "ConcurrentUtils.putIfAbsent(final, ConcurrentMap<K, V>, final, K, final, V)": [
            2,
            2,
            2
          ],
          "ConcurrentUtils.createIfAbsent(final, ConcurrentMap<K, V>, final, K, final, ConcurrentInitializer<V>)": [
            3,
            3,
            3
          ],
          "ConcurrentUtils.createIfAbsentUnchecked(final, ConcurrentMap<K, V>, final, K, final, ConcurrentInitializer<V>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java"
    },
    {
      "src_name": "MutableBoolean",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/mutable/MutableBoolean.java",
      "class_declaration": "public class MutableBoolean implements Mutable<Boolean>, Serializable, Comparable<MutableBoolean> ",
      "methods_under_test": {
        "=1": {
          "MutableBoolean.setValue(final, boolean)": [
            1,
            1,
            1
          ],
          "MutableBoolean.setValue(final, Boolean)": [
            1,
            1,
            1
          ],
          "MutableBoolean.booleanValue()": [
            1,
            1,
            1
          ],
          "MutableBoolean.toBoolean()": [
            1,
            1,
            1
          ],
          "MutableBoolean.hashCode()": [
            1,
            1,
            1
          ],
          "MutableBoolean.compareTo(final, MutableBoolean)": [
            1,
            1,
            1
          ],
          "MutableBoolean.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MutableBoolean.equals(final, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/mutable/MutableBooleanTest.java"
    },
    {
      "src_name": "MultiBackgroundInitializer",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializer.java",
      "class_declaration": "public class MultiBackgroundInitializer extends\n        BackgroundInitializer<MultiBackgroundInitializer.MultiBackgroundInitializerResults> ",
      "methods_under_test": {
        "=1": {
          "MultiBackgroundInitializerResults.getInitializer(final, String)": [
            1,
            1,
            1
          ],
          "MultiBackgroundInitializerResults.getResultObject(final, String)": [
            1,
            1,
            1
          ],
          "MultiBackgroundInitializerResults.isException(final, String)": [
            1,
            1,
            1
          ],
          "MultiBackgroundInitializerResults.getException(final, String)": [
            1,
            1,
            1
          ],
          "MultiBackgroundInitializerResults.initializerNames()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java"
    },
    {
      "src_name": "SystemUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/SystemUtils.java",
      "class_declaration": "public class SystemUtils ",
      "methods_under_test": {
        "=1": {
          "SystemUtils.isJavaVersionAtLeast(final, JavaVersion)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SystemUtils.isJavaVersionMatch(final, String, final, String)": [
            2,
            2,
            2
          ],
          "SystemUtils.isOSMatch(final, String, final, String, final, String, final, String)": [
            2,
            2,
            2
          ],
          "SystemUtils.isOSNameMatch(final, String, final, String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java"
    },
    {
      "src_name": "EventListenerSupport",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java",
      "class_declaration": "public class EventListenerSupport <L> implements Serializable ",
      "methods_under_test": {
        "=1": {
          "EventListenerSupport.create(final, Class<T>)": [
            1,
            1,
            1
          ],
          "EventListenerSupport.fire()": [
            1,
            1,
            1
          ],
          "EventListenerSupport.addListener(final, L)": [
            1,
            1,
            1
          ],
          "EventListenerSupport.removeListener(final, L)": [
            1,
            1,
            1
          ],
          "EventListenerSupport.createInvocationHandler()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ProxyInvocationHandler.invoke(final, Object, final, Method, final, Object[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java"
    },
    {
      "src_name": "AtomicSafeInitializer",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java",
      "class_declaration": "public abstract class AtomicSafeInitializer <T> implements\n        ConcurrentInitializer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "AtomicSafeInitializer.get()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializerTest.java"
    },
    {
      "src_name": "StrLookup",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/StrLookup.java",
      "class_declaration": "public abstract class StrLookup <V> ",
      "methods_under_test": {
        "=1": {
          "StrLookup.noneLookup()": [
            1,
            1,
            1
          ],
          "StrLookup.systemPropertiesLookup()": [
            1,
            1,
            1
          ],
          "StrLookup.mapLookup(final, Map<String, V>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java"
    },
    {
      "src_name": "FastDateParser",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
      "class_declaration": "public class FastDateParser implements DateParser, Serializable ",
      "methods_under_test": {
        "=1": {
          "FastDateParser.hashCode()": [
            1,
            1,
            1
          ],
          "FastDateParser.toString()": [
            1,
            1,
            1
          ],
          "FastDateParser.parseObject(final, String)": [
            1,
            1,
            1
          ],
          "FastDateParser.parseObject(final, String, final, ParsePosition)": [
            1,
            1,
            1
          ],
          "CopyQuotedStrategy.addRegex(final, FastDateParser, final, StringBuilder)": [
            1,
            1,
            1
          ],
          "Strategy.modify(final, int)": [
            1,
            1,
            1
          ],
          "TimeZoneStrategy.addRegex(final, FastDateParser, final, StringBuilder)": [
            1,
            1,
            1
          ],
          "NumberStrategy.modify(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FastDateParser.equals(final, Object)": [
            2,
            2,
            2
          ],
          "FastDateParser.parse(final, String)": [
            3,
            3,
            3
          ],
          "FastDateParser.parse(final, String, final, ParsePosition)": [
            3,
            3,
            3
          ],
          "FastDateParser.adjustYear(final, int)": [
            2,
            2,
            2
          ],
          "TextStrategy.addRegex(final, FastDateParser, final, StringBuilder)": [
            2,
            2,
            2
          ],
          "TextStrategy.setCalendar(final, FastDateParser, final, Calendar, final, String)": [
            3,
            3,
            3
          ],
          "NumberStrategy.addRegex(final, FastDateParser, final, StringBuilder)": [
            2,
            2,
            2
          ],
          "NumberStrategy.setCalendar(final, FastDateParser, final, Calendar, final, String)": [
            2,
            2,
            2
          ],
          "TimeZoneStrategy.setCalendar(final, FastDateParser, final, Calendar, final, String)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java"
    },
    {
      "src_name": "EventUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/event/EventUtils.java",
      "class_declaration": "public class EventUtils ",
      "methods_under_test": {
        "=1": {
          "EventUtils.bindEventsToMethod(final, Object, final, String, final, Object, final, Class<L>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EventUtils.addEventListener(final, Object, final, Class<L>, final, L)": [
            2,
            2,
            2
          ],
          "EventBindingInvocationHandler.invoke(final, Object, final, Method, final, Object[])": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/event/EventUtilsTest.java"
    },
    {
      "src_name": "LocaleUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/LocaleUtils.java",
      "class_declaration": "public class LocaleUtils ",
      "methods_under_test": {
        "=1": {
          "LocaleUtils.localeLookupList(final, Locale)": [
            1,
            1,
            1
          ],
          "LocaleUtils.availableLocaleList()": [
            1,
            1,
            1
          ],
          "LocaleUtils.availableLocaleSet()": [
            1,
            1,
            1
          ],
          "LocaleUtils.isAvailableLocale(final, Locale)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LocaleUtils.localeLookupList(final, Locale, final, Locale)": [
            5,
            5,
            5
          ],
          "LocaleUtils.languagesByCountry(final, String)": [
            5,
            5,
            5
          ],
          "LocaleUtils.countriesByLanguage(final, String)": [
            5,
            5,
            5
          ]
        },
        "11-20": {
          "LocaleUtils.toLocale(final, String)": [
            19,
            19,
            19
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java"
    },
    {
      "src_name": "CharSet",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/CharSet.java",
      "class_declaration": "public class CharSet implements Serializable ",
      "methods_under_test": {
        "=1": {
          "CharSet.hashCode()": [
            1,
            1,
            1
          ],
          "CharSet.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CharSet.getInstance()": [
            4,
            4,
            4
          ],
          "CharSet.add(final, String)": [
            2,
            2,
            2
          ],
          "CharSet.contains(final, char)": [
            3,
            3,
            3
          ],
          "CharSet.equals(final, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/CharSetTest.java"
    },
    {
      "src_name": "StrBuilder",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/StrBuilder.java",
      "class_declaration": "public class StrBuilder implements CharSequence, Appendable, Serializable, Builder<String> ",
      "methods_under_test": {
        "=1": {
          "StrBuilder.setNewLineText(final, String)": [
            1,
            1,
            1
          ],
          "StrBuilder.length()": [
            1,
            1,
            1
          ],
          "StrBuilder.capacity()": [
            1,
            1,
            1
          ],
          "StrBuilder.size()": [
            1,
            1,
            1
          ],
          "StrBuilder.clear()": [
            1,
            1,
            1
          ],
          "StrBuilder.append(final, String)": [
            1,
            1,
            1
          ],
          "StrBuilder.append(final, char)": [
            1,
            1,
            1
          ],
          "StrBuilder.append(final, int)": [
            1,
            1,
            1
          ],
          "StrBuilder.append(final, long)": [
            1,
            1,
            1
          ],
          "StrBuilder.append(final, float)": [
            1,
            1,
            1
          ],
          "StrBuilder.append(final, double)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, Object)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, String, final, int, final, int)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, String)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, StringBuffer)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, StringBuilder)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, StringBuilder, final, int, final, int)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, StringBuffer, final, int, final, int)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, StrBuilder)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, StrBuilder, final, int, final, int)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, char[])": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, char[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, boolean)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, char)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, int)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, long)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, float)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendln(final, double)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendSeparator(final, String)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendFixedWidthPadLeft(final, int, final, int, final, char)": [
            1,
            1,
            1
          ],
          "StrBuilder.appendFixedWidthPadRight(final, int, final, int, final, char)": [
            1,
            1,
            1
          ],
          "StrBuilder.insert(final, int, final, char)": [
            1,
            1,
            1
          ],
          "StrBuilder.insert(final, int, final, int)": [
            1,
            1,
            1
          ],
          "StrBuilder.insert(final, int, final, long)": [
            1,
            1,
            1
          ],
          "StrBuilder.insert(final, int, final, float)": [
            1,
            1,
            1
          ],
          "StrBuilder.insert(final, int, final, double)": [
            1,
            1,
            1
          ],
          "StrBuilder.deleteAll(final, StrMatcher)": [
            1,
            1,
            1
          ],
          "StrBuilder.deleteFirst(final, StrMatcher)": [
            1,
            1,
            1
          ],
          "StrBuilder.replace(final, int, int, final, String)": [
            1,
            1,
            1
          ],
          "StrBuilder.replaceAll(final, StrMatcher, final, String)": [
            1,
            1,
            1
          ],
          "StrBuilder.replaceFirst(final, StrMatcher, final, String)": [
            1,
            1,
            1
          ],
          "StrBuilder.replace(final, StrMatcher, final, String, final, int, int, final, int)": [
            1,
            1,
            1
          ],
          "StrBuilder.substring(final, int, int)": [
            1,
            1,
            1
          ],
          "StrBuilder.contains(final, String)": [
            1,
            1,
            1
          ],
          "StrBuilder.contains(final, StrMatcher)": [
            1,
            1,
            1
          ],
          "StrBuilder.indexOf(final, char)": [
            1,
            1,
            1
          ],
          "StrBuilder.indexOf(final, String)": [
            1,
            1,
            1
          ],
          "StrBuilder.indexOf(final, StrMatcher)": [
            1,
            1,
            1
          ],
          "StrBuilder.lastIndexOf(final, char)": [
            1,
            1,
            1
          ],
          "StrBuilder.lastIndexOf(final, String)": [
            1,
            1,
            1
          ],
          "StrBuilder.lastIndexOf(final, StrMatcher)": [
            1,
            1,
            1
          ],
          "StrBuilder.asTokenizer()": [
            1,
            1,
            1
          ],
          "StrBuilder.asReader()": [
            1,
            1,
            1
          ],
          "StrBuilder.asWriter()": [
            1,
            1,
            1
          ],
          "StrBuilder.toString()": [
            1,
            1,
            1
          ],
          "StrBuilder.toStringBuffer()": [
            1,
            1,
            1
          ],
          "StrBuilder.toStringBuilder()": [
            1,
            1,
            1
          ],
          "StrBuilder.build()": [
            1,
            1,
            1
          ],
          "StrBuilder.validateIndex(final, int)": [
            1,
            1,
            1
          ],
          "StrBuilderReader.ready()": [
            1,
            1,
            1
          ],
          "StrBuilderReader.markSupported()": [
            1,
            1,
            1
          ],
          "StrBuilderReader.mark(final, int)": [
            1,
            1,
            1
          ],
          "StrBuilderReader.reset()": [
            1,
            1,
            1
          ],
          "StrBuilderWriter.write(final, int)": [
            1,
            1,
            1
          ],
          "StrBuilderWriter.write(final, char[])": [
            1,
            1,
            1
          ],
          "StrBuilderWriter.write(final, char[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "StrBuilderWriter.write(final, String)": [
            1,
            1,
            1
          ],
          "StrBuilderWriter.write(final, String, final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StrBuilder.setNullText(String)": [
            2,
            2,
            2
          ],
          "StrBuilder.setLength(final, int)": [
            5,
            5,
            5
          ],
          "StrBuilder.ensureCapacity(final, int)": [
            2,
            2,
            2
          ],
          "StrBuilder.minimizeCapacity()": [
            2,
            2,
            2
          ],
          "StrBuilder.charAt(final, int)": [
            2,
            2,
            2
          ],
          "StrBuilder.setCharAt(final, int, final, char)": [
            2,
            2,
            2
          ],
          "StrBuilder.deleteCharAt(final, int)": [
            2,
            2,
            2
          ],
          "StrBuilder.toCharArray()": [
            2,
            2,
            2
          ],
          "StrBuilder.toCharArray(final, int, int)": [
            2,
            2,
            2
          ],
          "StrBuilder.getChars(char[])": [
            2,
            2,
            2
          ],
          "StrBuilder.getChars(final, int, final, int, final, char, [], final, int)": [
            4,
            4,
            4
          ],
          "StrBuilder.appendNewLine()": [
            2,
            2,
            2
          ],
          "StrBuilder.appendNull()": [
            2,
            2,
            2
          ],
          "StrBuilder.append(final, Object)": [
            2,
            2,
            2
          ],
          "StrBuilder.append(final, CharSequence)": [
            2,
            2,
            2
          ],
          "StrBuilder.append(final, CharSequence, final, int, final, int)": [
            2,
            2,
            2
          ],
          "StrBuilder.append(final, String, final, int, final, int)": [
            5,
            5,
            5
          ],
          "StrBuilder.append(final, StringBuffer)": [
            3,
            3,
            3
          ],
          "StrBuilder.append(final, StringBuffer, final, int, final, int)": [
            5,
            5,
            5
          ],
          "StrBuilder.append(final, StringBuilder)": [
            3,
            3,
            3
          ],
          "StrBuilder.append(final, StringBuilder, final, int, final, int)": [
            5,
            5,
            5
          ],
          "StrBuilder.append(final, StrBuilder)": [
            3,
            3,
            3
          ],
          "StrBuilder.append(final, StrBuilder, final, int, final, int)": [
            5,
            5,
            5
          ],
          "StrBuilder.append(final, char[])": [
            3,
            3,
            3
          ],
          "StrBuilder.append(final, char[], final, int, final, int)": [
            5,
            5,
            5
          ],
          "StrBuilder.append(final, boolean)": [
            2,
            2,
            2
          ],
          "StrBuilder.appendAll()": [
            3,
            3,
            3
          ],
          "StrBuilder.appendAll(final, Iterable<?>)": [
            3,
            3,
            3
          ],
          "StrBuilder.appendAll(final, Iterator<?>)": [
            3,
            3,
            3
          ],
          "StrBuilder.appendWithSeparators(final, Object[], String)": [
            3,
            3,
            3
          ],
          "StrBuilder.appendWithSeparators(final, Iterable<?>, String)": [
            4,
            4,
            4
          ],
          "StrBuilder.appendWithSeparators(final, Iterator<?>, String)": [
            4,
            4,
            4
          ],
          "StrBuilder.appendSeparator(final, String, final, String)": [
            2,
            2,
            2
          ],
          "StrBuilder.appendSeparator(final, char)": [
            2,
            2,
            2
          ],
          "StrBuilder.appendSeparator(final, char, final, char)": [
            2,
            2,
            2
          ],
          "StrBuilder.appendSeparator(final, String, final, int)": [
            2,
            2,
            2
          ],
          "StrBuilder.appendSeparator(final, char, final, int)": [
            2,
            2,
            2
          ],
          "StrBuilder.appendPadding(final, int, final, char)": [
            3,
            3,
            3
          ],
          "StrBuilder.appendFixedWidthPadLeft(final, Object, final, int, final, char)": [
            5,
            5,
            5
          ],
          "StrBuilder.appendFixedWidthPadRight(final, Object, final, int, final, char)": [
            5,
            5,
            5
          ],
          "StrBuilder.insert(final, int, final, Object)": [
            2,
            2,
            2
          ],
          "StrBuilder.insert(final, int, String)": [
            3,
            3,
            3
          ],
          "StrBuilder.insert(final, int, final, char, [])": [
            3,
            3,
            3
          ],
          "StrBuilder.insert(final, int, final, char, [], final, int, final, int)": [
            5,
            5,
            5
          ],
          "StrBuilder.insert(int, final, boolean)": [
            2,
            2,
            2
          ],
          "StrBuilder.delete(final, int, int)": [
            2,
            2,
            2
          ],
          "StrBuilder.deleteAll(final, char)": [
            5,
            5,
            5
          ],
          "StrBuilder.deleteFirst(final, char)": [
            3,
            3,
            3
          ],
          "StrBuilder.deleteAll(final, String)": [
            3,
            3,
            3
          ],
          "StrBuilder.deleteFirst(final, String)": [
            3,
            3,
            3
          ],
          "StrBuilder.replaceAll(final, char, final, char)": [
            4,
            4,
            4
          ],
          "StrBuilder.replaceFirst(final, char, final, char)": [
            4,
            4,
            4
          ],
          "StrBuilder.replaceAll(final, String, final, String)": [
            3,
            3,
            3
          ],
          "StrBuilder.replaceFirst(final, String, final, String)": [
            3,
            3,
            3
          ],
          "StrBuilder.reverse()": [
            3,
            3,
            3
          ],
          "StrBuilder.trim()": [
            6,
            6,
            6
          ],
          "StrBuilder.startsWith(final, String)": [
            6,
            6,
            6
          ],
          "StrBuilder.endsWith(final, String)": [
            6,
            6,
            6
          ],
          "StrBuilder.subSequence(final, int, final, int)": [
            4,
            4,
            4
          ],
          "StrBuilder.substring(final, int)": [
            2,
            2,
            2
          ],
          "StrBuilder.leftString(final, int)": [
            4,
            4,
            4
          ],
          "StrBuilder.rightString(final, int)": [
            4,
            4,
            4
          ],
          "StrBuilder.midString(int, final, int)": [
            5,
            5,
            5
          ],
          "StrBuilder.contains(final, char)": [
            3,
            3,
            3
          ],
          "StrBuilder.indexOf(final, char, int)": [
            4,
            4,
            4
          ],
          "StrBuilder.indexOf(final, String, int)": [
            7,
            0,
            0
          ],
          "StrBuilder.indexOf(final, StrMatcher, int)": [
            4,
            4,
            4
          ],
          "StrBuilder.lastIndexOf(final, char, int)": [
            4,
            4,
            4
          ],
          "StrBuilder.lastIndexOf(final, String, int)": [
            8,
            8,
            8
          ],
          "StrBuilder.lastIndexOf(final, StrMatcher, int)": [
            4,
            4,
            4
          ],
          "StrBuilder.equalsIgnoreCase(final, StrBuilder)": [
            5,
            5,
            5
          ],
          "StrBuilder.equals(final, StrBuilder)": [
            5,
            5,
            5
          ],
          "StrBuilder.equals(final, Object)": [
            2,
            2,
            2
          ],
          "StrBuilder.hashCode()": [
            2,
            2,
            2
          ],
          "StrBuilder.validateRange(final, int, int)": [
            4,
            4,
            4
          ],
          "StrBuilderTokenizer.tokenize(final, char[], final, int, final, int)": [
            3,
            3,
            3
          ],
          "StrBuilderTokenizer.getContent()": [
            3,
            3,
            3
          ],
          "StrBuilderReader.read()": [
            2,
            2,
            2
          ],
          "StrBuilderReader.read(final, char, [], final, int, int)": [
            5,
            5,
            5
          ],
          "StrBuilderReader.skip(long)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
    },
    {
      "src_name": "StrMatcher",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/StrMatcher.java",
      "class_declaration": "public abstract class StrMatcher ",
      "methods_under_test": {
        "=1": {
          "StrMatcher.commaMatcher()": [
            1,
            1,
            1
          ],
          "StrMatcher.tabMatcher()": [
            1,
            1,
            1
          ],
          "StrMatcher.spaceMatcher()": [
            1,
            1,
            1
          ],
          "StrMatcher.splitMatcher()": [
            1,
            1,
            1
          ],
          "StrMatcher.trimMatcher()": [
            1,
            1,
            1
          ],
          "StrMatcher.singleQuoteMatcher()": [
            1,
            1,
            1
          ],
          "StrMatcher.doubleQuoteMatcher()": [
            1,
            1,
            1
          ],
          "StrMatcher.quoteMatcher()": [
            1,
            1,
            1
          ],
          "StrMatcher.noneMatcher()": [
            1,
            1,
            1
          ],
          "StrMatcher.charMatcher(final, char)": [
            1,
            1,
            1
          ],
          "StrMatcher.isMatch(final, char[], final, int)": [
            1,
            1,
            1
          ],
          "CharSetMatcher.isMatch(final, char[], final, int, final, int, final, int)": [
            1,
            1,
            1
          ],
          "CharMatcher.isMatch(final, char[], final, int, final, int, final, int)": [
            1,
            1,
            1
          ],
          "NoMatcher.isMatch(final, char[], final, int, final, int, final, int)": [
            1,
            1,
            1
          ],
          "TrimMatcher.isMatch(final, char[], final, int, final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StrMatcher.charSetMatcher()": [
            3,
            3,
            3
          ],
          "StrMatcher.charSetMatcher(final, String)": [
            3,
            3,
            3
          ],
          "StrMatcher.stringMatcher(final, String)": [
            2,
            2,
            2
          ],
          "StrMatcher.isMatch(final, char[], int, final, int, final, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java"
    },
    {
      "src_name": "MethodUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java",
      "class_declaration": "public class MethodUtils ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "MethodUtils.invokeMethod(final, Object, final, String)": [
            2,
            2,
            2
          ],
          "MethodUtils.invokeMethod(final, Object, final, String, Object[], Class<?>[])": [
            4,
            4,
            4
          ],
          "MethodUtils.invokeExactMethod(final, Object, final, String)": [
            2,
            2,
            2
          ],
          "MethodUtils.invokeExactMethod(final, Object, final, String, Object[], Class<?>[])": [
            4,
            4,
            4
          ],
          "MethodUtils.invokeExactStaticMethod(final, Class<?>, final, String, Object[], Class<?>[])": [
            4,
            4,
            4
          ],
          "MethodUtils.invokeStaticMethod(final, Class<?>, final, String)": [
            2,
            2,
            2
          ],
          "MethodUtils.invokeStaticMethod(final, Class<?>, final, String, Object[], Class<?>[])": [
            4,
            4,
            4
          ],
          "MethodUtils.invokeExactStaticMethod(final, Class<?>, final, String)": [
            2,
            2,
            2
          ],
          "MethodUtils.getAccessibleMethod(final, Class<?>, final, String)": [
            3,
            3,
            3
          ],
          "MethodUtils.getAccessibleMethod(Method)": [
            4,
            4,
            4
          ],
          "MethodUtils.getMatchingAccessibleMethod(final, Class<?>, final, String)": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
    },
    {
      "src_name": "TimedSemaphore",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java",
      "class_declaration": "public class TimedSemaphore ",
      "methods_under_test": {
        "=1": {
          "TimedSemaphore.setLimit(final, int)": [
            1,
            1,
            1
          ],
          "TimedSemaphore.startTimer()": [
            1,
            1,
            1
          ],
          "TimedSemaphore.endOfPeriod()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TimedSemaphore.shutdown()": [
            4,
            4,
            4
          ],
          "TimedSemaphore.acquire()": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java"
    },
    {
      "src_name": "SerializationUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/SerializationUtils.java",
      "class_declaration": "public class SerializationUtils ",
      "methods_under_test": {
        "=1": {
          "SerializationUtils.serialize(final, Serializable)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SerializationUtils.clone(final, T)": [
            10,
            10,
            10
          ],
          "SerializationUtils.serialize(final, Serializable, final, OutputStream)": [
            7,
            7,
            7
          ],
          "SerializationUtils.deserialize(final, InputStream)": [
            10,
            10,
            10
          ],
          "SerializationUtils.deserialize(final, byte[])": [
            2,
            2,
            2
          ],
          "ClassLoaderAwareObjectInputStream.resolveClass(final, ObjectStreamClass)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java"
    },
    {
      "src_name": "FieldUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java",
      "class_declaration": "public class FieldUtils ",
      "methods_under_test": {
        "=1": {
          "FieldUtils.getField(final, Class<?>, final, String)": [
            1,
            1,
            1
          ],
          "FieldUtils.getDeclaredField(final, Class<?>, final, String)": [
            1,
            1,
            1
          ],
          "FieldUtils.getAllFields(Class<?>)": [
            1,
            1,
            1
          ],
          "FieldUtils.readStaticField(final, Field)": [
            1,
            1,
            1
          ],
          "FieldUtils.readStaticField(final, Class<?>, final, String)": [
            1,
            1,
            1
          ],
          "FieldUtils.readDeclaredStaticField(final, Class<?>, final, String)": [
            1,
            1,
            1
          ],
          "FieldUtils.readField(final, Field, final, Object)": [
            1,
            1,
            1
          ],
          "FieldUtils.readField(final, Object, final, String)": [
            1,
            1,
            1
          ],
          "FieldUtils.readDeclaredField(final, Object, final, String)": [
            1,
            1,
            1
          ],
          "FieldUtils.writeStaticField(final, Field, final, Object)": [
            1,
            1,
            1
          ],
          "FieldUtils.writeStaticField(final, Class<?>, final, String, final, Object)": [
            1,
            1,
            1
          ],
          "FieldUtils.writeDeclaredStaticField(final, Class<?>, final, String, final, Object)": [
            1,
            1,
            1
          ],
          "FieldUtils.writeField(final, Field, final, Object, final, Object)": [
            1,
            1,
            1
          ],
          "FieldUtils.writeField(final, Object, final, String, final, Object)": [
            1,
            1,
            1
          ],
          "FieldUtils.writeDeclaredField(final, Object, final, String, final, Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FieldUtils.getAllFieldsList(Class<?>)": [
            4,
            4,
            4
          ],
          "FieldUtils.readStaticField(final, Field, final, boolean)": [
            3,
            3,
            3
          ],
          "FieldUtils.readStaticField(final, Class<?>, final, String, final, boolean)": [
            2,
            2,
            2
          ],
          "FieldUtils.readDeclaredStaticField(final, Class<?>, final, String, final, boolean)": [
            2,
            2,
            2
          ],
          "FieldUtils.readField(final, Field, final, Object, final, boolean)": [
            3,
            3,
            3
          ],
          "FieldUtils.readField(final, Object, final, String, final, boolean)": [
            3,
            3,
            3
          ],
          "FieldUtils.readDeclaredField(final, Object, final, String, final, boolean)": [
            3,
            3,
            3
          ],
          "FieldUtils.writeStaticField(final, Field, final, Object, final, boolean)": [
            3,
            3,
            3
          ],
          "FieldUtils.writeStaticField(final, Class<?>, final, String, final, Object, final, boolean)": [
            2,
            2,
            2
          ],
          "FieldUtils.writeDeclaredStaticField(final, Class<?>, final, String, final, Object, final, boolean)": [
            2,
            2,
            2
          ],
          "FieldUtils.writeField(final, Field, final, Object, final, Object, final, boolean)": [
            3,
            3,
            3
          ],
          "FieldUtils.writeField(final, Object, final, String, final, Object, final, boolean)": [
            3,
            3,
            3
          ],
          "FieldUtils.writeDeclaredField(final, Object, final, String, final, Object, final, boolean)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "FieldUtils.getField(final, Class<?>, final, String, final, boolean)": [
            18,
            18,
            18
          ],
          "FieldUtils.getDeclaredField(final, Class<?>, final, String, final, boolean)": [
            12,
            12,
            12
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java"
    },
    {
      "src_name": "DefaultExceptionContext",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/exception/DefaultExceptionContext.java",
      "class_declaration": "public class DefaultExceptionContext implements ExceptionContext, Serializable ",
      "methods_under_test": {
        "=1": {
          "DefaultExceptionContext.addContextValue(final, String, final, Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DefaultExceptionContext.setContextValue(final, String, final, Object)": [
            3,
            3,
            3
          ],
          "DefaultExceptionContext.getContextValues(final, String)": [
            3,
            3,
            3
          ],
          "DefaultExceptionContext.getFirstContextValue(final, String)": [
            3,
            3,
            3
          ],
          "DefaultExceptionContext.getContextLabels()": [
            2,
            2,
            2
          ],
          "DefaultExceptionContext.getFormattedExceptionMessage(final, String)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/exception/DefaultExceptionContextTest.java"
    },
    {
      "src_name": "StrSubstitutor",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java",
      "class_declaration": "public class StrSubstitutor ",
      "methods_under_test": {
        "=1": {
          "StrSubstitutor.replace(final, Object, final, Map<String, V>)": [
            1,
            1,
            1
          ],
          "StrSubstitutor.replace(final, Object, final, Map<String, V>, final, String, final, String)": [
            1,
            1,
            1
          ],
          "StrSubstitutor.replaceSystemProperties(final, Object)": [
            1,
            1,
            1
          ],
          "StrSubstitutor.substitute(final, StrBuilder, final, int, final, int)": [
            1,
            1,
            1
          ],
          "StrSubstitutor.setEscapeChar(final, char)": [
            1,
            1,
            1
          ],
          "StrSubstitutor.setVariablePrefix(final, char)": [
            1,
            1,
            1
          ],
          "StrSubstitutor.setVariableSuffix(final, char)": [
            1,
            1,
            1
          ],
          "StrSubstitutor.setVariableResolver(final, StrLookup<?>)": [
            1,
            1,
            1
          ],
          "StrSubstitutor.setEnableSubstitutionInVariables(final, boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StrSubstitutor.replace(final, Object, final, Properties)": [
            3,
            3,
            3
          ],
          "StrSubstitutor.replace(final, String)": [
            3,
            3,
            3
          ],
          "StrSubstitutor.replace(final, String, final, int, final, int)": [
            3,
            3,
            3
          ],
          "StrSubstitutor.replace(final, char[])": [
            2,
            2,
            2
          ],
          "StrSubstitutor.replace(final, char[], final, int, final, int)": [
            2,
            2,
            2
          ],
          "StrSubstitutor.replace(final, StringBuffer)": [
            2,
            2,
            2
          ],
          "StrSubstitutor.replace(final, StringBuffer, final, int, final, int)": [
            2,
            2,
            2
          ],
          "StrSubstitutor.replace(final, StrBuilder)": [
            2,
            2,
            2
          ],
          "StrSubstitutor.replace(final, StrBuilder, final, int, final, int)": [
            2,
            2,
            2
          ],
          "StrSubstitutor.replace(final, Object)": [
            2,
            2,
            2
          ],
          "StrSubstitutor.replaceIn(final, StringBuffer)": [
            2,
            2,
            2
          ],
          "StrSubstitutor.replaceIn(final, StringBuffer, final, int, final, int)": [
            3,
            3,
            3
          ],
          "StrSubstitutor.replaceIn(final, StrBuilder)": [
            2,
            2,
            2
          ],
          "StrSubstitutor.replaceIn(final, StrBuilder, final, int, final, int)": [
            2,
            2,
            2
          ],
          "StrSubstitutor.resolveVariable(final, String, final, StrBuilder, final, int, final, int)": [
            2,
            2,
            2
          ],
          "StrSubstitutor.setVariablePrefixMatcher(final, StrMatcher)": [
            2,
            2,
            2
          ],
          "StrSubstitutor.setVariablePrefix(final, String)": [
            2,
            2,
            2
          ],
          "StrSubstitutor.setVariableSuffixMatcher(final, StrMatcher)": [
            2,
            2,
            2
          ],
          "StrSubstitutor.setVariableSuffix(final, String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java"
    },
    {
      "src_name": "LazyInitializer",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java",
      "class_declaration": "public abstract class LazyInitializer <T> implements ConcurrentInitializer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "LazyInitializer.get()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java"
    },
    {
      "src_name": "CallableBackgroundInitializer",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializer.java",
      "class_declaration": "public class CallableBackgroundInitializer <T> extends BackgroundInitializer<T> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializerTest.java"
    },
    {
      "src_name": "MutableObject",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/mutable/MutableObject.java",
      "class_declaration": "public class MutableObject <T> implements Mutable<T>, Serializable ",
      "methods_under_test": {
        "=1": {
          "MutableObject.setValue(final, T)": [
            1,
            1,
            1
          ],
          "MutableObject.hashCode()": [
            1,
            1,
            1
          ],
          "MutableObject.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MutableObject.equals(final, Object)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java"
    },
    {
      "src_name": "OctalUnescaper",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java",
      "class_declaration": "public class OctalUnescaper extends CharSequenceTranslator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "OctalUnescaper.translate(final, CharSequence, final, int, final, Writer)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/translate/OctalUnescaperTest.java"
    },
    {
      "src_name": "UnicodeEscaper",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java",
      "class_declaration": "public class UnicodeEscaper extends CodePointTranslator ",
      "methods_under_test": {
        "=1": {
          "UnicodeEscaper.below(final, int)": [
            1,
            1,
            1
          ],
          "UnicodeEscaper.above(final, int)": [
            1,
            1,
            1
          ],
          "UnicodeEscaper.outsideOf(final, int, final, int)": [
            1,
            1,
            1
          ],
          "UnicodeEscaper.between(final, int, final, int)": [
            1,
            1,
            1
          ],
          "UnicodeEscaper.toUtf16Escape(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnicodeEscaper.translate(final, int, final, Writer)": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/translate/UnicodeEscaperTest.java"
    },
    {
      "src_name": "ImmutableTriple",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/tuple/ImmutableTriple.java",
      "class_declaration": "public final class ImmutableTriple <L, M, R> extends Triple<L, M, R> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java"
    },
    {
      "src_name": "TypeUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
      "class_declaration": "public class TypeUtils ",
      "methods_under_test": {
        "=1": {
          "TypeUtils.isAssignable(final, Type, final, Type)": [
            1,
            1,
            1
          ],
          "TypeUtils.getTypeArguments(final, ParameterizedType)": [
            1,
            1,
            1
          ],
          "TypeUtils.getTypeArguments(final, Type, final, Class<?>)": [
            1,
            1,
            1
          ],
          "TypeUtils.getImplicitBounds(final, TypeVariable<?>)": [
            1,
            1,
            1
          ],
          "TypeUtils.getImplicitUpperBounds(final, WildcardType)": [
            1,
            1,
            1
          ],
          "TypeUtils.getImplicitLowerBounds(final, WildcardType)": [
            1,
            1,
            1
          ],
          "TypeUtils.isArrayType(final, Type)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TypeUtils.determineTypeArguments(final, Class<?>, final, ParameterizedType)": [
            4,
            4,
            4
          ],
          "TypeUtils.isInstance(final, Object, final, Type)": [
            2,
            2,
            2
          ],
          "TypeUtils.normalizeUpperBounds(final, Type[])": [
            6,
            6,
            6
          ],
          "TypeUtils.typesSatisfyVariables(final, Map<TypeVariable<?>, Type>)": [
            4,
            4,
            4
          ],
          "TypeUtils.getRawType(final, Type, final, Type)": [
            10,
            10,
            10
          ],
          "TypeUtils.getArrayComponentType(final, Type)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java"
    },
    {
      "src_name": "ClassUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/ClassUtils.java",
      "class_declaration": "public class ClassUtils ",
      "methods_under_test": {
        "=1": {
          "ClassUtils.isAssignable(final, Class<?>[])": [
            1,
            1,
            1
          ],
          "ClassUtils.isPrimitiveWrapper(final, Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtils.isAssignable(final, Class<?>, final, Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtils.wrapperToPrimitive(final, Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtils.isInnerClass(final, Class<?>)": [
            1,
            1,
            1
          ],
          "ClassUtils.getClass(final, ClassLoader, final, String)": [
            1,
            1,
            1
          ],
          "ClassUtils.getClass(final, String)": [
            1,
            1,
            1
          ],
          "ClassUtils.getClass(final, String, final, boolean)": [
            1,
            1,
            1
          ],
          "ClassUtils.getShortCanonicalName(final, String)": [
            1,
            1,
            1
          ],
          "ClassUtils.getPackageCanonicalName(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ClassUtils.getShortClassName(final, Object, final, String)": [
            2,
            2,
            2
          ],
          "ClassUtils.getShortClassName(final, Class<?>)": [
            2,
            2,
            2
          ],
          "ClassUtils.getShortClassName(String)": [
            7,
            7,
            7
          ],
          "ClassUtils.getSimpleName(final, Class<?>)": [
            2,
            2,
            2
          ],
          "ClassUtils.getSimpleName(final, Object, final, String)": [
            2,
            2,
            2
          ],
          "ClassUtils.getPackageName(final, Object, final, String)": [
            2,
            2,
            2
          ],
          "ClassUtils.getPackageName(final, Class<?>)": [
            2,
            2,
            2
          ],
          "ClassUtils.getPackageName(String)": [
            5,
            5,
            5
          ],
          "ClassUtils.getAllSuperclasses(final, Class<?>)": [
            3,
            3,
            3
          ],
          "ClassUtils.getAllInterfaces(final, Class<?>)": [
            2,
            2,
            2
          ],
          "ClassUtils.convertClassNamesToClasses(final, List<String>)": [
            4,
            4,
            4
          ],
          "ClassUtils.convertClassesToClassNames(final, List<Class<?>>)": [
            4,
            4,
            4
          ],
          "ClassUtils.isAssignable(Class<?>[], Class<?>[], final, boolean)": [
            6,
            6,
            6
          ],
          "ClassUtils.isPrimitiveOrWrapper(final, Class<?>)": [
            2,
            2,
            2
          ],
          "ClassUtils.primitiveToWrapper(final, Class<?>)": [
            2,
            2,
            2
          ],
          "ClassUtils.primitivesToWrappers()": [
            4,
            4,
            4
          ],
          "ClassUtils.wrappersToPrimitives()": [
            4,
            4,
            4
          ],
          "ClassUtils.getClass(final, ClassLoader, final, String, final, boolean)": [
            9,
            9,
            9
          ],
          "ClassUtils.getPublicMethod(final, Class<?>, final, String)": [
            6,
            6,
            6
          ],
          "ClassUtils.toClass()": [
            4,
            4,
            4
          ],
          "ClassUtils.getShortCanonicalName(final, Object, final, String)": [
            2,
            2,
            2
          ],
          "ClassUtils.getShortCanonicalName(final, Class<?>)": [
            2,
            2,
            2
          ],
          "ClassUtils.getPackageCanonicalName(final, Object, final, String)": [
            2,
            2,
            2
          ],
          "ClassUtils.getPackageCanonicalName(final, Class<?>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "ClassUtils.isAssignable(Class<?>, final, Class<?>, final, boolean)": [
            19,
            19,
            19
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
    },
    {
      "src_name": "RandomStringUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
      "class_declaration": "public class RandomStringUtils ",
      "methods_under_test": {
        "=1": {
          "RandomStringUtils.randomAscii(final, int)": [
            1,
            1,
            1
          ],
          "RandomStringUtils.randomAlphabetic(final, int)": [
            1,
            1,
            1
          ],
          "RandomStringUtils.randomAlphanumeric(final, int)": [
            1,
            1,
            1
          ],
          "RandomStringUtils.randomNumeric(final, int)": [
            1,
            1,
            1
          ],
          "RandomStringUtils.random(final, int, final, boolean, final, boolean)": [
            1,
            1,
            1
          ],
          "RandomStringUtils.random(final, int, final, int, final, int, final, boolean, final, boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "RandomStringUtils.random(final, int, final, String)": [
            2,
            2,
            2
          ],
          "RandomStringUtils.random(final, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "RandomStringUtils.random(int, int, int, final, boolean, final, boolean, final, char[], final, Random)": [
            16,
            16,
            16
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java"
    },
    {
      "src_name": "MutablePair",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/tuple/MutablePair.java",
      "class_declaration": "public class MutablePair <L, R> extends Pair<L, R> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/tuple/MutablePairTest.java"
    },
    {
      "src_name": "FormattableUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/FormattableUtils.java",
      "class_declaration": "public class FormattableUtils ",
      "methods_under_test": {
        "=1": {
          "FormattableUtils.toString(final, Formattable)": [
            1,
            1,
            1
          ],
          "FormattableUtils.append(final, CharSequence, final, Formatter, final, int, final, int, final, int)": [
            1,
            1,
            1
          ],
          "FormattableUtils.append(final, CharSequence, final, Formatter, final, int, final, int, final, int, final, char)": [
            1,
            1,
            1
          ],
          "FormattableUtils.append(final, CharSequence, final, Formatter, final, int, final, int, final, int, final, CharSequence)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FormattableUtils.append(final, CharSequence, final, Formatter, final, int, final, int, final, int, final, char, final, CharSequence)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/FormattableUtilsTest.java"
    },
    {
      "src_name": "StrTokenizer",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/StrTokenizer.java",
      "class_declaration": "public class StrTokenizer implements ListIterator<String>, Cloneable ",
      "methods_under_test": {
        "=1": {
          "StrTokenizer.getCSVInstance(final, String)": [
            1,
            1,
            1
          ],
          "StrTokenizer.getCSVInstance(final, char[])": [
            1,
            1,
            1
          ],
          "StrTokenizer.getTSVInstance(final, String)": [
            1,
            1,
            1
          ],
          "StrTokenizer.getTSVInstance(final, char[])": [
            1,
            1,
            1
          ],
          "StrTokenizer.size()": [
            1,
            1,
            1
          ],
          "StrTokenizer.getTokenArray()": [
            1,
            1,
            1
          ],
          "StrTokenizer.reset()": [
            1,
            1,
            1
          ],
          "StrTokenizer.reset(final, char[])": [
            1,
            1,
            1
          ],
          "StrTokenizer.hasNext()": [
            1,
            1,
            1
          ],
          "StrTokenizer.nextIndex()": [
            1,
            1,
            1
          ],
          "StrTokenizer.hasPrevious()": [
            1,
            1,
            1
          ],
          "StrTokenizer.previousIndex()": [
            1,
            1,
            1
          ],
          "StrTokenizer.remove()": [
            1,
            1,
            1
          ],
          "StrTokenizer.set(final, String)": [
            1,
            1,
            1
          ],
          "StrTokenizer.add(final, String)": [
            1,
            1,
            1
          ],
          "StrTokenizer.setDelimiterChar(final, char)": [
            1,
            1,
            1
          ],
          "StrTokenizer.setDelimiterString(final, String)": [
            1,
            1,
            1
          ],
          "StrTokenizer.setQuoteChar(final, char)": [
            1,
            1,
            1
          ],
          "StrTokenizer.setIgnoredChar(final, char)": [
            1,
            1,
            1
          ],
          "StrTokenizer.setEmptyTokenAsNull(final, boolean)": [
            1,
            1,
            1
          ],
          "StrTokenizer.setIgnoreEmptyTokens(final, boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StrTokenizer.nextToken()": [
            2,
            2,
            2
          ],
          "StrTokenizer.previousToken()": [
            2,
            2,
            2
          ],
          "StrTokenizer.getTokenList()": [
            2,
            2,
            2
          ],
          "StrTokenizer.reset(final, String)": [
            2,
            2,
            2
          ],
          "StrTokenizer.next()": [
            2,
            2,
            2
          ],
          "StrTokenizer.previous()": [
            2,
            2,
            2
          ],
          "StrTokenizer.tokenize(final, char[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "StrTokenizer.setDelimiterMatcher(final, StrMatcher)": [
            2,
            2,
            2
          ],
          "StrTokenizer.setQuoteMatcher(final, StrMatcher)": [
            2,
            2,
            2
          ],
          "StrTokenizer.setIgnoredMatcher(final, StrMatcher)": [
            2,
            2,
            2
          ],
          "StrTokenizer.setTrimmerMatcher(final, StrMatcher)": [
            2,
            2,
            2
          ],
          "StrTokenizer.getContent()": [
            2,
            2,
            2
          ],
          "StrTokenizer.clone()": [
            3,
            3,
            3
          ],
          "StrTokenizer.cloneReset()": [
            2,
            2,
            2
          ],
          "StrTokenizer.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java"
    },
    {
      "src_name": "IEEE754rUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/math/IEEE754rUtils.java",
      "class_declaration": "public class IEEE754rUtils ",
      "methods_under_test": {
        "=1": {
          "IEEE754rUtils.min(final, double, final, double, final, double)": [
            1,
            1,
            1
          ],
          "IEEE754rUtils.min(final, float, final, float, final, float)": [
            1,
            1,
            1
          ],
          "IEEE754rUtils.max(final, double, final, double, final, double)": [
            1,
            1,
            1
          ],
          "IEEE754rUtils.max(final, float, final, float, final, float)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "IEEE754rUtils.min(final, double[])": [
            4,
            4,
            4
          ],
          "IEEE754rUtils.min(final, float[])": [
            4,
            4,
            4
          ],
          "IEEE754rUtils.min(final, double, final, double)": [
            4,
            4,
            4
          ],
          "IEEE754rUtils.min(final, float, final, float)": [
            4,
            4,
            4
          ],
          "IEEE754rUtils.max(final, double[])": [
            4,
            4,
            4
          ],
          "IEEE754rUtils.max(final, float[])": [
            4,
            4,
            4
          ],
          "IEEE754rUtils.max(final, double, final, double)": [
            4,
            4,
            4
          ],
          "IEEE754rUtils.max(final, float, final, float)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/math/IEEE754rUtilsTest.java"
    },
    {
      "src_name": "CharUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/CharUtils.java",
      "class_declaration": "public class CharUtils ",
      "methods_under_test": {
        "=1": {
          "CharUtils.toCharacterObject(final, char)": [
            1,
            1,
            1
          ],
          "CharUtils.isAscii(final, char)": [
            1,
            1,
            1
          ],
          "CharUtils.isAsciiPrintable(final, char)": [
            1,
            1,
            1
          ],
          "CharUtils.isAsciiControl(final, char)": [
            1,
            1,
            1
          ],
          "CharUtils.isAsciiAlpha(final, char)": [
            1,
            1,
            1
          ],
          "CharUtils.isAsciiAlphaUpper(final, char)": [
            1,
            1,
            1
          ],
          "CharUtils.isAsciiAlphaLower(final, char)": [
            1,
            1,
            1
          ],
          "CharUtils.isAsciiNumeric(final, char)": [
            1,
            1,
            1
          ],
          "CharUtils.isAsciiAlphanumeric(final, char)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CharUtils.toCharacterObject(final, String)": [
            2,
            2,
            2
          ],
          "CharUtils.toChar(final, Character)": [
            2,
            2,
            2
          ],
          "CharUtils.toChar(final, Character, final, char)": [
            2,
            2,
            2
          ],
          "CharUtils.toChar(final, String)": [
            2,
            2,
            2
          ],
          "CharUtils.toChar(final, String, final, char)": [
            2,
            2,
            2
          ],
          "CharUtils.toIntValue(final, char)": [
            2,
            2,
            2
          ],
          "CharUtils.toIntValue(final, char, final, int)": [
            2,
            2,
            2
          ],
          "CharUtils.toIntValue(final, Character)": [
            2,
            2,
            2
          ],
          "CharUtils.toIntValue(final, Character, final, int)": [
            2,
            2,
            2
          ],
          "CharUtils.toString(final, char)": [
            2,
            2,
            2
          ],
          "CharUtils.toString(final, Character)": [
            2,
            2,
            2
          ],
          "CharUtils.unicodeEscaped(final, char)": [
            4,
            4,
            4
          ],
          "CharUtils.unicodeEscaped(final, Character)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
    },
    {
      "src_name": "EntityArrays",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
      "class_declaration": "public class EntityArrays ",
      "methods_under_test": {
        "=1": {
          "EntityArrays.ISO8859_1_ESCAPE()": [
            1,
            1,
            1
          ],
          "EntityArrays.ISO8859_1_UNESCAPE()": [
            1,
            1,
            1
          ],
          "EntityArrays.HTML40_EXTENDED_ESCAPE()": [
            1,
            1,
            1
          ],
          "EntityArrays.HTML40_EXTENDED_UNESCAPE()": [
            1,
            1,
            1
          ],
          "EntityArrays.BASIC_ESCAPE()": [
            1,
            1,
            1
          ],
          "EntityArrays.BASIC_UNESCAPE()": [
            1,
            1,
            1
          ],
          "EntityArrays.APOS_ESCAPE()": [
            1,
            1,
            1
          ],
          "EntityArrays.APOS_UNESCAPE()": [
            1,
            1,
            1
          ],
          "EntityArrays.JAVA_CTRL_CHARS_ESCAPE()": [
            1,
            1,
            1
          ],
          "EntityArrays.JAVA_CTRL_CHARS_UNESCAPE()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EntityArrays.invert(final, String[][])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/translate/EntityArraysTest.java"
    },
    {
      "src_name": "CompareToBuilder",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java",
      "class_declaration": "public class CompareToBuilder implements Builder<Integer> ",
      "methods_under_test": {
        "=1": {
          "CompareToBuilder.reflectionCompare(final, Object, final, Object, final, boolean)": [
            1,
            1,
            1
          ],
          "CompareToBuilder.reflectionCompare(final, Object, final, Object, final, Collection<String>)": [
            1,
            1,
            1
          ],
          "CompareToBuilder.reflectionCompare(final, Object, final, Object)": [
            1,
            1,
            1
          ],
          "CompareToBuilder.append(final, Object, final, Object)": [
            1,
            1,
            1
          ],
          "CompareToBuilder.append(final, Object[], final, Object[])": [
            1,
            1,
            1
          ],
          "CompareToBuilder.toComparison()": [
            1,
            1,
            1
          ],
          "CompareToBuilder.build()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CompareToBuilder.reflectionCompare(final, Object, final, Object, final, boolean, final, Class<?>)": [
            5,
            5,
            5
          ],
          "CompareToBuilder.appendSuper(final, int)": [
            2,
            2,
            2
          ],
          "CompareToBuilder.append(final, long, final, long)": [
            2,
            2,
            2
          ],
          "CompareToBuilder.append(final, int, final, int)": [
            2,
            2,
            2
          ],
          "CompareToBuilder.append(final, short, final, short)": [
            2,
            2,
            2
          ],
          "CompareToBuilder.append(final, char, final, char)": [
            2,
            2,
            2
          ],
          "CompareToBuilder.append(final, byte, final, byte)": [
            2,
            2,
            2
          ],
          "CompareToBuilder.append(final, double, final, double)": [
            2,
            2,
            2
          ],
          "CompareToBuilder.append(final, float, final, float)": [
            2,
            2,
            2
          ],
          "CompareToBuilder.append(final, boolean, final, boolean)": [
            4,
            4,
            4
          ],
          "CompareToBuilder.append(final, Object[], final, Object[], final, Comparator<?>)": [
            7,
            7,
            7
          ],
          "CompareToBuilder.append(final, long[], final, long[])": [
            7,
            7,
            7
          ],
          "CompareToBuilder.append(final, int[], final, int[])": [
            7,
            7,
            7
          ],
          "CompareToBuilder.append(final, short[], final, short[])": [
            7,
            7,
            7
          ],
          "CompareToBuilder.append(final, char[], final, char[])": [
            7,
            7,
            7
          ],
          "CompareToBuilder.append(final, byte[], final, byte[])": [
            7,
            7,
            7
          ],
          "CompareToBuilder.append(final, double[], final, double[])": [
            7,
            7,
            7
          ],
          "CompareToBuilder.append(final, float[], final, float[])": [
            7,
            7,
            7
          ],
          "CompareToBuilder.append(final, boolean[], final, boolean[])": [
            7,
            7,
            7
          ]
        },
        "11-20": {
          "CompareToBuilder.append(final, Object, final, Object, final, Comparator<?>)": [
            15,
            15,
            15
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java"
    },
    {
      "src_name": "ExtendedMessageFormat",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
      "class_declaration": "public class ExtendedMessageFormat extends MessageFormat ",
      "methods_under_test": {
        "=1": {
          "ExtendedMessageFormat.toPattern()": [
            1,
            1,
            1
          ],
          "ExtendedMessageFormat.setFormat(final, int, final, Format)": [
            1,
            1,
            1
          ],
          "ExtendedMessageFormat.setFormatByArgumentIndex(final, int, final, Format)": [
            1,
            1,
            1
          ],
          "ExtendedMessageFormat.setFormats(final, Format[])": [
            1,
            1,
            1
          ],
          "ExtendedMessageFormat.setFormatsByArgumentIndex(final, Format[])": [
            1,
            1,
            1
          ],
          "ExtendedMessageFormat.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ExtendedMessageFormat.equals(final, Object)": [
            7,
            7,
            7
          ]
        },
        "11-20": {
          "ExtendedMessageFormat.applyPattern(final, String)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java"
    },
    {
      "src_name": "Fraction",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/math/Fraction.java",
      "class_declaration": "public final class Fraction extends Number implements Comparable<Fraction> ",
      "methods_under_test": {
        "=1": {
          "Fraction.intValue()": [
            1,
            1,
            1
          ],
          "Fraction.longValue()": [
            1,
            1,
            1
          ],
          "Fraction.floatValue()": [
            1,
            1,
            1
          ],
          "Fraction.doubleValue()": [
            1,
            1,
            1
          ],
          "Fraction.add(final, Fraction)": [
            1,
            1,
            1
          ],
          "Fraction.subtract(final, Fraction)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Fraction.getFraction(int, int)": [
            4,
            4,
            4
          ],
          "Fraction.getFraction(final, int, final, int, final, int)": [
            6,
            6,
            6
          ],
          "Fraction.getReducedFraction(int, int)": [
            6,
            6,
            6
          ],
          "Fraction.getFraction(double)": [
            4,
            4,
            4
          ],
          "Fraction.getFraction(String)": [
            7,
            7,
            7
          ],
          "Fraction.reduce()": [
            3,
            3,
            3
          ],
          "Fraction.invert()": [
            5,
            5,
            5
          ],
          "Fraction.negate()": [
            2,
            2,
            2
          ],
          "Fraction.abs()": [
            2,
            2,
            2
          ],
          "Fraction.pow(final, int)": [
            7,
            7,
            7
          ],
          "Fraction.multiplyBy(final, Fraction)": [
            3,
            3,
            3
          ],
          "Fraction.divideBy(final, Fraction)": [
            3,
            3,
            3
          ],
          "Fraction.equals(final, Object)": [
            3,
            3,
            3
          ],
          "Fraction.hashCode()": [
            2,
            2,
            2
          ],
          "Fraction.compareTo(final, Fraction)": [
            6,
            6,
            6
          ],
          "Fraction.toString()": [
            2,
            2,
            2
          ],
          "Fraction.toProperString()": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/math/FractionTest.java"
    }
  ],
  "src_test_fuzz_match": [
    {
      "src_name": "ExceptionContext",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/exception/ExceptionContext.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java"
    },
    {
      "src_name": "ConcurrentInitializer",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentInitializer.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java"
    }
  ],
  "src_without_tests": [
    {
      "src_name": "FormatFactory",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/FormatFactory.java",
      "error": "list index out of range"
    },
    {
      "src_name": "CodePointTranslator",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/translate/CodePointTranslator.java",
      "class_declaration": "public abstract class CodePointTranslator extends CharSequenceTranslator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "CodePointTranslator.translate(final, CharSequence, final, int, final, Writer)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AggregateTranslator",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/translate/AggregateTranslator.java",
      "class_declaration": "public class AggregateTranslator extends CharSequenceTranslator ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "AggregateTranslator.translate(final, CharSequence, final, int, final, Writer)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CharSequenceTranslator",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
      "class_declaration": "public abstract class CharSequenceTranslator ",
      "methods_under_test": {
        "=1": {
          "CharSequenceTranslator.with()": [
            1,
            1,
            1
          ],
          "CharSequenceTranslator.hex(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CharSequenceTranslator.translate(final, CharSequence)": [
            3,
            3,
            3
          ],
          "CharSequenceTranslator.translate(final, CharSequence, final, Writer)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "IDKey",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/builder/IDKey.java",
      "class_declaration": "final class IDKey ",
      "methods_under_test": {
        "=1": {
          "IDKey.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "IDKey.equals(final, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JavaUnicodeEscaper",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/text/translate/JavaUnicodeEscaper.java",
      "class_declaration": "public class JavaUnicodeEscaper extends UnicodeEscaper ",
      "methods_under_test": {
        "=1": {
          "JavaUnicodeEscaper.above(final, int)": [
            1,
            1,
            1
          ],
          "JavaUnicodeEscaper.below(final, int)": [
            1,
            1,
            1
          ],
          "JavaUnicodeEscaper.between(final, int, final, int)": [
            1,
            1,
            1
          ],
          "JavaUnicodeEscaper.outsideOf(final, int, final, int)": [
            1,
            1,
            1
          ],
          "JavaUnicodeEscaper.toUtf16Escape(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Mutable",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/mutable/Mutable.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DateParser",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/time/DateParser.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Builder",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/builder/Builder.java",
      "error": "list index out of range"
    },
    {
      "src_name": "MemberUtils",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java",
      "class_declaration": "abstract class MemberUtils ",
      "methods_under_test": {
        "=1": {
          "MemberUtils.isPackageAccess(final, int)": [
            1,
            1,
            1
          ],
          "MemberUtils.isAccessible(final, Member)": [
            1,
            1,
            1
          ],
          "MemberUtils.compareParameterTypes(final, Class<?>[], final, Class<?>[], final, Class<?>[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MemberUtils.setAccessibleWorkaround(final, AccessibleObject)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FormatCache",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/time/FormatCache.java",
      "class_declaration": "abstract class FormatCache <F extends Format> ",
      "methods_under_test": {
        "=1": {
          "MultipartKey.equals(final, Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FormatCache.getInstance(final, String, TimeZone, Locale)": [
            6,
            6,
            6
          ],
          "FormatCache.getDateTimeInstance(final, Integer, final, Integer, final, TimeZone, Locale)": [
            2,
            2,
            2
          ],
          "MultipartKey.hashCode()": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "FormatCache.getPatternForStyle(final, Integer, final, Integer, final, Locale)": [
            14,
            14,
            14
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CloneFailedException",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java",
      "class_declaration": "public class CloneFailedException extends RuntimeException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ConcurrentRuntimeException",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java",
      "class_declaration": "public class ConcurrentRuntimeException extends RuntimeException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DatePrinter",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/time/DatePrinter.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SerializationException",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/SerializationException.java",
      "class_declaration": "public class SerializationException extends RuntimeException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ReflectionToStringBuilder",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java",
      "class_declaration": "public class ReflectionToStringBuilder extends ToStringBuilder ",
      "methods_under_test": {
        "=1": {
          "ReflectionToStringBuilder.toString(final, Object)": [
            1,
            1,
            1
          ],
          "ReflectionToStringBuilder.toString(final, Object, final, ToStringStyle)": [
            1,
            1,
            1
          ],
          "ReflectionToStringBuilder.toString(final, Object, final, ToStringStyle, final, boolean)": [
            1,
            1,
            1
          ],
          "ReflectionToStringBuilder.toString(final, Object, final, ToStringStyle, final, boolean, final, boolean)": [
            1,
            1,
            1
          ],
          "ReflectionToStringBuilder.toString(final, T, final, ToStringStyle, final, boolean, final, boolean, final, Class<? super T>)": [
            1,
            1,
            1
          ],
          "ReflectionToStringBuilder.toStringExclude(final, Object, final, Collection<String>)": [
            1,
            1,
            1
          ],
          "ReflectionToStringBuilder.toStringExclude(final, Object)": [
            1,
            1,
            1
          ],
          "ReflectionToStringBuilder.getValue(final, Field)": [
            1,
            1,
            1
          ],
          "ReflectionToStringBuilder.reflectionAppendArray(final, Object)": [
            1,
            1,
            1
          ],
          "ReflectionToStringBuilder.setAppendStatics(final, boolean)": [
            1,
            1,
            1
          ],
          "ReflectionToStringBuilder.setAppendTransients(final, boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ReflectionToStringBuilder.toNoNullStringArray(final, Collection<String>)": [
            2,
            2,
            2
          ],
          "ReflectionToStringBuilder.toNoNullStringArray(final, Object[])": [
            3,
            3,
            3
          ],
          "ReflectionToStringBuilder.accept(final, Field)": [
            5,
            5,
            5
          ],
          "ReflectionToStringBuilder.appendFieldsIn(final, Class<?>)": [
            2,
            2,
            2
          ],
          "ReflectionToStringBuilder.setExcludeFieldNames()": [
            2,
            2,
            2
          ],
          "ReflectionToStringBuilder.setUpToClass(final, Class<?>)": [
            3,
            3,
            3
          ],
          "ReflectionToStringBuilder.toString()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ConcurrentException",
      "src_path": "../../defects4j-subjects/Lang-4f/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentException.java",
      "class_declaration": "public class ConcurrentException extends Exception ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    }
  ],
  "test_unpaired": [
    {
      "ReflectionToStringBuilderMutateInspectConcurrencyTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderMutateInspectConcurrencyTest.java"
    },
    {
      "StaticContainer": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/testbed/StaticContainer.java"
    },
    {
      "SimpleToStringStyleTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java"
    },
    {
      "Ambig": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/testbed/Ambig.java"
    },
    {
      "FastDateFormat_PrinterTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/time/FastDateFormat_PrinterTest.java"
    },
    {
      "MultiLineToStringStyleTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java"
    },
    {
      "StringUtilsTrimEmptyTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java"
    },
    {
      "StringUtilsSubstringTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
    },
    {
      "StringUtilsStartsEndsWithTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java"
    },
    {
      "NoFieldNamesToStringStyleTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java"
    },
    {
      "PubliclyShadowedChild": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/testbed/PubliclyShadowedChild.java"
    },
    {
      "ReflectionToStringBuilderExcludeTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java"
    },
    {
      "Foo": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/testbed/Foo.java"
    },
    {
      "ArrayUtilsAddTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java"
    },
    {
      "DateUtilsRoundingTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java"
    },
    {
      "PrivatelyShadowedChild": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/testbed/PrivatelyShadowedChild.java"
    },
    {
      "HashCodeBuilderAndEqualsBuilderTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java"
    },
    {
      "StaticContainerChild": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/testbed/StaticContainerChild.java"
    },
    {
      "CharUtilsPerfRun": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java"
    },
    {
      "StringParameterizedChild": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java"
    },
    {
      "ToStringStyleConcurrencyTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/ToStringStyleConcurrencyTest.java"
    },
    {
      "Parent": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/testbed/Parent.java"
    },
    {
      "GenericTypeHolder": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/testbed/GenericTypeHolder.java"
    },
    {
      "ArrayUtilsRemoveMultipleTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveMultipleTest.java"
    },
    {
      "FastDateFormat_ParserTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/time/FastDateFormat_ParserTest.java"
    },
    {
      "StrBuilderAppendInsertTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
    },
    {
      "ReflectionToStringBuilderConcurrencyTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderConcurrencyTest.java"
    },
    {
      "GenericParent": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/testbed/GenericParent.java"
    },
    {
      "StringUtilsEqualsIndexOfTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
    },
    {
      "DefaultToStringStyleTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java"
    },
    {
      "StringUtilsIsTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java"
    },
    {
      "HashSetvBitSetTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/HashSetvBitSetTest.java"
    },
    {
      "Bar": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/testbed/Bar.java"
    },
    {
      "PublicChild": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/reflect/testbed/PublicChild.java"
    },
    {
      "DateUtilsFragmentTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java"
    },
    {
      "ShortPrefixToStringStyleTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java"
    },
    {
      "ArrayUtilsRemoveTest": "../../defects4j-subjects/Lang-4f/src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java"
    }
  ]
}