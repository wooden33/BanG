{
  "src_test_exact_match": [
    {
      "src_name": "FixedLengthBlockOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java",
      "class_declaration": "public class FixedLengthBlockOutputStream extends OutputStream implements WritableByteChannel ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "FixedLengthBlockOutputStream.write(int)": [
            2,
            2,
            2
          ],
          "FixedLengthBlockOutputStream.write(byte[], final, int, final, int)": [
            2,
            2,
            2
          ],
          "FixedLengthBlockOutputStream.write(ByteBuffer)": [
            5,
            5,
            5
          ],
          "FixedLengthBlockOutputStream.flushBlock()": [
            2,
            2,
            2
          ],
          "FixedLengthBlockOutputStream.close()": [
            2,
            2,
            2
          ],
          "BufferAtATimeOutputChannel.write(ByteBuffer)": [
            4,
            4,
            4
          ],
          "BufferAtATimeOutputChannel.close()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java"
    },
    {
      "src_name": "BitInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/BitInputStream.java",
      "class_declaration": "public class BitInputStream implements Closeable ",
      "methods_under_test": {
        "=1": {
          "BitInputStream.close()": [
            1,
            1,
            1
          ],
          "BitInputStream.clearBitCache()": [
            1,
            1,
            1
          ],
          "BitInputStream.bitsCached()": [
            1,
            1,
            1
          ],
          "BitInputStream.bitsAvailable()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BitInputStream.readBits(final, int)": [
            5,
            5,
            5
          ],
          "BitInputStream.alignWithByteBoundary()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java"
    },
    {
      "src_name": "IOUtils",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/IOUtils.java",
      "class_declaration": "public final class IOUtils ",
      "methods_under_test": {
        "=1": {
          "IOUtils.copy(final, InputStream, final, OutputStream)": [
            1,
            1,
            1
          ],
          "IOUtils.readFully(final, InputStream, final, byte[])": [
            1,
            1,
            1
          ],
          "IOUtils.toByteArray(final, InputStream)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "IOUtils.copy(final, InputStream, final, OutputStream, final, int)": [
            2,
            2,
            2
          ],
          "IOUtils.skip(final, InputStream, long)": [
            5,
            5,
            5
          ],
          "IOUtils.readFully(final, InputStream, final, byte[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "IOUtils.readFully(ReadableByteChannel, ByteBuffer)": [
            3,
            3,
            3
          ],
          "IOUtils.closeQuietly(final, Closeable)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java"
    },
    {
      "src_name": "ZipEncoding",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java"
    },
    {
      "src_name": "TarArchiveOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
      "class_declaration": "public class TarArchiveOutputStream extends ArchiveOutputStream ",
      "methods_under_test": {
        "=1": {
          "TarArchiveOutputStream.setLongFileMode(final, int)": [
            1,
            1,
            1
          ],
          "TarArchiveOutputStream.setBigNumberMode(final, int)": [
            1,
            1,
            1
          ],
          "TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(final, boolean)": [
            1,
            1,
            1
          ],
          "TarArchiveOutputStream.flush()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TarArchiveOutputStream.finish()": [
            3,
            3,
            3
          ],
          "TarArchiveOutputStream.close()": [
            3,
            3,
            3
          ],
          "TarArchiveOutputStream.putArchiveEntry(final, ArchiveEntry)": [
            10,
            10,
            10
          ],
          "TarArchiveOutputStream.closeArchiveEntry()": [
            5,
            5,
            5
          ],
          "TarArchiveOutputStream.write(final, byte[], int, int)": [
            3,
            3,
            3
          ],
          "TarArchiveOutputStream.writePaxHeaders(final, TarArchiveEntry, final, String, final, Map<String, String>)": [
            2,
            2,
            2
          ],
          "TarArchiveOutputStream.createArchiveEntry(final, File, final, String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java"
    },
    {
      "src_name": "GzipUtils",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java",
      "class_declaration": "public class GzipUtils ",
      "methods_under_test": {
        "=1": {
          "GzipUtils.isCompressedFilename(final, String)": [
            1,
            1,
            1
          ],
          "GzipUtils.getUncompressedFilename(final, String)": [
            1,
            1,
            1
          ],
          "GzipUtils.getCompressedFilename(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/GzipUtilsTestCase.java"
    },
    {
      "src_name": "SeekableInMemoryByteChannel",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java",
      "class_declaration": "public class SeekableInMemoryByteChannel implements SeekableByteChannel ",
      "methods_under_test": {
        "=1": {
          "SeekableInMemoryByteChannel.position()": [
            1,
            1,
            1
          ],
          "SeekableInMemoryByteChannel.size()": [
            1,
            1,
            1
          ],
          "SeekableInMemoryByteChannel.close()": [
            1,
            1,
            1
          ],
          "SeekableInMemoryByteChannel.array()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SeekableInMemoryByteChannel.position(long)": [
            2,
            2,
            2
          ],
          "SeekableInMemoryByteChannel.truncate(long)": [
            2,
            2,
            2
          ],
          "SeekableInMemoryByteChannel.read(ByteBuffer)": [
            3,
            3,
            3
          ],
          "SeekableInMemoryByteChannel.write(ByteBuffer)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java"
    },
    {
      "src_name": "LZ77Compressor",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java",
      "class_declaration": "public class LZ77Compressor ",
      "methods_under_test": {
        "=1": {
          "LiteralBlock.toString()": [
            1,
            1,
            1
          ],
          "BackReference.toString()": [
            1,
            1,
            1
          ],
          "LZ77Compressor.compress(byte[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LZ77Compressor.compress(byte[], int, int)": [
            3,
            3,
            3
          ],
          "LZ77Compressor.finish()": [
            2,
            2,
            2
          ],
          "LZ77Compressor.prefill(byte[])": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java"
    },
    {
      "src_name": "CpioArchiveOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
      "class_declaration": "public class CpioArchiveOutputStream extends ArchiveOutputStream implements\n        CpioConstants ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "CpioArchiveOutputStream.putArchiveEntry(final, ArchiveEntry)": [
            6,
            6,
            6
          ],
          "CpioArchiveOutputStream.closeArchiveEntry()": [
            5,
            5,
            5
          ],
          "CpioArchiveOutputStream.write(final, byte[], final, int, final, int)": [
            7,
            7,
            7
          ],
          "CpioArchiveOutputStream.finish()": [
            4,
            4,
            4
          ],
          "CpioArchiveOutputStream.close()": [
            3,
            3,
            3
          ],
          "CpioArchiveOutputStream.createArchiveEntry(final, File, final, String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStreamTest.java"
    },
    {
      "src_name": "Charsets",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/Charsets.java",
      "class_declaration": "public class Charsets ",
      "methods_under_test": {
        "=1": {
          "Charsets.toCharset(final, Charset)": [
            1,
            1,
            1
          ],
          "Charsets.toCharset(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/utils/CharsetsTest.java"
    },
    {
      "src_name": "XZCompressorOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java",
      "class_declaration": "public class XZCompressorOutputStream extends CompressorOutputStream ",
      "methods_under_test": {
        "=1": {
          "XZCompressorOutputStream.write(final, int)": [
            1,
            1,
            1
          ],
          "XZCompressorOutputStream.write(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "XZCompressorOutputStream.flush()": [
            1,
            1,
            1
          ],
          "XZCompressorOutputStream.finish()": [
            1,
            1,
            1
          ],
          "XZCompressorOutputStream.close()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStreamTest.java"
    },
    {
      "src_name": "SevenZArchiveEntry",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java",
      "class_declaration": "public class SevenZArchiveEntry implements ArchiveEntry ",
      "methods_under_test": {
        "=1": {
          "SevenZArchiveEntry.setName(final, String)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.hasStream()": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setHasStream(final, boolean)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setDirectory(final, boolean)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setAntiItem(final, boolean)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setHasCreationDate(final, boolean)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setCreationDate(final, long)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setHasLastModifiedDate(final, boolean)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setLastModifiedDate(final, long)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setHasAccessDate(final, boolean)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setAccessDate(final, long)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setHasWindowsAttributes(final, boolean)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setWindowsAttributes(final, int)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setHasCrc(final, boolean)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setCrc(final, int)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setCrcValue(final, long)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setCompressedCrc(final, int)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setCompressedCrcValue(final, long)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setSize(final, long)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.setCompressedSize(final, long)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.ntfsTimeToJavaTime(final, long)": [
            1,
            1,
            1
          ],
          "SevenZArchiveEntry.javaTimeToNtfsTime(final, Date)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SevenZArchiveEntry.getCreationDate()": [
            2,
            2,
            2
          ],
          "SevenZArchiveEntry.setCreationDate(final, Date)": [
            2,
            2,
            2
          ],
          "SevenZArchiveEntry.getLastModifiedDate()": [
            2,
            2,
            2
          ],
          "SevenZArchiveEntry.setLastModifiedDate(final, Date)": [
            2,
            2,
            2
          ],
          "SevenZArchiveEntry.getAccessDate()": [
            2,
            2,
            2
          ],
          "SevenZArchiveEntry.setAccessDate(final, Date)": [
            2,
            2,
            2
          ],
          "SevenZArchiveEntry.setContentMethods(final, Iterable<? extends SevenZMethodConfiguration>)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntryTest.java"
    },
    {
      "src_name": "ZipFile",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java",
      "class_declaration": "public class ZipFile implements Closeable ",
      "methods_under_test": {
        "=1": {
          "ZipFile.close()": [
            1,
            1,
            1
          ],
          "ZipFile.closeQuietly(final, ZipFile)": [
            1,
            1,
            1
          ],
          "ZipFile.getEntriesInPhysicalOrder()": [
            1,
            1,
            1
          ],
          "ZipFile.getEntry(final, String)": [
            1,
            1,
            1
          ],
          "ZipFile.getEntries(final, String)": [
            1,
            1,
            1
          ],
          "ZipFile.canReadEntryData(final, ZipArchiveEntry)": [
            1,
            1,
            1
          ],
          "ZipFile.copyRawEntries(final, ZipArchiveOutputStream, final, ZipArchiveEntryPredicate)": [
            1,
            1,
            1
          ],
          "BoundedInputStream.addDummy()": [
            1,
            1,
            1
          ],
          "BoundedFileChannelInputStream.read(long, ByteBuffer)": [
            1,
            1,
            1
          ],
          "Entry.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ZipFile.getEntriesInPhysicalOrder(final, String)": [
            2,
            2,
            2
          ],
          "ZipFile.getRawInputStream(final, ZipArchiveEntry)": [
            2,
            2,
            2
          ],
          "ZipFile.getInputStream(final, ZipArchiveEntry)": [
            8,
            8,
            8
          ],
          "ZipFile.getUnixSymlink(final, ZipArchiveEntry)": [
            3,
            3,
            3
          ],
          "ZipFile.finalize()": [
            3,
            3,
            3
          ],
          "BoundedInputStream.read()": [
            5,
            5,
            5
          ],
          "BoundedInputStream.read(final, byte[], final, int, int)": [
            6,
            6,
            6
          ],
          "Entry.equals(final, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java"
    },
    {
      "src_name": "AsiExtraField",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java",
      "class_declaration": "public class AsiExtraField implements ZipExtraField, UnixStat, Cloneable ",
      "methods_under_test": {
        "=1": {
          "AsiExtraField.getLocalFileDataData()": [
            1,
            1,
            1
          ],
          "AsiExtraField.setUserId(final, int)": [
            1,
            1,
            1
          ],
          "AsiExtraField.setGroupId(final, int)": [
            1,
            1,
            1
          ],
          "AsiExtraField.setLinkedFile(final, String)": [
            1,
            1,
            1
          ],
          "AsiExtraField.setMode(final, int)": [
            1,
            1,
            1
          ],
          "AsiExtraField.setDirectory(final, boolean)": [
            1,
            1,
            1
          ],
          "AsiExtraField.parseFromCentralDirectoryData(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AsiExtraField.parseFromLocalFileData(final, byte[], final, int, final, int)": [
            3,
            3,
            3
          ],
          "AsiExtraField.getMode(final, int)": [
            3,
            3,
            3
          ],
          "AsiExtraField.clone()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java"
    },
    {
      "src_name": "BlockSort",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java",
      "class_declaration": "class BlockSort ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BlockSort.blockSort(final, BZip2CompressorOutputStream.Data, final, int)": [
            5,
            5,
            5
          ],
          "BlockSort.fallbackSort(final, BZip2CompressorOutputStream.Data, final, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "BlockSort.fallbackSort(final, int[], final, byte[], final, int)": [
            18,
            18,
            18
          ],
          "BlockSort.mainSort(final, BZip2CompressorOutputStream.Data, final, int)": [
            14,
            14,
            14
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java"
    },
    {
      "src_name": "BitStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java",
      "class_declaration": "class BitStream extends BitInputStream ",
      "methods_under_test": {
        "=1": {
          "BitStream.nextBit()": [
            1,
            1,
            1
          ],
          "BitStream.nextBits(final, int)": [
            1,
            1,
            1
          ],
          "BitStream.nextByte()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java"
    },
    {
      "src_name": "ArArchiveOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java",
      "class_declaration": "public class ArArchiveOutputStream extends ArchiveOutputStream ",
      "methods_under_test": {
        "=1": {
          "ArArchiveOutputStream.setLongFileMode(final, int)": [
            1,
            1,
            1
          ],
          "ArArchiveOutputStream.write(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArArchiveOutputStream.closeArchiveEntry()": [
            4,
            4,
            4
          ],
          "ArArchiveOutputStream.putArchiveEntry(final, ArchiveEntry)": [
            5,
            5,
            5
          ],
          "ArArchiveOutputStream.close()": [
            2,
            2,
            2
          ],
          "ArArchiveOutputStream.createArchiveEntry(final, File, final, String)": [
            2,
            2,
            2
          ],
          "ArArchiveOutputStream.finish()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java"
    },
    {
      "src_name": "TarArchiveEntry",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java",
      "class_declaration": "public class TarArchiveEntry implements ArchiveEntry, TarConstants ",
      "methods_under_test": {
        "=1": {
          "TarArchiveEntry.equals(final, TarArchiveEntry)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.hashCode()": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.isDescendent(final, TarArchiveEntry)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.setName(final, String)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.setMode(final, int)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.setLinkName(final, String)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.setUserId(final, int)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.setUserId(final, long)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.setGroupId(final, int)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.setGroupId(final, long)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.setUserName(final, String)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.setGroupName(final, String)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.setIds(final, int, final, int)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.setNames(final, String, final, String)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.setModTime(final, long)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.setModTime(final, Date)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.clearExtraPaxHeaders()": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.addPaxHeader(String, String)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.getExtraPaxHeader(String)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.updateEntryFromPaxHeaders(Map<String, String>)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.parseTarHeader(final, byte[], final, ZipEncoding)": [
            1,
            1,
            1
          ],
          "TarArchiveEntry.fillGNUSparse1xData(final, Map<String, String>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TarArchiveEntry.equals(final, Object)": [
            2,
            2,
            2
          ],
          "TarArchiveEntry.setSize(final, long)": [
            2,
            2,
            2
          ],
          "TarArchiveEntry.setDevMajor(final, int)": [
            2,
            2,
            2
          ],
          "TarArchiveEntry.setDevMinor(final, int)": [
            2,
            2,
            2
          ],
          "TarArchiveEntry.getDirectoryEntries()": [
            4,
            4,
            4
          ],
          "TarArchiveEntry.writeEntryHeader(final, byte[])": [
            3,
            3,
            3
          ],
          "TarArchiveEntry.writeEntryHeader(final, byte[], final, ZipEncoding, final, boolean)": [
            3,
            3,
            3
          ],
          "TarArchiveEntry.parseTarHeader(final, byte[])": [
            3,
            3,
            3
          ],
          "TarArchiveEntry.fillGNUSparse0xData(final, Map<String, String>)": [
            2,
            2,
            2
          ],
          "TarArchiveEntry.fillStarSparseData(final, Map<String, String>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java"
    },
    {
      "src_name": "BZip2CompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
      "class_declaration": "public class BZip2CompressorInputStream extends CompressorInputStream implements\n                                                                          BZip2Constants ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BZip2CompressorInputStream.read()": [
            2,
            2,
            2
          ],
          "BZip2CompressorInputStream.read(final, byte[], final, int, final, int)": [
            7,
            7,
            7
          ],
          "BZip2CompressorInputStream.close()": [
            2,
            2,
            2
          ],
          "Data.initTT(final, int)": [
            2,
            2,
            2
          ],
          "BZip2CompressorInputStream.matches(final, byte[], final, int)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java"
    },
    {
      "src_name": "CpioUtil",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java",
      "class_declaration": "class CpioUtil ",
      "methods_under_test": {
        "=1": {
          "CpioUtil.fileType(final, long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CpioUtil.byteArray2long(final, byte[], final, boolean)": [
            5,
            5,
            5
          ],
          "CpioUtil.long2byteArray(final, long, final, int, final, boolean)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/cpio/CpioUtilTest.java"
    },
    {
      "src_name": "BinaryTree",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java",
      "class_declaration": "class BinaryTree ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BinaryTree.addLeaf(final, int, final, int, final, int, final, int)": [
            4,
            4,
            4
          ],
          "BinaryTree.read(final, BitStream)": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "BinaryTree.decode(final, InputStream, final, int)": [
            12,
            12,
            12
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java"
    },
    {
      "src_name": "BlockLZ4CompressorOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java",
      "class_declaration": "public class BlockLZ4CompressorOutputStream extends CompressorOutputStream ",
      "methods_under_test": {
        "=1": {
          "BlockLZ4CompressorOutputStream.write(int)": [
            1,
            1,
            1
          ],
          "BlockLZ4CompressorOutputStream.write(byte[], int, int)": [
            1,
            1,
            1
          ],
          "BlockLZ4CompressorOutputStream.close()": [
            1,
            1,
            1
          ],
          "BlockLZ4CompressorOutputStream.createParameterBuilder()": [
            1,
            1,
            1
          ],
          "Pair.addLiteral(LZ77Compressor.LiteralBlock)": [
            1,
            1,
            1
          ],
          "Pair.hasBackReference()": [
            1,
            1,
            1
          ],
          "Pair.canBeWritten(int)": [
            1,
            1,
            1
          ],
          "Pair.length()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BlockLZ4CompressorOutputStream.finish()": [
            2,
            2,
            2
          ],
          "BlockLZ4CompressorOutputStream.prefill(byte[], int, int)": [
            2,
            2,
            2
          ],
          "Pair.setBackReference(LZ77Compressor.BackReference)": [
            2,
            2,
            2
          ],
          "Pair.writeTo(OutputStream)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java"
    },
    {
      "src_name": "ZCompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java",
      "class_declaration": "public class ZCompressorInputStream extends LZWInputStream ",
      "methods_under_test": {
        "=1": {
          "ZCompressorInputStream.matches(final, byte[], final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ZCompressorInputStream.readNextCode()": [
            2,
            2,
            2
          ],
          "ZCompressorInputStream.addEntry(final, int, final, byte)": [
            2,
            2,
            2
          ],
          "ZCompressorInputStream.decompressNextSymbol()": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/z/ZCompressorInputStreamTest.java"
    },
    {
      "src_name": "ZipArchiveInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
      "class_declaration": "public class ZipArchiveInputStream extends ArchiveInputStream ",
      "methods_under_test": {
        "=1": {
          "BoundedInputStream.read(final, byte[])": [
            1,
            1,
            1
          ],
          "BoundedInputStream.skip(final, long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ZipArchiveInputStream.canReadEntryData(final, ArchiveEntry)": [
            2,
            2,
            2
          ],
          "ZipArchiveInputStream.read(final, byte[], final, int, final, int)": [
            10,
            10,
            10
          ],
          "ZipArchiveInputStream.close()": [
            2,
            2,
            2
          ],
          "ZipArchiveInputStream.skip(final, long)": [
            4,
            4,
            4
          ],
          "ZipArchiveInputStream.matches(final, byte[], final, int)": [
            2,
            2,
            2
          ],
          "BoundedInputStream.read()": [
            5,
            5,
            5
          ],
          "BoundedInputStream.read(final, byte[], final, int, final, int)": [
            3,
            3,
            3
          ],
          "BoundedInputStream.available()": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "ZipArchiveInputStream.getNextZipEntry()": [
            18,
            18,
            18
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java"
    },
    {
      "src_name": "JarMarker",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/JarMarker.java",
      "class_declaration": "public final class JarMarker implements ZipExtraField ",
      "methods_under_test": {
        "=1": {
          "JarMarker.parseFromLocalFileData(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "JarMarker.parseFromCentralDirectoryData(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/jar/JarMarkerTest.java"
    },
    {
      "src_name": "X5455_ExtendedTimestamp",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java",
      "class_declaration": "public class X5455_ExtendedTimestamp implements ZipExtraField, Cloneable, Serializable ",
      "methods_under_test": {
        "=1": {
          "X5455_ExtendedTimestamp.getCentralDirectoryData()": [
            1,
            1,
            1
          ],
          "X5455_ExtendedTimestamp.parseFromCentralDirectoryData(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "X5455_ExtendedTimestamp.setFlags(final, byte)": [
            1,
            1,
            1
          ],
          "X5455_ExtendedTimestamp.setModifyTime(final, ZipLong)": [
            1,
            1,
            1
          ],
          "X5455_ExtendedTimestamp.setAccessTime(final, ZipLong)": [
            1,
            1,
            1
          ],
          "X5455_ExtendedTimestamp.setCreateTime(final, ZipLong)": [
            1,
            1,
            1
          ],
          "X5455_ExtendedTimestamp.setModifyJavaTime(final, Date)": [
            1,
            1,
            1
          ],
          "X5455_ExtendedTimestamp.setAccessJavaTime(final, Date)": [
            1,
            1,
            1
          ],
          "X5455_ExtendedTimestamp.setCreateJavaTime(final, Date)": [
            1,
            1,
            1
          ],
          "X5455_ExtendedTimestamp.clone()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "X5455_ExtendedTimestamp.getLocalFileDataData()": [
            4,
            4,
            4
          ],
          "X5455_ExtendedTimestamp.parseFromLocalFileData(final, byte[], int, final, int)": [
            4,
            4,
            4
          ],
          "X5455_ExtendedTimestamp.toString()": [
            4,
            4,
            4
          ],
          "X5455_ExtendedTimestamp.equals(final, Object)": [
            2,
            2,
            2
          ],
          "X5455_ExtendedTimestamp.hashCode()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java"
    },
    {
      "src_name": "CompressorStreamProvider",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/TestCompressorStreamProvider.java"
    },
    {
      "src_name": "AbstractLZ77CompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java",
      "class_declaration": "public abstract class AbstractLZ77CompressorInputStream extends CompressorInputStream ",
      "methods_under_test": {
        "=1": {
          "AbstractLZ77CompressorInputStream.read()": [
            1,
            1,
            1
          ],
          "AbstractLZ77CompressorInputStream.close()": [
            1,
            1,
            1
          ],
          "AbstractLZ77CompressorInputStream.available()": [
            1,
            1,
            1
          ],
          "AbstractLZ77CompressorInputStream.startLiteral(long)": [
            1,
            1,
            1
          ],
          "AbstractLZ77CompressorInputStream.hasMoreDataInBlock()": [
            1,
            1,
            1
          ],
          "AbstractLZ77CompressorInputStream.startBackReference(int, long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractLZ77CompressorInputStream.prefill(byte[])": [
            2,
            2,
            2
          ],
          "AbstractLZ77CompressorInputStream.readLiteral(final, byte[], final, int, final, int)": [
            2,
            2,
            2
          ],
          "AbstractLZ77CompressorInputStream.readBackReference(final, byte[], final, int, final, int)": [
            2,
            2,
            2
          ],
          "AbstractLZ77CompressorInputStream.readOneByte()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java"
    },
    {
      "src_name": "Change",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/changes/Change.java",
      "class_declaration": "class Change ",
      "methods_under_test": {
        "=1": {
          "Change.targetFile()": [
            1,
            1,
            1
          ],
          "Change.type()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/changes/ChangeTest.java"
    },
    {
      "src_name": "SevenZMethodConfiguration",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration.java",
      "class_declaration": "public class SevenZMethodConfiguration ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfigurationTest.java"
    },
    {
      "src_name": "ZipShort",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java",
      "class_declaration": "public final class ZipShort implements Cloneable, Serializable ",
      "methods_under_test": {
        "=1": {
          "ZipShort.getBytes()": [
            1,
            1,
            1
          ],
          "ZipShort.getBytes(final, int)": [
            1,
            1,
            1
          ],
          "ZipShort.putShort(final, int, final, byte[], final, int)": [
            1,
            1,
            1
          ],
          "ZipShort.getValue(final, byte[], final, int)": [
            1,
            1,
            1
          ],
          "ZipShort.getValue(final, byte[])": [
            1,
            1,
            1
          ],
          "ZipShort.hashCode()": [
            1,
            1,
            1
          ],
          "ZipShort.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ZipShort.equals(final, Object)": [
            2,
            2,
            2
          ],
          "ZipShort.clone()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java"
    },
    {
      "src_name": "SevenZOutputFile",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java",
      "class_declaration": "public class SevenZOutputFile implements Closeable ",
      "methods_under_test": {
        "=1": {
          "SevenZOutputFile.setContentCompression(final, SevenZMethod)": [
            1,
            1,
            1
          ],
          "SevenZOutputFile.setContentMethods(final, Iterable<? extends SevenZMethodConfiguration>)": [
            1,
            1,
            1
          ],
          "SevenZOutputFile.createArchiveEntry(final, File, final, String)": [
            1,
            1,
            1
          ],
          "SevenZOutputFile.putArchiveEntry(final, ArchiveEntry)": [
            1,
            1,
            1
          ],
          "SevenZOutputFile.write(final, int)": [
            1,
            1,
            1
          ],
          "SevenZOutputFile.write(final, byte[])": [
            1,
            1,
            1
          ],
          "OutputStreamWrapper.write(final, int)": [
            1,
            1,
            1
          ],
          "OutputStreamWrapper.write(final, byte[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SevenZOutputFile.close()": [
            2,
            2,
            2
          ],
          "SevenZOutputFile.closeArchiveEntry()": [
            5,
            5,
            5
          ],
          "SevenZOutputFile.write(final, byte[], final, int, final, int)": [
            2,
            2,
            2
          ],
          "SevenZOutputFile.finish()": [
            2,
            2,
            2
          ],
          "OutputStreamWrapper.write(final, byte[], final, int, final, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java"
    },
    {
      "src_name": "FramedLZ4CompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java",
      "class_declaration": "public class FramedLZ4CompressorInputStream extends CompressorInputStream ",
      "methods_under_test": {
        "=1": {
          "FramedLZ4CompressorInputStream.read()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FramedLZ4CompressorInputStream.close()": [
            2,
            2,
            2
          ],
          "FramedLZ4CompressorInputStream.read(final, byte[], final, int, final, int)": [
            7,
            7,
            7
          ],
          "FramedLZ4CompressorInputStream.matches(final, byte[], final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java"
    },
    {
      "src_name": "FramedSnappyCompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java",
      "class_declaration": "public class FramedSnappyCompressorInputStream extends CompressorInputStream ",
      "methods_under_test": {
        "=1": {
          "FramedSnappyCompressorInputStream.read()": [
            1,
            1,
            1
          ],
          "FramedSnappyCompressorInputStream.unmask(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FramedSnappyCompressorInputStream.close()": [
            2,
            2,
            2
          ],
          "FramedSnappyCompressorInputStream.read(final, byte[], final, int, final, int)": [
            3,
            3,
            3
          ],
          "FramedSnappyCompressorInputStream.available()": [
            3,
            3,
            3
          ],
          "FramedSnappyCompressorInputStream.matches(final, byte[], final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java"
    },
    {
      "src_name": "DeflateCompressorOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStream.java",
      "class_declaration": "public class DeflateCompressorOutputStream extends CompressorOutputStream ",
      "methods_under_test": {
        "=1": {
          "DeflateCompressorOutputStream.write(final, int)": [
            1,
            1,
            1
          ],
          "DeflateCompressorOutputStream.write(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "DeflateCompressorOutputStream.flush()": [
            1,
            1,
            1
          ],
          "DeflateCompressorOutputStream.finish()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DeflateCompressorOutputStream.close()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStreamTest.java"
    },
    {
      "src_name": "ChecksumCalculatingInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java",
      "class_declaration": "public class ChecksumCalculatingInputStream extends InputStream ",
      "methods_under_test": {
        "=1": {
          "ChecksumCalculatingInputStream.read(final, byte[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ChecksumCalculatingInputStream.read()": [
            4,
            4,
            4
          ],
          "ChecksumCalculatingInputStream.read(final, byte[], final, int, final, int)": [
            2,
            2,
            2
          ],
          "ChecksumCalculatingInputStream.skip(final, long)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStreamTest.java"
    },
    {
      "src_name": "XXHash32",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/lz4/XXHash32.java",
      "class_declaration": "public class XXHash32 implements Checksum ",
      "methods_under_test": {
        "=1": {
          "XXHash32.reset()": [
            1,
            1,
            1
          ],
          "XXHash32.update(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "XXHash32.update(byte[], int, final, int)": [
            6,
            6,
            6
          ],
          "XXHash32.getValue()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/lz4/XXHash32Test.java"
    },
    {
      "src_name": "Deflate64CompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.java",
      "class_declaration": "public class Deflate64CompressorInputStream extends CompressorInputStream ",
      "methods_under_test": {
        "=1": {
          "Deflate64CompressorInputStream.available()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Deflate64CompressorInputStream.read()": [
            3,
            3,
            3
          ],
          "Deflate64CompressorInputStream.read(byte[], int, int)": [
            3,
            3,
            3
          ],
          "Deflate64CompressorInputStream.close()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStreamTest.java"
    },
    {
      "src_name": "ChecksumVerifyingInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java",
      "class_declaration": "public class ChecksumVerifyingInputStream extends InputStream ",
      "methods_under_test": {
        "=1": {
          "ChecksumVerifyingInputStream.read(final, byte[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ChecksumVerifyingInputStream.read()": [
            7,
            7,
            7
          ],
          "ChecksumVerifyingInputStream.read(final, byte[], final, int, final, int)": [
            3,
            3,
            3
          ],
          "ChecksumVerifyingInputStream.skip(final, long)": [
            2,
            2,
            2
          ],
          "ChecksumVerifyingInputStream.close()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStreamTest.java"
    },
    {
      "src_name": "ChangeSet",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/changes/ChangeSet.java",
      "class_declaration": "public final class ChangeSet ",
      "methods_under_test": {
        "=1": {
          "ChangeSet.delete(final, String)": [
            1,
            1,
            1
          ],
          "ChangeSet.deleteDir(final, String)": [
            1,
            1,
            1
          ],
          "ChangeSet.add(final, ArchiveEntry, final, InputStream)": [
            1,
            1,
            1
          ],
          "ChangeSet.add(final, ArchiveEntry, final, InputStream, final, boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java"
    },
    {
      "src_name": "X7875_NewUnix",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java",
      "class_declaration": "public class X7875_NewUnix implements ZipExtraField, Cloneable, Serializable ",
      "methods_under_test": {
        "=1": {
          "X7875_NewUnix.setUID(final, long)": [
            1,
            1,
            1
          ],
          "X7875_NewUnix.setGID(final, long)": [
            1,
            1,
            1
          ],
          "X7875_NewUnix.getLocalFileDataLength()": [
            1,
            1,
            1
          ],
          "X7875_NewUnix.parseFromLocalFileData(final, byte[], int, final, int)": [
            1,
            1,
            1
          ],
          "X7875_NewUnix.toString()": [
            1,
            1,
            1
          ],
          "X7875_NewUnix.clone()": [
            1,
            1,
            1
          ],
          "X7875_NewUnix.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "X7875_NewUnix.getLocalFileDataData()": [
            5,
            5,
            5
          ],
          "X7875_NewUnix.equals(final, Object)": [
            2,
            2,
            2
          ],
          "X7875_NewUnix.trimLeadingZeroesForceMinLength(final, byte[])": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java"
    },
    {
      "src_name": "AES256SHA256Decoder",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java",
      "class_declaration": "class AES256SHA256Decoder extends CoderBase ",
      "methods_under_test": {
        "=1": {
          "AES256SHA256Decoder.decode(final, String, final, InputStream, final, long, final, Coder, final, byte[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256DecoderTest.java"
    },
    {
      "src_name": "StreamCompressor",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java",
      "class_declaration": "public abstract class StreamCompressor implements Closeable ",
      "methods_under_test": {
        "=1": {
          "StreamCompressor.create(final, OutputStream, final, Deflater)": [
            1,
            1,
            1
          ],
          "StreamCompressor.create(final, OutputStream)": [
            1,
            1,
            1
          ],
          "StreamCompressor.create(final, DataOutput, final, Deflater)": [
            1,
            1,
            1
          ],
          "StreamCompressor.create(final, SeekableByteChannel, final, Deflater)": [
            1,
            1,
            1
          ],
          "StreamCompressor.create(final, int, final, ScatterGatherBackingStore)": [
            1,
            1,
            1
          ],
          "StreamCompressor.create(final, ScatterGatherBackingStore)": [
            1,
            1,
            1
          ],
          "StreamCompressor.reset()": [
            1,
            1,
            1
          ],
          "StreamCompressor.close()": [
            1,
            1,
            1
          ],
          "StreamCompressor.flushDeflater()": [
            1,
            1,
            1
          ],
          "StreamCompressor.writeCounted(final, byte[])": [
            1,
            1,
            1
          ],
          "StreamCompressor.writeCounted(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "ScatterGatherBackingStoreCompressor.writeOut(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "OutputStreamCompressor.writeOut(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "DataOutputCompressor.writeOut(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "SeekableByteChannelCompressor.writeOut(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StreamCompressor.deflate(final, InputStream, final, int)": [
            3,
            3,
            3
          ],
          "StreamCompressor.write(final, byte[], final, int, final, int, final, int)": [
            2,
            2,
            2
          ],
          "StreamCompressor.deflate()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java"
    },
    {
      "src_name": "ArchiveOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java",
      "class_declaration": "public abstract class ArchiveOutputStream extends OutputStream ",
      "methods_under_test": {
        "=1": {
          "ArchiveOutputStream.write(final, int)": [
            1,
            1,
            1
          ],
          "ArchiveOutputStream.count(final, int)": [
            1,
            1,
            1
          ],
          "ArchiveOutputStream.canWriteEntryData(final, ArchiveEntry)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArchiveOutputStream.count(final, long)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java"
    },
    {
      "src_name": "BrotliCompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStream.java",
      "class_declaration": "public class BrotliCompressorInputStream extends CompressorInputStream ",
      "methods_under_test": {
        "=1": {
          "BrotliCompressorInputStream.available()": [
            1,
            1,
            1
          ],
          "BrotliCompressorInputStream.close()": [
            1,
            1,
            1
          ],
          "BrotliCompressorInputStream.read(final, byte[])": [
            1,
            1,
            1
          ],
          "BrotliCompressorInputStream.skip(final, long)": [
            1,
            1,
            1
          ],
          "BrotliCompressorInputStream.mark(final, int)": [
            1,
            1,
            1
          ],
          "BrotliCompressorInputStream.markSupported()": [
            1,
            1,
            1
          ],
          "BrotliCompressorInputStream.read()": [
            1,
            1,
            1
          ],
          "BrotliCompressorInputStream.read(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "BrotliCompressorInputStream.toString()": [
            1,
            1,
            1
          ],
          "BrotliCompressorInputStream.reset()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStreamTest.java"
    },
    {
      "src_name": "DumpArchiveEntry",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java",
      "class_declaration": "public class DumpArchiveEntry implements ArchiveEntry ",
      "methods_under_test": {
        "=1": {
          "DumpArchiveEntry.setSimpleName(final, String)": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.setNlink(final, int)": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.setCreationTime(final, Date)": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.setGeneration(final, int)": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.setDeleted(final, boolean)": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.setOffset(final, long)": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.setVolume(final, int)": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.isSparseRecord(final, int)": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.hashCode()": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.toString()": [
            1,
            1,
            1
          ],
          "TapeSegmentHeader.setIno(final, int)": [
            1,
            1,
            1
          ],
          "TapeSegmentHeader.getCdata(final, int)": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.setType(final, TYPE)": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.setMode(final, int)": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.setSize(final, long)": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.setLastModifiedDate(final, Date)": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.setAccessTime(final, Date)": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.setUserId(final, int)": [
            1,
            1,
            1
          ],
          "DumpArchiveEntry.setGroupId(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DumpArchiveEntry.equals(final, Object)": [
            6,
            6,
            6
          ],
          "DumpArchiveEntry.parse(final, byte[])": [
            3,
            3,
            3
          ],
          "DumpArchiveEntry.update(final, byte[])": [
            3,
            3,
            3
          ],
          "DumpArchiveEntry.setName(String)": [
            4,
            4,
            4
          ],
          "DumpArchiveEntry.find(final, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntryTest.java"
    },
    {
      "src_name": "SevenZFile",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
      "class_declaration": "public class SevenZFile implements Closeable ",
      "methods_under_test": {
        "=1": {
          "SevenZFile.read()": [
            1,
            1,
            1
          ],
          "SevenZFile.read(final, byte[])": [
            1,
            1,
            1
          ],
          "SevenZFile.read(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "SevenZFile.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SevenZFile.close()": [
            3,
            3,
            3
          ],
          "SevenZFile.getNextEntry()": [
            2,
            2,
            2
          ],
          "SevenZFile.matches(final, byte[], final, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java"
    },
    {
      "src_name": "Folder",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java",
      "class_declaration": "class Folder ",
      "methods_under_test": {
        "=1": {
          "Folder.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Folder.getOrderedCoders()": [
            2,
            2,
            2
          ],
          "Folder.findBindPairForInStream(final, int)": [
            3,
            3,
            3
          ],
          "Folder.findBindPairForOutStream(final, int)": [
            3,
            3,
            3
          ],
          "Folder.getUnpackSize()": [
            4,
            4,
            4
          ],
          "Folder.getUnpackSizeForCoder(final, Coder)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/sevenz/FolderTest.java"
    },
    {
      "src_name": "CircularBuffer",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java",
      "class_declaration": "class CircularBuffer ",
      "methods_under_test": {
        "=1": {
          "CircularBuffer.available()": [
            1,
            1,
            1
          ],
          "CircularBuffer.put(final, int)": [
            1,
            1,
            1
          ],
          "CircularBuffer.copy(final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CircularBuffer.get()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java"
    },
    {
      "src_name": "HuffmanDecoder",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.java",
      "class_declaration": "class HuffmanDecoder implements Closeable ",
      "methods_under_test": {
        "=1": {
          "HuffmanDecoder.close()": [
            1,
            1,
            1
          ],
          "HuffmanDecoder.decode(byte[])": [
            1,
            1,
            1
          ],
          "HuffmanDecoder.available()": [
            1,
            1,
            1
          ],
          "UncompressedState.state()": [
            1,
            1,
            1
          ],
          "UncompressedState.hasData()": [
            1,
            1,
            1
          ],
          "UncompressedState.available()": [
            1,
            1,
            1
          ],
          "InitialState.state()": [
            1,
            1,
            1
          ],
          "InitialState.read(byte[], int, int)": [
            1,
            1,
            1
          ],
          "InitialState.hasData()": [
            1,
            1,
            1
          ],
          "InitialState.available()": [
            1,
            1,
            1
          ],
          "HuffmanCodes.state()": [
            1,
            1,
            1
          ],
          "HuffmanCodes.read(byte[], int, int)": [
            1,
            1,
            1
          ],
          "HuffmanCodes.hasData()": [
            1,
            1,
            1
          ],
          "HuffmanCodes.available()": [
            1,
            1,
            1
          ],
          "BinaryTreeNode.leaf(int)": [
            1,
            1,
            1
          ],
          "DecodingMemory.add(byte)": [
            1,
            1,
            1
          ],
          "DecodingMemory.add(byte[], int, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "HuffmanDecoder.decode(byte[], int, int)": [
            7,
            7,
            7
          ],
          "UncompressedState.read(byte[], int, int)": [
            4,
            4,
            4
          ],
          "BinaryTreeNode.left()": [
            2,
            2,
            2
          ],
          "BinaryTreeNode.right()": [
            2,
            2,
            2
          ],
          "DecodingMemory.recordToBuffer(int, int, byte[])": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoderTest.java"
    },
    {
      "src_name": "Parameters",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java",
      "class_declaration": "public final class Parameters ",
      "methods_under_test": {
        "=1": {
          "Parameters.builder(int)": [
            1,
            1,
            1
          ],
          "Builder.withMaxBackReferenceLength(int)": [
            1,
            1,
            1
          ],
          "Builder.withMaxOffset(int)": [
            1,
            1,
            1
          ],
          "Builder.withMaxLiteralLength(int)": [
            1,
            1,
            1
          ],
          "Builder.withNiceBackReferenceLength(int)": [
            1,
            1,
            1
          ],
          "Builder.withMaxNumberOfCandidates(int)": [
            1,
            1,
            1
          ],
          "Builder.withLazyMatching(boolean)": [
            1,
            1,
            1
          ],
          "Builder.withLazyThreshold(int)": [
            1,
            1,
            1
          ],
          "Builder.tunedForSpeed()": [
            1,
            1,
            1
          ],
          "Builder.tunedForCompressionRatio()": [
            1,
            1,
            1
          ],
          "Builder.build()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Builder.withMinBackReferenceLength(int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java"
    },
    {
      "src_name": "Pack200Utils",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java",
      "class_declaration": "public class Pack200Utils ",
      "methods_under_test": {
        "=1": {
          "Pack200Utils.normalize(final, File)": [
            1,
            1,
            1
          ],
          "Pack200Utils.normalize(final, File, final, Map<String, String>)": [
            1,
            1,
            1
          ],
          "Pack200Utils.normalize(final, File, final, File)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Pack200Utils.normalize(final, File, final, File, Map<String, String>)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java"
    },
    {
      "src_name": "DeflateParameters",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateParameters.java",
      "class_declaration": "public class DeflateParameters ",
      "methods_under_test": {
        "=1": {
          "DeflateParameters.withZlibHeader()": [
            1,
            1,
            1
          ],
          "DeflateParameters.setWithZlibHeader(final, boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DeflateParameters.setCompressionLevel(final, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/deflate/DeflateParametersTest.java"
    },
    {
      "src_name": "XZCompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java",
      "class_declaration": "public class XZCompressorInputStream extends CompressorInputStream ",
      "methods_under_test": {
        "=1": {
          "XZCompressorInputStream.available()": [
            1,
            1,
            1
          ],
          "XZCompressorInputStream.close()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "XZCompressorInputStream.matches(final, byte[], final, int)": [
            4,
            4,
            4
          ],
          "XZCompressorInputStream.read()": [
            2,
            2,
            2
          ],
          "XZCompressorInputStream.read(final, byte[], final, int, final, int)": [
            2,
            2,
            2
          ],
          "XZCompressorInputStream.skip(final, long)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStreamTest.java"
    },
    {
      "src_name": "XZUtils",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java",
      "class_declaration": "public class XZUtils ",
      "methods_under_test": {
        "=1": {
          "XZUtils.isCompressedFilename(final, String)": [
            1,
            1,
            1
          ],
          "XZUtils.getUncompressedFilename(final, String)": [
            1,
            1,
            1
          ],
          "XZUtils.getCompressedFilename(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "XZUtils.matches(final, byte[], final, int)": [
            4,
            4,
            4
          ],
          "XZUtils.setCacheXZAvailablity(final, boolean)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java"
    },
    {
      "src_name": "ZipArchiveEntry",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java",
      "class_declaration": "public class ZipArchiveEntry extends java.util.zip.ZipEntry implements ArchiveEntry, EntryStreamOffsets ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java"
    },
    {
      "src_name": "BlockLZ4CompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java",
      "class_declaration": "public class BlockLZ4CompressorInputStream extends AbstractLZ77CompressorInputStream ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BlockLZ4CompressorInputStream.read(final, byte[], final, int, final, int)": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java"
    },
    {
      "src_name": "DumpArchiveUtil",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java",
      "class_declaration": "class DumpArchiveUtil ",
      "methods_under_test": {
        "=1": {
          "DumpArchiveUtil.getIno(final, byte[])": [
            1,
            1,
            1
          ],
          "DumpArchiveUtil.convert64(final, byte[], final, int)": [
            1,
            1,
            1
          ],
          "DumpArchiveUtil.convert32(final, byte[], final, int)": [
            1,
            1,
            1
          ],
          "DumpArchiveUtil.convert16(final, byte[], final, int)": [
            1,
            1,
            1
          ],
          "DumpArchiveUtil.decode(final, ZipEncoding, final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DumpArchiveUtil.calculateChecksum(final, byte[])": [
            2,
            2,
            2
          ],
          "DumpArchiveUtil.verify(final, byte[])": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtilTest.java"
    },
    {
      "src_name": "ServiceLoaderIterator",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/ServiceLoaderIterator.java",
      "class_declaration": "public class ServiceLoaderIterator <E> implements Iterator<E> ",
      "methods_under_test": {
        "=1": {
          "ServiceLoaderIterator.hasNext()": [
            1,
            1,
            1
          ],
          "ServiceLoaderIterator.remove()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ServiceLoaderIterator.next()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/utils/ServiceLoaderIteratorTest.java"
    },
    {
      "src_name": "TarUtils",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
      "class_declaration": "public class TarUtils ",
      "methods_under_test": {
        "=1": {
          "TarUtils.parseBoolean(final, byte[], final, int)": [
            1,
            1,
            1
          ],
          "TarUtils.formatOctalBytes(final, long, final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "TarUtils.formatLongOctalBytes(final, long, final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "TarUtils.formatCheckSumOctalBytes(final, long, final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TarUtils.parseOctal(final, byte[], final, int, final, int)": [
            8,
            8,
            8
          ],
          "TarUtils.parseOctalOrBinary(final, byte[], final, int, final, int)": [
            3,
            3,
            3
          ],
          "TarUtils.parseName(final, byte[], final, int, final, int)": [
            3,
            3,
            3
          ],
          "TarUtils.parseName(final, byte[], final, int, final, int, final, ZipEncoding)": [
            2,
            2,
            2
          ],
          "TarUtils.formatNameBytes(final, String, final, byte[], final, int, final, int)": [
            3,
            3,
            3
          ],
          "TarUtils.formatNameBytes(final, String, final, byte[], final, int, final, int, final, ZipEncoding)": [
            3,
            3,
            3
          ],
          "TarUtils.formatUnsignedOctalString(final, long, final, byte[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "TarUtils.formatLongOctalOrBinaryBytes(final, long, final, byte[], final, int, final, int)": [
            3,
            3,
            3
          ],
          "TarUtils.computeCheckSum(final, byte[])": [
            2,
            2,
            2
          ],
          "TarUtils.verifyCheckSum(final, byte[])": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java"
    },
    {
      "src_name": "ArchiveStreamFactory",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java",
      "class_declaration": "public class ArchiveStreamFactory implements ArchiveStreamProvider ",
      "methods_under_test": {
        "=1": {
          "ArchiveStreamFactory.putAll(Set<String>, ArchiveStreamProvider, TreeMap<String, ArchiveStreamProvider>)": [
            1,
            1,
            1
          ],
          "ArchiveStreamFactory.findAvailableArchiveInputStreamProviders()": [
            1,
            1,
            1
          ],
          "ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders()": [
            1,
            1,
            1
          ],
          "ArchiveStreamFactory.createArchiveInputStream(final, String, final, InputStream)": [
            1,
            1,
            1
          ],
          "ArchiveStreamFactory.createArchiveOutputStream(final, String, final, OutputStream)": [
            1,
            1,
            1
          ],
          "ArchiveStreamFactory.createArchiveInputStream(final, InputStream)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArchiveStreamFactory.setEntryEncoding(final, String)": [
            2,
            2,
            2
          ],
          "ArchiveStreamFactory.getArchiveInputStreamProviders()": [
            2,
            2,
            2
          ],
          "ArchiveStreamFactory.getArchiveOutputStreamProviders()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "ArchiveStreamFactory.createArchiveInputStream(final, String, final, InputStream, final, String)": [
            18,
            18,
            18
          ],
          "ArchiveStreamFactory.createArchiveOutputStream(final, String, final, OutputStream, final, String)": [
            14,
            14,
            14
          ]
        },
        ">20": {
          "ArchiveStreamFactory.detect(InputStream)": [
            22,
            22,
            22
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java"
    },
    {
      "src_name": "ArArchiveInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java",
      "class_declaration": "public class ArArchiveInputStream extends ArchiveInputStream ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ArArchiveInputStream.close()": [
            2,
            2,
            2
          ],
          "ArArchiveInputStream.read(final, byte[], final, int, final, int)": [
            3,
            3,
            3
          ],
          "ArArchiveInputStream.matches(final, byte[], final, int)": [
            10,
            10,
            10
          ]
        },
        "11-20": {
          "ArArchiveInputStream.getNextArEntry()": [
            19,
            19,
            19
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java"
    },
    {
      "src_name": "BZip2Utils",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java",
      "class_declaration": "public abstract class BZip2Utils ",
      "methods_under_test": {
        "=1": {
          "BZip2Utils.isCompressedFilename(final, String)": [
            1,
            1,
            1
          ],
          "BZip2Utils.getUncompressedFilename(final, String)": [
            1,
            1,
            1
          ],
          "BZip2Utils.getCompressedFilename(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/BZip2UtilsTestCase.java"
    },
    {
      "src_name": "ScatterZipOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java",
      "class_declaration": "public class ScatterZipOutputStream implements Closeable ",
      "methods_under_test": {
        "=1": {
          "CompressedEntry.transferToArchiveEntry()": [
            1,
            1,
            1
          ],
          "ScatterZipOutputStream.addArchiveEntry(final, ZipArchiveEntryRequest)": [
            1,
            1,
            1
          ],
          "ScatterZipOutputStream.close()": [
            1,
            1,
            1
          ],
          "ScatterZipOutputStream.fileBased(final, File)": [
            1,
            1,
            1
          ],
          "ScatterZipOutputStream.fileBased(final, File, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ScatterZipOutputStream.writeTo(final, ZipArchiveOutputStream)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java"
    },
    {
      "src_name": "TarArchiveInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
      "class_declaration": "public class TarArchiveInputStream extends ArchiveInputStream ",
      "methods_under_test": {
        "=1": {
          "TarArchiveInputStream.close()": [
            1,
            1,
            1
          ],
          "TarArchiveInputStream.markSupported()": [
            1,
            1,
            1
          ],
          "TarArchiveInputStream.isEOFRecord(final, byte[])": [
            1,
            1,
            1
          ],
          "TarArchiveInputStream.setCurrentEntry(final, TarArchiveEntry)": [
            1,
            1,
            1
          ],
          "TarArchiveInputStream.setAtEOF(final, boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TarArchiveInputStream.available()": [
            3,
            3,
            3
          ],
          "TarArchiveInputStream.skip(final, long)": [
            2,
            2,
            2
          ],
          "TarArchiveInputStream.getLongNameData()": [
            5,
            5,
            5
          ],
          "TarArchiveInputStream.readRecord()": [
            2,
            2,
            2
          ],
          "TarArchiveInputStream.parsePaxHeaders(final, InputStream)": [
            10,
            10,
            10
          ],
          "TarArchiveInputStream.read(final, byte[], final, int, int)": [
            5,
            5,
            5
          ],
          "TarArchiveInputStream.canReadEntryData(final, ArchiveEntry)": [
            2,
            2,
            2
          ],
          "TarArchiveInputStream.matches(final, byte[], final, int)": [
            5,
            5,
            5
          ]
        },
        "11-20": {
          "TarArchiveInputStream.getNextTarEntry()": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java"
    },
    {
      "src_name": "ArchiveStreamProvider",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/TestArchiveStreamProvider.java"
    },
    {
      "src_name": "ArjArchiveInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java",
      "class_declaration": "public class ArjArchiveInputStream extends ArchiveInputStream ",
      "methods_under_test": {
        "=1": {
          "ArjArchiveInputStream.close()": [
            1,
            1,
            1
          ],
          "ArjArchiveInputStream.matches(final, byte[], final, int)": [
            1,
            1,
            1
          ],
          "ArjArchiveInputStream.canReadEntryData(final, ArchiveEntry)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArjArchiveInputStream.getNextEntry()": [
            4,
            4,
            4
          ],
          "ArjArchiveInputStream.read(final, byte[], final, int, final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java"
    },
    {
      "src_name": "LZMAUtils",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java",
      "class_declaration": "public class LZMAUtils ",
      "methods_under_test": {
        "=1": {
          "LZMAUtils.isCompressedFilename(final, String)": [
            1,
            1,
            1
          ],
          "LZMAUtils.getUncompressedFilename(final, String)": [
            1,
            1,
            1
          ],
          "LZMAUtils.getCompressedFilename(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LZMAUtils.matches(final, byte[], final, int)": [
            4,
            4,
            4
          ],
          "LZMAUtils.setCacheLZMAAvailablity(final, boolean)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java"
    },
    {
      "src_name": "ZipLong",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java",
      "class_declaration": "public final class ZipLong implements Cloneable, Serializable ",
      "methods_under_test": {
        "=1": {
          "ZipLong.getBytes(final, long)": [
            1,
            1,
            1
          ],
          "ZipLong.putLong(final, long, final, byte[], int)": [
            1,
            1,
            1
          ],
          "ZipLong.putLong(final, byte[], final, int)": [
            1,
            1,
            1
          ],
          "ZipLong.getValue(final, byte[], final, int)": [
            1,
            1,
            1
          ],
          "ZipLong.getValue(final, byte[])": [
            1,
            1,
            1
          ],
          "ZipLong.hashCode()": [
            1,
            1,
            1
          ],
          "ZipLong.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ZipLong.equals(final, Object)": [
            2,
            2,
            2
          ],
          "ZipLong.clone()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java"
    },
    {
      "src_name": "DumpArchiveInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java",
      "class_declaration": "public class DumpArchiveInputStream extends ArchiveInputStream ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "DumpArchiveInputStream.close()": [
            2,
            2,
            2
          ],
          "DumpArchiveInputStream.matches(final, byte[], final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "DumpArchiveInputStream.getNextEntry()": [
            13,
            13,
            13
          ],
          "DumpArchiveInputStream.read(final, byte[], int, int)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java"
    },
    {
      "src_name": "ZstdUtils",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdUtils.java",
      "class_declaration": "public class ZstdUtils ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ZstdUtils.setCacheZstdAvailablity(final, boolean)": [
            4,
            4,
            4
          ],
          "ZstdUtils.matches(final, byte[], final, int)": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdUtilsTest.java"
    },
    {
      "src_name": "ZipUtil",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java",
      "class_declaration": "public abstract class ZipUtil ",
      "methods_under_test": {
        "=1": {
          "ZipUtil.toDosTime(final, Date)": [
            1,
            1,
            1
          ],
          "ZipUtil.toDosTime(final, long)": [
            1,
            1,
            1
          ],
          "ZipUtil.toDosTime(final, long, final, byte[], final, int)": [
            1,
            1,
            1
          ],
          "ZipUtil.fromDosTime(final, ZipLong)": [
            1,
            1,
            1
          ],
          "ZipUtil.dosToJavaTime(final, long)": [
            1,
            1,
            1
          ],
          "ZipUtil.canHandleEntryData(final, ZipArchiveEntry)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ZipUtil.toDosTime(final, Calendar, final, long, final, byte[], final, int)": [
            2,
            2,
            2
          ],
          "ZipUtil.adjustToLong(final, int)": [
            2,
            2,
            2
          ],
          "ZipUtil.reverse(final, byte[])": [
            2,
            2,
            2
          ],
          "ZipUtil.bigToLong(final, BigInteger)": [
            2,
            2,
            2
          ],
          "ZipUtil.longToBig(long)": [
            3,
            3,
            3
          ],
          "ZipUtil.signedByteToUnsignedInt(final, byte)": [
            2,
            2,
            2
          ],
          "ZipUtil.unsignedIntToSignedByte(final, int)": [
            3,
            3,
            3
          ],
          "ZipUtil.setNameAndCommentFromExtraFields(final, ZipArchiveEntry, final, byte[], final, byte[])": [
            4,
            4,
            4
          ],
          "ZipUtil.copy(final, byte[])": [
            2,
            2,
            2
          ],
          "ZipUtil.copy(final, byte[], final, byte[], final, int)": [
            2,
            2,
            2
          ],
          "ZipUtil.checkRequestedFeatures(final, ZipArchiveEntry)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java"
    },
    {
      "src_name": "ByteUtils",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/ByteUtils.java",
      "error": "55 is not in list",
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java"
    },
    {
      "src_name": "ExtraFieldUtils",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java",
      "class_declaration": "public class ExtraFieldUtils ",
      "methods_under_test": {
        "=1": {
          "ExtraFieldUtils.parse(final, byte[])": [
            1,
            1,
            1
          ],
          "ExtraFieldUtils.parse(final, byte[], final, boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ExtraFieldUtils.register(final, Class<?>)": [
            2,
            2,
            2
          ],
          "ExtraFieldUtils.createExtraField(final, ZipShort)": [
            2,
            2,
            2
          ],
          "ExtraFieldUtils.mergeLocalFileDataData(final, ZipExtraField[])": [
            6,
            6,
            6
          ],
          "ExtraFieldUtils.mergeCentralDirectoryData(final, ZipExtraField[])": [
            6,
            6,
            6
          ]
        },
        "11-20": {
          "ExtraFieldUtils.parse(final, byte[], final, boolean, final, UnparseableExtraField)": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java"
    },
    {
      "src_name": "JarArchiveOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java",
      "class_declaration": "public class JarArchiveOutputStream extends ZipArchiveOutputStream ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "JarArchiveOutputStream.putArchiveEntry(final, ArchiveEntry)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java"
    },
    {
      "src_name": "ParallelScatterZipCreator",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java",
      "class_declaration": "public class ParallelScatterZipCreator ",
      "methods_under_test": {
        "=1": {
          "DefaultBackingStoreSupplier.get()": [
            1,
            1,
            1
          ],
          "ParallelScatterZipCreator.addArchiveEntry(final, ZipArchiveEntry, final, InputStreamSupplier)": [
            1,
            1,
            1
          ],
          "ParallelScatterZipCreator.addArchiveEntry(final, ZipArchiveEntryRequestSupplier)": [
            1,
            1,
            1
          ],
          "ParallelScatterZipCreator.submit(final, Callable<Object>)": [
            1,
            1,
            1
          ],
          "ParallelScatterZipCreator.createCallable(final, ZipArchiveEntryRequestSupplier)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ParallelScatterZipCreator.createCallable(final, ZipArchiveEntry, final, InputStreamSupplier)": [
            2,
            2,
            2
          ],
          "ParallelScatterZipCreator.writeTo(final, ZipArchiveOutputStream)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java"
    },
    {
      "src_name": "X000A_NTFS",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java",
      "class_declaration": "public class X000A_NTFS implements ZipExtraField ",
      "methods_under_test": {
        "=1": {
          "X000A_NTFS.getLocalFileDataData()": [
            1,
            1,
            1
          ],
          "X000A_NTFS.parseFromCentralDirectoryData(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "X000A_NTFS.setModifyTime(final, ZipEightByteInteger)": [
            1,
            1,
            1
          ],
          "X000A_NTFS.setAccessTime(final, ZipEightByteInteger)": [
            1,
            1,
            1
          ],
          "X000A_NTFS.setCreateTime(final, ZipEightByteInteger)": [
            1,
            1,
            1
          ],
          "X000A_NTFS.setModifyJavaTime(final, Date)": [
            1,
            1,
            1
          ],
          "X000A_NTFS.setAccessJavaTime(final, Date)": [
            1,
            1,
            1
          ],
          "X000A_NTFS.setCreateJavaTime(final, Date)": [
            1,
            1,
            1
          ],
          "X000A_NTFS.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "X000A_NTFS.parseFromLocalFileData(final, byte[], int, final, int)": [
            2,
            2,
            2
          ],
          "X000A_NTFS.equals(final, Object)": [
            2,
            2,
            2
          ],
          "X000A_NTFS.hashCode()": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java"
    },
    {
      "src_name": "Zip64ExtendedInformationExtraField",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java",
      "class_declaration": "public class Zip64ExtendedInformationExtraField implements ZipExtraField ",
      "methods_under_test": {
        "=1": {
          "Zip64ExtendedInformationExtraField.setSize(final, ZipEightByteInteger)": [
            1,
            1,
            1
          ],
          "Zip64ExtendedInformationExtraField.setCompressedSize(final, ZipEightByteInteger)": [
            1,
            1,
            1
          ],
          "Zip64ExtendedInformationExtraField.setRelativeHeaderOffset(final, ZipEightByteInteger)": [
            1,
            1,
            1
          ],
          "Zip64ExtendedInformationExtraField.setDiskStartNumber(final, ZipLong)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Zip64ExtendedInformationExtraField.getLocalFileDataData()": [
            3,
            3,
            3
          ],
          "Zip64ExtendedInformationExtraField.getCentralDirectoryData()": [
            3,
            3,
            3
          ],
          "Zip64ExtendedInformationExtraField.parseFromLocalFileData(final, byte[], int, final, int)": [
            5,
            5,
            5
          ],
          "Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(final, byte[], int, final, int)": [
            5,
            5,
            5
          ],
          "Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(final, boolean, final, boolean, final, boolean, final, boolean)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java"
    },
    {
      "src_name": "GeneralPurposeBit",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java",
      "class_declaration": "public final class GeneralPurposeBit implements Cloneable ",
      "methods_under_test": {
        "=1": {
          "GeneralPurposeBit.usesUTF8ForNames()": [
            1,
            1,
            1
          ],
          "GeneralPurposeBit.useUTF8ForNames(final, boolean)": [
            1,
            1,
            1
          ],
          "GeneralPurposeBit.usesDataDescriptor()": [
            1,
            1,
            1
          ],
          "GeneralPurposeBit.useDataDescriptor(final, boolean)": [
            1,
            1,
            1
          ],
          "GeneralPurposeBit.usesEncryption()": [
            1,
            1,
            1
          ],
          "GeneralPurposeBit.useEncryption(final, boolean)": [
            1,
            1,
            1
          ],
          "GeneralPurposeBit.usesStrongEncryption()": [
            1,
            1,
            1
          ],
          "GeneralPurposeBit.encode()": [
            1,
            1,
            1
          ],
          "GeneralPurposeBit.encode(final, byte[], final, int)": [
            1,
            1,
            1
          ],
          "GeneralPurposeBit.parse(final, byte[], final, int)": [
            1,
            1,
            1
          ],
          "GeneralPurposeBit.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GeneralPurposeBit.useStrongEncryption(final, boolean)": [
            2,
            2,
            2
          ],
          "GeneralPurposeBit.equals(final, Object)": [
            2,
            2,
            2
          ],
          "GeneralPurposeBit.clone()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java"
    },
    {
      "src_name": "ZipEightByteInteger",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java",
      "class_declaration": "public final class ZipEightByteInteger implements Serializable ",
      "methods_under_test": {
        "=1": {
          "ZipEightByteInteger.getBytes(final, long)": [
            1,
            1,
            1
          ],
          "ZipEightByteInteger.getLongValue(final, byte[], final, int)": [
            1,
            1,
            1
          ],
          "ZipEightByteInteger.getValue(final, byte[], final, int)": [
            1,
            1,
            1
          ],
          "ZipEightByteInteger.getLongValue(final, byte[])": [
            1,
            1,
            1
          ],
          "ZipEightByteInteger.getValue(final, byte[])": [
            1,
            1,
            1
          ],
          "ZipEightByteInteger.hashCode()": [
            1,
            1,
            1
          ],
          "ZipEightByteInteger.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ZipEightByteInteger.getBytes(final, BigInteger)": [
            2,
            2,
            2
          ],
          "ZipEightByteInteger.equals(final, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java"
    },
    {
      "src_name": "ArchiveUtils",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java",
      "class_declaration": "public class ArchiveUtils ",
      "methods_under_test": {
        "=1": {
          "ArchiveUtils.matchAsciiBuffer(final, String, final, byte[])": [
            1,
            1,
            1
          ],
          "ArchiveUtils.isEqual(final, byte[], final, int, final, int, final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "ArchiveUtils.isEqual(final, byte[], final, byte[])": [
            1,
            1,
            1
          ],
          "ArchiveUtils.isEqual(final, byte[], final, byte[], final, boolean)": [
            1,
            1,
            1
          ],
          "ArchiveUtils.isEqualWithNull(final, byte[], final, int, final, int, final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArchiveUtils.toString(final, ArchiveEntry)": [
            2,
            2,
            2
          ],
          "ArchiveUtils.matchAsciiBuffer(final, String, final, byte[], final, int, final, int)": [
            2,
            2,
            2
          ],
          "ArchiveUtils.toAsciiBytes(final, String)": [
            2,
            2,
            2
          ],
          "ArchiveUtils.toAsciiString(final, byte[])": [
            2,
            2,
            2
          ],
          "ArchiveUtils.toAsciiString(final, byte[], final, int, final, int)": [
            2,
            2,
            2
          ],
          "ArchiveUtils.isEqual(final, byte[], final, int, final, int, final, byte[], final, int, final, int, final, boolean)": [
            10,
            10,
            10
          ],
          "ArchiveUtils.isArrayZero(final, byte[], final, int)": [
            3,
            3,
            3
          ],
          "ArchiveUtils.sanitize(final, String)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java"
    },
    {
      "src_name": "ZstdCompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream.java",
      "class_declaration": "public class ZstdCompressorInputStream extends CompressorInputStream ",
      "methods_under_test": {
        "=1": {
          "ZstdCompressorInputStream.available()": [
            1,
            1,
            1
          ],
          "ZstdCompressorInputStream.close()": [
            1,
            1,
            1
          ],
          "ZstdCompressorInputStream.read(final, byte[])": [
            1,
            1,
            1
          ],
          "ZstdCompressorInputStream.skip(final, long)": [
            1,
            1,
            1
          ],
          "ZstdCompressorInputStream.mark(final, int)": [
            1,
            1,
            1
          ],
          "ZstdCompressorInputStream.markSupported()": [
            1,
            1,
            1
          ],
          "ZstdCompressorInputStream.read()": [
            1,
            1,
            1
          ],
          "ZstdCompressorInputStream.read(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "ZstdCompressorInputStream.toString()": [
            1,
            1,
            1
          ],
          "ZstdCompressorInputStream.reset()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStreamTest.java"
    },
    {
      "src_name": "CpioArchiveInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
      "class_declaration": "public class CpioArchiveInputStream extends ArchiveInputStream implements\n        CpioConstants ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "CpioArchiveInputStream.available()": [
            2,
            2,
            2
          ],
          "CpioArchiveInputStream.close()": [
            2,
            2,
            2
          ],
          "CpioArchiveInputStream.getNextCPIOEntry()": [
            8,
            8,
            8
          ],
          "CpioArchiveInputStream.read(final, byte[], final, int, final, int)": [
            9,
            9,
            9
          ],
          "CpioArchiveInputStream.skip(final, long)": [
            5,
            5,
            5
          ]
        },
        "11-20": {
          "CpioArchiveInputStream.matches(final, byte[], final, int)": [
            12,
            12,
            12
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java"
    },
    {
      "src_name": "DeflateCompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java",
      "class_declaration": "public class DeflateCompressorInputStream extends CompressorInputStream ",
      "methods_under_test": {
        "=1": {
          "DeflateCompressorInputStream.read()": [
            1,
            1,
            1
          ],
          "DeflateCompressorInputStream.read(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "DeflateCompressorInputStream.skip(final, long)": [
            1,
            1,
            1
          ],
          "DeflateCompressorInputStream.available()": [
            1,
            1,
            1
          ],
          "DeflateCompressorInputStream.matches(final, byte[], final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DeflateCompressorInputStream.close()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java"
    }
  ],
  "src_test_fuzz_match": [
    {
      "src_name": "CompressorStreamFactory",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
      "class_declaration": "public class CompressorStreamFactory implements CompressorStreamProvider ",
      "methods_under_test": {
        "=1": {
          "CompressorStreamFactory.findAvailableCompressorInputStreamProviders()": [
            1,
            1,
            1
          ],
          "CompressorStreamFactory.findAvailableCompressorOutputStreamProviders()": [
            1,
            1,
            1
          ],
          "CompressorStreamFactory.putAll(final, Set<String>, final, CompressorStreamProvider, final, TreeMap<String, CompressorStreamProvider>)": [
            1,
            1,
            1
          ],
          "CompressorStreamFactory.createCompressorInputStream(final, InputStream)": [
            1,
            1,
            1
          ],
          "CompressorStreamFactory.createCompressorInputStream(final, String, final, InputStream)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CompressorStreamFactory.getCompressorInputStreamProviders()": [
            2,
            2,
            2
          ],
          "CompressorStreamFactory.getCompressorOutputStreamProviders()": [
            2,
            2,
            2
          ],
          "CompressorStreamFactory.setDecompressConcatenated(final, boolean)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "CompressorStreamFactory.detect(final, InputStream)": [
            15,
            15,
            15
          ]
        },
        ">20": {
          "CompressorStreamFactory.createCompressorInputStream(final, String, final, InputStream, final, boolean)": [
            53,
            53,
            53
          ],
          "CompressorStreamFactory.createCompressorOutputStream(final, String, final, OutputStream)": [
            33,
            33,
            33
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java"
    },
    {
      "src_name": "Archive",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java",
      "class_declaration": "class Archive ",
      "methods_under_test": {
        "=1": {
          "Archive.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/ArchiveServiceLoaderTest.java"
    },
    {
      "src_name": "LZWInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java",
      "class_declaration": "public abstract class LZWInputStream extends CompressorInputStream ",
      "methods_under_test": {
        "=1": {
          "LZWInputStream.close()": [
            1,
            1,
            1
          ],
          "LZWInputStream.setClearCode(final, int)": [
            1,
            1,
            1
          ],
          "LZWInputStream.initializeTables(final, int)": [
            1,
            1,
            1
          ],
          "LZWInputStream.resetCodeSize()": [
            1,
            1,
            1
          ],
          "LZWInputStream.setCodeSize(final, int)": [
            1,
            1,
            1
          ],
          "LZWInputStream.incrementCodeSize()": [
            1,
            1,
            1
          ],
          "LZWInputStream.resetPreviousCode()": [
            1,
            1,
            1
          ],
          "LZWInputStream.getPrefix(final, int)": [
            1,
            1,
            1
          ],
          "LZWInputStream.setPrefix(final, int, final, int)": [
            1,
            1,
            1
          ],
          "LZWInputStream.setTableSize(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LZWInputStream.read()": [
            2,
            2,
            2
          ],
          "LZWInputStream.read(final, byte[], final, int, final, int)": [
            4,
            4,
            4
          ],
          "LZWInputStream.initializeTables(final, int, final, int)": [
            3,
            3,
            3
          ],
          "LZWInputStream.readNextCode()": [
            2,
            2,
            2
          ],
          "LZWInputStream.addEntry(final, int, final, byte, final, int)": [
            2,
            2,
            2
          ],
          "LZWInputStream.addRepeatOfPreviousCode()": [
            2,
            2,
            2
          ],
          "LZWInputStream.expandCodeToOutputStack(final, int, final, boolean)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/MockEvilInputStream.java"
    },
    {
      "src_name": "PKWareExtraHeader",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java",
      "class_declaration": "public abstract class PKWareExtraHeader implements ZipExtraField ",
      "methods_under_test": {
        "=1": {
          "PKWareExtraHeader.setLocalFileDataData(final, byte[])": [
            1,
            1,
            1
          ],
          "PKWareExtraHeader.setCentralDirectoryData(final, byte[])": [
            1,
            1,
            1
          ],
          "PKWareExtraHeader.parseFromLocalFileData(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "PKWareExtraHeader.getAlgorithmByCode(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PKWareExtraHeader.getCentralDirectoryLength()": [
            2,
            2,
            2
          ],
          "PKWareExtraHeader.getCentralDirectoryData()": [
            2,
            2,
            2
          ],
          "PKWareExtraHeader.parseFromCentralDirectoryData(final, byte[], final, int, final, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/PkWareExtraHeaderTest.java"
    },
    {
      "src_name": "Lister",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/Lister.java",
      "class_declaration": "public final class Lister ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java"
    }
  ],
  "src_without_tests": [
    {
      "src_name": "LocalFileHeader",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java",
      "class_declaration": "class LocalFileHeader ",
      "methods_under_test": {
        "=1": {
          "LocalFileHeader.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DeltaDecoder",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java",
      "class_declaration": "class DeltaDecoder extends CoderBase ",
      "methods_under_test": {
        "=1": {
          "DeltaDecoder.decode(final, String, final, InputStream, final, long, final, Coder, final, byte[])": [
            1,
            1,
            1
          ],
          "DeltaDecoder.getOptionsAsProperties(final, Object)": [
            1,
            1,
            1
          ],
          "DeltaDecoder.getOptionsFromCoder(final, Coder, final, InputStream)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DeltaDecoder.encode(final, OutputStream, final, Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "EntryStreamOffsets",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/EntryStreamOffsets.java",
      "error": "list index out of range"
    },
    {
      "src_name": "CRC32VerifyingInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java",
      "class_declaration": "public class CRC32VerifyingInputStream extends ChecksumVerifyingInputStream ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CountingInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/CountingInputStream.java",
      "class_declaration": "public class CountingInputStream extends FilterInputStream ",
      "methods_under_test": {
        "=1": {
          "CountingInputStream.read(final, byte[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CountingInputStream.read()": [
            2,
            2,
            2
          ],
          "CountingInputStream.read(final, byte[], final, int, final, int)": [
            2,
            2,
            2
          ],
          "CountingInputStream.count(final, long)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BZip2Constants",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BindPair",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/BindPair.java",
      "class_declaration": "class BindPair ",
      "methods_under_test": {
        "=1": {
          "BindPair.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Iterators",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/Iterators.java",
      "class_declaration": "public class Iterators ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "Iterators.addAll(final, Collection<T>, final, Iterator<? extends T>)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "HuffmanState",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/deflate64/HuffmanState.java",
      "error": "list index out of range"
    },
    {
      "src_name": "JarArchiveEntry",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java",
      "class_declaration": "public class JarArchiveEntry extends ZipArchiveEntry ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "JarArchiveEntry.getCertificates()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CRC",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java",
      "class_declaration": "class CRC ",
      "methods_under_test": {
        "=1": {
          "CRC.initialiseCRC()": [
            1,
            1,
            1
          ],
          "CRC.setGlobalCRC(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CRC.updateCRC(final, int)": [
            2,
            2,
            2
          ],
          "CRC.updateCRC(final, int, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "LZMA2Decoder",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java",
      "class_declaration": "class LZMA2Decoder extends CoderBase ",
      "methods_under_test": {
        "=1": {
          "LZMA2Decoder.encode(final, OutputStream, final, Object)": [
            1,
            1,
            1
          ],
          "LZMA2Decoder.getOptionsAsProperties(final, Object)": [
            1,
            1,
            1
          ],
          "LZMA2Decoder.getOptionsFromCoder(final, Coder, final, InputStream)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LZMA2Decoder.decode(final, String, final, InputStream, final, long, final, Coder, final, byte[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SevenZMethod",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java",
      "error": "list index out of range"
    },
    {
      "src_name": "FramedSnappyDialect",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyDialect.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ShortFileException",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/dump/ShortFileException.java",
      "class_declaration": "public class ShortFileException extends DumpArchiveException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Coder",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java",
      "class_declaration": "class Coder ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BoundedSeekableByteChannelInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java",
      "class_declaration": "class BoundedSeekableByteChannelInputStream extends InputStream ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BoundedSeekableByteChannelInputStream.read()": [
            3,
            3,
            3
          ],
          "BoundedSeekableByteChannelInputStream.read(final, byte[], final, int, final, int)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java",
      "class_declaration": "public abstract class CompressorInputStream extends InputStream ",
      "methods_under_test": {
        "=1": {
          "CompressorInputStream.count(final, int)": [
            1,
            1,
            1
          ],
          "CompressorInputStream.pushedBackBytes(final, long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CompressorInputStream.count(final, long)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PasswordRequiredException",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/PasswordRequiredException.java",
      "class_declaration": "public class PasswordRequiredException extends IOException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ScatterGatherBackingStoreSupplier",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/parallel/ScatterGatherBackingStoreSupplier.java",
      "error": "list index out of range"
    },
    {
      "src_name": "SnappyCompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java",
      "class_declaration": "public class SnappyCompressorInputStream extends AbstractLZ77CompressorInputStream ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SnappyCompressorInputStream.read(final, byte[], final, int, final, int)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Dirent",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/dump/Dirent.java",
      "class_declaration": "class Dirent ",
      "methods_under_test": {
        "=1": {
          "Dirent.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ZipArchiveEntryPredicate",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Zip64Mode",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/Zip64Mode.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ArArchiveEntry",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java",
      "class_declaration": "public class ArArchiveEntry implements ArchiveEntry ",
      "methods_under_test": {
        "=1": {
          "ArArchiveEntry.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArArchiveEntry.equals(final, Object)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Sets",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/Sets.java",
      "class_declaration": "public class Sets ",
      "methods_under_test": {
        "=1": {
          "Sets.newHashSet()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "InputStreamSupplier",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/parallel/InputStreamSupplier.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ScatterGatherBackingStore",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/parallel/ScatterGatherBackingStore.java",
      "error": "list index out of range"
    },
    {
      "src_name": "X0017_StrongEncryptionHeader",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java",
      "class_declaration": "public class X0017_StrongEncryptionHeader extends PKWareExtraHeader ",
      "methods_under_test": {
        "=1": {
          "X0017_StrongEncryptionHeader.parseFromLocalFileData(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(final, byte[], final, int, final, int)": [
            2,
            2,
            2
          ],
          "X0017_StrongEncryptionHeader.parseFileFormat(final, byte[], final, int, final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ArchiveInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java",
      "class_declaration": "public abstract class ArchiveInputStream extends InputStream ",
      "methods_under_test": {
        "=1": {
          "ArchiveInputStream.read()": [
            1,
            1,
            1
          ],
          "ArchiveInputStream.count(final, int)": [
            1,
            1,
            1
          ],
          "ArchiveInputStream.pushedBackBytes(final, long)": [
            1,
            1,
            1
          ],
          "ArchiveInputStream.canReadEntryData(final, ArchiveEntry)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArchiveInputStream.count(final, long)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ArchiveEntry",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ResourceAlignmentExtraField",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java",
      "class_declaration": "public class ResourceAlignmentExtraField implements ZipExtraField ",
      "methods_under_test": {
        "=1": {
          "ResourceAlignmentExtraField.allowMethodChange()": [
            1,
            1,
            1
          ],
          "ResourceAlignmentExtraField.getLocalFileDataData()": [
            1,
            1,
            1
          ],
          "ResourceAlignmentExtraField.parseFromLocalFileData(byte[], int, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ResourceAlignmentExtraField.parseFromCentralDirectoryData(byte[], int, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BoundedInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java",
      "class_declaration": "public class BoundedInputStream extends InputStream ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BoundedInputStream.read()": [
            4,
            4,
            4
          ],
          "BoundedInputStream.read(final, byte[], final, int, final, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Pack200CompressorOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java",
      "class_declaration": "public class Pack200CompressorOutputStream extends CompressorOutputStream ",
      "methods_under_test": {
        "=1": {
          "Pack200CompressorOutputStream.write(final, int)": [
            1,
            1,
            1
          ],
          "Pack200CompressorOutputStream.write(final, byte[])": [
            1,
            1,
            1
          ],
          "Pack200CompressorOutputStream.write(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Pack200CompressorOutputStream.close()": [
            2,
            2,
            2
          ],
          "Pack200CompressorOutputStream.finish()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DumpArchiveException",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveException.java",
      "class_declaration": "public class DumpArchiveException extends IOException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DumpArchiveConstants",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java",
      "class_declaration": "public final class DumpArchiveConstants ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "DumpArchiveConstants.find(final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ZipArchiveEntryRequestSupplier",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java",
      "error": "list index out of range"
    },
    {
      "src_name": "TarConstants",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java",
      "error": "list index out of range"
    },
    {
      "src_name": "NID",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/NID.java",
      "class_declaration": "final class NID ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StartHeader",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/StartHeader.java",
      "class_declaration": "class StartHeader ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ScatterStatistics",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ScatterStatistics.java",
      "class_declaration": "public class ScatterStatistics ",
      "methods_under_test": {
        "=1": {
          "ScatterStatistics.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Zip64RequiredException",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/Zip64RequiredException.java",
      "class_declaration": "public class Zip64RequiredException extends ZipException ",
      "methods_under_test": {
        "=1": {
          "Zip64RequiredException.getEntryTooBigMessage(final, ZipArchiveEntry)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MainHeader",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java",
      "class_declaration": "class MainHeader ",
      "methods_under_test": {
        "=1": {
          "MainHeader.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ChangeSetResults",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/changes/ChangeSetResults.java",
      "class_declaration": "public class ChangeSetResults ",
      "methods_under_test": {
        "=1": {
          "ChangeSetResults.deleted(final, String)": [
            1,
            1,
            1
          ],
          "ChangeSetResults.addedFromStream(final, String)": [
            1,
            1,
            1
          ],
          "ChangeSetResults.addedFromChangeSet(final, String)": [
            1,
            1,
            1
          ],
          "ChangeSetResults.hasBeenAdded(final, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractUnicodeExtraField",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java",
      "class_declaration": "public abstract class AbstractUnicodeExtraField implements ZipExtraField ",
      "methods_under_test": {
        "=1": {
          "AbstractUnicodeExtraField.setNameCRC32(final, long)": [
            1,
            1,
            1
          ],
          "AbstractUnicodeExtraField.parseFromCentralDirectoryData(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractUnicodeExtraField.getUnicodeName()": [
            2,
            2,
            2
          ],
          "AbstractUnicodeExtraField.setUnicodeName(final, byte[])": [
            2,
            2,
            2
          ],
          "AbstractUnicodeExtraField.getCentralDirectoryData()": [
            3,
            3,
            3
          ],
          "AbstractUnicodeExtraField.getCentralDirectoryLength()": [
            2,
            2,
            2
          ],
          "AbstractUnicodeExtraField.parseFromLocalFileData(final, byte[], final, int, final, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FramedLZ4CompressorOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java",
      "class_declaration": "public class FramedLZ4CompressorOutputStream extends CompressorOutputStream ",
      "methods_under_test": {
        "=1": {
          "Parameters.toString()": [
            1,
            1,
            1
          ],
          "FramedLZ4CompressorOutputStream.write(int)": [
            1,
            1,
            1
          ],
          "FramedLZ4CompressorOutputStream.close()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FramedLZ4CompressorOutputStream.write(byte[], int, int)": [
            4,
            4,
            4
          ],
          "FramedLZ4CompressorOutputStream.finish()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnshrinkingInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java",
      "class_declaration": "class UnshrinkingInputStream extends LZWInputStream ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "UnshrinkingInputStream.addEntry(final, int, final, byte)": [
            3,
            3,
            3
          ],
          "UnshrinkingInputStream.decompressNextSymbol()": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "LZMACompressorOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream.java",
      "class_declaration": "public class LZMACompressorOutputStream extends CompressorOutputStream ",
      "methods_under_test": {
        "=1": {
          "LZMACompressorOutputStream.write(final, int)": [
            1,
            1,
            1
          ],
          "LZMACompressorOutputStream.write(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "LZMACompressorOutputStream.finish()": [
            1,
            1,
            1
          ],
          "LZMACompressorOutputStream.close()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CloseShieldFilterInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/CloseShieldFilterInputStream.java",
      "class_declaration": "public class CloseShieldFilterInputStream extends FilterInputStream ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NioZipEncoding",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java",
      "class_declaration": "class NioZipEncoding implements ZipEncoding, CharsetAccessor ",
      "methods_under_test": {
        "=1": {
          "NioZipEncoding.canEncode(final, String)": [
            1,
            1,
            1
          ],
          "NioZipEncoding.decode(final, byte[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "NioZipEncoding.encode(final, String)": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnrecognizedFormatException",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/dump/UnrecognizedFormatException.java",
      "class_declaration": "public class UnrecognizedFormatException extends DumpArchiveException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PureJavaCrc32C",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java",
      "class_declaration": "final class PureJavaCrc32C implements Checksum ",
      "methods_under_test": {
        "=1": {
          "PureJavaCrc32C.getValue()": [
            1,
            1,
            1
          ],
          "PureJavaCrc32C.reset()": [
            1,
            1,
            1
          ],
          "PureJavaCrc32C.update(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PureJavaCrc32C.update(final, byte[], int, int)": [
            9,
            9,
            9
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "GzipParameters",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/gzip/GzipParameters.java",
      "class_declaration": "public class GzipParameters ",
      "methods_under_test": {
        "=1": {
          "GzipParameters.setModificationTime(final, long)": [
            1,
            1,
            1
          ],
          "GzipParameters.setFilename(final, String)": [
            1,
            1,
            1
          ],
          "GzipParameters.setComment(final, String)": [
            1,
            1,
            1
          ],
          "GzipParameters.setOperatingSystem(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GzipParameters.setCompressionLevel(final, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ZstdCompressorOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorOutputStream.java",
      "class_declaration": "public class ZstdCompressorOutputStream extends CompressorOutputStream ",
      "methods_under_test": {
        "=1": {
          "ZstdCompressorOutputStream.close()": [
            1,
            1,
            1
          ],
          "ZstdCompressorOutputStream.write(final, int)": [
            1,
            1,
            1
          ],
          "ZstdCompressorOutputStream.write(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "ZstdCompressorOutputStream.toString()": [
            1,
            1,
            1
          ],
          "ZstdCompressorOutputStream.flush()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Coders",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java",
      "class_declaration": "class Coders ",
      "methods_under_test": {
        "=1": {
          "Coders.findByMethod(final, SevenZMethod)": [
            1,
            1,
            1
          ],
          "CopyDecoder.decode(final, String, final, InputStream, final, long, final, Coder, final, byte[])": [
            1,
            1,
            1
          ],
          "CopyDecoder.encode(final, OutputStream, final, Object)": [
            1,
            1,
            1
          ],
          "BCJDecoder.encode(final, OutputStream, final, Object)": [
            1,
            1,
            1
          ],
          "DeflateDecoder.decode(final, String, final, InputStream, final, long, final, Coder, final, byte[])": [
            1,
            1,
            1
          ],
          "DeflateDecoder.encode(final, OutputStream, final, Object)": [
            1,
            1,
            1
          ],
          "DeflateDecoderInputStream.read()": [
            1,
            1,
            1
          ],
          "DeflateDecoderInputStream.read(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "DeflateDecoderInputStream.read(final, byte[])": [
            1,
            1,
            1
          ],
          "DeflateDecoderOutputStream.write(final, int)": [
            1,
            1,
            1
          ],
          "DeflateDecoderOutputStream.write(final, byte[])": [
            1,
            1,
            1
          ],
          "DeflateDecoderOutputStream.write(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "Deflate64Decoder.decode(final, String, final, InputStream, final, long, final, Coder, final, byte[])": [
            1,
            1,
            1
          ],
          "BZIP2Decoder.decode(final, String, final, InputStream, final, long, final, Coder, final, byte[])": [
            1,
            1,
            1
          ],
          "BZIP2Decoder.encode(final, OutputStream, final, Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Coders.addDecoder(final, String, final, InputStream, final, long, final, Coder, final, byte[])": [
            2,
            2,
            2
          ],
          "Coders.addEncoder(final, OutputStream, final, SevenZMethod, final, Object)": [
            2,
            2,
            2
          ],
          "BCJDecoder.decode(final, String, final, InputStream, final, long, final, Coder, final, byte[])": [
            2,
            2,
            2
          ],
          "DeflateDecoderInputStream.close()": [
            2,
            2,
            2
          ],
          "DeflateDecoderOutputStream.close()": [
            2,
            2,
            2
          ],
          "DummyByteAddingInputStream.read()": [
            2,
            2,
            2
          ],
          "DummyByteAddingInputStream.read(final, byte[], final, int, final, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CharsetNames",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/CharsetNames.java",
      "class_declaration": "public class CharsetNames ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FileNameUtil",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java",
      "class_declaration": "public class FileNameUtil ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "FileNameUtil.isCompressedFilename(final, String)": [
            3,
            3,
            3
          ],
          "FileNameUtil.getUncompressedFilename(final, String)": [
            3,
            3,
            3
          ],
          "FileNameUtil.getCompressedFilename(final, String)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FileBasedScatterGatherBackingStore",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java",
      "class_declaration": "public class FileBasedScatterGatherBackingStore implements ScatterGatherBackingStore ",
      "methods_under_test": {
        "=1": {
          "FileBasedScatterGatherBackingStore.writeOut(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "FileBasedScatterGatherBackingStore.close()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FileBasedScatterGatherBackingStore.closeForWriting()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ArchiveException",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/ArchiveException.java",
      "class_declaration": "public class ArchiveException extends Exception ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnicodeCommentExtraField",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java",
      "class_declaration": "public class UnicodeCommentExtraField extends AbstractUnicodeExtraField ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DumpArchiveSummary",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java",
      "class_declaration": "public class DumpArchiveSummary ",
      "methods_under_test": {
        "=1": {
          "DumpArchiveSummary.setDumpDate(final, Date)": [
            1,
            1,
            1
          ],
          "DumpArchiveSummary.setPreviousDumpDate(final, Date)": [
            1,
            1,
            1
          ],
          "DumpArchiveSummary.setVolume(final, int)": [
            1,
            1,
            1
          ],
          "DumpArchiveSummary.setLevel(final, int)": [
            1,
            1,
            1
          ],
          "DumpArchiveSummary.setLabel(final, String)": [
            1,
            1,
            1
          ],
          "DumpArchiveSummary.setFilesystem(final, String)": [
            1,
            1,
            1
          ],
          "DumpArchiveSummary.setDevname(final, String)": [
            1,
            1,
            1
          ],
          "DumpArchiveSummary.setHostname(final, String)": [
            1,
            1,
            1
          ],
          "DumpArchiveSummary.setFlags(final, int)": [
            1,
            1,
            1
          ],
          "DumpArchiveSummary.setFirstRecord(final, int)": [
            1,
            1,
            1
          ],
          "DumpArchiveSummary.setNTRec(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DumpArchiveSummary.hashCode()": [
            4,
            4,
            4
          ],
          "DumpArchiveSummary.equals(final, Object)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnsupportedZipFeatureException",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java",
      "class_declaration": "public class UnsupportedZipFeatureException extends ZipException ",
      "methods_under_test": {
        "=1": {
          "Feature.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BZip2CompressorOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java",
      "class_declaration": "public class BZip2CompressorOutputStream extends CompressorOutputStream implements BZip2Constants ",
      "methods_under_test": {
        "=1": {
          "BZip2CompressorOutputStream.chooseBlockSize(final, long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BZip2CompressorOutputStream.write(final, int)": [
            2,
            2,
            2
          ],
          "BZip2CompressorOutputStream.finalize()": [
            2,
            2,
            2
          ],
          "BZip2CompressorOutputStream.finish()": [
            3,
            3,
            3
          ],
          "BZip2CompressorOutputStream.close()": [
            2,
            2,
            2
          ],
          "BZip2CompressorOutputStream.flush()": [
            2,
            2,
            2
          ],
          "BZip2CompressorOutputStream.write(final, byte[], int, final, int)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ArjArchiveEntry",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java",
      "class_declaration": "public class ArjArchiveEntry implements ArchiveEntry ",
      "methods_under_test": {
        "=1": {
          "ArjArchiveEntry.getLastModifiedDate()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ArjArchiveEntry.getName()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "LZMACompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java",
      "class_declaration": "public class LZMACompressorInputStream extends CompressorInputStream ",
      "methods_under_test": {
        "=1": {
          "LZMACompressorInputStream.read()": [
            1,
            1,
            1
          ],
          "LZMACompressorInputStream.read(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "LZMACompressorInputStream.skip(final, long)": [
            1,
            1,
            1
          ],
          "LZMACompressorInputStream.available()": [
            1,
            1,
            1
          ],
          "LZMACompressorInputStream.close()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LZMACompressorInputStream.matches(final, byte[], final, int)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CoderBase",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java",
      "class_declaration": "abstract class CoderBase ",
      "methods_under_test": {
        "=1": {
          "CoderBase.getOptionsAsProperties(final, Object)": [
            1,
            1,
            1
          ],
          "CoderBase.getOptionsFromCoder(final, Coder, final, InputStream)": [
            1,
            1,
            1
          ],
          "CoderBase.encode(final, OutputStream, final, Object)": [
            1,
            1,
            1
          ],
          "CoderBase.numberOptionOrDefault(final, Object, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CoderBase.canAcceptOptions(final, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CompressorException",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/CompressorException.java",
      "class_declaration": "public class CompressorException extends Exception ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JarArchiveInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java",
      "class_declaration": "public class JarArchiveInputStream extends ZipArchiveInputStream ",
      "methods_under_test": {
        "=1": {
          "JarArchiveInputStream.getNextJarEntry()": [
            1,
            1,
            1
          ],
          "JarArchiveInputStream.matches(final, byte[], final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ZipEncodingHelper",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java",
      "class_declaration": "public abstract class ZipEncodingHelper ",
      "methods_under_test": {
        "=1": {
          "ZipEncodingHelper.growBufferBy(ByteBuffer, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ZipEncodingHelper.getZipEncoding(final, String)": [
            3,
            3,
            3
          ],
          "ZipEncodingHelper.isUTF8(String)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ZipExtraField",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnixStat",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java",
      "error": "list index out of range"
    },
    {
      "src_name": "X0015_CertificateIdForFile",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile.java",
      "class_declaration": "public class X0015_CertificateIdForFile extends PKWareExtraHeader ",
      "methods_under_test": {
        "=1": {
          "X0015_CertificateIdForFile.parseFromCentralDirectoryData(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CountingOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java",
      "class_declaration": "public class CountingOutputStream extends FilterOutputStream ",
      "methods_under_test": {
        "=1": {
          "CountingOutputStream.write(final, int)": [
            1,
            1,
            1
          ],
          "CountingOutputStream.write(final, byte[])": [
            1,
            1,
            1
          ],
          "CountingOutputStream.write(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CountingOutputStream.count(final, long)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Pack200CompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java",
      "class_declaration": "public class Pack200CompressorInputStream extends CompressorInputStream ",
      "methods_under_test": {
        "=1": {
          "Pack200CompressorInputStream.read()": [
            1,
            1,
            1
          ],
          "Pack200CompressorInputStream.read(final, byte[])": [
            1,
            1,
            1
          ],
          "Pack200CompressorInputStream.read(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "Pack200CompressorInputStream.available()": [
            1,
            1,
            1
          ],
          "Pack200CompressorInputStream.reset()": [
            1,
            1,
            1
          ],
          "Pack200CompressorInputStream.skip(final, long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Pack200CompressorInputStream.markSupported()": [
            3,
            3,
            3
          ],
          "Pack200CompressorInputStream.mark(final, int)": [
            2,
            2,
            2
          ],
          "Pack200CompressorInputStream.close()": [
            3,
            3,
            3
          ],
          "Pack200CompressorInputStream.matches(final, byte[], final, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "InvalidFormatException",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/dump/InvalidFormatException.java",
      "class_declaration": "public class InvalidFormatException extends DumpArchiveException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ZipArchiveEntryRequest",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java",
      "class_declaration": "public class ZipArchiveEntryRequest ",
      "methods_under_test": {
        "=1": {
          "ZipArchiveEntryRequest.createZipArchiveEntryRequest(final, ZipArchiveEntry, final, InputStreamSupplier)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "GzipCompressorOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java",
      "class_declaration": "public class GzipCompressorOutputStream extends CompressorOutputStream ",
      "methods_under_test": {
        "=1": {
          "GzipCompressorOutputStream.write(final, int)": [
            1,
            1,
            1
          ],
          "GzipCompressorOutputStream.write(final, byte[])": [
            1,
            1,
            1
          ],
          "GzipCompressorOutputStream.flush()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GzipCompressorOutputStream.write(final, byte[], final, int, final, int)": [
            5,
            5,
            5
          ],
          "GzipCompressorOutputStream.finish()": [
            3,
            3,
            3
          ],
          "GzipCompressorOutputStream.close()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TempFileCachingStreamBridge",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java",
      "class_declaration": "class TempFileCachingStreamBridge extends StreamBridge ",
      "methods_under_test": {
        "=1": {
          "TempFileCachingStreamBridge.getInputView()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "X0014_X509Certificates",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/X0014_X509Certificates.java",
      "class_declaration": "public class X0014_X509Certificates extends PKWareExtraHeader ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnrecognizedExtraField",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java",
      "class_declaration": "public class UnrecognizedExtraField implements ZipExtraField ",
      "methods_under_test": {
        "=1": {
          "UnrecognizedExtraField.setHeaderId(final, ZipShort)": [
            1,
            1,
            1
          ],
          "UnrecognizedExtraField.setLocalFileDataData(final, byte[])": [
            1,
            1,
            1
          ],
          "UnrecognizedExtraField.setCentralDirectoryData(final, byte[])": [
            1,
            1,
            1
          ],
          "UnrecognizedExtraField.parseFromLocalFileData(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnrecognizedExtraField.getCentralDirectoryLength()": [
            2,
            2,
            2
          ],
          "UnrecognizedExtraField.getCentralDirectoryData()": [
            2,
            2,
            2
          ],
          "UnrecognizedExtraField.parseFromCentralDirectoryData(final, byte[], final, int, final, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ZipMethod",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java",
      "error": "local variable 'class_name' referenced before assignment"
    },
    {
      "src_name": "BrotliUtils",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/brotli/BrotliUtils.java",
      "class_declaration": "public class BrotliUtils ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "BrotliUtils.setCacheBrotliAvailablity(final, boolean)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CLI",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java",
      "error": "523 is not in list"
    },
    {
      "src_name": "Lists",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/Lists.java",
      "class_declaration": "public class Lists ",
      "methods_under_test": {
        "=1": {
          "Lists.newArrayList()": [
            1,
            1,
            1
          ],
          "Lists.newArrayList(final, Iterator<? extends E>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StreamingNotSupportedException",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/StreamingNotSupportedException.java",
      "class_declaration": "public class StreamingNotSupportedException extends ArchiveException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "MemoryLimitException",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/MemoryLimitException.java",
      "class_declaration": "public class MemoryLimitException extends IOException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "GzipCompressorInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java",
      "class_declaration": "public class GzipCompressorInputStream extends CompressorInputStream ",
      "methods_under_test": {
        "=1": {
          "GzipCompressorInputStream.read()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GzipCompressorInputStream.matches(final, byte[], final, int)": [
            4,
            4,
            4
          ],
          "GzipCompressorInputStream.close()": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "GzipCompressorInputStream.read(final, byte[], int, int)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "FlushShieldFilterOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java",
      "class_declaration": "public class FlushShieldFilterOutputStream extends FilterOutputStream ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ZipConstants",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java",
      "class_declaration": "final class ZipConstants ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnparseableExtraFieldData",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java",
      "class_declaration": "public final class UnparseableExtraFieldData implements ZipExtraField ",
      "methods_under_test": {
        "=1": {
          "UnparseableExtraFieldData.parseFromLocalFileData(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnparseableExtraFieldData.parseFromCentralDirectoryData(final, byte[], final, int, final, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CpioArchiveEntry",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java",
      "class_declaration": "public class CpioArchiveEntry implements CpioConstants, ArchiveEntry ",
      "methods_under_test": {
        "=1": {
          "CpioArchiveEntry.getChksum()": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.getDevice()": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.getDeviceMaj()": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.getDeviceMin()": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.getRemoteDevice()": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.getRemoteDeviceMaj()": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.getRemoteDeviceMin()": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.setChksum(final, long)": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.setDevice(final, long)": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.setDeviceMaj(final, long)": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.setDeviceMin(final, long)": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.setGID(final, long)": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.setInode(final, long)": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.setName(final, String)": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.setNumberOfLinks(final, long)": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.setRemoteDevice(final, long)": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.setRemoteDeviceMaj(final, long)": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.setRemoteDeviceMin(final, long)": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.setTime(final, long)": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.setUID(final, long)": [
            1,
            1,
            1
          ],
          "CpioArchiveEntry.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CpioArchiveEntry.getHeaderPadCount()": [
            4,
            4,
            4
          ],
          "CpioArchiveEntry.getDataPadCount()": [
            3,
            3,
            3
          ],
          "CpioArchiveEntry.setSize(final, long)": [
            2,
            2,
            2
          ],
          "CpioArchiveEntry.setMode(final, long)": [
            9,
            9,
            9
          ],
          "CpioArchiveEntry.equals(final, Object)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CpioConstants",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/cpio/CpioConstants.java",
      "error": "list index out of range"
    },
    {
      "src_name": "FramedSnappyCompressorOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java",
      "class_declaration": "public class FramedSnappyCompressorOutputStream extends CompressorOutputStream ",
      "methods_under_test": {
        "=1": {
          "FramedSnappyCompressorOutputStream.write(int)": [
            1,
            1,
            1
          ],
          "FramedSnappyCompressorOutputStream.close()": [
            1,
            1,
            1
          ],
          "FramedSnappyCompressorOutputStream.mask(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FramedSnappyCompressorOutputStream.write(byte[], int, int)": [
            3,
            3,
            3
          ],
          "FramedSnappyCompressorOutputStream.finish()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SnappyCompressorOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java",
      "class_declaration": "public class SnappyCompressorOutputStream extends CompressorOutputStream ",
      "methods_under_test": {
        "=1": {
          "SnappyCompressorOutputStream.write(int)": [
            1,
            1,
            1
          ],
          "SnappyCompressorOutputStream.write(byte[], int, int)": [
            1,
            1,
            1
          ],
          "SnappyCompressorOutputStream.close()": [
            1,
            1,
            1
          ],
          "SnappyCompressorOutputStream.createParameterBuilder(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "SnappyCompressorOutputStream.finish()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StreamMap",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/StreamMap.java",
      "class_declaration": "class StreamMap ",
      "methods_under_test": {
        "=1": {
          "StreamMap.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Pack200Strategy",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Strategy.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ChangeSetPerformer",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java",
      "class_declaration": "public class ChangeSetPerformer ",
      "methods_under_test": {
        "=1": {
          "ChangeSetPerformer.perform(final, ArchiveInputStream, final, ArchiveOutputStream)": [
            1,
            1,
            1
          ],
          "ChangeSetPerformer.perform(final, ZipFile, final, ArchiveOutputStream)": [
            1,
            1,
            1
          ],
          "ArchiveInputStreamIterator.hasNext()": [
            1,
            1,
            1
          ],
          "ArchiveInputStreamIterator.next()": [
            1,
            1,
            1
          ],
          "ZipFileIterator.hasNext()": [
            1,
            1,
            1
          ],
          "ZipFileIterator.next()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "InMemoryCachingStreamBridge",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/pack200/InMemoryCachingStreamBridge.java",
      "class_declaration": "class InMemoryCachingStreamBridge extends StreamBridge ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ExplodingInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java",
      "class_declaration": "class ExplodingInputStream extends InputStream ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ExplodingInputStream.read()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CompressorOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java",
      "class_declaration": "public abstract class CompressorOutputStream extends OutputStream ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TarArchiveSparseEntry",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java",
      "class_declaration": "public class TarArchiveSparseEntry implements TarConstants ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Rand",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/bzip2/Rand.java",
      "class_declaration": "final class Rand ",
      "methods_under_test": {
        "=1": {
          "Rand.rNums(final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ZipArchiveOutputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java",
      "class_declaration": "public class ZipArchiveOutputStream extends ArchiveOutputStream ",
      "methods_under_test": {
        "=1": {
          "ZipArchiveOutputStream.setUseLanguageEncodingFlag(final, boolean)": [
            1,
            1,
            1
          ],
          "ZipArchiveOutputStream.setCreateUnicodeExtraFields(final, UnicodeExtraFieldPolicy)": [
            1,
            1,
            1
          ],
          "ZipArchiveOutputStream.setFallbackToUTF8(final, boolean)": [
            1,
            1,
            1
          ],
          "ZipArchiveOutputStream.setUseZip64(final, Zip64Mode)": [
            1,
            1,
            1
          ],
          "ZipArchiveOutputStream.closeArchiveEntry()": [
            1,
            1,
            1
          ],
          "ZipArchiveOutputStream.putArchiveEntry(final, ArchiveEntry)": [
            1,
            1,
            1
          ],
          "ZipArchiveOutputStream.setComment(final, String)": [
            1,
            1,
            1
          ],
          "ZipArchiveOutputStream.setMethod(final, int)": [
            1,
            1,
            1
          ],
          "ZipArchiveOutputStream.deflate()": [
            1,
            1,
            1
          ],
          "ZipArchiveOutputStream.writeLocalFileHeader(final, ZipArchiveEntry)": [
            1,
            1,
            1
          ],
          "ZipArchiveOutputStream.writeCentralFileHeader(final, ZipArchiveEntry)": [
            1,
            1,
            1
          ],
          "ZipArchiveOutputStream.writeOut(final, byte[])": [
            1,
            1,
            1
          ],
          "ZipArchiveOutputStream.writeOut(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ],
          "UnicodeExtraFieldPolicy.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ZipArchiveOutputStream.setEncoding(final, String)": [
            2,
            2,
            2
          ],
          "ZipArchiveOutputStream.finish()": [
            3,
            3,
            3
          ],
          "ZipArchiveOutputStream.addRawArchiveEntry(final, ZipArchiveEntry, final, InputStream)": [
            2,
            2,
            2
          ],
          "ZipArchiveOutputStream.setLevel(final, int)": [
            2,
            2,
            2
          ],
          "ZipArchiveOutputStream.canWriteEntryData(final, ArchiveEntry)": [
            2,
            2,
            2
          ],
          "ZipArchiveOutputStream.write(final, byte[], final, int, final, int)": [
            2,
            2,
            2
          ],
          "ZipArchiveOutputStream.close()": [
            2,
            2,
            2
          ],
          "ZipArchiveOutputStream.flush()": [
            2,
            2,
            2
          ],
          "ZipArchiveOutputStream.writeDataDescriptor(final, ZipArchiveEntry)": [
            4,
            4,
            4
          ],
          "ZipArchiveOutputStream.writeCentralDirectoryEnd()": [
            3,
            3,
            3
          ],
          "ZipArchiveOutputStream.writeZip64CentralDirectory()": [
            4,
            4,
            4
          ],
          "ZipArchiveOutputStream.createArchiveEntry(final, File, final, String)": [
            2,
            2,
            2
          ],
          "ZipArchiveOutputStream.destroy()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "CharsetAccessor",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/CharsetAccessor.java",
      "error": "list index out of range"
    },
    {
      "src_name": "UnicodePathExtraField",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java",
      "class_declaration": "public class UnicodePathExtraField extends AbstractUnicodeExtraField ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnsupportedCompressionAlgorithmException",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.java",
      "class_declaration": "public class UnsupportedCompressionAlgorithmException extends DumpArchiveException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TapeInputStream",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java",
      "class_declaration": "class TapeInputStream extends FilterInputStream ",
      "methods_under_test": {
        "=1": {
          "TapeInputStream.resetBlockSize(final, int, final, boolean)": [
            1,
            1,
            1
          ],
          "TapeInputStream.read()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TapeInputStream.available()": [
            2,
            2,
            2
          ],
          "TapeInputStream.read(final, byte[], int, final, int)": [
            6,
            6,
            6
          ],
          "TapeInputStream.skip(final, long)": [
            6,
            6,
            6
          ],
          "TapeInputStream.close()": [
            2,
            2,
            2
          ],
          "TapeInputStream.peek()": [
            3,
            3,
            3
          ],
          "TapeInputStream.readRecord()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "LZMADecoder",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java",
      "class_declaration": "class LZMADecoder extends CoderBase ",
      "methods_under_test": {
        "=1": {
          "LZMADecoder.encode(final, OutputStream, final, Object)": [
            1,
            1,
            1
          ],
          "LZMADecoder.getOptionsAsProperties(final, Object)": [
            1,
            1,
            1
          ],
          "LZMADecoder.getOptionsFromCoder(final, Coder, final, InputStream)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LZMADecoder.decode(final, String, final, InputStream, final, long, final, Coder, final, byte[])": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StreamBridge",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/compressors/pack200/StreamBridge.java",
      "class_declaration": "abstract class StreamBridge extends FilterOutputStream ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "StreamBridge.getInput()": [
            3,
            3,
            3
          ],
          "StreamBridge.stop()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SubStreamsInfo",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/sevenz/SubStreamsInfo.java",
      "class_declaration": "class SubStreamsInfo ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "X0019_EncryptionRecipientCertificateList",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/X0019_EncryptionRecipientCertificateList.java",
      "class_declaration": "public class X0019_EncryptionRecipientCertificateList extends PKWareExtraHeader ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "X0016_CertificateIdForCentralDirectory",
      "src_path": "../../defects4j-subjects/Compress-47f/src/main/java/org/apache/commons/compress/archivers/zip/X0016_CertificateIdForCentralDirectory.java",
      "class_declaration": "public class X0016_CertificateIdForCentralDirectory extends PKWareExtraHeader ",
      "methods_under_test": {
        "=1": {
          "X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(final, byte[], final, int, final, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    }
  ],
  "test_unpaired": [
    {
      "ScatterSample": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/ScatterSample.java"
    },
    {
      "ZipTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java"
    },
    {
      "ArchiveReadTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/ArchiveReadTest.java"
    },
    {
      "FactoryTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/lz4/FactoryTest.java"
    },
    {
      "Zip64SupportIT": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java"
    },
    {
      "AbstractTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/AbstractTestCase.java"
    },
    {
      "LongPathTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java"
    },
    {
      "CoverageTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/sevenz/CoverageTest.java"
    },
    {
      "BigFilesIT": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java"
    },
    {
      "CoverageTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/arj/CoverageTest.java"
    },
    {
      "XZTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/XZTestCase.java"
    },
    {
      "IOMethodsTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/IOMethodsTest.java"
    },
    {
      "SevenZTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java"
    },
    {
      "ChainingTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/ChainingTestCase.java"
    },
    {
      "LZMATestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java"
    },
    {
      "MemoryArchiveTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java"
    },
    {
      "SevenZNativeHeapTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZNativeHeapTest.java"
    },
    {
      "FramedSnappyTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java"
    },
    {
      "DetectCompressorTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java"
    },
    {
      "BZip2TestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java"
    },
    {
      "CountingStreamTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java"
    },
    {
      "PythonTruncatedBzip2Test": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java"
    },
    {
      "DeflateTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java"
    },
    {
      "UTF8ZipFilesTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java"
    },
    {
      "JarTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/JarTestCase.java"
    },
    {
      "SnappyRoundtripTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java"
    },
    {
      "Deflate64BugsTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/deflate64/Deflate64BugsTest.java"
    },
    {
      "ArTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java"
    },
    {
      "TarTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java"
    },
    {
      "MemoryArchiveEntry": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java"
    },
    {
      "SparseFilesTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java"
    },
    {
      "Maven221MultiVolumeTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java"
    },
    {
      "LongSymLinkTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java"
    },
    {
      "MemoryArchiveInputStream": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java"
    },
    {
      "BlockLZ4CompressorRoundtripTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java"
    },
    {
      "ExceptionMessageTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java"
    },
    {
      "ExplodeSupportTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java"
    },
    {
      "DetectArchiverTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java"
    },
    {
      "CompressorServiceLoaderTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/CompressorServiceLoaderTest.java"
    },
    {
      "ScatterSampleTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java"
    },
    {
      "DumpTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java"
    },
    {
      "DataDescriptorTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java"
    },
    {
      "FramedLZ4CompressorRoundtripTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java"
    },
    {
      "Pack200TestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java"
    },
    {
      "Lister": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/Lister.java"
    },
    {
      "GZipTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java"
    },
    {
      "CpioTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java"
    },
    {
      "EncryptedArchiveTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java"
    },
    {
      "ZipClassCoverageTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/archivers/zip/ZipClassCoverageTest.java"
    },
    {
      "ZstdRoundtripTest": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdRoundtripTest.java"
    },
    {
      "ZTestCase": "../../defects4j-subjects/Compress-47f/src/test/java/org/apache/commons/compress/compressors/ZTestCase.java"
    }
  ]
}