{
  "src_test_exact_match": [
    {
      "src_name": "CachedDateTimeZone",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/tz/CachedDateTimeZone.java",
      "class_declaration": "public class CachedDateTimeZone extends DateTimeZone ",
      "methods_under_test": {
        "=1": {
          "CachedDateTimeZone.getNameKey(long)": [
            1,
            1,
            1
          ],
          "CachedDateTimeZone.getOffset(long)": [
            1,
            1,
            1
          ],
          "CachedDateTimeZone.getStandardOffset(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CachedDateTimeZone.forZone(DateTimeZone)": [
            2,
            2,
            2
          ],
          "CachedDateTimeZone.nextTransition(long)": [
            2,
            2,
            2
          ],
          "CachedDateTimeZone.previousTransition(long)": [
            2,
            2,
            2
          ],
          "CachedDateTimeZone.hashCode()": [
            2,
            2,
            2
          ],
          "CachedDateTimeZone.equals(Object)": [
            3,
            3,
            3
          ],
          "Info.getNameKey(long)": [
            5,
            5,
            5
          ],
          "Info.getOffset(long)": [
            5,
            5,
            5
          ],
          "Info.getStandardOffset(long)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java"
    },
    {
      "src_name": "DurationField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/DurationField.java",
      "class_declaration": "public abstract class DurationField implements Comparable<DurationField> ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "DurationField.subtract(long, int)": [
            2,
            2,
            2
          ],
          "DurationField.subtract(long, long)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDurationField.java"
    },
    {
      "src_name": "PreciseDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/PreciseDateTimeField.java",
      "class_declaration": "public class PreciseDateTimeField extends PreciseDurationDateTimeField ",
      "methods_under_test": {
        "=1": {
          "PreciseDateTimeField.addWrapField(long, int)": [
            1,
            1,
            1
          ],
          "PreciseDateTimeField.set(long, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PreciseDateTimeField.get(long)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/field/TestPreciseDateTimeField.java"
    },
    {
      "src_name": "Chronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/Chronology.java",
      "class_declaration": "public abstract class Chronology ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestChronology.java"
    },
    {
      "src_name": "ISOChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/ISOChronology.java",
      "class_declaration": "public final class ISOChronology extends AssembledChronology ",
      "methods_under_test": {
        "=1": {
          "ISOChronology.withUTC()": [
            1,
            1,
            1
          ],
          "ISOChronology.equals(Object)": [
            1,
            1,
            1
          ],
          "ISOChronology.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ISOChronology.getInstance(DateTimeZone)": [
            5,
            5,
            5
          ],
          "ISOChronology.withZone(DateTimeZone)": [
            3,
            3,
            3
          ],
          "ISOChronology.toString()": [
            2,
            2,
            2
          ],
          "ISOChronology.assemble(Fields)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/TestISOChronology.java"
    },
    {
      "src_name": "ReadablePartialConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/ReadablePartialConverter.java",
      "class_declaration": "class ReadablePartialConverter extends AbstractConverter implements PartialConverter ",
      "methods_under_test": {
        "=1": {
          "ReadablePartialConverter.getChronology(Object, DateTimeZone)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ReadablePartialConverter.getChronology(Object, Chronology)": [
            2,
            2,
            2
          ],
          "ReadablePartialConverter.getPartialValues(ReadablePartial, Object, Chronology)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/TestReadablePartialConverter.java"
    },
    {
      "src_name": "PeriodFormatter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/format/PeriodFormatter.java",
      "class_declaration": "public class PeriodFormatter ",
      "methods_under_test": {
        "=1": {
          "PeriodFormatter.printTo(StringBuffer, ReadablePeriod)": [
            1,
            1,
            1
          ],
          "PeriodFormatter.printTo(Writer, ReadablePeriod)": [
            1,
            1,
            1
          ],
          "PeriodFormatter.print(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "PeriodFormatter.parseInto(ReadWritablePeriod, String, int)": [
            1,
            1,
            1
          ],
          "PeriodFormatter.parsePeriod(String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PeriodFormatter.withLocale(Locale)": [
            2,
            2,
            2
          ],
          "PeriodFormatter.withParseType(PeriodType)": [
            2,
            2,
            2
          ],
          "PeriodFormatter.parseMutablePeriod(String)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/format/TestPeriodFormatter.java"
    },
    {
      "src_name": "CopticChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/CopticChronology.java",
      "class_declaration": "public final class CopticChronology extends BasicFixedMonthChronology ",
      "methods_under_test": {
        "=1": {
          "CopticChronology.getInstance(DateTimeZone)": [
            1,
            1,
            1
          ],
          "CopticChronology.withUTC()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CopticChronology.getInstance(DateTimeZone, int)": [
            7,
            7,
            7
          ],
          "CopticChronology.withZone(DateTimeZone)": [
            3,
            3,
            3
          ],
          "CopticChronology.calculateFirstDayOfYearMillis(int)": [
            3,
            3,
            3
          ],
          "CopticChronology.assemble(Fields)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/TestCopticChronology.java"
    },
    {
      "src_name": "ConverterSet",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/ConverterSet.java",
      "class_declaration": "class ConverterSet ",
      "methods_under_test": {
        "=1": {
          "ConverterSet.size()": [
            1,
            1,
            1
          ],
          "ConverterSet.copyInto(Converter[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ConverterSet.select(Class<?>)": [
            9,
            9,
            9
          ],
          "ConverterSet.add(Converter, Converter[])": [
            9,
            9,
            9
          ],
          "ConverterSet.remove(Converter, Converter[])": [
            4,
            4,
            4
          ],
          "ConverterSet.remove(final, int, Converter[])": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/TestConverterSet.java"
    },
    {
      "src_name": "Hours",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/Hours.java",
      "class_declaration": "public final class Hours extends BaseSingleFieldPeriod ",
      "methods_under_test": {
        "=1": {
          "Hours.hoursBetween(ReadableInstant, ReadableInstant)": [
            1,
            1,
            1
          ],
          "Hours.standardHoursIn(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "Hours.toStandardWeeks()": [
            1,
            1,
            1
          ],
          "Hours.toStandardDays()": [
            1,
            1,
            1
          ],
          "Hours.toStandardMinutes()": [
            1,
            1,
            1
          ],
          "Hours.toStandardSeconds()": [
            1,
            1,
            1
          ],
          "Hours.toStandardDuration()": [
            1,
            1,
            1
          ],
          "Hours.minus(int)": [
            1,
            1,
            1
          ],
          "Hours.multipliedBy(int)": [
            1,
            1,
            1
          ],
          "Hours.negated()": [
            1,
            1,
            1
          ],
          "Hours.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Hours.hoursBetween(ReadablePartial, ReadablePartial)": [
            2,
            2,
            2
          ],
          "Hours.hoursIn(ReadableInterval)": [
            2,
            2,
            2
          ],
          "Hours.parseHours(String)": [
            2,
            2,
            2
          ],
          "Hours.plus(int)": [
            2,
            2,
            2
          ],
          "Hours.plus(Hours)": [
            2,
            2,
            2
          ],
          "Hours.minus(Hours)": [
            2,
            2,
            2
          ],
          "Hours.dividedBy(int)": [
            2,
            2,
            2
          ],
          "Hours.isGreaterThan(Hours)": [
            2,
            2,
            2
          ],
          "Hours.isLessThan(Hours)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "Hours.hours(int)": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestHours.java"
    },
    {
      "src_name": "NullConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/NullConverter.java",
      "class_declaration": "class NullConverter extends AbstractConverter implements InstantConverter, PartialConverter, DurationConverter, PeriodConverter, IntervalConverter ",
      "methods_under_test": {
        "=1": {
          "NullConverter.getDurationMillis(Object)": [
            1,
            1,
            1
          ],
          "NullConverter.setInto(ReadWritablePeriod, Object, Chronology)": [
            1,
            1,
            1
          ],
          "NullConverter.setInto(ReadWritableInterval, Object, Chronology)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/TestNullConverter.java"
    },
    {
      "src_name": "DateConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/DateConverter.java",
      "class_declaration": "final class DateConverter extends AbstractConverter implements InstantConverter, PartialConverter ",
      "methods_under_test": {
        "=1": {
          "DateConverter.getInstantMillis(Object, Chronology)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/TestDateConverter.java"
    },
    {
      "src_name": "Minutes",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/Minutes.java",
      "class_declaration": "public final class Minutes extends BaseSingleFieldPeriod ",
      "methods_under_test": {
        "=1": {
          "Minutes.minutesBetween(ReadableInstant, ReadableInstant)": [
            1,
            1,
            1
          ],
          "Minutes.standardMinutesIn(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "Minutes.toStandardWeeks()": [
            1,
            1,
            1
          ],
          "Minutes.toStandardDays()": [
            1,
            1,
            1
          ],
          "Minutes.toStandardHours()": [
            1,
            1,
            1
          ],
          "Minutes.toStandardSeconds()": [
            1,
            1,
            1
          ],
          "Minutes.toStandardDuration()": [
            1,
            1,
            1
          ],
          "Minutes.minus(int)": [
            1,
            1,
            1
          ],
          "Minutes.multipliedBy(int)": [
            1,
            1,
            1
          ],
          "Minutes.negated()": [
            1,
            1,
            1
          ],
          "Minutes.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Minutes.minutes(int)": [
            8,
            8,
            8
          ],
          "Minutes.minutesBetween(ReadablePartial, ReadablePartial)": [
            2,
            2,
            2
          ],
          "Minutes.minutesIn(ReadableInterval)": [
            2,
            2,
            2
          ],
          "Minutes.parseMinutes(String)": [
            2,
            2,
            2
          ],
          "Minutes.plus(int)": [
            2,
            2,
            2
          ],
          "Minutes.plus(Minutes)": [
            2,
            2,
            2
          ],
          "Minutes.minus(Minutes)": [
            2,
            2,
            2
          ],
          "Minutes.dividedBy(int)": [
            2,
            2,
            2
          ],
          "Minutes.isGreaterThan(Minutes)": [
            2,
            2,
            2
          ],
          "Minutes.isLessThan(Minutes)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMinutes.java"
    },
    {
      "src_name": "JulianChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/JulianChronology.java",
      "class_declaration": "public final class JulianChronology extends BasicGJChronology ",
      "methods_under_test": {
        "=1": {
          "JulianChronology.getInstance(DateTimeZone)": [
            1,
            1,
            1
          ],
          "JulianChronology.withUTC()": [
            1,
            1,
            1
          ],
          "JulianChronology.getDateMidnightMillis(int, int, int)": [
            1,
            1,
            1
          ],
          "JulianChronology.isLeapYear(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "JulianChronology.adjustYearForSet(int)": [
            3,
            3,
            3
          ],
          "JulianChronology.getInstance(DateTimeZone, int)": [
            7,
            7,
            7
          ],
          "JulianChronology.withZone(DateTimeZone)": [
            3,
            3,
            3
          ],
          "JulianChronology.calculateFirstDayOfYearMillis(int)": [
            3,
            3,
            3
          ],
          "JulianChronology.assemble(Fields)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/TestJulianChronology.java"
    },
    {
      "src_name": "Days",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/Days.java",
      "class_declaration": "public final class Days extends BaseSingleFieldPeriod ",
      "methods_under_test": {
        "=1": {
          "Days.daysBetween(ReadableInstant, ReadableInstant)": [
            1,
            1,
            1
          ],
          "Days.standardDaysIn(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "Days.toStandardWeeks()": [
            1,
            1,
            1
          ],
          "Days.toStandardHours()": [
            1,
            1,
            1
          ],
          "Days.toStandardMinutes()": [
            1,
            1,
            1
          ],
          "Days.toStandardSeconds()": [
            1,
            1,
            1
          ],
          "Days.toStandardDuration()": [
            1,
            1,
            1
          ],
          "Days.minus(int)": [
            1,
            1,
            1
          ],
          "Days.multipliedBy(int)": [
            1,
            1,
            1
          ],
          "Days.negated()": [
            1,
            1,
            1
          ],
          "Days.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Days.daysBetween(ReadablePartial, ReadablePartial)": [
            2,
            2,
            2
          ],
          "Days.daysIn(ReadableInterval)": [
            2,
            2,
            2
          ],
          "Days.parseDays(String)": [
            2,
            2,
            2
          ],
          "Days.plus(int)": [
            2,
            2,
            2
          ],
          "Days.plus(Days)": [
            2,
            2,
            2
          ],
          "Days.minus(Days)": [
            2,
            2,
            2
          ],
          "Days.dividedBy(int)": [
            2,
            2,
            2
          ],
          "Days.isGreaterThan(Days)": [
            2,
            2,
            2
          ],
          "Days.isLessThan(Days)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "Days.days(int)": [
            12,
            12,
            12
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDays.java"
    },
    {
      "src_name": "Seconds",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/Seconds.java",
      "class_declaration": "public final class Seconds extends BaseSingleFieldPeriod ",
      "methods_under_test": {
        "=1": {
          "Seconds.secondsBetween(ReadableInstant, ReadableInstant)": [
            1,
            1,
            1
          ],
          "Seconds.standardSecondsIn(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "Seconds.toStandardWeeks()": [
            1,
            1,
            1
          ],
          "Seconds.toStandardDays()": [
            1,
            1,
            1
          ],
          "Seconds.toStandardHours()": [
            1,
            1,
            1
          ],
          "Seconds.toStandardMinutes()": [
            1,
            1,
            1
          ],
          "Seconds.toStandardDuration()": [
            1,
            1,
            1
          ],
          "Seconds.minus(int)": [
            1,
            1,
            1
          ],
          "Seconds.multipliedBy(int)": [
            1,
            1,
            1
          ],
          "Seconds.negated()": [
            1,
            1,
            1
          ],
          "Seconds.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Seconds.seconds(int)": [
            8,
            8,
            8
          ],
          "Seconds.secondsBetween(ReadablePartial, ReadablePartial)": [
            2,
            2,
            2
          ],
          "Seconds.secondsIn(ReadableInterval)": [
            2,
            2,
            2
          ],
          "Seconds.parseSeconds(String)": [
            2,
            2,
            2
          ],
          "Seconds.plus(int)": [
            2,
            2,
            2
          ],
          "Seconds.plus(Seconds)": [
            2,
            2,
            2
          ],
          "Seconds.minus(Seconds)": [
            2,
            2,
            2
          ],
          "Seconds.dividedBy(int)": [
            2,
            2,
            2
          ],
          "Seconds.isGreaterThan(Seconds)": [
            2,
            2,
            2
          ],
          "Seconds.isLessThan(Seconds)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestSeconds.java"
    },
    {
      "src_name": "DurationFieldType",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/DurationFieldType.java",
      "class_declaration": "public abstract class DurationFieldType implements Serializable ",
      "methods_under_test": {
        "=1": {
          "DurationFieldType.millis()": [
            1,
            1,
            1
          ],
          "DurationFieldType.seconds()": [
            1,
            1,
            1
          ],
          "DurationFieldType.minutes()": [
            1,
            1,
            1
          ],
          "DurationFieldType.hours()": [
            1,
            1,
            1
          ],
          "DurationFieldType.halfdays()": [
            1,
            1,
            1
          ],
          "DurationFieldType.days()": [
            1,
            1,
            1
          ],
          "DurationFieldType.weeks()": [
            1,
            1,
            1
          ],
          "DurationFieldType.weekyears()": [
            1,
            1,
            1
          ],
          "DurationFieldType.months()": [
            1,
            1,
            1
          ],
          "DurationFieldType.years()": [
            1,
            1,
            1
          ],
          "DurationFieldType.centuries()": [
            1,
            1,
            1
          ],
          "DurationFieldType.eras()": [
            1,
            1,
            1
          ],
          "DurationFieldType.isSupported(Chronology)": [
            1,
            1,
            1
          ],
          "DurationFieldType.toString()": [
            1,
            1,
            1
          ],
          "DurationFieldType.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DurationFieldType.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "DurationFieldType.getField(Chronology)": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDurationFieldType.java"
    },
    {
      "src_name": "ReadableInstantConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/ReadableInstantConverter.java",
      "class_declaration": "class ReadableInstantConverter extends AbstractConverter implements InstantConverter, PartialConverter ",
      "methods_under_test": {
        "=1": {
          "ReadableInstantConverter.getInstantMillis(Object, Chronology)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ReadableInstantConverter.getChronology(Object, DateTimeZone)": [
            4,
            4,
            4
          ],
          "ReadableInstantConverter.getChronology(Object, Chronology)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/TestReadableInstantConverter.java"
    },
    {
      "src_name": "DateTimeZone",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/DateTimeZone.java",
      "class_declaration": "public abstract class DateTimeZone implements Serializable ",
      "methods_under_test": {
        "=1": {
          "DateTimeZone.forOffsetHours(int)": [
            1,
            1,
            1
          ],
          "DateTimeZone.forOffsetMillis(int)": [
            1,
            1,
            1
          ],
          "DateTimeZone.getShortName(long)": [
            1,
            1,
            1
          ],
          "DateTimeZone.getName(long)": [
            1,
            1,
            1
          ],
          "DateTimeZone.isStandardOffset(long)": [
            1,
            1,
            1
          ],
          "DateTimeZone.toTimeZone()": [
            1,
            1,
            1
          ],
          "DateTimeZone.hashCode()": [
            1,
            1,
            1
          ],
          "DateTimeZone.toString()": [
            1,
            1,
            1
          ],
          "DateTimeZone.writeReplace()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DateTimeZone.setDefault(DateTimeZone)": [
            3,
            3,
            3
          ],
          "DateTimeZone.forID(String)": [
            6,
            6,
            6
          ],
          "DateTimeZone.forOffsetHoursMinutes(int, int)": [
            9,
            9,
            9
          ],
          "DateTimeZone.forTimeZone(TimeZone)": [
            9,
            9,
            9
          ],
          "DateTimeZone.setProvider(Provider)": [
            2,
            2,
            2
          ],
          "DateTimeZone.setNameProvider(NameProvider)": [
            2,
            2,
            2
          ],
          "DateTimeZone.getShortName(long, Locale)": [
            4,
            4,
            4
          ],
          "DateTimeZone.getName(long, Locale)": [
            4,
            4,
            4
          ],
          "DateTimeZone.getOffset(ReadableInstant)": [
            2,
            2,
            2
          ],
          "DateTimeZone.getOffsetFromLocal(long)": [
            7,
            7,
            7
          ],
          "DateTimeZone.convertUTCToLocal(long)": [
            2,
            2,
            2
          ],
          "DateTimeZone.convertLocalToUTC(long, boolean, long)": [
            2,
            2,
            2
          ],
          "DateTimeZone.convertLocalToUTC(long, boolean)": [
            8,
            8,
            8
          ],
          "DateTimeZone.getMillisKeepLocal(DateTimeZone, long)": [
            3,
            3,
            3
          ],
          "DateTimeZone.isLocalDateTimeGap(LocalDateTime)": [
            5,
            5,
            5
          ],
          "DateTimeZone.adjustOffset(long, boolean)": [
            5,
            5,
            5
          ]
        },
        "11-20": {
          "DateTimeZone.getDefault()": [
            14,
            14,
            14
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDateTimeZone.java"
    },
    {
      "src_name": "ReadablePeriodConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/ReadablePeriodConverter.java",
      "class_declaration": "class ReadablePeriodConverter extends AbstractConverter implements PeriodConverter ",
      "methods_under_test": {
        "=1": {
          "ReadablePeriodConverter.setInto(ReadWritablePeriod, Object, Chronology)": [
            1,
            1,
            1
          ],
          "ReadablePeriodConverter.getPeriodType(Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/TestReadablePeriodConverter.java"
    },
    {
      "src_name": "MillisDurationField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/MillisDurationField.java",
      "class_declaration": "public final class MillisDurationField extends DurationField implements Serializable ",
      "methods_under_test": {
        "=1": {
          "MillisDurationField.getValue(long)": [
            1,
            1,
            1
          ],
          "MillisDurationField.getValueAsLong(long)": [
            1,
            1,
            1
          ],
          "MillisDurationField.getValue(long, long)": [
            1,
            1,
            1
          ],
          "MillisDurationField.getValueAsLong(long, long)": [
            1,
            1,
            1
          ],
          "MillisDurationField.getMillis(int)": [
            1,
            1,
            1
          ],
          "MillisDurationField.getMillis(long)": [
            1,
            1,
            1
          ],
          "MillisDurationField.getMillis(int, long)": [
            1,
            1,
            1
          ],
          "MillisDurationField.getMillis(long, long)": [
            1,
            1,
            1
          ],
          "MillisDurationField.add(long, int)": [
            1,
            1,
            1
          ],
          "MillisDurationField.add(long, long)": [
            1,
            1,
            1
          ],
          "MillisDurationField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "MillisDurationField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ],
          "MillisDurationField.hashCode()": [
            1,
            1,
            1
          ],
          "MillisDurationField.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MillisDurationField.compareTo(DurationField)": [
            4,
            4,
            4
          ],
          "MillisDurationField.equals(Object)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/field/TestMillisDurationField.java"
    },
    {
      "src_name": "DateTimeComparator",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/DateTimeComparator.java",
      "class_declaration": "public class DateTimeComparator implements Comparator<Object>, Serializable ",
      "methods_under_test": {
        "=1": {
          "DateTimeComparator.getInstance(DateTimeFieldType)": [
            1,
            1,
            1
          ],
          "DateTimeComparator.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DateTimeComparator.getInstance(DateTimeFieldType, DateTimeFieldType)": [
            4,
            4,
            4
          ],
          "DateTimeComparator.compare(Object, Object)": [
            6,
            6,
            6
          ],
          "DateTimeComparator.equals(Object)": [
            2,
            2,
            2
          ],
          "DateTimeComparator.toString()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDateTimeComparator.java"
    },
    {
      "src_name": "BasePartial",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/base/BasePartial.java",
      "class_declaration": "public abstract class BasePartial extends AbstractPartial implements ReadablePartial, Serializable ",
      "methods_under_test": {
        "=1": {
          "BasePartial.getValue(int)": [
            1,
            1,
            1
          ],
          "BasePartial.setValue(int, int)": [
            1,
            1,
            1
          ],
          "BasePartial.setValues(int[])": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasePartial.toString(String)": [
            2,
            2,
            2
          ],
          "BasePartial.toString(String, Locale)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestBasePartial.java"
    },
    {
      "src_name": "OffsetDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/OffsetDateTimeField.java",
      "class_declaration": "public class OffsetDateTimeField extends DecoratedDateTimeField ",
      "methods_under_test": {
        "=1": {
          "OffsetDateTimeField.get(long)": [
            1,
            1,
            1
          ],
          "OffsetDateTimeField.add(long, int)": [
            1,
            1,
            1
          ],
          "OffsetDateTimeField.add(long, long)": [
            1,
            1,
            1
          ],
          "OffsetDateTimeField.addWrapField(long, int)": [
            1,
            1,
            1
          ],
          "OffsetDateTimeField.set(long, int)": [
            1,
            1,
            1
          ],
          "OffsetDateTimeField.isLeap(long)": [
            1,
            1,
            1
          ],
          "OffsetDateTimeField.getLeapAmount(long)": [
            1,
            1,
            1
          ],
          "OffsetDateTimeField.roundFloor(long)": [
            1,
            1,
            1
          ],
          "OffsetDateTimeField.roundCeiling(long)": [
            1,
            1,
            1
          ],
          "OffsetDateTimeField.roundHalfFloor(long)": [
            1,
            1,
            1
          ],
          "OffsetDateTimeField.roundHalfCeiling(long)": [
            1,
            1,
            1
          ],
          "OffsetDateTimeField.roundHalfEven(long)": [
            1,
            1,
            1
          ],
          "OffsetDateTimeField.remainder(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/field/TestOffsetDateTimeField.java"
    },
    {
      "src_name": "BaseSingleFieldPeriod",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java",
      "class_declaration": "public abstract class BaseSingleFieldPeriod implements ReadablePeriod, Comparable<BaseSingleFieldPeriod>, Serializable ",
      "methods_under_test": {
        "=1": {
          "BaseSingleFieldPeriod.size()": [
            1,
            1,
            1
          ],
          "BaseSingleFieldPeriod.isSupported(DurationFieldType)": [
            1,
            1,
            1
          ],
          "BaseSingleFieldPeriod.toPeriod()": [
            1,
            1,
            1
          ],
          "BaseSingleFieldPeriod.toMutablePeriod()": [
            1,
            1,
            1
          ],
          "BaseSingleFieldPeriod.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BaseSingleFieldPeriod.between(ReadableInstant, ReadableInstant, DurationFieldType)": [
            2,
            2,
            2
          ],
          "BaseSingleFieldPeriod.between(ReadablePartial, ReadablePartial, ReadablePeriod)": [
            6,
            6,
            6
          ],
          "BaseSingleFieldPeriod.standardPeriodIn(ReadablePeriod, long)": [
            5,
            5,
            5
          ],
          "BaseSingleFieldPeriod.getFieldType(int)": [
            2,
            2,
            2
          ],
          "BaseSingleFieldPeriod.getValue(int)": [
            2,
            2,
            2
          ],
          "BaseSingleFieldPeriod.get(DurationFieldType)": [
            2,
            2,
            2
          ],
          "BaseSingleFieldPeriod.equals(Object)": [
            3,
            3,
            3
          ],
          "BaseSingleFieldPeriod.compareTo(BaseSingleFieldPeriod)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestBaseSingleFieldPeriod.java"
    },
    {
      "src_name": "UTCProvider",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/tz/UTCProvider.java",
      "class_declaration": "public final class UTCProvider implements Provider ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "UTCProvider.getZone(String)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/tz/TestUTCProvider.java"
    },
    {
      "src_name": "GJChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/GJChronology.java",
      "class_declaration": "public final class GJChronology extends AssembledChronology ",
      "methods_under_test": {
        "=1": {
          "GJChronology.getInstance(DateTimeZone)": [
            1,
            1,
            1
          ],
          "GJChronology.getInstance(DateTimeZone, ReadableInstant)": [
            1,
            1,
            1
          ],
          "GJChronology.withUTC()": [
            1,
            1,
            1
          ],
          "GJChronology.equals(Object)": [
            1,
            1,
            1
          ],
          "GJChronology.hashCode()": [
            1,
            1,
            1
          ],
          "GJChronology.julianToGregorianByYear(long)": [
            1,
            1,
            1
          ],
          "GJChronology.gregorianToJulianByYear(long)": [
            1,
            1,
            1
          ],
          "GJChronology.julianToGregorianByWeekyear(long)": [
            1,
            1,
            1
          ],
          "GJChronology.gregorianToJulianByWeekyear(long)": [
            1,
            1,
            1
          ],
          "CutoverField.getAsText(int, Locale)": [
            1,
            1,
            1
          ],
          "CutoverField.getAsShortText(int, Locale)": [
            1,
            1,
            1
          ],
          "CutoverField.getMinimumValue(ReadablePartial)": [
            1,
            1,
            1
          ],
          "CutoverField.getMinimumValue(ReadablePartial, int[])": [
            1,
            1,
            1
          ],
          "CutoverField.getMaximumValue(ReadablePartial)": [
            1,
            1,
            1
          ],
          "CutoverField.getMaximumTextLength(Locale)": [
            1,
            1,
            1
          ],
          "CutoverField.getMaximumShortTextLength(Locale)": [
            1,
            1,
            1
          ],
          "LinkedDurationField.add(long, int)": [
            1,
            1,
            1
          ],
          "LinkedDurationField.add(long, long)": [
            1,
            1,
            1
          ],
          "LinkedDurationField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "LinkedDurationField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GJChronology.getInstance(DateTimeZone, ReadableInstant, int)": [
            6,
            6,
            6
          ],
          "GJChronology.getInstance(DateTimeZone, long, int)": [
            2,
            2,
            2
          ],
          "GJChronology.getZone()": [
            2,
            2,
            2
          ],
          "GJChronology.withZone(DateTimeZone)": [
            3,
            3,
            3
          ],
          "GJChronology.getDateTimeMillis(int, int, int, int)": [
            4,
            4,
            4
          ],
          "GJChronology.getDateTimeMillis(int, int, int, int, int, int, int)": [
            7,
            7,
            7
          ],
          "GJChronology.toString()": [
            4,
            4,
            4
          ],
          "CutoverField.get(long)": [
            3,
            3,
            3
          ],
          "CutoverField.getAsText(long, Locale)": [
            3,
            3,
            3
          ],
          "CutoverField.getAsShortText(long, Locale)": [
            3,
            3,
            3
          ],
          "CutoverField.add(ReadablePartial, int, int[], int)": [
            5,
            5,
            5
          ],
          "CutoverField.set(long, int)": [
            8,
            8,
            8
          ],
          "CutoverField.set(long, String, Locale)": [
            6,
            6,
            6
          ],
          "CutoverField.isLeap(long)": [
            3,
            3,
            3
          ],
          "CutoverField.getLeapAmount(long)": [
            3,
            3,
            3
          ],
          "CutoverField.getMaximumValue(ReadablePartial, int[])": [
            3,
            3,
            3
          ],
          "CutoverField.roundFloor(long)": [
            4,
            4,
            4
          ],
          "CutoverField.roundCeiling(long)": [
            4,
            4,
            4
          ],
          "CutoverField.julianToGregorian(long)": [
            3,
            3,
            3
          ],
          "CutoverField.gregorianToJulian(long)": [
            3,
            3,
            3
          ],
          "ImpreciseCutoverField.add(long, int)": [
            6,
            6,
            6
          ],
          "ImpreciseCutoverField.add(long, long)": [
            6,
            6,
            6
          ],
          "ImpreciseCutoverField.getDifference(long, long)": [
            5,
            5,
            5
          ],
          "ImpreciseCutoverField.getDifferenceAsLong(long, long)": [
            5,
            5,
            5
          ],
          "ImpreciseCutoverField.getMinimumValue(long)": [
            3,
            3,
            3
          ],
          "ImpreciseCutoverField.getMaximumValue(long)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {
          "GJChronology.assemble(Fields)": 0
        }
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/TestGJChronology.java"
    },
    {
      "src_name": "LongConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/LongConverter.java",
      "class_declaration": "class LongConverter extends AbstractConverter implements InstantConverter, PartialConverter, DurationConverter ",
      "methods_under_test": {
        "=1": {
          "LongConverter.getInstantMillis(Object, Chronology)": [
            1,
            1,
            1
          ],
          "LongConverter.getDurationMillis(Object)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/TestLongConverter.java"
    },
    {
      "src_name": "DateTimeFormat",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/format/DateTimeFormat.java",
      "class_declaration": "public class DateTimeFormat ",
      "methods_under_test": {
        "=1": {
          "DateTimeFormat.forPattern(String)": [
            1,
            1,
            1
          ],
          "DateTimeFormat.forStyle(String)": [
            1,
            1,
            1
          ],
          "DateTimeFormat.shortDate()": [
            1,
            1,
            1
          ],
          "DateTimeFormat.shortTime()": [
            1,
            1,
            1
          ],
          "DateTimeFormat.shortDateTime()": [
            1,
            1,
            1
          ],
          "DateTimeFormat.mediumDate()": [
            1,
            1,
            1
          ],
          "DateTimeFormat.mediumTime()": [
            1,
            1,
            1
          ],
          "DateTimeFormat.mediumDateTime()": [
            1,
            1,
            1
          ],
          "DateTimeFormat.longDate()": [
            1,
            1,
            1
          ],
          "DateTimeFormat.longTime()": [
            1,
            1,
            1
          ],
          "DateTimeFormat.longDateTime()": [
            1,
            1,
            1
          ],
          "DateTimeFormat.fullDate()": [
            1,
            1,
            1
          ],
          "DateTimeFormat.fullTime()": [
            1,
            1,
            1
          ],
          "DateTimeFormat.fullDateTime()": [
            1,
            1,
            1
          ],
          "DateTimeFormat.appendPatternTo(DateTimeFormatterBuilder, String)": [
            1,
            1,
            1
          ],
          "StyleFormatter.estimatePrintedLength()": [
            1,
            1,
            1
          ],
          "StyleFormatter.printTo(StringBuffer, long, Chronology, int, DateTimeZone, Locale)": [
            1,
            1,
            1
          ],
          "StyleFormatter.printTo(Writer, long, Chronology, int, DateTimeZone, Locale)": [
            1,
            1,
            1
          ],
          "StyleFormatter.printTo(StringBuffer, ReadablePartial, Locale)": [
            1,
            1,
            1
          ],
          "StyleFormatter.printTo(Writer, ReadablePartial, Locale)": [
            1,
            1,
            1
          ],
          "StyleFormatter.estimateParsedLength()": [
            1,
            1,
            1
          ],
          "StyleFormatter.parseInto(DateTimeParserBucket, String, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DateTimeFormat.patternForStyle(String, Locale)": [
            2,
            2,
            2
          ],
          "StyleFormatter.getPattern(Locale)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/format/TestDateTimeFormat.java"
    },
    {
      "src_name": "PeriodFormatterBuilder",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
      "class_declaration": "public class PeriodFormatterBuilder ",
      "methods_under_test": {
        "=1": {
          "PeriodFormatterBuilder.toFormatter()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.minimumPrintedDigits(int)": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.maximumParsedDigits(int)": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.rejectSignedValues(boolean)": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.printZeroRarelyLast()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.printZeroRarelyFirst()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.printZeroIfSupported()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.printZeroAlways()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.printZeroNever()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendYears()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendMonths()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendWeeks()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendDays()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendHours()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendMinutes()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendSeconds()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendSecondsWithMillis()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendSecondsWithOptionalMillis()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendMillis()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendMillis3Digit()": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendSeparator(String)": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendSeparatorIfFieldsAfter(String)": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendSeparatorIfFieldsBefore(String)": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendSeparator(String, String)": [
            1,
            1,
            1
          ],
          "PeriodFormatterBuilder.appendSeparator(String, String, String[])": [
            1,
            1,
            1
          ],
          "SimpleAffix.calculatePrintedLength(int)": [
            1,
            1,
            1
          ],
          "SimpleAffix.printTo(StringBuffer, int)": [
            1,
            1,
            1
          ],
          "SimpleAffix.printTo(Writer, int)": [
            1,
            1,
            1
          ],
          "PluralAffix.calculatePrintedLength(int)": [
            1,
            1,
            1
          ],
          "PluralAffix.printTo(StringBuffer, int)": [
            1,
            1,
            1
          ],
          "PluralAffix.printTo(Writer, int)": [
            1,
            1,
            1
          ],
          "Literal.countFieldsToPrint(ReadablePeriod, int, Locale)": [
            1,
            1,
            1
          ],
          "Literal.calculatePrintedLength(ReadablePeriod, Locale)": [
            1,
            1,
            1
          ],
          "Literal.printTo(StringBuffer, ReadablePeriod, Locale)": [
            1,
            1,
            1
          ],
          "Literal.printTo(Writer, ReadablePeriod, Locale)": [
            1,
            1,
            1
          ],
          "Separator.finish(PeriodPrinter, PeriodParser)": [
            1,
            1,
            1
          ],
          "Composite.printTo(StringBuffer, ReadablePeriod, Locale)": [
            1,
            1,
            1
          ],
          "Composite.printTo(Writer, ReadablePeriod, Locale)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PeriodFormatterBuilder.toPrinter()": [
            2,
            2,
            2
          ],
          "PeriodFormatterBuilder.toParser()": [
            2,
            2,
            2
          ],
          "PeriodFormatterBuilder.clear()": [
            2,
            2,
            2
          ],
          "PeriodFormatterBuilder.append(PeriodFormatter)": [
            2,
            2,
            2
          ],
          "PeriodFormatterBuilder.append(PeriodPrinter, PeriodParser)": [
            2,
            2,
            2
          ],
          "PeriodFormatterBuilder.appendLiteral(String)": [
            2,
            2,
            2
          ],
          "PeriodFormatterBuilder.appendPrefix(String)": [
            2,
            2,
            2
          ],
          "PeriodFormatterBuilder.appendPrefix(String, String)": [
            2,
            2,
            2
          ],
          "PeriodFormatterBuilder.appendSuffix(String)": [
            2,
            2,
            2
          ],
          "PeriodFormatterBuilder.appendSuffix(String, String)": [
            2,
            2,
            2
          ],
          "SimpleAffix.parse(String, int)": [
            2,
            2,
            2
          ],
          "PluralAffix.parse(String, int)": [
            4,
            4,
            4
          ],
          "PluralAffix.scan(String, final, int)": [
            5,
            5,
            5
          ],
          "CompositeAffix.calculatePrintedLength(int)": [
            2,
            2,
            2
          ],
          "CompositeAffix.printTo(StringBuffer, int)": [
            4,
            4,
            4
          ],
          "CompositeAffix.printTo(Writer, int)": [
            4,
            4,
            4
          ],
          "CompositeAffix.parse(String, int)": [
            6,
            6,
            6
          ],
          "CompositeAffix.scan(String, final, int)": [
            2,
            2,
            2
          ],
          "FieldFormatter.countFieldsToPrint(ReadablePeriod, int, Locale)": [
            3,
            3,
            3
          ],
          "FieldFormatter.calculatePrintedLength(ReadablePeriod, Locale)": [
            6,
            6,
            6
          ],
          "FieldFormatter.printTo(StringBuffer, ReadablePeriod, Locale)": [
            9,
            9,
            9
          ],
          "FieldFormatter.printTo(Writer, ReadablePeriod, Locale)": [
            8,
            8,
            8
          ],
          "FieldFormatter.isZero(ReadablePeriod)": [
            3,
            3,
            3
          ],
          "FieldFormatter.setFieldValue(ReadWritablePeriod, int, int)": [
            10,
            10,
            10
          ],
          "Literal.parseInto(ReadWritablePeriod, String, int, Locale)": [
            2,
            2,
            2
          ],
          "Separator.countFieldsToPrint(ReadablePeriod, int, Locale)": [
            2,
            2,
            2
          ],
          "Separator.calculatePrintedLength(ReadablePeriod, Locale)": [
            6,
            6,
            6
          ],
          "Separator.printTo(StringBuffer, ReadablePeriod, Locale)": [
            6,
            6,
            6
          ],
          "Separator.printTo(Writer, ReadablePeriod, Locale)": [
            6,
            6,
            6
          ],
          "Separator.parseInto(ReadWritablePeriod, String, int, Locale)": [
            8,
            8,
            8
          ],
          "Composite.countFieldsToPrint(ReadablePeriod, int, Locale)": [
            2,
            2,
            2
          ],
          "Composite.calculatePrintedLength(ReadablePeriod, Locale)": [
            2,
            2,
            2
          ],
          "Composite.parseInto(ReadWritablePeriod, String, int, Locale)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "SimpleAffix.scan(String, final, int)": [
            17,
            17,
            17
          ],
          "FieldFormatter.isSupported(PeriodType, int)": [
            12,
            12,
            12
          ]
        },
        ">20": {
          "FieldFormatter.parseInto(ReadWritablePeriod, String, int, Locale)": [
            26,
            26,
            26
          ],
          "FieldFormatter.getFieldValue(ReadablePeriod)": [
            23,
            23,
            23
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java"
    },
    {
      "src_name": "GregorianChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/GregorianChronology.java",
      "class_declaration": "public final class GregorianChronology extends BasicGJChronology ",
      "methods_under_test": {
        "=1": {
          "GregorianChronology.getInstance(DateTimeZone)": [
            1,
            1,
            1
          ],
          "GregorianChronology.withUTC()": [
            1,
            1,
            1
          ],
          "GregorianChronology.isLeapYear(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GregorianChronology.getInstance(DateTimeZone, int)": [
            7,
            7,
            7
          ],
          "GregorianChronology.withZone(DateTimeZone)": [
            3,
            3,
            3
          ],
          "GregorianChronology.assemble(Fields)": [
            2,
            2,
            2
          ],
          "GregorianChronology.calculateFirstDayOfYearMillis(int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/TestGregorianChronology.java"
    },
    {
      "src_name": "AbstractPartial",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/base/AbstractPartial.java",
      "class_declaration": "public abstract class AbstractPartial implements ReadablePartial, Comparable<ReadablePartial> ",
      "methods_under_test": {
        "=1": {
          "AbstractPartial.getFieldType(int)": [
            1,
            1,
            1
          ],
          "AbstractPartial.getField(int)": [
            1,
            1,
            1
          ],
          "AbstractPartial.get(DateTimeFieldType)": [
            1,
            1,
            1
          ],
          "AbstractPartial.isSupported(DateTimeFieldType)": [
            1,
            1,
            1
          ],
          "AbstractPartial.toDateTime(ReadableInstant)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractPartial.getFieldTypes()": [
            2,
            2,
            2
          ],
          "AbstractPartial.getFields()": [
            2,
            2,
            2
          ],
          "AbstractPartial.getValues()": [
            2,
            2,
            2
          ],
          "AbstractPartial.indexOf(DateTimeFieldType)": [
            3,
            3,
            3
          ],
          "AbstractPartial.indexOfSupported(DateTimeFieldType)": [
            2,
            2,
            2
          ],
          "AbstractPartial.indexOf(DurationFieldType)": [
            3,
            3,
            3
          ],
          "AbstractPartial.indexOfSupported(DurationFieldType)": [
            2,
            2,
            2
          ],
          "AbstractPartial.equals(Object)": [
            6,
            6,
            6
          ],
          "AbstractPartial.hashCode()": [
            2,
            2,
            2
          ],
          "AbstractPartial.compareTo(ReadablePartial)": [
            8,
            8,
            8
          ],
          "AbstractPartial.isAfter(ReadablePartial)": [
            2,
            2,
            2
          ],
          "AbstractPartial.isBefore(ReadablePartial)": [
            2,
            2,
            2
          ],
          "AbstractPartial.isEqual(ReadablePartial)": [
            2,
            2,
            2
          ],
          "AbstractPartial.toString(DateTimeFormatter)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestAbstractPartial.java"
    },
    {
      "src_name": "DateTimeFormatterBuilder",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
      "class_declaration": "public class DateTimeFormatterBuilder ",
      "methods_under_test": {
        "=1": {
          "DateTimeFormatterBuilder.canBuildFormatter()": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.canBuildPrinter()": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.canBuildParser()": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.clear()": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.append(DateTimePrinter)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.append(DateTimeParser)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.append(DateTimePrinter, DateTimeParser)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendOptional(DateTimeParser)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendLiteral(char)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendFractionOfSecond(int, int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendFractionOfMinute(int, int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendFractionOfHour(int, int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendFractionOfDay(int, int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendMillisOfSecond(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendMillisOfDay(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendSecondOfMinute(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendSecondOfDay(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendMinuteOfHour(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendMinuteOfDay(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendHourOfDay(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendClockhourOfDay(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendHourOfHalfday(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendClockhourOfHalfday(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendDayOfWeek(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendDayOfMonth(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendDayOfYear(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendWeekOfWeekyear(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendWeekyear(int, int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendMonthOfYear(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendYear(int, int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendTwoDigitYear(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendTwoDigitYear(int, boolean)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendTwoDigitWeekyear(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendTwoDigitWeekyear(int, boolean)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendYearOfEra(int, int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendYearOfCentury(int, int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendCenturyOfEra(int, int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendHalfdayOfDayText()": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendDayOfWeekText()": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendDayOfWeekShortText()": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendMonthOfYearText()": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendMonthOfYearShortText()": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendEraText()": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendTimeZoneName()": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendTimeZoneName(Map<String, DateTimeZone>)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendTimeZoneShortName()": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendTimeZoneShortName(Map<String, DateTimeZone>)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendTimeZoneId()": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendTimeZoneOffset(String, boolean, int, int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendTimeZoneOffset(String, String, boolean, int, int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendPattern(String)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.appendUnknownString(StringBuffer, int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.printUnknownString(Writer, int)": [
            1,
            1,
            1
          ],
          "CharacterLiteral.estimatePrintedLength()": [
            1,
            1,
            1
          ],
          "CharacterLiteral.printTo(StringBuffer, long, Chronology, int, DateTimeZone, Locale)": [
            1,
            1,
            1
          ],
          "CharacterLiteral.printTo(Writer, long, Chronology, int, DateTimeZone, Locale)": [
            1,
            1,
            1
          ],
          "CharacterLiteral.printTo(StringBuffer, ReadablePartial, Locale)": [
            1,
            1,
            1
          ],
          "CharacterLiteral.printTo(Writer, ReadablePartial, Locale)": [
            1,
            1,
            1
          ],
          "CharacterLiteral.estimateParsedLength()": [
            1,
            1,
            1
          ],
          "StringLiteral.estimatePrintedLength()": [
            1,
            1,
            1
          ],
          "StringLiteral.printTo(StringBuffer, long, Chronology, int, DateTimeZone, Locale)": [
            1,
            1,
            1
          ],
          "StringLiteral.printTo(Writer, long, Chronology, int, DateTimeZone, Locale)": [
            1,
            1,
            1
          ],
          "StringLiteral.printTo(StringBuffer, ReadablePartial, Locale)": [
            1,
            1,
            1
          ],
          "StringLiteral.printTo(Writer, ReadablePartial, Locale)": [
            1,
            1,
            1
          ],
          "StringLiteral.estimateParsedLength()": [
            1,
            1,
            1
          ],
          "NumberFormatter.estimateParsedLength()": [
            1,
            1,
            1
          ],
          "UnpaddedNumber.estimatePrintedLength()": [
            1,
            1,
            1
          ],
          "PaddedNumber.estimatePrintedLength()": [
            1,
            1,
            1
          ],
          "TwoDigitYear.estimateParsedLength()": [
            1,
            1,
            1
          ],
          "TwoDigitYear.estimatePrintedLength()": [
            1,
            1,
            1
          ],
          "TextField.estimatePrintedLength()": [
            1,
            1,
            1
          ],
          "TextField.estimateParsedLength()": [
            1,
            1,
            1
          ],
          "Fraction.estimatePrintedLength()": [
            1,
            1,
            1
          ],
          "Fraction.printTo(Writer, long, Chronology, int, DateTimeZone, Locale)": [
            1,
            1,
            1
          ],
          "Fraction.printTo(Writer, ReadablePartial, Locale)": [
            1,
            1,
            1
          ],
          "Fraction.estimateParsedLength()": [
            1,
            1,
            1
          ],
          "TimeZoneOffset.estimateParsedLength()": [
            1,
            1,
            1
          ],
          "TimeZoneName.estimatePrintedLength()": [
            1,
            1,
            1
          ],
          "TimeZoneName.printTo(StringBuffer, long, Chronology, int, DateTimeZone, Locale)": [
            1,
            1,
            1
          ],
          "TimeZoneName.printTo(Writer, long, Chronology, int, DateTimeZone, Locale)": [
            1,
            1,
            1
          ],
          "TimeZoneName.estimateParsedLength()": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.estimatePrintedLength()": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.printTo(StringBuffer, long, Chronology, int, DateTimeZone, Locale)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.printTo(Writer, long, Chronology, int, DateTimeZone, Locale)": [
            1,
            1,
            1
          ],
          "DateTimeFormatterBuilder.estimateParsedLength()": [
            1,
            1,
            1
          ],
          "Composite.estimatePrintedLength()": [
            1,
            1,
            1
          ],
          "Composite.estimateParsedLength()": [
            1,
            1,
            1
          ],
          "MatchingParser.estimateParsedLength()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DateTimeFormatterBuilder.toFormatter()": [
            4,
            4,
            4
          ],
          "DateTimeFormatterBuilder.toPrinter()": [
            2,
            2,
            2
          ],
          "DateTimeFormatterBuilder.toParser()": [
            2,
            2,
            2
          ],
          "DateTimeFormatterBuilder.append(DateTimeFormatter)": [
            2,
            2,
            2
          ],
          "DateTimeFormatterBuilder.append(DateTimePrinter, DateTimeParser[])": [
            7,
            7,
            7
          ],
          "DateTimeFormatterBuilder.appendLiteral(String)": [
            5,
            5,
            5
          ],
          "DateTimeFormatterBuilder.appendDecimal(DateTimeFieldType, int, int)": [
            6,
            6,
            6
          ],
          "DateTimeFormatterBuilder.appendFixedDecimal(DateTimeFieldType, int)": [
            3,
            3,
            3
          ],
          "DateTimeFormatterBuilder.appendSignedDecimal(DateTimeFieldType, int, int)": [
            6,
            6,
            6
          ],
          "DateTimeFormatterBuilder.appendFixedSignedDecimal(DateTimeFieldType, int)": [
            3,
            3,
            3
          ],
          "DateTimeFormatterBuilder.appendText(DateTimeFieldType)": [
            2,
            2,
            2
          ],
          "DateTimeFormatterBuilder.appendShortText(DateTimeFieldType)": [
            2,
            2,
            2
          ],
          "DateTimeFormatterBuilder.appendFraction(DateTimeFieldType, int, int)": [
            4,
            4,
            4
          ],
          "CharacterLiteral.parseInto(DateTimeParserBucket, String, int)": [
            5,
            5,
            5
          ],
          "StringLiteral.parseInto(DateTimeParserBucket, String, int)": [
            2,
            2,
            2
          ],
          "UnpaddedNumber.printTo(StringBuffer, long, Chronology, int, DateTimeZone, Locale)": [
            4,
            4,
            4
          ],
          "UnpaddedNumber.printTo(Writer, long, Chronology, int, DateTimeZone, Locale)": [
            4,
            4,
            4
          ],
          "UnpaddedNumber.printTo(StringBuffer, ReadablePartial, Locale)": [
            4,
            4,
            4
          ],
          "UnpaddedNumber.printTo(Writer, ReadablePartial, Locale)": [
            4,
            4,
            4
          ],
          "PaddedNumber.printTo(StringBuffer, long, Chronology, int, DateTimeZone, Locale)": [
            4,
            4,
            4
          ],
          "PaddedNumber.printTo(Writer, long, Chronology, int, DateTimeZone, Locale)": [
            4,
            4,
            4
          ],
          "PaddedNumber.printTo(StringBuffer, ReadablePartial, Locale)": [
            4,
            4,
            4
          ],
          "PaddedNumber.printTo(Writer, ReadablePartial, Locale)": [
            4,
            4,
            4
          ],
          "PaddedNumber.parseInto(DateTimeParserBucket, String, int)": [
            7,
            7,
            7
          ],
          "TwoDigitYear.printTo(StringBuffer, long, Chronology, int, DateTimeZone, Locale)": [
            3,
            3,
            3
          ],
          "TwoDigitYear.printTo(Writer, long, Chronology, int, DateTimeZone, Locale)": [
            3,
            3,
            3
          ],
          "TwoDigitYear.printTo(StringBuffer, ReadablePartial, Locale)": [
            3,
            3,
            3
          ],
          "TwoDigitYear.printTo(Writer, ReadablePartial, Locale)": [
            3,
            3,
            3
          ],
          "TextField.printTo(StringBuffer, long, Chronology, int, DateTimeZone, Locale)": [
            3,
            3,
            3
          ],
          "TextField.printTo(Writer, long, Chronology, int, DateTimeZone, Locale)": [
            3,
            3,
            3
          ],
          "TextField.printTo(StringBuffer, ReadablePartial, Locale)": [
            3,
            3,
            3
          ],
          "TextField.printTo(Writer, ReadablePartial, Locale)": [
            3,
            3,
            3
          ],
          "TextField.parseInto(DateTimeParserBucket, String, int)": [
            9,
            9,
            9
          ],
          "Fraction.printTo(StringBuffer, long, Chronology, int, DateTimeZone, Locale)": [
            3,
            3,
            3
          ],
          "Fraction.printTo(StringBuffer, ReadablePartial, Locale)": [
            3,
            3,
            3
          ],
          "Fraction.parseInto(DateTimeParserBucket, String, int)": [
            5,
            5,
            5
          ],
          "TimeZoneOffset.estimatePrintedLength()": [
            3,
            3,
            3
          ],
          "TimeZoneName.parseInto(DateTimeParserBucket, String, int)": [
            3,
            3,
            3
          ],
          "DateTimeFormatterBuilder.parseInto(DateTimeParserBucket, String, int)": [
            5,
            5,
            5
          ],
          "Composite.printTo(StringBuffer, long, Chronology, int, DateTimeZone, Locale)": [
            3,
            3,
            3
          ],
          "Composite.printTo(Writer, long, Chronology, int, DateTimeZone, Locale)": [
            3,
            3,
            3
          ],
          "Composite.printTo(StringBuffer, ReadablePartial, Locale)": [
            3,
            3,
            3
          ],
          "Composite.printTo(Writer, ReadablePartial, Locale)": [
            3,
            3,
            3
          ],
          "Composite.parseInto(DateTimeParserBucket, String, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "NumberFormatter.parseInto(DateTimeParserBucket, String, int)": [
            12,
            12,
            12
          ],
          "TwoDigitYear.parseInto(DateTimeParserBucket, String, int)": [
            18,
            18,
            18
          ],
          "Fraction.printTo(StringBuffer, Writer, long, Chronology)": [
            19,
            19,
            19
          ],
          "TimeZoneOffset.printTo(StringBuffer, long, Chronology, int, DateTimeZone, Locale)": [
            13,
            13,
            13
          ],
          "TimeZoneOffset.printTo(Writer, long, Chronology, int, DateTimeZone, Locale)": [
            13,
            13,
            13
          ],
          "MatchingParser.parseInto(DateTimeParserBucket, String, int)": [
            16,
            16,
            16
          ]
        },
        ">20": {
          "TimeZoneOffset.parseInto(DateTimeParserBucket, String, int)": [
            30,
            30,
            30
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java"
    },
    {
      "src_name": "BaseDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/BaseDateTimeField.java",
      "class_declaration": "public abstract class BaseDateTimeField extends DateTimeField ",
      "methods_under_test": {
        "=1": {
          "BaseDateTimeField.getAsText(long, Locale)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getAsText(long)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getAsText(ReadablePartial, int, Locale)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getAsText(ReadablePartial, Locale)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getAsText(int, Locale)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getAsShortText(long, Locale)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getAsShortText(long)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getAsShortText(ReadablePartial, int, Locale)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getAsShortText(ReadablePartial, Locale)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getAsShortText(int, Locale)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.add(long, int)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.add(long, long)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.addWrapField(long, int)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.addWrapField(ReadablePartial, int, int[], int)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.set(long, String, Locale)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.set(long, String)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.set(ReadablePartial, int, int[], String, Locale)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.isLeap(long)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getLeapAmount(long)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getMinimumValue(long)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getMinimumValue(ReadablePartial)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getMinimumValue(ReadablePartial, int[])": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getMaximumValue(long)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getMaximumValue(ReadablePartial)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getMaximumValue(ReadablePartial, int[])": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.getMaximumShortTextLength(Locale)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.remainder(long)": [
            1,
            1,
            1
          ],
          "BaseDateTimeField.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BaseDateTimeField.set(ReadablePartial, int, int[], int)": [
            4,
            4,
            4
          ],
          "BaseDateTimeField.convertText(String, Locale)": [
            2,
            2,
            2
          ],
          "BaseDateTimeField.getMaximumTextLength(Locale)": [
            5,
            5,
            5
          ],
          "BaseDateTimeField.roundCeiling(long)": [
            2,
            2,
            2
          ],
          "BaseDateTimeField.roundHalfFloor(long)": [
            3,
            3,
            3
          ],
          "BaseDateTimeField.roundHalfCeiling(long)": [
            3,
            3,
            3
          ],
          "BaseDateTimeField.roundHalfEven(long)": [
            5,
            5,
            5
          ]
        },
        "11-20": {
          "BaseDateTimeField.add(ReadablePartial, int, int[], int)": [
            12,
            12,
            12
          ],
          "BaseDateTimeField.addWrapPartial(ReadablePartial, int, int[], int)": [
            12,
            12,
            12
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/field/TestBaseDateTimeField.java"
    },
    {
      "src_name": "ConverterManager",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/ConverterManager.java",
      "class_declaration": "public final class ConverterManager ",
      "methods_under_test": {
        "=1": {
          "ConverterManager.getInstantConverters()": [
            1,
            1,
            1
          ],
          "ConverterManager.getPartialConverters()": [
            1,
            1,
            1
          ],
          "ConverterManager.getDurationConverters()": [
            1,
            1,
            1
          ],
          "ConverterManager.getPeriodConverters()": [
            1,
            1,
            1
          ],
          "ConverterManager.getIntervalConverters()": [
            1,
            1,
            1
          ],
          "ConverterManager.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ConverterManager.getInstance()": [
            2,
            2,
            2
          ],
          "ConverterManager.getInstantConverter(Object)": [
            2,
            2,
            2
          ],
          "ConverterManager.addInstantConverter(InstantConverter)": [
            2,
            2,
            2
          ],
          "ConverterManager.removeInstantConverter(InstantConverter)": [
            2,
            2,
            2
          ],
          "ConverterManager.getPartialConverter(Object)": [
            2,
            2,
            2
          ],
          "ConverterManager.addPartialConverter(PartialConverter)": [
            2,
            2,
            2
          ],
          "ConverterManager.removePartialConverter(PartialConverter)": [
            2,
            2,
            2
          ],
          "ConverterManager.getDurationConverter(Object)": [
            2,
            2,
            2
          ],
          "ConverterManager.addDurationConverter(DurationConverter)": [
            2,
            2,
            2
          ],
          "ConverterManager.removeDurationConverter(DurationConverter)": [
            2,
            2,
            2
          ],
          "ConverterManager.getPeriodConverter(Object)": [
            2,
            2,
            2
          ],
          "ConverterManager.addPeriodConverter(PeriodConverter)": [
            2,
            2,
            2
          ],
          "ConverterManager.removePeriodConverter(PeriodConverter)": [
            2,
            2,
            2
          ],
          "ConverterManager.getIntervalConverter(Object)": [
            2,
            2,
            2
          ],
          "ConverterManager.addIntervalConverter(IntervalConverter)": [
            2,
            2,
            2
          ],
          "ConverterManager.removeIntervalConverter(IntervalConverter)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/TestConverterManager.java"
    },
    {
      "src_name": "PreciseDurationField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/PreciseDurationField.java",
      "class_declaration": "public class PreciseDurationField extends BaseDurationField ",
      "methods_under_test": {
        "=1": {
          "PreciseDurationField.getValueAsLong(long, long)": [
            1,
            1,
            1
          ],
          "PreciseDurationField.getMillis(int, long)": [
            1,
            1,
            1
          ],
          "PreciseDurationField.getMillis(long, long)": [
            1,
            1,
            1
          ],
          "PreciseDurationField.add(long, int)": [
            1,
            1,
            1
          ],
          "PreciseDurationField.add(long, long)": [
            1,
            1,
            1
          ],
          "PreciseDurationField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ],
          "PreciseDurationField.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PreciseDurationField.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/field/TestPreciseDurationField.java"
    },
    {
      "src_name": "PeriodFormat",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/format/PeriodFormat.java",
      "class_declaration": "public class PeriodFormat ",
      "methods_under_test": {
        "=1": {
          "PeriodFormat.wordBased()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PeriodFormat.wordBased(Locale)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/format/TestPeriodFormat.java"
    },
    {
      "src_name": "IllegalFieldValueException",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/IllegalFieldValueException.java",
      "class_declaration": "public class IllegalFieldValueException extends IllegalArgumentException ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "IllegalFieldValueException.getIllegalValueAsString()": [
            2,
            2,
            2
          ],
          "IllegalFieldValueException.prependMessage(String)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestIllegalFieldValueException.java"
    },
    {
      "src_name": "FieldUtils",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/FieldUtils.java",
      "class_declaration": "public class FieldUtils ",
      "methods_under_test": {
        "=1": {
          "FieldUtils.safeMultiplyToInt(long, long)": [
            1,
            1,
            1
          ],
          "FieldUtils.verifyValueBounds(DateTimeField, int, int, int)": [
            1,
            1,
            1
          ],
          "FieldUtils.verifyValueBounds(DateTimeFieldType, int, int, int)": [
            1,
            1,
            1
          ],
          "FieldUtils.verifyValueBounds(String, int, int, int)": [
            1,
            1,
            1
          ],
          "FieldUtils.getWrappedValue(int, int, int, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FieldUtils.safeNegate(int)": [
            2,
            2,
            2
          ],
          "FieldUtils.safeAdd(int, int)": [
            2,
            2,
            2
          ],
          "FieldUtils.safeAdd(long, long)": [
            2,
            2,
            2
          ],
          "FieldUtils.safeSubtract(long, long)": [
            2,
            2,
            2
          ],
          "FieldUtils.safeMultiply(int, int)": [
            2,
            2,
            2
          ],
          "FieldUtils.safeMultiply(long, int)": [
            6,
            6,
            6
          ],
          "FieldUtils.safeMultiply(long, long)": [
            5,
            5,
            5
          ],
          "FieldUtils.safeToInt(long)": [
            2,
            2,
            2
          ],
          "FieldUtils.getWrappedValue(int, int, int)": [
            4,
            4,
            4
          ],
          "FieldUtils.equals(Object, Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/field/TestFieldUtils.java"
    },
    {
      "src_name": "ISODateTimeFormat",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/format/ISODateTimeFormat.java",
      "class_declaration": "public class ISODateTimeFormat ",
      "methods_under_test": {
        "=1": {
          "ISODateTimeFormat.date()": [
            1,
            1,
            1
          ],
          "ISODateTimeFormat.weekDate()": [
            1,
            1,
            1
          ],
          "ISODateTimeFormat.year()": [
            1,
            1,
            1
          ],
          "ISODateTimeFormat.weekyear()": [
            1,
            1,
            1
          ],
          "ISODateTimeFormat.hour()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ISODateTimeFormat.dateParser()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.localDateParser()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.dateElementParser()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.timeParser()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.localTimeParser()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.timeElementParser()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.dateTimeParser()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.dateOptionalTimeParser()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.localDateOptionalTimeParser()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.time()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.timeNoMillis()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.tTime()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.tTimeNoMillis()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.dateTime()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.dateTimeNoMillis()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.ordinalDate()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.ordinalDateTime()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.ordinalDateTimeNoMillis()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.weekDateTime()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.weekDateTimeNoMillis()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.basicDate()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.basicTime()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.basicTimeNoMillis()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.basicTTime()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.basicTTimeNoMillis()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.basicDateTime()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.basicDateTimeNoMillis()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.basicOrdinalDate()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.basicOrdinalDateTime()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.basicOrdinalDateTimeNoMillis()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.basicWeekDate()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.basicWeekDateTime()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.basicWeekDateTimeNoMillis()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.yearMonth()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.yearMonthDay()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.weekyearWeek()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.weekyearWeekDay()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.hourMinute()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.hourMinuteSecond()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.hourMinuteSecondMillis()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.hourMinuteSecondFraction()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.dateHour()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.dateHourMinute()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.dateHourMinuteSecond()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.dateHourMinuteSecondMillis()": [
            2,
            2,
            2
          ],
          "ISODateTimeFormat.dateHourMinuteSecondFraction()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "ISODateTimeFormat.forFields(Collection<DateTimeFieldType>, boolean, boolean)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/format/TestISODateTimeFormat.java"
    },
    {
      "src_name": "BuddhistChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/BuddhistChronology.java",
      "class_declaration": "public final class BuddhistChronology extends AssembledChronology ",
      "methods_under_test": {
        "=1": {
          "BuddhistChronology.withUTC()": [
            1,
            1,
            1
          ],
          "BuddhistChronology.equals(Object)": [
            1,
            1,
            1
          ],
          "BuddhistChronology.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BuddhistChronology.getInstance(DateTimeZone)": [
            3,
            3,
            3
          ],
          "BuddhistChronology.withZone(DateTimeZone)": [
            3,
            3,
            3
          ],
          "BuddhistChronology.toString()": [
            2,
            2,
            2
          ],
          "BuddhistChronology.assemble(Fields)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/TestBuddhistChronology.java"
    },
    {
      "src_name": "Weeks",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/Weeks.java",
      "class_declaration": "public final class Weeks extends BaseSingleFieldPeriod ",
      "methods_under_test": {
        "=1": {
          "Weeks.weeksBetween(ReadableInstant, ReadableInstant)": [
            1,
            1,
            1
          ],
          "Weeks.standardWeeksIn(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "Weeks.toStandardDays()": [
            1,
            1,
            1
          ],
          "Weeks.toStandardHours()": [
            1,
            1,
            1
          ],
          "Weeks.toStandardMinutes()": [
            1,
            1,
            1
          ],
          "Weeks.toStandardSeconds()": [
            1,
            1,
            1
          ],
          "Weeks.toStandardDuration()": [
            1,
            1,
            1
          ],
          "Weeks.minus(int)": [
            1,
            1,
            1
          ],
          "Weeks.multipliedBy(int)": [
            1,
            1,
            1
          ],
          "Weeks.negated()": [
            1,
            1,
            1
          ],
          "Weeks.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Weeks.weeks(int)": [
            8,
            8,
            8
          ],
          "Weeks.weeksBetween(ReadablePartial, ReadablePartial)": [
            2,
            2,
            2
          ],
          "Weeks.weeksIn(ReadableInterval)": [
            2,
            2,
            2
          ],
          "Weeks.parseWeeks(String)": [
            2,
            2,
            2
          ],
          "Weeks.plus(int)": [
            2,
            2,
            2
          ],
          "Weeks.plus(Weeks)": [
            2,
            2,
            2
          ],
          "Weeks.minus(Weeks)": [
            2,
            2,
            2
          ],
          "Weeks.dividedBy(int)": [
            2,
            2,
            2
          ],
          "Weeks.isGreaterThan(Weeks)": [
            2,
            2,
            2
          ],
          "Weeks.isLessThan(Weeks)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestWeeks.java"
    },
    {
      "src_name": "ISOPeriodFormat",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/format/ISOPeriodFormat.java",
      "class_declaration": "public class ISOPeriodFormat ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ISOPeriodFormat.standard()": [
            2,
            2,
            2
          ],
          "ISOPeriodFormat.alternate()": [
            2,
            2,
            2
          ],
          "ISOPeriodFormat.alternateExtended()": [
            2,
            2,
            2
          ],
          "ISOPeriodFormat.alternateWithWeeks()": [
            2,
            2,
            2
          ],
          "ISOPeriodFormat.alternateExtendedWithWeeks()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/format/TestISOPeriodFormat.java"
    },
    {
      "src_name": "Years",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/Years.java",
      "class_declaration": "public final class Years extends BaseSingleFieldPeriod ",
      "methods_under_test": {
        "=1": {
          "Years.yearsBetween(ReadableInstant, ReadableInstant)": [
            1,
            1,
            1
          ],
          "Years.minus(int)": [
            1,
            1,
            1
          ],
          "Years.multipliedBy(int)": [
            1,
            1,
            1
          ],
          "Years.negated()": [
            1,
            1,
            1
          ],
          "Years.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Years.years(int)": [
            8,
            8,
            8
          ],
          "Years.yearsBetween(ReadablePartial, ReadablePartial)": [
            2,
            2,
            2
          ],
          "Years.yearsIn(ReadableInterval)": [
            2,
            2,
            2
          ],
          "Years.parseYears(String)": [
            2,
            2,
            2
          ],
          "Years.plus(int)": [
            2,
            2,
            2
          ],
          "Years.plus(Years)": [
            2,
            2,
            2
          ],
          "Years.minus(Years)": [
            2,
            2,
            2
          ],
          "Years.dividedBy(int)": [
            2,
            2,
            2
          ],
          "Years.isGreaterThan(Years)": [
            2,
            2,
            2
          ],
          "Years.isLessThan(Years)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestYears.java"
    },
    {
      "src_name": "DateTimeFormatter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/format/DateTimeFormatter.java",
      "class_declaration": "public class DateTimeFormatter ",
      "methods_under_test": {
        "=1": {
          "DateTimeFormatter.withZoneUTC()": [
            1,
            1,
            1
          ],
          "DateTimeFormatter.withPivotYear(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatter.withDefaultYear(int)": [
            1,
            1,
            1
          ],
          "DateTimeFormatter.printTo(StringBuffer, ReadableInstant)": [
            1,
            1,
            1
          ],
          "DateTimeFormatter.printTo(Writer, ReadableInstant)": [
            1,
            1,
            1
          ],
          "DateTimeFormatter.printTo(Appendable, ReadableInstant)": [
            1,
            1,
            1
          ],
          "DateTimeFormatter.printTo(StringBuffer, long)": [
            1,
            1,
            1
          ],
          "DateTimeFormatter.printTo(Writer, long)": [
            1,
            1,
            1
          ],
          "DateTimeFormatter.printTo(Appendable, long)": [
            1,
            1,
            1
          ],
          "DateTimeFormatter.printTo(Appendable, ReadablePartial)": [
            1,
            1,
            1
          ],
          "DateTimeFormatter.print(ReadableInstant)": [
            1,
            1,
            1
          ],
          "DateTimeFormatter.print(long)": [
            1,
            1,
            1
          ],
          "DateTimeFormatter.print(ReadablePartial)": [
            1,
            1,
            1
          ],
          "DateTimeFormatter.parseLocalDate(String)": [
            1,
            1,
            1
          ],
          "DateTimeFormatter.parseLocalTime(String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DateTimeFormatter.withLocale(Locale)": [
            2,
            2,
            2
          ],
          "DateTimeFormatter.withOffsetParsed()": [
            2,
            2,
            2
          ],
          "DateTimeFormatter.withChronology(Chronology)": [
            2,
            2,
            2
          ],
          "DateTimeFormatter.withZone(DateTimeZone)": [
            2,
            2,
            2
          ],
          "DateTimeFormatter.withPivotYear(Integer)": [
            2,
            2,
            2
          ],
          "DateTimeFormatter.printTo(StringBuffer, ReadablePartial)": [
            2,
            2,
            2
          ],
          "DateTimeFormatter.printTo(Writer, ReadablePartial)": [
            2,
            2,
            2
          ],
          "DateTimeFormatter.parseInto(ReadWritableInstant, String, int)": [
            5,
            5,
            5
          ],
          "DateTimeFormatter.parseMillis(String)": [
            3,
            3,
            3
          ],
          "DateTimeFormatter.parseLocalDateTime(String)": [
            5,
            5,
            5
          ],
          "DateTimeFormatter.parseDateTime(String)": [
            6,
            6,
            6
          ],
          "DateTimeFormatter.parseMutableDateTime(String)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/format/TestDateTimeFormatter.java"
    },
    {
      "src_name": "DateTimeConstants",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/DateTimeConstants.java",
      "class_declaration": "public class DateTimeConstants ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDateTimeConstants.java"
    },
    {
      "src_name": "FixedDateTimeZone",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/tz/FixedDateTimeZone.java",
      "class_declaration": "public final class FixedDateTimeZone extends DateTimeZone ",
      "methods_under_test": {
        "=1": {
          "FixedDateTimeZone.getNameKey(long)": [
            1,
            1,
            1
          ],
          "FixedDateTimeZone.getOffset(long)": [
            1,
            1,
            1
          ],
          "FixedDateTimeZone.getStandardOffset(long)": [
            1,
            1,
            1
          ],
          "FixedDateTimeZone.getOffsetFromLocal(long)": [
            1,
            1,
            1
          ],
          "FixedDateTimeZone.nextTransition(long)": [
            1,
            1,
            1
          ],
          "FixedDateTimeZone.previousTransition(long)": [
            1,
            1,
            1
          ],
          "FixedDateTimeZone.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FixedDateTimeZone.toTimeZone()": [
            2,
            2,
            2
          ],
          "FixedDateTimeZone.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/tz/TestFixedDateTimeZone.java"
    },
    {
      "src_name": "UnsupportedDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/UnsupportedDateTimeField.java",
      "class_declaration": "public final class UnsupportedDateTimeField extends DateTimeField implements Serializable ",
      "methods_under_test": {
        "=1": {
          "UnsupportedDateTimeField.get(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getAsText(long, Locale)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getAsText(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getAsText(ReadablePartial, int, Locale)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getAsText(ReadablePartial, Locale)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getAsText(int, Locale)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getAsShortText(long, Locale)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getAsShortText(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getAsShortText(ReadablePartial, int, Locale)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getAsShortText(ReadablePartial, Locale)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getAsShortText(int, Locale)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.add(long, int)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.add(long, long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.add(ReadablePartial, int, int[], int)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.addWrapPartial(ReadablePartial, int, int[], int)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.addWrapField(long, int)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.addWrapField(ReadablePartial, int, int[], int)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.set(long, int)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.set(ReadablePartial, int, int[], int)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.set(long, String, Locale)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.set(long, String)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.set(ReadablePartial, int, int[], String, Locale)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.isLeap(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getLeapAmount(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getMinimumValue(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getMinimumValue(ReadablePartial)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getMinimumValue(ReadablePartial, int[])": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getMaximumValue(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getMaximumValue(ReadablePartial)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getMaximumValue(ReadablePartial, int[])": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getMaximumTextLength(Locale)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.getMaximumShortTextLength(Locale)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.roundFloor(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.roundCeiling(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.roundHalfFloor(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.roundHalfCeiling(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.roundHalfEven(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.remainder(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDateTimeField.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnsupportedDateTimeField.getInstance(DateTimeFieldType, DurationField)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/field/TestUnsupportedDateTimeField.java"
    },
    {
      "src_name": "PreciseDurationDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/PreciseDurationDateTimeField.java",
      "class_declaration": "public abstract class PreciseDurationDateTimeField extends BaseDateTimeField ",
      "methods_under_test": {
        "=1": {
          "PreciseDurationDateTimeField.set(long, int)": [
            1,
            1,
            1
          ],
          "PreciseDurationDateTimeField.getMaximumValueForSet(long, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PreciseDurationDateTimeField.roundFloor(long)": [
            3,
            3,
            3
          ],
          "PreciseDurationDateTimeField.roundCeiling(long)": [
            3,
            3,
            3
          ],
          "PreciseDurationDateTimeField.remainder(long)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/field/TestPreciseDurationDateTimeField.java"
    },
    {
      "src_name": "CalendarConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/CalendarConverter.java",
      "class_declaration": "final class CalendarConverter extends AbstractConverter implements InstantConverter, PartialConverter ",
      "methods_under_test": {
        "=1": {
          "CalendarConverter.getInstantMillis(Object, Chronology)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "CalendarConverter.getChronology(Object, Chronology)": [
            3,
            3,
            3
          ],
          "CalendarConverter.getChronology(Object, DateTimeZone)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/TestCalendarConverter.java"
    },
    {
      "src_name": "EthiopicChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/EthiopicChronology.java",
      "class_declaration": "public final class EthiopicChronology extends BasicFixedMonthChronology ",
      "methods_under_test": {
        "=1": {
          "EthiopicChronology.getInstance(DateTimeZone)": [
            1,
            1,
            1
          ],
          "EthiopicChronology.withUTC()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "EthiopicChronology.getInstance(DateTimeZone, int)": [
            7,
            7,
            7
          ],
          "EthiopicChronology.withZone(DateTimeZone)": [
            3,
            3,
            3
          ],
          "EthiopicChronology.calculateFirstDayOfYearMillis(int)": [
            3,
            3,
            3
          ],
          "EthiopicChronology.assemble(Fields)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/TestEthiopicChronology.java"
    },
    {
      "src_name": "ReadableIntervalConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/ReadableIntervalConverter.java",
      "class_declaration": "class ReadableIntervalConverter extends AbstractConverter implements IntervalConverter, DurationConverter, PeriodConverter ",
      "methods_under_test": {
        "=1": {
          "ReadableIntervalConverter.getDurationMillis(Object)": [
            1,
            1,
            1
          ],
          "ReadableIntervalConverter.setInto(ReadWritablePeriod, Object, Chronology)": [
            1,
            1,
            1
          ],
          "ReadableIntervalConverter.isReadableInterval(Object, Chronology)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ReadableIntervalConverter.setInto(ReadWritableInterval, Object, Chronology)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/TestReadableIntervalConverter.java"
    },
    {
      "src_name": "Months",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/Months.java",
      "class_declaration": "public final class Months extends BaseSingleFieldPeriod ",
      "methods_under_test": {
        "=1": {
          "Months.monthsBetween(ReadableInstant, ReadableInstant)": [
            1,
            1,
            1
          ],
          "Months.minus(int)": [
            1,
            1,
            1
          ],
          "Months.multipliedBy(int)": [
            1,
            1,
            1
          ],
          "Months.negated()": [
            1,
            1,
            1
          ],
          "Months.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Months.monthsBetween(ReadablePartial, ReadablePartial)": [
            2,
            2,
            2
          ],
          "Months.monthsIn(ReadableInterval)": [
            2,
            2,
            2
          ],
          "Months.parseMonths(String)": [
            2,
            2,
            2
          ],
          "Months.plus(int)": [
            2,
            2,
            2
          ],
          "Months.plus(Months)": [
            2,
            2,
            2
          ],
          "Months.minus(Months)": [
            2,
            2,
            2
          ],
          "Months.dividedBy(int)": [
            2,
            2,
            2
          ],
          "Months.isGreaterThan(Months)": [
            2,
            2,
            2
          ],
          "Months.isLessThan(Months)": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "Months.months(int)": [
            17,
            17,
            17
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMonths.java"
    },
    {
      "src_name": "PeriodType",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/PeriodType.java",
      "class_declaration": "public class PeriodType implements Serializable ",
      "methods_under_test": {
        "=1": {
          "PeriodType.size()": [
            1,
            1,
            1
          ],
          "PeriodType.getFieldType(int)": [
            1,
            1,
            1
          ],
          "PeriodType.isSupported(DurationFieldType)": [
            1,
            1,
            1
          ],
          "PeriodType.toString()": [
            1,
            1,
            1
          ],
          "PeriodType.getIndexedField(ReadablePeriod, int)": [
            1,
            1,
            1
          ],
          "PeriodType.withYearsRemoved()": [
            1,
            1,
            1
          ],
          "PeriodType.withMonthsRemoved()": [
            1,
            1,
            1
          ],
          "PeriodType.withWeeksRemoved()": [
            1,
            1,
            1
          ],
          "PeriodType.withDaysRemoved()": [
            1,
            1,
            1
          ],
          "PeriodType.withHoursRemoved()": [
            1,
            1,
            1
          ],
          "PeriodType.withMinutesRemoved()": [
            1,
            1,
            1
          ],
          "PeriodType.withSecondsRemoved()": [
            1,
            1,
            1
          ],
          "PeriodType.withMillisRemoved()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "PeriodType.standard()": [
            2,
            2,
            2
          ],
          "PeriodType.yearMonthDayTime()": [
            2,
            2,
            2
          ],
          "PeriodType.yearMonthDay()": [
            2,
            2,
            2
          ],
          "PeriodType.yearWeekDayTime()": [
            2,
            2,
            2
          ],
          "PeriodType.yearWeekDay()": [
            2,
            2,
            2
          ],
          "PeriodType.yearDayTime()": [
            2,
            2,
            2
          ],
          "PeriodType.yearDay()": [
            2,
            2,
            2
          ],
          "PeriodType.dayTime()": [
            2,
            2,
            2
          ],
          "PeriodType.time()": [
            2,
            2,
            2
          ],
          "PeriodType.years()": [
            2,
            2,
            2
          ],
          "PeriodType.months()": [
            2,
            2,
            2
          ],
          "PeriodType.weeks()": [
            2,
            2,
            2
          ],
          "PeriodType.days()": [
            2,
            2,
            2
          ],
          "PeriodType.hours()": [
            2,
            2,
            2
          ],
          "PeriodType.minutes()": [
            2,
            2,
            2
          ],
          "PeriodType.seconds()": [
            2,
            2,
            2
          ],
          "PeriodType.millis()": [
            2,
            2,
            2
          ],
          "PeriodType.indexOf(DurationFieldType)": [
            3,
            3,
            3
          ],
          "PeriodType.setIndexedField(ReadablePeriod, int, int[], int)": [
            2,
            2,
            2
          ],
          "PeriodType.addIndexedField(ReadablePeriod, int, int[], int)": [
            3,
            3,
            3
          ],
          "PeriodType.equals(Object)": [
            3,
            3,
            3
          ],
          "PeriodType.hashCode()": [
            2,
            2,
            2
          ]
        },
        "11-20": {
          "PeriodType.forFields(DurationFieldType[])": [
            17,
            17,
            17
          ]
        },
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestPeriodType.java"
    },
    {
      "src_name": "ScaledDurationField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/ScaledDurationField.java",
      "class_declaration": "public class ScaledDurationField extends DecoratedDurationField ",
      "methods_under_test": {
        "=1": {
          "ScaledDurationField.getValue(long)": [
            1,
            1,
            1
          ],
          "ScaledDurationField.getValueAsLong(long)": [
            1,
            1,
            1
          ],
          "ScaledDurationField.getValue(long, long)": [
            1,
            1,
            1
          ],
          "ScaledDurationField.getValueAsLong(long, long)": [
            1,
            1,
            1
          ],
          "ScaledDurationField.getMillis(int)": [
            1,
            1,
            1
          ],
          "ScaledDurationField.getMillis(long)": [
            1,
            1,
            1
          ],
          "ScaledDurationField.getMillis(int, long)": [
            1,
            1,
            1
          ],
          "ScaledDurationField.getMillis(long, long)": [
            1,
            1,
            1
          ],
          "ScaledDurationField.add(long, int)": [
            1,
            1,
            1
          ],
          "ScaledDurationField.add(long, long)": [
            1,
            1,
            1
          ],
          "ScaledDurationField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "ScaledDurationField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ],
          "ScaledDurationField.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ScaledDurationField.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/field/TestScaledDurationField.java"
    },
    {
      "src_name": "DateTimeUtils",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/DateTimeUtils.java",
      "class_declaration": "public class DateTimeUtils ",
      "methods_under_test": {
        "=1": {
          "DateTimeUtils.currentTimeMillis()": [
            1,
            1,
            1
          ],
          "DateTimeUtils.setCurrentMillisSystem()": [
            1,
            1,
            1
          ],
          "DateTimeUtils.setCurrentMillisFixed(long)": [
            1,
            1,
            1
          ],
          "DateTimeUtils.toJulianDay(long)": [
            1,
            1,
            1
          ],
          "DateTimeUtils.toJulianDayNumber(long)": [
            1,
            1,
            1
          ],
          "DateTimeUtils.fromJulianDay(double)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DateTimeUtils.setCurrentMillisOffset(long)": [
            3,
            3,
            3
          ],
          "DateTimeUtils.setCurrentMillisProvider(MillisProvider)": [
            2,
            2,
            2
          ],
          "DateTimeUtils.getInstantMillis(ReadableInstant)": [
            2,
            2,
            2
          ],
          "DateTimeUtils.getInstantChronology(ReadableInstant)": [
            3,
            3,
            3
          ],
          "DateTimeUtils.getIntervalChronology(ReadableInstant, ReadableInstant)": [
            4,
            4,
            4
          ],
          "DateTimeUtils.getIntervalChronology(ReadableInterval)": [
            3,
            3,
            3
          ],
          "DateTimeUtils.getReadableInterval(ReadableInterval)": [
            2,
            2,
            2
          ],
          "DateTimeUtils.getChronology(Chronology)": [
            2,
            2,
            2
          ],
          "DateTimeUtils.getZone(DateTimeZone)": [
            2,
            2,
            2
          ],
          "DateTimeUtils.getPeriodType(PeriodType)": [
            2,
            2,
            2
          ],
          "DateTimeUtils.getDurationMillis(ReadableDuration)": [
            2,
            2,
            2
          ],
          "DateTimeUtils.isContiguous(ReadablePartial)": [
            5,
            5,
            5
          ],
          "DateTimeUtils.getDateFormatSymbols(Locale)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDateTimeUtils.java"
    },
    {
      "src_name": "LenientChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/LenientChronology.java",
      "class_declaration": "public final class LenientChronology extends AssembledChronology ",
      "methods_under_test": {
        "=1": {
          "LenientChronology.assemble(Fields)": [
            1,
            1,
            1
          ],
          "LenientChronology.hashCode()": [
            1,
            1,
            1
          ],
          "LenientChronology.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LenientChronology.getInstance(Chronology)": [
            2,
            2,
            2
          ],
          "LenientChronology.withUTC()": [
            3,
            3,
            3
          ],
          "LenientChronology.withZone(DateTimeZone)": [
            4,
            4,
            4
          ],
          "LenientChronology.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/TestLenientChronology.java"
    },
    {
      "src_name": "IslamicChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/IslamicChronology.java",
      "class_declaration": "public final class IslamicChronology extends BasicChronology ",
      "methods_under_test": {
        "=1": {
          "IslamicChronology.getInstance(DateTimeZone)": [
            1,
            1,
            1
          ],
          "IslamicChronology.withUTC()": [
            1,
            1,
            1
          ],
          "IslamicChronology.hashCode()": [
            1,
            1,
            1
          ],
          "IslamicChronology.isLeapYear(int)": [
            1,
            1,
            1
          ],
          "IslamicChronology.getDaysInYear(int)": [
            1,
            1,
            1
          ],
          "LeapYearPatternType.isLeapYear(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "IslamicChronology.getInstance(DateTimeZone, LeapYearPatternType)": [
            6,
            6,
            6
          ],
          "IslamicChronology.withZone(DateTimeZone)": [
            3,
            3,
            3
          ],
          "IslamicChronology.getYear(long)": [
            2,
            2,
            2
          ],
          "IslamicChronology.setYear(long, int)": [
            3,
            3,
            3
          ],
          "IslamicChronology.getYearDifference(long, long)": [
            2,
            2,
            2
          ],
          "IslamicChronology.getTotalMillisByYearMonth(int, int)": [
            3,
            3,
            3
          ],
          "IslamicChronology.getDayOfMonth(long)": [
            2,
            2,
            2
          ],
          "IslamicChronology.getDaysInYearMonth(int, int)": [
            2,
            2,
            2
          ],
          "IslamicChronology.getDaysInMonthMax(int)": [
            2,
            2,
            2
          ],
          "IslamicChronology.getMonthOfYear(long, int)": [
            2,
            2,
            2
          ],
          "IslamicChronology.calculateFirstDayOfYearMillis(int)": [
            4,
            4,
            4
          ],
          "IslamicChronology.assemble(Fields)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/TestIslamicChronology.java"
    },
    {
      "src_name": "DateTimeFieldType",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/DateTimeFieldType.java",
      "class_declaration": "public abstract class DateTimeFieldType implements Serializable ",
      "methods_under_test": {
        "=1": {
          "DateTimeFieldType.millisOfSecond()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.millisOfDay()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.secondOfMinute()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.secondOfDay()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.minuteOfHour()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.minuteOfDay()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.hourOfDay()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.clockhourOfDay()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.hourOfHalfday()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.clockhourOfHalfday()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.halfdayOfDay()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.dayOfWeek()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.dayOfMonth()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.dayOfYear()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.weekOfWeekyear()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.weekyear()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.weekyearOfCentury()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.monthOfYear()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.year()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.yearOfEra()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.yearOfCentury()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.centuryOfEra()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.era()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.isSupported(Chronology)": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.toString()": [
            1,
            1,
            1
          ],
          "DateTimeFieldType.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DateTimeFieldType.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {
          "DateTimeFieldType.getField(Chronology)": [
            24,
            24,
            24
          ]
        },
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDateTimeFieldType.java"
    },
    {
      "src_name": "ReadableDurationConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/ReadableDurationConverter.java",
      "class_declaration": "class ReadableDurationConverter extends AbstractConverter implements DurationConverter, PeriodConverter ",
      "methods_under_test": {
        "=1": {
          "ReadableDurationConverter.getDurationMillis(Object)": [
            1,
            1,
            1
          ],
          "ReadableDurationConverter.setInto(ReadWritablePeriod, Object, Chronology)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/TestReadableDurationConverter.java"
    },
    {
      "src_name": "StringConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/StringConverter.java",
      "class_declaration": "class StringConverter extends AbstractConverter implements InstantConverter, PartialConverter, DurationConverter, PeriodConverter, IntervalConverter ",
      "methods_under_test": {
        "=1": {
          "StringConverter.getInstantMillis(Object, Chronology)": [
            1,
            1,
            1
          ],
          "StringConverter.setInto(ReadWritablePeriod, Object, Chronology)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StringConverter.getPartialValues(ReadablePartial, Object, Chronology, DateTimeFormatter)": [
            2,
            2,
            2
          ],
          "StringConverter.getDurationMillis(Object)": [
            9,
            9,
            9
          ],
          "StringConverter.setInto(ReadWritableInterval, Object, Chronology)": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/TestStringConverter.java"
    }
  ],
  "src_test_fuzz_match": [
    {
      "src_name": "AbstractInstant",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/base/AbstractInstant.java",
      "class_declaration": "public abstract class AbstractInstant implements ReadableInstant ",
      "methods_under_test": {
        "=1": {
          "AbstractInstant.toInstant()": [
            1,
            1,
            1
          ],
          "AbstractInstant.toDateTime()": [
            1,
            1,
            1
          ],
          "AbstractInstant.toDateTimeISO()": [
            1,
            1,
            1
          ],
          "AbstractInstant.toDateTime(DateTimeZone)": [
            1,
            1,
            1
          ],
          "AbstractInstant.toDateTime(Chronology)": [
            1,
            1,
            1
          ],
          "AbstractInstant.toMutableDateTime()": [
            1,
            1,
            1
          ],
          "AbstractInstant.toMutableDateTimeISO()": [
            1,
            1,
            1
          ],
          "AbstractInstant.toMutableDateTime(DateTimeZone)": [
            1,
            1,
            1
          ],
          "AbstractInstant.toMutableDateTime(Chronology)": [
            1,
            1,
            1
          ],
          "AbstractInstant.toDate()": [
            1,
            1,
            1
          ],
          "AbstractInstant.hashCode()": [
            1,
            1,
            1
          ],
          "AbstractInstant.isAfter(long)": [
            1,
            1,
            1
          ],
          "AbstractInstant.isAfter(ReadableInstant)": [
            1,
            1,
            1
          ],
          "AbstractInstant.isBefore(long)": [
            1,
            1,
            1
          ],
          "AbstractInstant.isBefore(ReadableInstant)": [
            1,
            1,
            1
          ],
          "AbstractInstant.isEqual(long)": [
            1,
            1,
            1
          ],
          "AbstractInstant.isEqual(ReadableInstant)": [
            1,
            1,
            1
          ],
          "AbstractInstant.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractInstant.get(DateTimeFieldType)": [
            2,
            2,
            2
          ],
          "AbstractInstant.isSupported(DateTimeFieldType)": [
            2,
            2,
            2
          ],
          "AbstractInstant.get(DateTimeField)": [
            2,
            2,
            2
          ],
          "AbstractInstant.equals(Object)": [
            3,
            3,
            3
          ],
          "AbstractInstant.compareTo(ReadableInstant)": [
            5,
            5,
            5
          ],
          "AbstractInstant.toString(DateTimeFormatter)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestInstant_Basics.java"
    },
    {
      "src_name": "StrictChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/StrictChronology.java",
      "class_declaration": "public final class StrictChronology extends AssembledChronology ",
      "methods_under_test": {
        "=1": {
          "StrictChronology.assemble(Fields)": [
            1,
            1,
            1
          ],
          "StrictChronology.hashCode()": [
            1,
            1,
            1
          ],
          "StrictChronology.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StrictChronology.getInstance(Chronology)": [
            2,
            2,
            2
          ],
          "StrictChronology.withUTC()": [
            3,
            3,
            3
          ],
          "StrictChronology.withZone(DateTimeZone)": [
            4,
            4,
            4
          ],
          "StrictChronology.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/MockBadChronology.java"
    },
    {
      "src_name": "DurationConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/DurationConverter.java",
      "error": "list index out of range",
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/MockZeroNullIntegerConverter.java"
    },
    {
      "src_name": "MutableInterval",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/MutableInterval.java",
      "class_declaration": "public class MutableInterval extends BaseInterval implements ReadWritableInterval, Cloneable, Serializable ",
      "methods_under_test": {
        "=1": {
          "MutableInterval.parse(String)": [
            1,
            1,
            1
          ],
          "MutableInterval.setInterval(long, long)": [
            1,
            1,
            1
          ],
          "MutableInterval.setStart(ReadableInstant)": [
            1,
            1,
            1
          ],
          "MutableInterval.setEnd(ReadableInstant)": [
            1,
            1,
            1
          ],
          "MutableInterval.setDurationAfterStart(ReadableDuration)": [
            1,
            1,
            1
          ],
          "MutableInterval.setDurationBeforeEnd(ReadableDuration)": [
            1,
            1,
            1
          ],
          "MutableInterval.copy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MutableInterval.setInterval(ReadableInterval)": [
            2,
            2,
            2
          ],
          "MutableInterval.setInterval(ReadableInstant, ReadableInstant)": [
            3,
            3,
            3
          ],
          "MutableInterval.setPeriodAfterStart(ReadablePeriod)": [
            3,
            3,
            3
          ],
          "MutableInterval.setPeriodBeforeEnd(ReadablePeriod)": [
            3,
            3,
            3
          ],
          "MutableInterval.clone()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestInterval_Basics.java"
    },
    {
      "src_name": "Partial",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/Partial.java",
      "class_declaration": "public final class Partial extends AbstractPartial implements ReadablePartial, Serializable ",
      "methods_under_test": {
        "=1": {
          "Partial.size()": [
            1,
            1,
            1
          ],
          "Partial.getField(int, Chronology)": [
            1,
            1,
            1
          ],
          "Partial.getFieldType(int)": [
            1,
            1,
            1
          ],
          "Partial.getValue(int)": [
            1,
            1,
            1
          ],
          "Partial.plus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "Partial.minus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "Partial.property(DateTimeFieldType)": [
            1,
            1,
            1
          ],
          "Property.addToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.addWrapFieldToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String, Locale)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String)": [
            1,
            1,
            1
          ],
          "Property.withMaximumValue()": [
            1,
            1,
            1
          ],
          "Property.withMinimumValue()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Partial.withChronologyRetainFields(Chronology)": [
            3,
            3,
            3
          ],
          "Partial.with(DateTimeFieldType, int)": [
            10,
            10,
            10
          ],
          "Partial.without(DateTimeFieldType)": [
            2,
            2,
            2
          ],
          "Partial.withField(DateTimeFieldType, int)": [
            2,
            2,
            2
          ],
          "Partial.withFieldAdded(DurationFieldType, int)": [
            2,
            2,
            2
          ],
          "Partial.withFieldAddWrapped(DurationFieldType, int)": [
            2,
            2,
            2
          ],
          "Partial.withPeriodAdded(ReadablePeriod, int)": [
            4,
            4,
            4
          ],
          "Partial.isMatch(ReadableInstant)": [
            3,
            3,
            3
          ],
          "Partial.isMatch(ReadablePartial)": [
            4,
            4,
            4
          ],
          "Partial.getFormatter()": [
            7,
            7,
            7
          ],
          "Partial.toString()": [
            4,
            4,
            4
          ],
          "Partial.toStringList()": [
            3,
            3,
            3
          ],
          "Partial.toString(String)": [
            2,
            2,
            2
          ],
          "Partial.toString(String, Locale)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestPartial_Properties.java"
    },
    {
      "src_name": "MutablePeriod",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/MutablePeriod.java",
      "class_declaration": "public class MutablePeriod extends BasePeriod implements ReadWritablePeriod, Cloneable, Serializable ",
      "methods_under_test": {
        "=1": {
          "MutablePeriod.parse(String)": [
            1,
            1,
            1
          ],
          "MutablePeriod.parse(String, PeriodFormatter)": [
            1,
            1,
            1
          ],
          "MutablePeriod.clear()": [
            1,
            1,
            1
          ],
          "MutablePeriod.setValue(int, int)": [
            1,
            1,
            1
          ],
          "MutablePeriod.set(DurationFieldType, int)": [
            1,
            1,
            1
          ],
          "MutablePeriod.setPeriod(int, int, int, int, int, int, int, int)": [
            1,
            1,
            1
          ],
          "MutablePeriod.setPeriod(long, long)": [
            1,
            1,
            1
          ],
          "MutablePeriod.setPeriod(long, long, Chronology)": [
            1,
            1,
            1
          ],
          "MutablePeriod.setPeriod(ReadableDuration, Chronology)": [
            1,
            1,
            1
          ],
          "MutablePeriod.setPeriod(long, Chronology)": [
            1,
            1,
            1
          ],
          "MutablePeriod.add(DurationFieldType, int)": [
            1,
            1,
            1
          ],
          "MutablePeriod.add(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "MutablePeriod.add(int, int, int, int, int, int, int, int)": [
            1,
            1,
            1
          ],
          "MutablePeriod.add(long)": [
            1,
            1,
            1
          ],
          "MutablePeriod.add(long, Chronology)": [
            1,
            1,
            1
          ],
          "MutablePeriod.mergePeriod(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "MutablePeriod.addYears(int)": [
            1,
            1,
            1
          ],
          "MutablePeriod.addMonths(int)": [
            1,
            1,
            1
          ],
          "MutablePeriod.addWeeks(int)": [
            1,
            1,
            1
          ],
          "MutablePeriod.addDays(int)": [
            1,
            1,
            1
          ],
          "MutablePeriod.addHours(int)": [
            1,
            1,
            1
          ],
          "MutablePeriod.addMinutes(int)": [
            1,
            1,
            1
          ],
          "MutablePeriod.addSeconds(int)": [
            1,
            1,
            1
          ],
          "MutablePeriod.addMillis(int)": [
            1,
            1,
            1
          ],
          "MutablePeriod.copy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MutablePeriod.setPeriod(ReadableInterval)": [
            3,
            3,
            3
          ],
          "MutablePeriod.setPeriod(ReadableInstant, ReadableInstant)": [
            3,
            3,
            3
          ],
          "MutablePeriod.add(ReadableInterval)": [
            2,
            2,
            2
          ],
          "MutablePeriod.add(ReadableDuration)": [
            2,
            2,
            2
          ],
          "MutablePeriod.clone()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMutablePeriod_Constructors.java"
    },
    {
      "src_name": "LocalDateTime",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/LocalDateTime.java",
      "class_declaration": "public final class LocalDateTime extends BaseLocal implements ReadablePartial, Serializable ",
      "methods_under_test": {
        "=1": {
          "LocalDateTime.now()": [
            1,
            1,
            1
          ],
          "LocalDateTime.parse(String)": [
            1,
            1,
            1
          ],
          "LocalDateTime.parse(String, DateTimeFormatter)": [
            1,
            1,
            1
          ],
          "LocalDateTime.size()": [
            1,
            1,
            1
          ],
          "LocalDateTime.toDateTime()": [
            1,
            1,
            1
          ],
          "LocalDateTime.toDateTime(DateTimeZone)": [
            1,
            1,
            1
          ],
          "LocalDateTime.toLocalDate()": [
            1,
            1,
            1
          ],
          "LocalDateTime.toLocalTime()": [
            1,
            1,
            1
          ],
          "LocalDateTime.withLocalMillis(long)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withDate(int, int, int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withTime(int, int, int, int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.plus(ReadableDuration)": [
            1,
            1,
            1
          ],
          "LocalDateTime.plus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "LocalDateTime.minus(ReadableDuration)": [
            1,
            1,
            1
          ],
          "LocalDateTime.minus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withEra(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withCenturyOfEra(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withYearOfEra(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withYearOfCentury(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withYear(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withWeekyear(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withMonthOfYear(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withWeekOfWeekyear(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withDayOfYear(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withDayOfMonth(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withDayOfWeek(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withHourOfDay(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withMinuteOfHour(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withSecondOfMinute(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withMillisOfSecond(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.withMillisOfDay(int)": [
            1,
            1,
            1
          ],
          "LocalDateTime.era()": [
            1,
            1,
            1
          ],
          "LocalDateTime.centuryOfEra()": [
            1,
            1,
            1
          ],
          "LocalDateTime.yearOfCentury()": [
            1,
            1,
            1
          ],
          "LocalDateTime.yearOfEra()": [
            1,
            1,
            1
          ],
          "LocalDateTime.year()": [
            1,
            1,
            1
          ],
          "LocalDateTime.weekyear()": [
            1,
            1,
            1
          ],
          "LocalDateTime.monthOfYear()": [
            1,
            1,
            1
          ],
          "LocalDateTime.weekOfWeekyear()": [
            1,
            1,
            1
          ],
          "LocalDateTime.dayOfYear()": [
            1,
            1,
            1
          ],
          "LocalDateTime.dayOfMonth()": [
            1,
            1,
            1
          ],
          "LocalDateTime.dayOfWeek()": [
            1,
            1,
            1
          ],
          "LocalDateTime.hourOfDay()": [
            1,
            1,
            1
          ],
          "LocalDateTime.minuteOfHour()": [
            1,
            1,
            1
          ],
          "LocalDateTime.secondOfMinute()": [
            1,
            1,
            1
          ],
          "LocalDateTime.millisOfSecond()": [
            1,
            1,
            1
          ],
          "LocalDateTime.millisOfDay()": [
            1,
            1,
            1
          ],
          "LocalDateTime.toString()": [
            1,
            1,
            1
          ],
          "Property.addToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.addToCopy(long)": [
            1,
            1,
            1
          ],
          "Property.addWrapFieldToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String, Locale)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String)": [
            1,
            1,
            1
          ],
          "Property.withMaximumValue()": [
            1,
            1,
            1
          ],
          "Property.withMinimumValue()": [
            1,
            1,
            1
          ],
          "Property.roundFloorCopy()": [
            1,
            1,
            1
          ],
          "Property.roundCeilingCopy()": [
            1,
            1,
            1
          ],
          "Property.roundHalfFloorCopy()": [
            1,
            1,
            1
          ],
          "Property.roundHalfCeilingCopy()": [
            1,
            1,
            1
          ],
          "Property.roundHalfEvenCopy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LocalDateTime.now(DateTimeZone)": [
            2,
            2,
            2
          ],
          "LocalDateTime.now(Chronology)": [
            2,
            2,
            2
          ],
          "LocalDateTime.fromCalendarFields(Calendar)": [
            2,
            2,
            2
          ],
          "LocalDateTime.fromDateFields(Date)": [
            2,
            2,
            2
          ],
          "LocalDateTime.getField(int, Chronology)": [
            5,
            5,
            5
          ],
          "LocalDateTime.getValue(int)": [
            5,
            5,
            5
          ],
          "LocalDateTime.get(DateTimeFieldType)": [
            2,
            2,
            2
          ],
          "LocalDateTime.isSupported(DateTimeFieldType)": [
            2,
            2,
            2
          ],
          "LocalDateTime.isSupported(DurationFieldType)": [
            2,
            2,
            2
          ],
          "LocalDateTime.equals(Object)": [
            4,
            4,
            4
          ],
          "LocalDateTime.compareTo(ReadablePartial)": [
            4,
            4,
            4
          ],
          "LocalDateTime.toDate()": [
            6,
            6,
            6
          ],
          "LocalDateTime.withFields(ReadablePartial)": [
            2,
            2,
            2
          ],
          "LocalDateTime.withField(DateTimeFieldType, int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.withFieldAdded(DurationFieldType, int)": [
            3,
            3,
            3
          ],
          "LocalDateTime.withDurationAdded(ReadableDuration, int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.withPeriodAdded(ReadablePeriod, int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.plusYears(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.plusMonths(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.plusWeeks(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.plusDays(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.plusHours(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.plusMinutes(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.plusSeconds(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.plusMillis(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.minusYears(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.minusMonths(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.minusWeeks(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.minusDays(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.minusHours(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.minusMinutes(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.minusSeconds(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.minusMillis(int)": [
            2,
            2,
            2
          ],
          "LocalDateTime.property(DateTimeFieldType)": [
            3,
            3,
            3
          ],
          "LocalDateTime.toString(String)": [
            2,
            2,
            2
          ],
          "LocalDateTime.toString(String, Locale)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestLocalDateTime_Properties.java"
    },
    {
      "src_name": "YearMonth",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/YearMonth.java",
      "class_declaration": "public final class YearMonth extends BasePartial implements ReadablePartial, Serializable ",
      "methods_under_test": {
        "=1": {
          "YearMonth.now()": [
            1,
            1,
            1
          ],
          "YearMonth.parse(String)": [
            1,
            1,
            1
          ],
          "YearMonth.parse(String, DateTimeFormatter)": [
            1,
            1,
            1
          ],
          "YearMonth.size()": [
            1,
            1,
            1
          ],
          "YearMonth.getFieldType(int)": [
            1,
            1,
            1
          ],
          "YearMonth.plus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "YearMonth.plusYears(int)": [
            1,
            1,
            1
          ],
          "YearMonth.plusMonths(int)": [
            1,
            1,
            1
          ],
          "YearMonth.minus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "YearMonth.minusYears(int)": [
            1,
            1,
            1
          ],
          "YearMonth.minusMonths(int)": [
            1,
            1,
            1
          ],
          "YearMonth.toLocalDate(int)": [
            1,
            1,
            1
          ],
          "YearMonth.toInterval()": [
            1,
            1,
            1
          ],
          "YearMonth.toInterval(DateTimeZone)": [
            1,
            1,
            1
          ],
          "YearMonth.withYear(int)": [
            1,
            1,
            1
          ],
          "YearMonth.withMonthOfYear(int)": [
            1,
            1,
            1
          ],
          "YearMonth.property(DateTimeFieldType)": [
            1,
            1,
            1
          ],
          "YearMonth.year()": [
            1,
            1,
            1
          ],
          "YearMonth.monthOfYear()": [
            1,
            1,
            1
          ],
          "YearMonth.toString()": [
            1,
            1,
            1
          ],
          "Property.addToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.addWrapFieldToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String, Locale)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "YearMonth.now(DateTimeZone)": [
            2,
            2,
            2
          ],
          "YearMonth.now(Chronology)": [
            2,
            2,
            2
          ],
          "YearMonth.fromCalendarFields(Calendar)": [
            2,
            2,
            2
          ],
          "YearMonth.fromDateFields(Date)": [
            2,
            2,
            2
          ],
          "YearMonth.getField(int, Chronology)": [
            3,
            3,
            3
          ],
          "YearMonth.withChronologyRetainFields(Chronology)": [
            3,
            3,
            3
          ],
          "YearMonth.withField(DateTimeFieldType, int)": [
            2,
            2,
            2
          ],
          "YearMonth.withFieldAdded(DurationFieldType, int)": [
            2,
            2,
            2
          ],
          "YearMonth.withPeriodAdded(ReadablePeriod, int)": [
            4,
            4,
            4
          ],
          "YearMonth.toString(String)": [
            2,
            2,
            2
          ],
          "YearMonth.toString(String, Locale)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestYearMonth_Constructors.java"
    },
    {
      "src_name": "LocalDate",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/LocalDate.java",
      "class_declaration": "public final class LocalDate extends BaseLocal implements ReadablePartial, Serializable ",
      "methods_under_test": {
        "=1": {
          "LocalDate.now()": [
            1,
            1,
            1
          ],
          "LocalDate.parse(String)": [
            1,
            1,
            1
          ],
          "LocalDate.parse(String, DateTimeFormatter)": [
            1,
            1,
            1
          ],
          "LocalDate.size()": [
            1,
            1,
            1
          ],
          "LocalDate.toDateTimeAtStartOfDay()": [
            1,
            1,
            1
          ],
          "LocalDate.toDateTimeAtStartOfDay(DateTimeZone)": [
            1,
            1,
            1
          ],
          "LocalDate.toDateTimeAtMidnight()": [
            1,
            1,
            1
          ],
          "LocalDate.toDateTimeAtMidnight(DateTimeZone)": [
            1,
            1,
            1
          ],
          "LocalDate.toDateTimeAtCurrentTime()": [
            1,
            1,
            1
          ],
          "LocalDate.toDateTimeAtCurrentTime(DateTimeZone)": [
            1,
            1,
            1
          ],
          "LocalDate.toDateMidnight()": [
            1,
            1,
            1
          ],
          "LocalDate.toDateMidnight(DateTimeZone)": [
            1,
            1,
            1
          ],
          "LocalDate.toDateTime(LocalTime)": [
            1,
            1,
            1
          ],
          "LocalDate.toInterval()": [
            1,
            1,
            1
          ],
          "LocalDate.toInterval(DateTimeZone)": [
            1,
            1,
            1
          ],
          "LocalDate.withLocalMillis(long)": [
            1,
            1,
            1
          ],
          "LocalDate.plus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "LocalDate.minus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "LocalDate.withEra(int)": [
            1,
            1,
            1
          ],
          "LocalDate.withCenturyOfEra(int)": [
            1,
            1,
            1
          ],
          "LocalDate.withYearOfEra(int)": [
            1,
            1,
            1
          ],
          "LocalDate.withYearOfCentury(int)": [
            1,
            1,
            1
          ],
          "LocalDate.withYear(int)": [
            1,
            1,
            1
          ],
          "LocalDate.withWeekyear(int)": [
            1,
            1,
            1
          ],
          "LocalDate.withMonthOfYear(int)": [
            1,
            1,
            1
          ],
          "LocalDate.withWeekOfWeekyear(int)": [
            1,
            1,
            1
          ],
          "LocalDate.withDayOfYear(int)": [
            1,
            1,
            1
          ],
          "LocalDate.withDayOfMonth(int)": [
            1,
            1,
            1
          ],
          "LocalDate.withDayOfWeek(int)": [
            1,
            1,
            1
          ],
          "LocalDate.era()": [
            1,
            1,
            1
          ],
          "LocalDate.centuryOfEra()": [
            1,
            1,
            1
          ],
          "LocalDate.yearOfCentury()": [
            1,
            1,
            1
          ],
          "LocalDate.yearOfEra()": [
            1,
            1,
            1
          ],
          "LocalDate.year()": [
            1,
            1,
            1
          ],
          "LocalDate.weekyear()": [
            1,
            1,
            1
          ],
          "LocalDate.monthOfYear()": [
            1,
            1,
            1
          ],
          "LocalDate.weekOfWeekyear()": [
            1,
            1,
            1
          ],
          "LocalDate.dayOfYear()": [
            1,
            1,
            1
          ],
          "LocalDate.dayOfMonth()": [
            1,
            1,
            1
          ],
          "LocalDate.dayOfWeek()": [
            1,
            1,
            1
          ],
          "LocalDate.toString()": [
            1,
            1,
            1
          ],
          "Property.addToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.addWrapFieldToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String, Locale)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String)": [
            1,
            1,
            1
          ],
          "Property.withMaximumValue()": [
            1,
            1,
            1
          ],
          "Property.withMinimumValue()": [
            1,
            1,
            1
          ],
          "Property.roundFloorCopy()": [
            1,
            1,
            1
          ],
          "Property.roundCeilingCopy()": [
            1,
            1,
            1
          ],
          "Property.roundHalfFloorCopy()": [
            1,
            1,
            1
          ],
          "Property.roundHalfCeilingCopy()": [
            1,
            1,
            1
          ],
          "Property.roundHalfEvenCopy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LocalDate.now(DateTimeZone)": [
            2,
            2,
            2
          ],
          "LocalDate.now(Chronology)": [
            2,
            2,
            2
          ],
          "LocalDate.fromCalendarFields(Calendar)": [
            2,
            2,
            2
          ],
          "LocalDate.fromDateFields(Date)": [
            2,
            2,
            2
          ],
          "LocalDate.getField(int, Chronology)": [
            4,
            4,
            4
          ],
          "LocalDate.getValue(int)": [
            4,
            4,
            4
          ],
          "LocalDate.get(DateTimeFieldType)": [
            3,
            3,
            3
          ],
          "LocalDate.isSupported(DateTimeFieldType)": [
            3,
            3,
            3
          ],
          "LocalDate.isSupported(DurationFieldType)": [
            3,
            3,
            3
          ],
          "LocalDate.equals(Object)": [
            4,
            4,
            4
          ],
          "LocalDate.hashCode()": [
            2,
            2,
            2
          ],
          "LocalDate.compareTo(ReadablePartial)": [
            4,
            4,
            4
          ],
          "LocalDate.toLocalDateTime(LocalTime)": [
            3,
            3,
            3
          ],
          "LocalDate.toDateTime(LocalTime, DateTimeZone)": [
            3,
            3,
            3
          ],
          "LocalDate.toDate()": [
            6,
            6,
            6
          ],
          "LocalDate.withFields(ReadablePartial)": [
            2,
            2,
            2
          ],
          "LocalDate.withField(DateTimeFieldType, int)": [
            3,
            3,
            3
          ],
          "LocalDate.withFieldAdded(DurationFieldType, int)": [
            4,
            4,
            4
          ],
          "LocalDate.withPeriodAdded(ReadablePeriod, int)": [
            4,
            4,
            4
          ],
          "LocalDate.plusYears(int)": [
            2,
            2,
            2
          ],
          "LocalDate.plusMonths(int)": [
            2,
            2,
            2
          ],
          "LocalDate.plusWeeks(int)": [
            2,
            2,
            2
          ],
          "LocalDate.plusDays(int)": [
            2,
            2,
            2
          ],
          "LocalDate.minusYears(int)": [
            2,
            2,
            2
          ],
          "LocalDate.minusMonths(int)": [
            2,
            2,
            2
          ],
          "LocalDate.minusWeeks(int)": [
            2,
            2,
            2
          ],
          "LocalDate.minusDays(int)": [
            2,
            2,
            2
          ],
          "LocalDate.property(DateTimeFieldType)": [
            3,
            3,
            3
          ],
          "LocalDate.toString(String)": [
            2,
            2,
            2
          ],
          "LocalDate.toString(String, Locale)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestLocalDate_Constructors.java"
    },
    {
      "src_name": "LocalTime",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/LocalTime.java",
      "class_declaration": "public final class LocalTime extends BaseLocal implements ReadablePartial, Serializable ",
      "methods_under_test": {
        "=1": {
          "LocalTime.now()": [
            1,
            1,
            1
          ],
          "LocalTime.parse(String)": [
            1,
            1,
            1
          ],
          "LocalTime.parse(String, DateTimeFormatter)": [
            1,
            1,
            1
          ],
          "LocalTime.fromMillisOfDay(long)": [
            1,
            1,
            1
          ],
          "LocalTime.fromMillisOfDay(long, Chronology)": [
            1,
            1,
            1
          ],
          "LocalTime.size()": [
            1,
            1,
            1
          ],
          "LocalTime.withLocalMillis(long)": [
            1,
            1,
            1
          ],
          "LocalTime.plus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "LocalTime.minus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "LocalTime.withHourOfDay(int)": [
            1,
            1,
            1
          ],
          "LocalTime.withMinuteOfHour(int)": [
            1,
            1,
            1
          ],
          "LocalTime.withSecondOfMinute(int)": [
            1,
            1,
            1
          ],
          "LocalTime.withMillisOfSecond(int)": [
            1,
            1,
            1
          ],
          "LocalTime.withMillisOfDay(int)": [
            1,
            1,
            1
          ],
          "LocalTime.hourOfDay()": [
            1,
            1,
            1
          ],
          "LocalTime.minuteOfHour()": [
            1,
            1,
            1
          ],
          "LocalTime.secondOfMinute()": [
            1,
            1,
            1
          ],
          "LocalTime.millisOfSecond()": [
            1,
            1,
            1
          ],
          "LocalTime.millisOfDay()": [
            1,
            1,
            1
          ],
          "LocalTime.toDateTimeToday()": [
            1,
            1,
            1
          ],
          "LocalTime.toDateTimeToday(DateTimeZone)": [
            1,
            1,
            1
          ],
          "LocalTime.toString()": [
            1,
            1,
            1
          ],
          "Property.addCopy(int)": [
            1,
            1,
            1
          ],
          "Property.addCopy(long)": [
            1,
            1,
            1
          ],
          "Property.addWrapFieldToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String, Locale)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String)": [
            1,
            1,
            1
          ],
          "Property.withMaximumValue()": [
            1,
            1,
            1
          ],
          "Property.withMinimumValue()": [
            1,
            1,
            1
          ],
          "Property.roundFloorCopy()": [
            1,
            1,
            1
          ],
          "Property.roundCeilingCopy()": [
            1,
            1,
            1
          ],
          "Property.roundHalfFloorCopy()": [
            1,
            1,
            1
          ],
          "Property.roundHalfCeilingCopy()": [
            1,
            1,
            1
          ],
          "Property.roundHalfEvenCopy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LocalTime.now(DateTimeZone)": [
            2,
            2,
            2
          ],
          "LocalTime.now(Chronology)": [
            2,
            2,
            2
          ],
          "LocalTime.fromCalendarFields(Calendar)": [
            2,
            2,
            2
          ],
          "LocalTime.fromDateFields(Date)": [
            2,
            2,
            2
          ],
          "LocalTime.getField(int, Chronology)": [
            5,
            5,
            5
          ],
          "LocalTime.getValue(int)": [
            5,
            5,
            5
          ],
          "LocalTime.get(DateTimeFieldType)": [
            3,
            3,
            3
          ],
          "LocalTime.isSupported(DateTimeFieldType)": [
            3,
            3,
            3
          ],
          "LocalTime.isSupported(DurationFieldType)": [
            3,
            3,
            3
          ],
          "LocalTime.equals(Object)": [
            4,
            4,
            4
          ],
          "LocalTime.compareTo(ReadablePartial)": [
            4,
            4,
            4
          ],
          "LocalTime.withFields(ReadablePartial)": [
            2,
            2,
            2
          ],
          "LocalTime.withField(DateTimeFieldType, int)": [
            3,
            3,
            3
          ],
          "LocalTime.withFieldAdded(DurationFieldType, int)": [
            4,
            4,
            4
          ],
          "LocalTime.withPeriodAdded(ReadablePeriod, int)": [
            2,
            2,
            2
          ],
          "LocalTime.plusHours(int)": [
            2,
            2,
            2
          ],
          "LocalTime.plusMinutes(int)": [
            2,
            2,
            2
          ],
          "LocalTime.plusSeconds(int)": [
            2,
            2,
            2
          ],
          "LocalTime.plusMillis(int)": [
            2,
            2,
            2
          ],
          "LocalTime.minusHours(int)": [
            2,
            2,
            2
          ],
          "LocalTime.minusMinutes(int)": [
            2,
            2,
            2
          ],
          "LocalTime.minusSeconds(int)": [
            2,
            2,
            2
          ],
          "LocalTime.minusMillis(int)": [
            2,
            2,
            2
          ],
          "LocalTime.property(DateTimeFieldType)": [
            3,
            3,
            3
          ],
          "LocalTime.toString(String)": [
            2,
            2,
            2
          ],
          "LocalTime.toString(String, Locale)": [
            2,
            2,
            2
          ],
          "Property.addNoWrapToCopy(int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestLocalTime_Properties.java"
    },
    {
      "src_name": "BaseDuration",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/base/BaseDuration.java",
      "class_declaration": "public abstract class BaseDuration extends AbstractDuration implements ReadableDuration, Serializable ",
      "methods_under_test": {
        "=1": {
          "BaseDuration.toPeriod(PeriodType)": [
            1,
            1,
            1
          ],
          "BaseDuration.toPeriod(Chronology)": [
            1,
            1,
            1
          ],
          "BaseDuration.toPeriod(PeriodType, Chronology)": [
            1,
            1,
            1
          ],
          "BaseDuration.toPeriodFrom(ReadableInstant)": [
            1,
            1,
            1
          ],
          "BaseDuration.toPeriodFrom(ReadableInstant, PeriodType)": [
            1,
            1,
            1
          ],
          "BaseDuration.toPeriodTo(ReadableInstant)": [
            1,
            1,
            1
          ],
          "BaseDuration.toPeriodTo(ReadableInstant, PeriodType)": [
            1,
            1,
            1
          ],
          "BaseDuration.toIntervalFrom(ReadableInstant)": [
            1,
            1,
            1
          ],
          "BaseDuration.toIntervalTo(ReadableInstant)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDuration_Constructors.java"
    },
    {
      "src_name": "DateMidnight",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/DateMidnight.java",
      "class_declaration": "public final class DateMidnight extends BaseDateTime implements ReadableDateTime, Serializable ",
      "methods_under_test": {
        "=1": {
          "DateMidnight.now()": [
            1,
            1,
            1
          ],
          "DateMidnight.parse(String)": [
            1,
            1,
            1
          ],
          "DateMidnight.parse(String, DateTimeFormatter)": [
            1,
            1,
            1
          ],
          "DateMidnight.checkInstant(long, Chronology)": [
            1,
            1,
            1
          ],
          "DateMidnight.withMillis(long)": [
            1,
            1,
            1
          ],
          "DateMidnight.withChronology(Chronology)": [
            1,
            1,
            1
          ],
          "DateMidnight.plus(long)": [
            1,
            1,
            1
          ],
          "DateMidnight.plus(ReadableDuration)": [
            1,
            1,
            1
          ],
          "DateMidnight.plus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "DateMidnight.minus(long)": [
            1,
            1,
            1
          ],
          "DateMidnight.minus(ReadableDuration)": [
            1,
            1,
            1
          ],
          "DateMidnight.minus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "DateMidnight.toYearMonthDay()": [
            1,
            1,
            1
          ],
          "DateMidnight.toLocalDate()": [
            1,
            1,
            1
          ],
          "DateMidnight.toInterval()": [
            1,
            1,
            1
          ],
          "DateMidnight.withEra(int)": [
            1,
            1,
            1
          ],
          "DateMidnight.withCenturyOfEra(int)": [
            1,
            1,
            1
          ],
          "DateMidnight.withYearOfEra(int)": [
            1,
            1,
            1
          ],
          "DateMidnight.withYearOfCentury(int)": [
            1,
            1,
            1
          ],
          "DateMidnight.withYear(int)": [
            1,
            1,
            1
          ],
          "DateMidnight.withWeekyear(int)": [
            1,
            1,
            1
          ],
          "DateMidnight.withMonthOfYear(int)": [
            1,
            1,
            1
          ],
          "DateMidnight.withWeekOfWeekyear(int)": [
            1,
            1,
            1
          ],
          "DateMidnight.withDayOfYear(int)": [
            1,
            1,
            1
          ],
          "DateMidnight.withDayOfMonth(int)": [
            1,
            1,
            1
          ],
          "DateMidnight.withDayOfWeek(int)": [
            1,
            1,
            1
          ],
          "DateMidnight.era()": [
            1,
            1,
            1
          ],
          "DateMidnight.centuryOfEra()": [
            1,
            1,
            1
          ],
          "DateMidnight.yearOfCentury()": [
            1,
            1,
            1
          ],
          "DateMidnight.yearOfEra()": [
            1,
            1,
            1
          ],
          "DateMidnight.year()": [
            1,
            1,
            1
          ],
          "DateMidnight.weekyear()": [
            1,
            1,
            1
          ],
          "DateMidnight.monthOfYear()": [
            1,
            1,
            1
          ],
          "DateMidnight.weekOfWeekyear()": [
            1,
            1,
            1
          ],
          "DateMidnight.dayOfYear()": [
            1,
            1,
            1
          ],
          "DateMidnight.dayOfMonth()": [
            1,
            1,
            1
          ],
          "DateMidnight.dayOfWeek()": [
            1,
            1,
            1
          ],
          "Property.addToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.addToCopy(long)": [
            1,
            1,
            1
          ],
          "Property.addWrapFieldToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String, Locale)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String)": [
            1,
            1,
            1
          ],
          "Property.withMaximumValue()": [
            1,
            1,
            1
          ],
          "Property.withMinimumValue()": [
            1,
            1,
            1
          ],
          "Property.roundFloorCopy()": [
            1,
            1,
            1
          ],
          "Property.roundCeilingCopy()": [
            1,
            1,
            1
          ],
          "Property.roundHalfFloorCopy()": [
            1,
            1,
            1
          ],
          "Property.roundHalfCeilingCopy()": [
            1,
            1,
            1
          ],
          "Property.roundHalfEvenCopy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DateMidnight.now(DateTimeZone)": [
            2,
            2,
            2
          ],
          "DateMidnight.now(Chronology)": [
            2,
            2,
            2
          ],
          "DateMidnight.withZoneRetainFields(DateTimeZone)": [
            2,
            2,
            2
          ],
          "DateMidnight.withFields(ReadablePartial)": [
            2,
            2,
            2
          ],
          "DateMidnight.withField(DateTimeFieldType, int)": [
            2,
            2,
            2
          ],
          "DateMidnight.withFieldAdded(DurationFieldType, int)": [
            3,
            3,
            3
          ],
          "DateMidnight.withDurationAdded(long, int)": [
            2,
            2,
            2
          ],
          "DateMidnight.withDurationAdded(ReadableDuration, int)": [
            2,
            2,
            2
          ],
          "DateMidnight.withPeriodAdded(ReadablePeriod, int)": [
            2,
            2,
            2
          ],
          "DateMidnight.plusYears(int)": [
            2,
            2,
            2
          ],
          "DateMidnight.plusMonths(int)": [
            2,
            2,
            2
          ],
          "DateMidnight.plusWeeks(int)": [
            2,
            2,
            2
          ],
          "DateMidnight.plusDays(int)": [
            2,
            2,
            2
          ],
          "DateMidnight.minusYears(int)": [
            2,
            2,
            2
          ],
          "DateMidnight.minusMonths(int)": [
            2,
            2,
            2
          ],
          "DateMidnight.minusWeeks(int)": [
            2,
            2,
            2
          ],
          "DateMidnight.minusDays(int)": [
            2,
            2,
            2
          ],
          "DateMidnight.property(DateTimeFieldType)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDateMidnight_Constructors.java"
    },
    {
      "src_name": "MutableDateTime",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/MutableDateTime.java",
      "class_declaration": "public class MutableDateTime extends BaseDateTime implements ReadWritableDateTime, Cloneable, Serializable ",
      "methods_under_test": {
        "=1": {
          "MutableDateTime.now()": [
            1,
            1,
            1
          ],
          "MutableDateTime.parse(String)": [
            1,
            1,
            1
          ],
          "MutableDateTime.parse(String, DateTimeFormatter)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setMillis(ReadableInstant)": [
            1,
            1,
            1
          ],
          "MutableDateTime.add(long)": [
            1,
            1,
            1
          ],
          "MutableDateTime.add(ReadableDuration)": [
            1,
            1,
            1
          ],
          "MutableDateTime.add(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setYear(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.addYears(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setWeekyear(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.addWeekyears(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setMonthOfYear(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.addMonths(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setWeekOfWeekyear(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.addWeeks(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setDayOfYear(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setDayOfMonth(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setDayOfWeek(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.addDays(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setHourOfDay(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.addHours(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setMinuteOfDay(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setMinuteOfHour(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.addMinutes(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setSecondOfDay(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setSecondOfMinute(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.addSeconds(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setMillisOfDay(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setMillisOfSecond(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.addMillis(final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setDate(final, long)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setDate(final, int, final, int, final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setTime(final, long)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setTime(final, int, final, int, final, int, final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.setDateTime(final, int, final, int, final, int, final, int, final, int, final, int, final, int)": [
            1,
            1,
            1
          ],
          "MutableDateTime.era()": [
            1,
            1,
            1
          ],
          "MutableDateTime.centuryOfEra()": [
            1,
            1,
            1
          ],
          "MutableDateTime.yearOfCentury()": [
            1,
            1,
            1
          ],
          "MutableDateTime.yearOfEra()": [
            1,
            1,
            1
          ],
          "MutableDateTime.year()": [
            1,
            1,
            1
          ],
          "MutableDateTime.weekyear()": [
            1,
            1,
            1
          ],
          "MutableDateTime.monthOfYear()": [
            1,
            1,
            1
          ],
          "MutableDateTime.weekOfWeekyear()": [
            1,
            1,
            1
          ],
          "MutableDateTime.dayOfYear()": [
            1,
            1,
            1
          ],
          "MutableDateTime.dayOfMonth()": [
            1,
            1,
            1
          ],
          "MutableDateTime.dayOfWeek()": [
            1,
            1,
            1
          ],
          "MutableDateTime.hourOfDay()": [
            1,
            1,
            1
          ],
          "MutableDateTime.minuteOfDay()": [
            1,
            1,
            1
          ],
          "MutableDateTime.minuteOfHour()": [
            1,
            1,
            1
          ],
          "MutableDateTime.secondOfDay()": [
            1,
            1,
            1
          ],
          "MutableDateTime.secondOfMinute()": [
            1,
            1,
            1
          ],
          "MutableDateTime.millisOfDay()": [
            1,
            1,
            1
          ],
          "MutableDateTime.millisOfSecond()": [
            1,
            1,
            1
          ],
          "MutableDateTime.copy()": [
            1,
            1,
            1
          ],
          "MutableDateTime.toString()": [
            1,
            1,
            1
          ],
          "Property.add(int)": [
            1,
            1,
            1
          ],
          "Property.add(long)": [
            1,
            1,
            1
          ],
          "Property.addWrapField(int)": [
            1,
            1,
            1
          ],
          "Property.set(int)": [
            1,
            1,
            1
          ],
          "Property.set(String, Locale)": [
            1,
            1,
            1
          ],
          "Property.set(String)": [
            1,
            1,
            1
          ],
          "Property.roundFloor()": [
            1,
            1,
            1
          ],
          "Property.roundCeiling()": [
            1,
            1,
            1
          ],
          "Property.roundHalfFloor()": [
            1,
            1,
            1
          ],
          "Property.roundHalfCeiling()": [
            1,
            1,
            1
          ],
          "Property.roundHalfEven()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MutableDateTime.now(DateTimeZone)": [
            2,
            2,
            2
          ],
          "MutableDateTime.now(Chronology)": [
            2,
            2,
            2
          ],
          "MutableDateTime.setRounding(DateTimeField, int)": [
            2,
            2,
            2
          ],
          "MutableDateTime.setMillis(long)": [
            7,
            7,
            7
          ],
          "MutableDateTime.add(ReadableDuration, int)": [
            2,
            2,
            2
          ],
          "MutableDateTime.add(ReadablePeriod, int)": [
            2,
            2,
            2
          ],
          "MutableDateTime.setZone(DateTimeZone)": [
            2,
            2,
            2
          ],
          "MutableDateTime.setZoneRetainFields(DateTimeZone)": [
            2,
            2,
            2
          ],
          "MutableDateTime.set(DateTimeFieldType, int)": [
            2,
            2,
            2
          ],
          "MutableDateTime.add(DurationFieldType, int)": [
            2,
            2,
            2
          ],
          "MutableDateTime.setDate(final, ReadableInstant)": [
            2,
            2,
            2
          ],
          "MutableDateTime.setTime(final, ReadableInstant)": [
            2,
            2,
            2
          ],
          "MutableDateTime.property(DateTimeFieldType)": [
            3,
            3,
            3
          ],
          "MutableDateTime.clone()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMutableDateTime_Basics.java"
    },
    {
      "src_name": "MonthDay",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/MonthDay.java",
      "class_declaration": "public final class MonthDay extends BasePartial implements ReadablePartial, Serializable ",
      "methods_under_test": {
        "=1": {
          "MonthDay.now()": [
            1,
            1,
            1
          ],
          "MonthDay.parse(String)": [
            1,
            1,
            1
          ],
          "MonthDay.parse(String, DateTimeFormatter)": [
            1,
            1,
            1
          ],
          "MonthDay.size()": [
            1,
            1,
            1
          ],
          "MonthDay.getFieldType(int)": [
            1,
            1,
            1
          ],
          "MonthDay.plus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "MonthDay.plusMonths(int)": [
            1,
            1,
            1
          ],
          "MonthDay.plusDays(int)": [
            1,
            1,
            1
          ],
          "MonthDay.minus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "MonthDay.minusMonths(int)": [
            1,
            1,
            1
          ],
          "MonthDay.minusDays(int)": [
            1,
            1,
            1
          ],
          "MonthDay.toLocalDate(int)": [
            1,
            1,
            1
          ],
          "MonthDay.withMonthOfYear(int)": [
            1,
            1,
            1
          ],
          "MonthDay.withDayOfMonth(int)": [
            1,
            1,
            1
          ],
          "MonthDay.property(DateTimeFieldType)": [
            1,
            1,
            1
          ],
          "MonthDay.monthOfYear()": [
            1,
            1,
            1
          ],
          "MonthDay.dayOfMonth()": [
            1,
            1,
            1
          ],
          "MonthDay.toString()": [
            1,
            1,
            1
          ],
          "Property.addToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.addWrapFieldToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String, Locale)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "MonthDay.now(DateTimeZone)": [
            2,
            2,
            2
          ],
          "MonthDay.now(Chronology)": [
            2,
            2,
            2
          ],
          "MonthDay.fromCalendarFields(Calendar)": [
            2,
            2,
            2
          ],
          "MonthDay.fromDateFields(Date)": [
            2,
            2,
            2
          ],
          "MonthDay.getField(int, Chronology)": [
            3,
            3,
            3
          ],
          "MonthDay.withChronologyRetainFields(Chronology)": [
            3,
            3,
            3
          ],
          "MonthDay.withField(DateTimeFieldType, int)": [
            2,
            2,
            2
          ],
          "MonthDay.withFieldAdded(DurationFieldType, int)": [
            2,
            2,
            2
          ],
          "MonthDay.withPeriodAdded(ReadablePeriod, int)": [
            4,
            4,
            4
          ],
          "MonthDay.toString(String)": [
            2,
            2,
            2
          ],
          "MonthDay.toString(String, Locale)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMonthDay_Constructors.java"
    },
    {
      "src_name": "TimeOfDay",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/TimeOfDay.java",
      "class_declaration": "@Deprecated\npublic final class TimeOfDay extends BasePartial implements ReadablePartial, Serializable ",
      "methods_under_test": {
        "=1": {
          "TimeOfDay.fromMillisOfDay(long)": [
            1,
            1,
            1
          ],
          "TimeOfDay.fromMillisOfDay(long, Chronology)": [
            1,
            1,
            1
          ],
          "TimeOfDay.size()": [
            1,
            1,
            1
          ],
          "TimeOfDay.getFieldType(int)": [
            1,
            1,
            1
          ],
          "TimeOfDay.plus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "TimeOfDay.plusHours(int)": [
            1,
            1,
            1
          ],
          "TimeOfDay.plusMinutes(int)": [
            1,
            1,
            1
          ],
          "TimeOfDay.plusSeconds(int)": [
            1,
            1,
            1
          ],
          "TimeOfDay.plusMillis(int)": [
            1,
            1,
            1
          ],
          "TimeOfDay.minus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "TimeOfDay.minusHours(int)": [
            1,
            1,
            1
          ],
          "TimeOfDay.minusMinutes(int)": [
            1,
            1,
            1
          ],
          "TimeOfDay.minusSeconds(int)": [
            1,
            1,
            1
          ],
          "TimeOfDay.minusMillis(int)": [
            1,
            1,
            1
          ],
          "TimeOfDay.property(DateTimeFieldType)": [
            1,
            1,
            1
          ],
          "TimeOfDay.toLocalTime()": [
            1,
            1,
            1
          ],
          "TimeOfDay.toDateTimeToday()": [
            1,
            1,
            1
          ],
          "TimeOfDay.toDateTimeToday(DateTimeZone)": [
            1,
            1,
            1
          ],
          "TimeOfDay.withHourOfDay(int)": [
            1,
            1,
            1
          ],
          "TimeOfDay.withMinuteOfHour(int)": [
            1,
            1,
            1
          ],
          "TimeOfDay.withSecondOfMinute(int)": [
            1,
            1,
            1
          ],
          "TimeOfDay.withMillisOfSecond(int)": [
            1,
            1,
            1
          ],
          "TimeOfDay.hourOfDay()": [
            1,
            1,
            1
          ],
          "TimeOfDay.minuteOfHour()": [
            1,
            1,
            1
          ],
          "TimeOfDay.secondOfMinute()": [
            1,
            1,
            1
          ],
          "TimeOfDay.millisOfSecond()": [
            1,
            1,
            1
          ],
          "TimeOfDay.toString()": [
            1,
            1,
            1
          ],
          "Property.addToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.addNoWrapToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.addWrapFieldToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String, Locale)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String)": [
            1,
            1,
            1
          ],
          "Property.withMaximumValue()": [
            1,
            1,
            1
          ],
          "Property.withMinimumValue()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "TimeOfDay.fromCalendarFields(Calendar)": [
            2,
            2,
            2
          ],
          "TimeOfDay.fromDateFields(Date)": [
            2,
            2,
            2
          ],
          "TimeOfDay.getField(int, Chronology)": [
            5,
            5,
            5
          ],
          "TimeOfDay.withChronologyRetainFields(Chronology)": [
            3,
            3,
            3
          ],
          "TimeOfDay.withField(DateTimeFieldType, int)": [
            2,
            2,
            2
          ],
          "TimeOfDay.withFieldAdded(DurationFieldType, int)": [
            2,
            2,
            2
          ],
          "TimeOfDay.withPeriodAdded(ReadablePeriod, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      },
      "test_path": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestTimeOfDay_Properties.java"
    }
  ],
  "src_without_tests": [
    {
      "src_name": "LenientDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/LenientDateTimeField.java",
      "class_declaration": "public class LenientDateTimeField extends DelegatedDateTimeField ",
      "methods_under_test": {
        "=1": {
          "LenientDateTimeField.set(long, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LenientDateTimeField.getInstance(DateTimeField, Chronology)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PeriodPrinter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/format/PeriodPrinter.java",
      "error": "list index out of range"
    },
    {
      "src_name": "AgeCalculator",
      "src_path": "../../defects4j-subjects/Time-13f/src/example/org/joda/example/time/AgeCalculator.java",
      "class_declaration": "public class AgeCalculator extends JFrame ",
      "methods_under_test": {
        "=1": {
          "AgeCalculator.fixedSize(JComponent)": [
            1,
            1,
            1
          ],
          "AgeCalculator.fixedHeight(JComponent)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {
          "FieldGroup.updateResult(long, long)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DateTimeBrowser",
      "src_path": "../../defects4j-subjects/Time-13f/src/example/org/joda/example/time/DateTimeBrowser.java",
      "class_declaration": "public class DateTimeBrowser extends JFrame ",
      "methods_under_test": {
        "=1": {
          "GetterTableView.genColNames()": [
            1,
            1,
            1
          ],
          "GetterTableView.setViewColumnsWidth(JTable)": [
            1,
            1,
            1
          ],
          "HexTableView.genColNames()": [
            1,
            1,
            1
          ],
          "DateTableView.genColNames()": [
            1,
            1,
            1
          ],
          "DateTableView.setViewColumnsWidth(JTable)": [
            1,
            1,
            1
          ],
          "CalTableView.genColNames()": [
            1,
            1,
            1
          ],
          "CalTableView.setViewColumnsWidth(JTable)": [
            1,
            1,
            1
          ],
          "ExitAction.actionPerformed(ActionEvent)": [
            1,
            1,
            1
          ],
          "GetterAction.actionPerformed(ActionEvent)": [
            1,
            1,
            1
          ],
          "HexAction.actionPerformed(ActionEvent)": [
            1,
            1,
            1
          ],
          "DateAction.actionPerformed(ActionEvent)": [
            1,
            1,
            1
          ],
          "CalAction.actionPerformed(ActionEvent)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LoadedFile.getLoadedFileSize()": [
            2,
            2,
            2
          ],
          "GetterTableView.genCalcdValues()": [
            3,
            3,
            3
          ],
          "HexTableView.genCalcdValues()": [
            4,
            4,
            4
          ],
          "DateTableView.genCalcdValues()": [
            3,
            3,
            3
          ],
          "CalTableView.genCalcdValues()": [
            3,
            3,
            3
          ],
          "OpenAction.actionPerformed(ActionEvent)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PartialConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/PartialConverter.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DateTimePrinter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/format/DateTimePrinter.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ZeroIsMaxDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/ZeroIsMaxDateTimeField.java",
      "class_declaration": "public final class ZeroIsMaxDateTimeField extends DecoratedDateTimeField ",
      "methods_under_test": {
        "=1": {
          "ZeroIsMaxDateTimeField.add(long, int)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.add(long, long)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.addWrapField(long, int)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.addWrapField(ReadablePartial, int, int[], int)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.isLeap(long)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.getLeapAmount(long)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.getMinimumValue(long)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.getMinimumValue(ReadablePartial)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.getMinimumValue(ReadablePartial, int[])": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.getMaximumValue(long)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.getMaximumValue(ReadablePartial)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.getMaximumValue(ReadablePartial, int[])": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.roundFloor(long)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.roundCeiling(long)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.roundHalfFloor(long)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.roundHalfCeiling(long)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.roundHalfEven(long)": [
            1,
            1,
            1
          ],
          "ZeroIsMaxDateTimeField.remainder(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ZeroIsMaxDateTimeField.get(long)": [
            2,
            2,
            2
          ],
          "ZeroIsMaxDateTimeField.set(long, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseLocal",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/base/BaseLocal.java",
      "class_declaration": "public abstract class BaseLocal extends AbstractPartial ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SkipUndoDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/SkipUndoDateTimeField.java",
      "class_declaration": "public final class SkipUndoDateTimeField extends DelegatedDateTimeField ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SkipUndoDateTimeField.get(long)": [
            2,
            2,
            2
          ],
          "SkipUndoDateTimeField.set(long, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Provider",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/tz/Provider.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DecoratedDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/DecoratedDateTimeField.java",
      "class_declaration": "public abstract class DecoratedDateTimeField extends BaseDateTimeField ",
      "methods_under_test": {
        "=1": {
          "DecoratedDateTimeField.get(long)": [
            1,
            1,
            1
          ],
          "DecoratedDateTimeField.set(long, int)": [
            1,
            1,
            1
          ],
          "DecoratedDateTimeField.roundFloor(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "GJDayOfWeekDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java",
      "class_declaration": "final class GJDayOfWeekDateTimeField extends PreciseDurationDateTimeField ",
      "methods_under_test": {
        "=1": {
          "GJDayOfWeekDateTimeField.get(long)": [
            1,
            1,
            1
          ],
          "GJDayOfWeekDateTimeField.getAsText(int, Locale)": [
            1,
            1,
            1
          ],
          "GJDayOfWeekDateTimeField.getAsShortText(int, Locale)": [
            1,
            1,
            1
          ],
          "GJDayOfWeekDateTimeField.convertText(String, Locale)": [
            1,
            1,
            1
          ],
          "GJDayOfWeekDateTimeField.getMaximumTextLength(Locale)": [
            1,
            1,
            1
          ],
          "GJDayOfWeekDateTimeField.getMaximumShortTextLength(Locale)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseDurationField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/BaseDurationField.java",
      "class_declaration": "public abstract class BaseDurationField extends DurationField implements Serializable ",
      "methods_under_test": {
        "=1": {
          "BaseDurationField.getValue(long)": [
            1,
            1,
            1
          ],
          "BaseDurationField.getValueAsLong(long)": [
            1,
            1,
            1
          ],
          "BaseDurationField.getValue(long, long)": [
            1,
            1,
            1
          ],
          "BaseDurationField.getMillis(int)": [
            1,
            1,
            1
          ],
          "BaseDurationField.getMillis(long)": [
            1,
            1,
            1
          ],
          "BaseDurationField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "BaseDurationField.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BaseDurationField.compareTo(DurationField)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Examples",
      "src_path": "../../defects4j-subjects/Time-13f/src/example/org/joda/example/time/Examples.java",
      "class_declaration": "public class Examples ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/BaseChronology.java",
      "class_declaration": "public abstract class BaseChronology extends Chronology implements Serializable ",
      "methods_under_test": {
        "=1": {
          "BaseChronology.getDateTimeMillis(int, int, int, int)": [
            1,
            1,
            1
          ],
          "BaseChronology.getDateTimeMillis(int, int, int, int, int, int, int)": [
            1,
            1,
            1
          ],
          "BaseChronology.getDateTimeMillis(long, int, int, int, int)": [
            1,
            1,
            1
          ],
          "BaseChronology.millis()": [
            1,
            1,
            1
          ],
          "BaseChronology.millisOfSecond()": [
            1,
            1,
            1
          ],
          "BaseChronology.millisOfDay()": [
            1,
            1,
            1
          ],
          "BaseChronology.seconds()": [
            1,
            1,
            1
          ],
          "BaseChronology.secondOfMinute()": [
            1,
            1,
            1
          ],
          "BaseChronology.secondOfDay()": [
            1,
            1,
            1
          ],
          "BaseChronology.minutes()": [
            1,
            1,
            1
          ],
          "BaseChronology.minuteOfHour()": [
            1,
            1,
            1
          ],
          "BaseChronology.minuteOfDay()": [
            1,
            1,
            1
          ],
          "BaseChronology.hours()": [
            1,
            1,
            1
          ],
          "BaseChronology.hourOfDay()": [
            1,
            1,
            1
          ],
          "BaseChronology.clockhourOfDay()": [
            1,
            1,
            1
          ],
          "BaseChronology.halfdays()": [
            1,
            1,
            1
          ],
          "BaseChronology.hourOfHalfday()": [
            1,
            1,
            1
          ],
          "BaseChronology.clockhourOfHalfday()": [
            1,
            1,
            1
          ],
          "BaseChronology.halfdayOfDay()": [
            1,
            1,
            1
          ],
          "BaseChronology.days()": [
            1,
            1,
            1
          ],
          "BaseChronology.dayOfWeek()": [
            1,
            1,
            1
          ],
          "BaseChronology.dayOfMonth()": [
            1,
            1,
            1
          ],
          "BaseChronology.dayOfYear()": [
            1,
            1,
            1
          ],
          "BaseChronology.weeks()": [
            1,
            1,
            1
          ],
          "BaseChronology.weekOfWeekyear()": [
            1,
            1,
            1
          ],
          "BaseChronology.weekyears()": [
            1,
            1,
            1
          ],
          "BaseChronology.weekyear()": [
            1,
            1,
            1
          ],
          "BaseChronology.weekyearOfCentury()": [
            1,
            1,
            1
          ],
          "BaseChronology.months()": [
            1,
            1,
            1
          ],
          "BaseChronology.monthOfYear()": [
            1,
            1,
            1
          ],
          "BaseChronology.years()": [
            1,
            1,
            1
          ],
          "BaseChronology.year()": [
            1,
            1,
            1
          ],
          "BaseChronology.yearOfEra()": [
            1,
            1,
            1
          ],
          "BaseChronology.yearOfCentury()": [
            1,
            1,
            1
          ],
          "BaseChronology.centuries()": [
            1,
            1,
            1
          ],
          "BaseChronology.centuryOfEra()": [
            1,
            1,
            1
          ],
          "BaseChronology.eras()": [
            1,
            1,
            1
          ],
          "BaseChronology.era()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BaseChronology.validate(ReadablePartial, int[])": [
            4,
            4,
            4
          ],
          "BaseChronology.get(ReadablePartial, long)": [
            2,
            2,
            2
          ],
          "BaseChronology.set(ReadablePartial, long)": [
            2,
            2,
            2
          ],
          "BaseChronology.get(ReadablePeriod, long, long)": [
            3,
            3,
            3
          ],
          "BaseChronology.get(ReadablePeriod, long)": [
            4,
            4,
            4
          ],
          "BaseChronology.add(ReadablePeriod, long, int)": [
            4,
            4,
            4
          ],
          "BaseChronology.add(long, long, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ReadablePeriod",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/ReadablePeriod.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ISOYearOfEraDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java",
      "class_declaration": "class ISOYearOfEraDateTimeField extends DecoratedDateTimeField ",
      "methods_under_test": {
        "=1": {
          "ISOYearOfEraDateTimeField.get(long)": [
            1,
            1,
            1
          ],
          "ISOYearOfEraDateTimeField.add(long, int)": [
            1,
            1,
            1
          ],
          "ISOYearOfEraDateTimeField.add(long, long)": [
            1,
            1,
            1
          ],
          "ISOYearOfEraDateTimeField.addWrapField(long, int)": [
            1,
            1,
            1
          ],
          "ISOYearOfEraDateTimeField.addWrapField(ReadablePartial, int, int[], int)": [
            1,
            1,
            1
          ],
          "ISOYearOfEraDateTimeField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "ISOYearOfEraDateTimeField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ],
          "ISOYearOfEraDateTimeField.roundFloor(long)": [
            1,
            1,
            1
          ],
          "ISOYearOfEraDateTimeField.roundCeiling(long)": [
            1,
            1,
            1
          ],
          "ISOYearOfEraDateTimeField.remainder(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ISOYearOfEraDateTimeField.set(long, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ReadWritableDateTime",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/ReadWritableDateTime.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BasicFixedMonthChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/BasicFixedMonthChronology.java",
      "class_declaration": "abstract class BasicFixedMonthChronology extends BasicChronology ",
      "methods_under_test": {
        "=1": {
          "BasicFixedMonthChronology.getTotalMillisByYearMonth(int, int)": [
            1,
            1,
            1
          ],
          "BasicFixedMonthChronology.getDayOfMonth(long)": [
            1,
            1,
            1
          ],
          "BasicFixedMonthChronology.isLeapYear(int)": [
            1,
            1,
            1
          ],
          "BasicFixedMonthChronology.getDaysInYearMonth(int, int)": [
            1,
            1,
            1
          ],
          "BasicFixedMonthChronology.getDaysInMonthMax(int)": [
            1,
            1,
            1
          ],
          "BasicFixedMonthChronology.getMonthOfYear(long)": [
            1,
            1,
            1
          ],
          "BasicFixedMonthChronology.getMonthOfYear(long, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasicFixedMonthChronology.setYear(long, int)": [
            3,
            3,
            3
          ],
          "BasicFixedMonthChronology.getYearDifference(long, long)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DateTimePerformance",
      "src_path": "../../defects4j-subjects/Time-13f/src/example/org/joda/example/time/DateTimePerformance.java",
      "class_declaration": "public class DateTimePerformance ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/DateTimeField.java",
      "class_declaration": "public abstract class DateTimeField ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BasicMonthOfYearDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
      "class_declaration": "class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField ",
      "methods_under_test": {
        "=1": {
          "BasicMonthOfYearDateTimeField.get(long)": [
            1,
            1,
            1
          ],
          "BasicMonthOfYearDateTimeField.addWrapField(long, int)": [
            1,
            1,
            1
          ],
          "BasicMonthOfYearDateTimeField.getLeapAmount(long)": [
            1,
            1,
            1
          ],
          "BasicMonthOfYearDateTimeField.roundFloor(long)": [
            1,
            1,
            1
          ],
          "BasicMonthOfYearDateTimeField.remainder(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasicMonthOfYearDateTimeField.add(long, int)": [
            6,
            6,
            6
          ],
          "BasicMonthOfYearDateTimeField.add(long, long)": [
            7,
            7,
            7
          ],
          "BasicMonthOfYearDateTimeField.add(ReadablePartial, int, int[], int)": [
            6,
            6,
            6
          ],
          "BasicMonthOfYearDateTimeField.getDifferenceAsLong(long, long)": [
            5,
            5,
            5
          ],
          "BasicMonthOfYearDateTimeField.set(long, int)": [
            2,
            2,
            2
          ],
          "BasicMonthOfYearDateTimeField.isLeap(long)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractPartialFieldProperty",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/AbstractPartialFieldProperty.java",
      "class_declaration": "public abstract class AbstractPartialFieldProperty ",
      "methods_under_test": {
        "=1": {
          "AbstractPartialFieldProperty.getAsText(Locale)": [
            1,
            1,
            1
          ],
          "AbstractPartialFieldProperty.getAsShortText(Locale)": [
            1,
            1,
            1
          ],
          "AbstractPartialFieldProperty.getMaximumTextLength(Locale)": [
            1,
            1,
            1
          ],
          "AbstractPartialFieldProperty.getMaximumShortTextLength(Locale)": [
            1,
            1,
            1
          ],
          "AbstractPartialFieldProperty.hashCode()": [
            1,
            1,
            1
          ],
          "AbstractPartialFieldProperty.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractPartialFieldProperty.compareTo(ReadableInstant)": [
            5,
            5,
            5
          ],
          "AbstractPartialFieldProperty.compareTo(ReadablePartial)": [
            5,
            5,
            5
          ],
          "AbstractPartialFieldProperty.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "JodaTimePermission",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/JodaTimePermission.java",
      "class_declaration": "public class JodaTimePermission extends BasicPermission ",
      "methods_under_test": {
        "=1": {},
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AssembledChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/AssembledChronology.java",
      "class_declaration": "public abstract class AssembledChronology extends BaseChronology ",
      "methods_under_test": {
        "=1": {
          "AssembledChronology.millis()": [
            1,
            1,
            1
          ],
          "AssembledChronology.millisOfSecond()": [
            1,
            1,
            1
          ],
          "AssembledChronology.millisOfDay()": [
            1,
            1,
            1
          ],
          "AssembledChronology.seconds()": [
            1,
            1,
            1
          ],
          "AssembledChronology.secondOfMinute()": [
            1,
            1,
            1
          ],
          "AssembledChronology.secondOfDay()": [
            1,
            1,
            1
          ],
          "AssembledChronology.minutes()": [
            1,
            1,
            1
          ],
          "AssembledChronology.minuteOfHour()": [
            1,
            1,
            1
          ],
          "AssembledChronology.minuteOfDay()": [
            1,
            1,
            1
          ],
          "AssembledChronology.hours()": [
            1,
            1,
            1
          ],
          "AssembledChronology.hourOfDay()": [
            1,
            1,
            1
          ],
          "AssembledChronology.clockhourOfDay()": [
            1,
            1,
            1
          ],
          "AssembledChronology.halfdays()": [
            1,
            1,
            1
          ],
          "AssembledChronology.hourOfHalfday()": [
            1,
            1,
            1
          ],
          "AssembledChronology.clockhourOfHalfday()": [
            1,
            1,
            1
          ],
          "AssembledChronology.halfdayOfDay()": [
            1,
            1,
            1
          ],
          "AssembledChronology.days()": [
            1,
            1,
            1
          ],
          "AssembledChronology.dayOfWeek()": [
            1,
            1,
            1
          ],
          "AssembledChronology.dayOfMonth()": [
            1,
            1,
            1
          ],
          "AssembledChronology.dayOfYear()": [
            1,
            1,
            1
          ],
          "AssembledChronology.weeks()": [
            1,
            1,
            1
          ],
          "AssembledChronology.weekOfWeekyear()": [
            1,
            1,
            1
          ],
          "AssembledChronology.weekyears()": [
            1,
            1,
            1
          ],
          "AssembledChronology.weekyear()": [
            1,
            1,
            1
          ],
          "AssembledChronology.weekyearOfCentury()": [
            1,
            1,
            1
          ],
          "AssembledChronology.months()": [
            1,
            1,
            1
          ],
          "AssembledChronology.monthOfYear()": [
            1,
            1,
            1
          ],
          "AssembledChronology.years()": [
            1,
            1,
            1
          ],
          "AssembledChronology.year()": [
            1,
            1,
            1
          ],
          "AssembledChronology.yearOfEra()": [
            1,
            1,
            1
          ],
          "AssembledChronology.yearOfCentury()": [
            1,
            1,
            1
          ],
          "AssembledChronology.centuries()": [
            1,
            1,
            1
          ],
          "AssembledChronology.centuryOfEra()": [
            1,
            1,
            1
          ],
          "AssembledChronology.eras()": [
            1,
            1,
            1
          ],
          "AssembledChronology.era()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AssembledChronology.getZone()": [
            2,
            2,
            2
          ],
          "AssembledChronology.getDateTimeMillis(int, int, int, int)": [
            2,
            2,
            2
          ],
          "AssembledChronology.getDateTimeMillis(int, int, int, int, int, int, int)": [
            2,
            2,
            2
          ],
          "AssembledChronology.getDateTimeMillis(long, int, int, int, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {
          "Fields.copyFieldsFrom(Chronology)": [
            36,
            0,
            0
          ]
        },
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ReadableDateTime",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/ReadableDateTime.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DefaultNameProvider",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/tz/DefaultNameProvider.java",
      "class_declaration": "@SuppressWarnings(\"unchecked\")\npublic class DefaultNameProvider implements NameProvider ",
      "methods_under_test": {
        "=1": {
          "DefaultNameProvider.getShortName(Locale, String, String)": [
            1,
            1,
            1
          ],
          "DefaultNameProvider.getName(Locale, String, String)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Converter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/Converter.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Period",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/Period.java",
      "class_declaration": "public final class Period extends BasePeriod implements ReadablePeriod, Serializable ",
      "methods_under_test": {
        "=1": {
          "Period.parse(String)": [
            1,
            1,
            1
          ],
          "Period.parse(String, PeriodFormatter)": [
            1,
            1,
            1
          ],
          "Period.years(int)": [
            1,
            1,
            1
          ],
          "Period.months(int)": [
            1,
            1,
            1
          ],
          "Period.weeks(int)": [
            1,
            1,
            1
          ],
          "Period.days(int)": [
            1,
            1,
            1
          ],
          "Period.hours(int)": [
            1,
            1,
            1
          ],
          "Period.minutes(int)": [
            1,
            1,
            1
          ],
          "Period.seconds(int)": [
            1,
            1,
            1
          ],
          "Period.millis(int)": [
            1,
            1,
            1
          ],
          "Period.toPeriod()": [
            1,
            1,
            1
          ],
          "Period.withYears(int)": [
            1,
            1,
            1
          ],
          "Period.withMonths(int)": [
            1,
            1,
            1
          ],
          "Period.withWeeks(int)": [
            1,
            1,
            1
          ],
          "Period.withDays(int)": [
            1,
            1,
            1
          ],
          "Period.withHours(int)": [
            1,
            1,
            1
          ],
          "Period.withMinutes(int)": [
            1,
            1,
            1
          ],
          "Period.withSeconds(int)": [
            1,
            1,
            1
          ],
          "Period.withMillis(int)": [
            1,
            1,
            1
          ],
          "Period.minusYears(int)": [
            1,
            1,
            1
          ],
          "Period.minusMonths(int)": [
            1,
            1,
            1
          ],
          "Period.minusWeeks(int)": [
            1,
            1,
            1
          ],
          "Period.minusDays(int)": [
            1,
            1,
            1
          ],
          "Period.minusHours(int)": [
            1,
            1,
            1
          ],
          "Period.minusMinutes(int)": [
            1,
            1,
            1
          ],
          "Period.minusSeconds(int)": [
            1,
            1,
            1
          ],
          "Period.minusMillis(int)": [
            1,
            1,
            1
          ],
          "Period.negated()": [
            1,
            1,
            1
          ],
          "Period.toStandardWeeks()": [
            1,
            1,
            1
          ],
          "Period.toStandardDays()": [
            1,
            1,
            1
          ],
          "Period.toStandardHours()": [
            1,
            1,
            1
          ],
          "Period.toStandardMinutes()": [
            1,
            1,
            1
          ],
          "Period.toStandardSeconds()": [
            1,
            1,
            1
          ],
          "Period.toStandardDuration()": [
            1,
            1,
            1
          ],
          "Period.normalizedStandard()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Period.fieldDifference(ReadablePartial, ReadablePartial)": [
            6,
            6,
            6
          ],
          "Period.withPeriodType(PeriodType)": [
            2,
            2,
            2
          ],
          "Period.withFields(ReadablePeriod)": [
            2,
            2,
            2
          ],
          "Period.withField(DurationFieldType, int)": [
            2,
            2,
            2
          ],
          "Period.withFieldAdded(DurationFieldType, int)": [
            3,
            3,
            3
          ],
          "Period.plus(ReadablePeriod)": [
            2,
            2,
            2
          ],
          "Period.plusYears(int)": [
            2,
            2,
            2
          ],
          "Period.plusMonths(int)": [
            2,
            2,
            2
          ],
          "Period.plusWeeks(int)": [
            2,
            2,
            2
          ],
          "Period.plusDays(int)": [
            2,
            2,
            2
          ],
          "Period.plusHours(int)": [
            2,
            2,
            2
          ],
          "Period.plusMinutes(int)": [
            2,
            2,
            2
          ],
          "Period.plusSeconds(int)": [
            2,
            2,
            2
          ],
          "Period.plusMillis(int)": [
            2,
            2,
            2
          ],
          "Period.minus(ReadablePeriod)": [
            2,
            2,
            2
          ],
          "Period.multipliedBy(int)": [
            3,
            3,
            3
          ],
          "Period.normalizedStandard(PeriodType)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ReadableInstant",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/ReadableInstant.java",
      "error": "list index out of range"
    },
    {
      "src_name": "FormatUtils",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/format/FormatUtils.java",
      "class_declaration": "public class FormatUtils ",
      "methods_under_test": {
        "=1": {
          "FormatUtils.parseTwoDigits(String, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "FormatUtils.appendPaddedInteger(StringBuffer, long, int)": [
            8,
            8,
            8
          ],
          "FormatUtils.writePaddedInteger(Writer, long, int)": [
            8,
            8,
            8
          ],
          "FormatUtils.appendUnpaddedInteger(StringBuffer, int)": [
            6,
            6,
            6
          ],
          "FormatUtils.appendUnpaddedInteger(StringBuffer, long)": [
            3,
            3,
            3
          ],
          "FormatUtils.writeUnpaddedInteger(Writer, int)": [
            6,
            6,
            6
          ],
          "FormatUtils.writeUnpaddedInteger(Writer, long)": [
            3,
            3,
            3
          ],
          "FormatUtils.calculateDigitCount(long)": [
            3,
            3,
            3
          ],
          "FormatUtils.createErrorMessage(final, String, final, int)": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "FormatUtils.appendPaddedInteger(StringBuffer, int, int)": [
            12,
            12,
            12
          ],
          "FormatUtils.writePaddedInteger(Writer, int, int)": [
            12,
            12,
            12
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PeriodParser",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/format/PeriodParser.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ZoneInfoCompiler",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java",
      "class_declaration": "public class ZoneInfoCompiler ",
      "methods_under_test": {
        "=1": {
          "ZoneInfoCompiler.verbose()": [
            1,
            1,
            1
          ],
          "ZoneInfoCompiler.parseMonth(String)": [
            1,
            1,
            1
          ],
          "ZoneInfoCompiler.parseDayOfWeek(String)": [
            1,
            1,
            1
          ],
          "ZoneInfoCompiler.parseOptional(String)": [
            1,
            1,
            1
          ],
          "DateTimeOfYear.addRecurring(DateTimeZoneBuilder, String, int, int, int)": [
            1,
            1,
            1
          ],
          "DateTimeOfYear.addCutover(DateTimeZoneBuilder, int)": [
            1,
            1,
            1
          ],
          "DateTimeOfYear.toString()": [
            1,
            1,
            1
          ],
          "Rule.addRecurring(DateTimeZoneBuilder, String)": [
            1,
            1,
            1
          ],
          "Rule.toString()": [
            1,
            1,
            1
          ],
          "RuleSet.addRecurring(DateTimeZoneBuilder, String)": [
            1,
            1,
            1
          ],
          "Zone.addToBuilder(DateTimeZoneBuilder, Map<String, RuleSet>)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ZoneInfoCompiler.getStartOfYear()": [
            2,
            2,
            2
          ],
          "ZoneInfoCompiler.getLenientISOChronology()": [
            2,
            2,
            2
          ],
          "ZoneInfoCompiler.writeZoneInfoMap(DataOutputStream, Map<String, DateTimeZone>)": [
            7,
            7,
            7
          ],
          "ZoneInfoCompiler.parseYear(String, int)": [
            4,
            4,
            4
          ],
          "ZoneInfoCompiler.parseTime(String)": [
            4,
            4,
            4
          ],
          "ZoneInfoCompiler.test(String, DateTimeZone)": [
            9,
            9,
            9
          ],
          "RuleSet.addRule(Rule)": [
            2,
            2,
            2
          ],
          "Zone.chain(StringTokenizer)": [
            5,
            5,
            5
          ],
          "Zone.toString()": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "ZoneInfoCompiler.parseZoneChar(char)": [
            12,
            12,
            12
          ],
          "ZoneInfoCompiler.compile(File, File[])": [
            18,
            18,
            18
          ],
          "ZoneInfoCompiler.parseDataFile(BufferedReader)": [
            13,
            13,
            13
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ReadWritableInstant",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/ReadWritableInstant.java",
      "error": "list index out of range"
    },
    {
      "src_name": "DividedDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/DividedDateTimeField.java",
      "class_declaration": "public class DividedDateTimeField extends DecoratedDateTimeField ",
      "methods_under_test": {
        "=1": {
          "DividedDateTimeField.add(long, int)": [
            1,
            1,
            1
          ],
          "DividedDateTimeField.add(long, long)": [
            1,
            1,
            1
          ],
          "DividedDateTimeField.addWrapField(long, int)": [
            1,
            1,
            1
          ],
          "DividedDateTimeField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "DividedDateTimeField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ],
          "DividedDateTimeField.set(long, int)": [
            1,
            1,
            1
          ],
          "DividedDateTimeField.roundFloor(long)": [
            1,
            1,
            1
          ],
          "DividedDateTimeField.remainder(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DividedDateTimeField.get(long)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BasicYearDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/BasicYearDateTimeField.java",
      "class_declaration": "class BasicYearDateTimeField extends ImpreciseDateTimeField ",
      "methods_under_test": {
        "=1": {
          "BasicYearDateTimeField.get(long)": [
            1,
            1,
            1
          ],
          "BasicYearDateTimeField.add(long, long)": [
            1,
            1,
            1
          ],
          "BasicYearDateTimeField.set(long, int)": [
            1,
            1,
            1
          ],
          "BasicYearDateTimeField.isLeap(long)": [
            1,
            1,
            1
          ],
          "BasicYearDateTimeField.roundFloor(long)": [
            1,
            1,
            1
          ],
          "BasicYearDateTimeField.remainder(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasicYearDateTimeField.add(long, int)": [
            2,
            2,
            2
          ],
          "BasicYearDateTimeField.addWrapField(long, int)": [
            2,
            2,
            2
          ],
          "BasicYearDateTimeField.getDifferenceAsLong(long, long)": [
            2,
            2,
            2
          ],
          "BasicYearDateTimeField.getLeapAmount(long)": [
            3,
            3,
            3
          ],
          "BasicYearDateTimeField.roundCeiling(long)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractReadableInstantFieldProperty",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java",
      "class_declaration": "public abstract class AbstractReadableInstantFieldProperty implements Serializable ",
      "methods_under_test": {
        "=1": {
          "AbstractReadableInstantFieldProperty.getAsText(Locale)": [
            1,
            1,
            1
          ],
          "AbstractReadableInstantFieldProperty.getAsShortText(Locale)": [
            1,
            1,
            1
          ],
          "AbstractReadableInstantFieldProperty.getMaximumTextLength(Locale)": [
            1,
            1,
            1
          ],
          "AbstractReadableInstantFieldProperty.getMaximumShortTextLength(Locale)": [
            1,
            1,
            1
          ],
          "AbstractReadableInstantFieldProperty.remainder()": [
            1,
            1,
            1
          ],
          "AbstractReadableInstantFieldProperty.toInterval()": [
            1,
            1,
            1
          ],
          "AbstractReadableInstantFieldProperty.hashCode()": [
            1,
            1,
            1
          ],
          "AbstractReadableInstantFieldProperty.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractReadableInstantFieldProperty.getDifference(ReadableInstant)": [
            2,
            2,
            2
          ],
          "AbstractReadableInstantFieldProperty.getDifferenceAsLong(ReadableInstant)": [
            2,
            2,
            2
          ],
          "AbstractReadableInstantFieldProperty.compareTo(ReadableInstant)": [
            5,
            5,
            5
          ],
          "AbstractReadableInstantFieldProperty.compareTo(ReadablePartial)": [
            5,
            5,
            5
          ],
          "AbstractReadableInstantFieldProperty.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DecoratedDurationField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/DecoratedDurationField.java",
      "class_declaration": "public class DecoratedDurationField extends BaseDurationField ",
      "methods_under_test": {
        "=1": {
          "DecoratedDurationField.getValueAsLong(long, long)": [
            1,
            1,
            1
          ],
          "DecoratedDurationField.getMillis(int, long)": [
            1,
            1,
            1
          ],
          "DecoratedDurationField.getMillis(long, long)": [
            1,
            1,
            1
          ],
          "DecoratedDurationField.add(long, int)": [
            1,
            1,
            1
          ],
          "DecoratedDurationField.add(long, long)": [
            1,
            1,
            1
          ],
          "DecoratedDurationField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BasePeriod",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/base/BasePeriod.java",
      "class_declaration": "public abstract class BasePeriod extends AbstractPeriod implements ReadablePeriod, Serializable ",
      "methods_under_test": {
        "=1": {
          "BasePeriod.checkPeriodType(PeriodType)": [
            1,
            1,
            1
          ],
          "BasePeriod.getValue(int)": [
            1,
            1,
            1
          ],
          "BasePeriod.toDurationFrom(ReadableInstant)": [
            1,
            1,
            1
          ],
          "BasePeriod.toDurationTo(ReadableInstant)": [
            1,
            1,
            1
          ],
          "BasePeriod.setPeriod(int, int, int, int, int, int, int, int)": [
            1,
            1,
            1
          ],
          "BasePeriod.setField(DurationFieldType, int)": [
            1,
            1,
            1
          ],
          "BasePeriod.addField(DurationFieldType, int)": [
            1,
            1,
            1
          ],
          "BasePeriod.setValue(int, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasePeriod.setPeriod(ReadablePeriod)": [
            3,
            3,
            3
          ],
          "BasePeriod.setFieldInto(int[], DurationFieldType, int)": [
            4,
            4,
            4
          ],
          "BasePeriod.addFieldInto(int[], DurationFieldType, int)": [
            4,
            4,
            4
          ],
          "BasePeriod.mergePeriod(ReadablePeriod)": [
            2,
            2,
            2
          ],
          "BasePeriod.mergePeriodInto(int[], ReadablePeriod)": [
            2,
            2,
            2
          ],
          "BasePeriod.addPeriod(ReadablePeriod)": [
            2,
            2,
            2
          ],
          "BasePeriod.addPeriodInto(int[], ReadablePeriod)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "IntervalConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/IntervalConverter.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BasicWeekOfWeekyearDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java",
      "class_declaration": "final class BasicWeekOfWeekyearDateTimeField extends PreciseDurationDateTimeField ",
      "methods_under_test": {
        "=1": {
          "BasicWeekOfWeekyearDateTimeField.get(long)": [
            1,
            1,
            1
          ],
          "BasicWeekOfWeekyearDateTimeField.roundFloor(long)": [
            1,
            1,
            1
          ],
          "BasicWeekOfWeekyearDateTimeField.roundCeiling(long)": [
            1,
            1,
            1
          ],
          "BasicWeekOfWeekyearDateTimeField.remainder(long)": [
            1,
            1,
            1
          ],
          "BasicWeekOfWeekyearDateTimeField.getMaximumValue(long)": [
            1,
            1,
            1
          ],
          "BasicWeekOfWeekyearDateTimeField.getMaximumValueForSet(long, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasicWeekOfWeekyearDateTimeField.getMaximumValue(ReadablePartial)": [
            2,
            2,
            2
          ],
          "BasicWeekOfWeekyearDateTimeField.getMaximumValue(ReadablePartial, int[])": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DelegatedDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/DelegatedDateTimeField.java",
      "class_declaration": "public class DelegatedDateTimeField extends DateTimeField implements Serializable ",
      "methods_under_test": {
        "=1": {
          "DelegatedDateTimeField.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DelegatedDateTimeField.get(long)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getAsText(long, Locale)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getAsText(long)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getAsText(ReadablePartial, int, Locale)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getAsText(ReadablePartial, Locale)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getAsText(int, Locale)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getAsShortText(long, Locale)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getAsShortText(long)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getAsShortText(ReadablePartial, int, Locale)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getAsShortText(ReadablePartial, Locale)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getAsShortText(int, Locale)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.add(long, int)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.add(long, long)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.add(ReadablePartial, int, int[], int)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.addWrapPartial(ReadablePartial, int, int[], int)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.addWrapField(long, int)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.addWrapField(ReadablePartial, int, int[], int)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getDifference(long, long)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getDifferenceAsLong(long, long)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.set(long, int)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.set(long, String, Locale)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.set(long, String)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.set(ReadablePartial, int, int[], int)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.set(ReadablePartial, int, int[], String, Locale)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.isLeap(long)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getLeapAmount(long)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getMinimumValue(long)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getMinimumValue(ReadablePartial)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getMinimumValue(ReadablePartial, int[])": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getMaximumValue(long)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getMaximumValue(ReadablePartial)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getMaximumValue(ReadablePartial, int[])": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getMaximumTextLength(Locale)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.getMaximumShortTextLength(Locale)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.roundFloor(long)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.roundCeiling(long)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.roundHalfFloor(long)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.roundHalfCeiling(long)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.roundHalfEven(long)": [
            2,
            2,
            2
          ],
          "DelegatedDateTimeField.remainder(long)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ReadWritableInterval",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/ReadWritableInterval.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BasicDayOfMonthDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java",
      "class_declaration": "final class BasicDayOfMonthDateTimeField extends PreciseDurationDateTimeField ",
      "methods_under_test": {
        "=1": {
          "BasicDayOfMonthDateTimeField.get(long)": [
            1,
            1,
            1
          ],
          "BasicDayOfMonthDateTimeField.getMaximumValue(long)": [
            1,
            1,
            1
          ],
          "BasicDayOfMonthDateTimeField.getMaximumValueForSet(long, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasicDayOfMonthDateTimeField.getMaximumValue(ReadablePartial)": [
            3,
            3,
            3
          ],
          "BasicDayOfMonthDateTimeField.getMaximumValue(ReadablePartial, int[])": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ZonedChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/ZonedChronology.java",
      "class_declaration": "public final class ZonedChronology extends AssembledChronology ",
      "methods_under_test": {
        "=1": {
          "ZonedChronology.useTimeArithmetic(DurationField)": [
            1,
            1,
            1
          ],
          "ZonedChronology.withUTC()": [
            1,
            1,
            1
          ],
          "ZonedChronology.getDateTimeMillis(int, int, int, int)": [
            1,
            1,
            1
          ],
          "ZonedChronology.getDateTimeMillis(int, int, int, int, int, int, int)": [
            1,
            1,
            1
          ],
          "ZonedChronology.getDateTimeMillis(long, int, int, int, int)": [
            1,
            1,
            1
          ],
          "ZonedChronology.assemble(Fields)": [
            1,
            1,
            1
          ],
          "ZonedChronology.hashCode()": [
            1,
            1,
            1
          ],
          "ZonedChronology.toString()": [
            1,
            1,
            1
          ],
          "ZonedDurationField.getValue(long, long)": [
            1,
            1,
            1
          ],
          "ZonedDurationField.getValueAsLong(long, long)": [
            1,
            1,
            1
          ],
          "ZonedDurationField.getMillis(int, long)": [
            1,
            1,
            1
          ],
          "ZonedDurationField.getMillis(long, long)": [
            1,
            1,
            1
          ],
          "ZonedDurationField.add(long, int)": [
            1,
            1,
            1
          ],
          "ZonedDurationField.add(long, long)": [
            1,
            1,
            1
          ],
          "ZonedDurationField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "ZonedDurationField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.get(long)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.getAsText(long, Locale)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.getAsShortText(long, Locale)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.getAsText(int, Locale)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.getAsShortText(int, Locale)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.set(long, String, Locale)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.isLeap(long)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.getLeapAmount(long)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.remainder(long)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.getMinimumValue(long)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.getMinimumValue(ReadablePartial)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.getMinimumValue(ReadablePartial, int[])": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.getMaximumValue(long)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.getMaximumValue(ReadablePartial)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.getMaximumValue(ReadablePartial, int[])": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.getMaximumTextLength(Locale)": [
            1,
            1,
            1
          ],
          "ZonedDateTimeField.getMaximumShortTextLength(Locale)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ZonedChronology.getInstance(Chronology, DateTimeZone)": [
            4,
            4,
            4
          ],
          "ZonedChronology.withZone(DateTimeZone)": [
            4,
            4,
            4
          ],
          "ZonedChronology.equals(Object)": [
            3,
            3,
            3
          ],
          "ZonedDateTimeField.add(long, int)": [
            3,
            3,
            3
          ],
          "ZonedDateTimeField.add(long, long)": [
            3,
            3,
            3
          ],
          "ZonedDateTimeField.addWrapField(long, int)": [
            3,
            3,
            3
          ],
          "ZonedDateTimeField.set(long, int)": [
            2,
            2,
            2
          ],
          "ZonedDateTimeField.roundFloor(long)": [
            3,
            3,
            3
          ],
          "ZonedDateTimeField.roundCeiling(long)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ReadableInterval",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/ReadableInterval.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ReadablePartial",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/ReadablePartial.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BasicGJChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/BasicGJChronology.java",
      "class_declaration": "abstract class BasicGJChronology extends BasicChronology ",
      "methods_under_test": {
        "=1": {
          "BasicGJChronology.getMonthOfYear(long, int)": [
            1,
            1,
            1
          ],
          "BasicGJChronology.getDaysInMonthMax(int)": [
            1,
            1,
            1
          ],
          "BasicGJChronology.getDaysInMonthMaxForSet(long, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasicGJChronology.getDaysInYearMonth(int, int)": [
            3,
            3,
            3
          ],
          "BasicGJChronology.getTotalMillisByYearMonth(int, int)": [
            3,
            3,
            3
          ],
          "BasicGJChronology.getYearDifference(long, long)": [
            6,
            6,
            6
          ],
          "BasicGJChronology.setYear(long, int)": [
            5,
            5,
            5
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "GJYearOfEraDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java",
      "class_declaration": "final class GJYearOfEraDateTimeField extends DecoratedDateTimeField ",
      "methods_under_test": {
        "=1": {
          "GJYearOfEraDateTimeField.add(long, int)": [
            1,
            1,
            1
          ],
          "GJYearOfEraDateTimeField.add(long, long)": [
            1,
            1,
            1
          ],
          "GJYearOfEraDateTimeField.addWrapField(long, int)": [
            1,
            1,
            1
          ],
          "GJYearOfEraDateTimeField.addWrapField(ReadablePartial, int, int[], int)": [
            1,
            1,
            1
          ],
          "GJYearOfEraDateTimeField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "GJYearOfEraDateTimeField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ],
          "GJYearOfEraDateTimeField.roundFloor(long)": [
            1,
            1,
            1
          ],
          "GJYearOfEraDateTimeField.roundCeiling(long)": [
            1,
            1,
            1
          ],
          "GJYearOfEraDateTimeField.remainder(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GJYearOfEraDateTimeField.get(long)": [
            2,
            2,
            2
          ],
          "GJYearOfEraDateTimeField.set(long, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "NameProvider",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/tz/NameProvider.java",
      "error": "list index out of range"
    },
    {
      "src_name": "LimitChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/LimitChronology.java",
      "class_declaration": "public final class LimitChronology extends AssembledChronology ",
      "methods_under_test": {
        "=1": {
          "LimitChronology.withUTC()": [
            1,
            1,
            1
          ],
          "LimitChronology.getDateTimeMillis(int, int, int, int)": [
            1,
            1,
            1
          ],
          "LimitChronology.getDateTimeMillis(int, int, int, int, int, int, int)": [
            1,
            1,
            1
          ],
          "LimitChronology.getDateTimeMillis(long, int, int, int, int)": [
            1,
            1,
            1
          ],
          "LimitChronology.assemble(Fields)": [
            1,
            1,
            1
          ],
          "LimitChronology.hashCode()": [
            1,
            1,
            1
          ],
          "LimitChronology.toString()": [
            1,
            1,
            1
          ],
          "LimitException.toString()": [
            1,
            1,
            1
          ],
          "LimitDurationField.getValue(long, long)": [
            1,
            1,
            1
          ],
          "LimitDurationField.getValueAsLong(long, long)": [
            1,
            1,
            1
          ],
          "LimitDurationField.getMillis(int, long)": [
            1,
            1,
            1
          ],
          "LimitDurationField.getMillis(long, long)": [
            1,
            1,
            1
          ],
          "LimitDurationField.add(long, int)": [
            1,
            1,
            1
          ],
          "LimitDurationField.add(long, long)": [
            1,
            1,
            1
          ],
          "LimitDurationField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "LimitDurationField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.get(long)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.getAsText(long, Locale)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.getAsShortText(long, Locale)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.add(long, int)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.add(long, long)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.addWrapField(long, int)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.set(long, int)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.set(long, String, Locale)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.isLeap(long)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.getLeapAmount(long)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.roundFloor(long)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.roundCeiling(long)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.roundHalfFloor(long)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.roundHalfCeiling(long)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.roundHalfEven(long)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.remainder(long)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.getMinimumValue(long)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.getMaximumValue(long)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.getMaximumTextLength(Locale)": [
            1,
            1,
            1
          ],
          "LimitDateTimeField.getMaximumShortTextLength(Locale)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "LimitChronology.getInstance(Chronology, ReadableDateTime, ReadableDateTime)": [
            4,
            4,
            4
          ],
          "LimitChronology.withZone(DateTimeZone)": [
            7,
            7,
            7
          ],
          "LimitChronology.checkLimits(long, String)": [
            2,
            2,
            2
          ],
          "LimitChronology.equals(Object)": [
            3,
            3,
            3
          ],
          "LimitException.getMessage()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ReadWritablePeriod",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/ReadWritablePeriod.java",
      "error": "list index out of range"
    },
    {
      "src_name": "GJLocaleSymbols",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java",
      "class_declaration": "class GJLocaleSymbols ",
      "methods_under_test": {
        "=1": {
          "GJLocaleSymbols.eraValueToText(int)": [
            1,
            1,
            1
          ],
          "GJLocaleSymbols.monthOfYearValueToText(int)": [
            1,
            1,
            1
          ],
          "GJLocaleSymbols.monthOfYearValueToShortText(int)": [
            1,
            1,
            1
          ],
          "GJLocaleSymbols.dayOfWeekValueToText(int)": [
            1,
            1,
            1
          ],
          "GJLocaleSymbols.dayOfWeekValueToShortText(int)": [
            1,
            1,
            1
          ],
          "GJLocaleSymbols.halfdayValueToText(int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GJLocaleSymbols.forLocale(Locale)": [
            5,
            5,
            5
          ],
          "GJLocaleSymbols.eraTextToValue(String)": [
            2,
            2,
            2
          ],
          "GJLocaleSymbols.monthOfYearTextToValue(String)": [
            2,
            2,
            2
          ],
          "GJLocaleSymbols.dayOfWeekTextToValue(String)": [
            2,
            2,
            2
          ],
          "GJLocaleSymbols.halfdayTextToValue(String)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "PeriodConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/PeriodConverter.java",
      "error": "list index out of range"
    },
    {
      "src_name": "InstantConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/InstantConverter.java",
      "error": "list index out of range"
    },
    {
      "src_name": "ImpreciseDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/ImpreciseDateTimeField.java",
      "class_declaration": "public abstract class ImpreciseDateTimeField extends BaseDateTimeField ",
      "methods_under_test": {
        "=1": {
          "ImpreciseDateTimeField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "LinkedDurationField.getValue(long, long)": [
            1,
            1,
            1
          ],
          "LinkedDurationField.getValueAsLong(long, long)": [
            1,
            1,
            1
          ],
          "LinkedDurationField.getMillis(int, long)": [
            1,
            1,
            1
          ],
          "LinkedDurationField.getMillis(long, long)": [
            1,
            1,
            1
          ],
          "LinkedDurationField.add(long, int)": [
            1,
            1,
            1
          ],
          "LinkedDurationField.add(long, long)": [
            1,
            1,
            1
          ],
          "LinkedDurationField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "LinkedDurationField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ImpreciseDateTimeField.getDifferenceAsLong(long, long)": [
            8,
            8,
            8
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "GJMonthOfYearDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java",
      "class_declaration": "final class GJMonthOfYearDateTimeField extends BasicMonthOfYearDateTimeField ",
      "methods_under_test": {
        "=1": {
          "GJMonthOfYearDateTimeField.getAsText(int, Locale)": [
            1,
            1,
            1
          ],
          "GJMonthOfYearDateTimeField.getAsShortText(int, Locale)": [
            1,
            1,
            1
          ],
          "GJMonthOfYearDateTimeField.convertText(String, Locale)": [
            1,
            1,
            1
          ],
          "GJMonthOfYearDateTimeField.getMaximumTextLength(Locale)": [
            1,
            1,
            1
          ],
          "GJMonthOfYearDateTimeField.getMaximumShortTextLength(Locale)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseInterval",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/base/BaseInterval.java",
      "class_declaration": "public abstract class BaseInterval extends AbstractInterval implements ReadableInterval, Serializable ",
      "methods_under_test": {
        "=1": {
          "BaseInterval.setInterval(long, long, Chronology)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DateTimeParser",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/format/DateTimeParser.java",
      "error": "list index out of range"
    },
    {
      "src_name": "Duration",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/Duration.java",
      "class_declaration": "public final class Duration extends BaseDuration implements ReadableDuration, Serializable ",
      "methods_under_test": {
        "=1": {
          "Duration.parse(String)": [
            1,
            1,
            1
          ],
          "Duration.toDuration()": [
            1,
            1,
            1
          ],
          "Duration.toStandardDays()": [
            1,
            1,
            1
          ],
          "Duration.toStandardHours()": [
            1,
            1,
            1
          ],
          "Duration.toStandardMinutes()": [
            1,
            1,
            1
          ],
          "Duration.toStandardSeconds()": [
            1,
            1,
            1
          ],
          "Duration.plus(long)": [
            1,
            1,
            1
          ],
          "Duration.minus(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Duration.standardDays(long)": [
            2,
            2,
            2
          ],
          "Duration.standardHours(long)": [
            2,
            2,
            2
          ],
          "Duration.standardMinutes(long)": [
            2,
            2,
            2
          ],
          "Duration.standardSeconds(long)": [
            2,
            2,
            2
          ],
          "Duration.millis(long)": [
            2,
            2,
            2
          ],
          "Duration.withMillis(long)": [
            2,
            2,
            2
          ],
          "Duration.withDurationAdded(long, int)": [
            2,
            2,
            2
          ],
          "Duration.withDurationAdded(ReadableDuration, int)": [
            2,
            2,
            2
          ],
          "Duration.plus(ReadableDuration)": [
            2,
            2,
            2
          ],
          "Duration.minus(ReadableDuration)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "StrictDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/StrictDateTimeField.java",
      "class_declaration": "public class StrictDateTimeField extends DelegatedDateTimeField ",
      "methods_under_test": {
        "=1": {
          "StrictDateTimeField.set(long, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "StrictDateTimeField.getInstance(DateTimeField)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractDuration",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/base/AbstractDuration.java",
      "class_declaration": "public abstract class AbstractDuration implements ReadableDuration ",
      "methods_under_test": {
        "=1": {
          "AbstractDuration.toDuration()": [
            1,
            1,
            1
          ],
          "AbstractDuration.toPeriod()": [
            1,
            1,
            1
          ],
          "AbstractDuration.hashCode()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractDuration.compareTo(ReadableDuration)": [
            3,
            3,
            3
          ],
          "AbstractDuration.isEqual(ReadableDuration)": [
            2,
            2,
            2
          ],
          "AbstractDuration.isLongerThan(ReadableDuration)": [
            2,
            2,
            2
          ],
          "AbstractDuration.isShorterThan(ReadableDuration)": [
            2,
            2,
            2
          ],
          "AbstractDuration.equals(Object)": [
            3,
            3,
            3
          ],
          "AbstractDuration.toString()": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DelegatedDurationField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/DelegatedDurationField.java",
      "class_declaration": "public class DelegatedDurationField extends DurationField implements Serializable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "DelegatedDurationField.getValue(long)": [
            2,
            2,
            2
          ],
          "DelegatedDurationField.getValueAsLong(long)": [
            2,
            2,
            2
          ],
          "DelegatedDurationField.getValue(long, long)": [
            2,
            2,
            2
          ],
          "DelegatedDurationField.getValueAsLong(long, long)": [
            2,
            2,
            2
          ],
          "DelegatedDurationField.getMillis(int)": [
            2,
            2,
            2
          ],
          "DelegatedDurationField.getMillis(long)": [
            2,
            2,
            2
          ],
          "DelegatedDurationField.getMillis(int, long)": [
            2,
            2,
            2
          ],
          "DelegatedDurationField.getMillis(long, long)": [
            2,
            2,
            2
          ],
          "DelegatedDurationField.add(long, int)": [
            2,
            2,
            2
          ],
          "DelegatedDurationField.add(long, long)": [
            2,
            2,
            2
          ],
          "DelegatedDurationField.getDifference(long, long)": [
            2,
            2,
            2
          ],
          "DelegatedDurationField.getDifferenceAsLong(long, long)": [
            2,
            2,
            2
          ],
          "DelegatedDurationField.compareTo(DurationField)": [
            2,
            2,
            2
          ],
          "DelegatedDurationField.equals(Object)": [
            2,
            2,
            2
          ],
          "DelegatedDurationField.hashCode()": [
            2,
            2,
            2
          ],
          "DelegatedDurationField.toString()": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractDateTime",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/base/AbstractDateTime.java",
      "class_declaration": "public abstract class AbstractDateTime extends AbstractInstant implements ReadableDateTime ",
      "methods_under_test": {
        "=1": {
          "AbstractDateTime.toGregorianCalendar()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractDateTime.get(DateTimeFieldType)": [
            2,
            2,
            2
          ],
          "AbstractDateTime.toCalendar(Locale)": [
            2,
            2,
            2
          ],
          "AbstractDateTime.toString(String)": [
            2,
            2,
            2
          ],
          "AbstractDateTime.toString(String, Locale)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "UnsupportedDurationField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/UnsupportedDurationField.java",
      "class_declaration": "public final class UnsupportedDurationField extends DurationField implements Serializable ",
      "methods_under_test": {
        "=1": {
          "UnsupportedDurationField.getValue(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDurationField.getValueAsLong(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDurationField.getValue(long, long)": [
            1,
            1,
            1
          ],
          "UnsupportedDurationField.getValueAsLong(long, long)": [
            1,
            1,
            1
          ],
          "UnsupportedDurationField.getMillis(int)": [
            1,
            1,
            1
          ],
          "UnsupportedDurationField.getMillis(long)": [
            1,
            1,
            1
          ],
          "UnsupportedDurationField.getMillis(int, long)": [
            1,
            1,
            1
          ],
          "UnsupportedDurationField.getMillis(long, long)": [
            1,
            1,
            1
          ],
          "UnsupportedDurationField.add(long, int)": [
            1,
            1,
            1
          ],
          "UnsupportedDurationField.add(long, long)": [
            1,
            1,
            1
          ],
          "UnsupportedDurationField.getDifference(long, long)": [
            1,
            1,
            1
          ],
          "UnsupportedDurationField.getDifferenceAsLong(long, long)": [
            1,
            1,
            1
          ],
          "UnsupportedDurationField.compareTo(DurationField)": [
            1,
            1,
            1
          ],
          "UnsupportedDurationField.hashCode()": [
            1,
            1,
            1
          ],
          "UnsupportedDurationField.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "UnsupportedDurationField.getInstance(DurationFieldType)": [
            3,
            3,
            3
          ],
          "UnsupportedDurationField.equals(Object)": [
            4,
            4,
            4
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ZoneInfoProvider",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/tz/ZoneInfoProvider.java",
      "class_declaration": "public class ZoneInfoProvider implements Provider ",
      "methods_under_test": {
        "=1": {
          "ZoneInfoProvider.uncaughtException(Exception)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "ZoneInfoProvider.getZone(String)": [
            6,
            6,
            6
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Interval",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/Interval.java",
      "class_declaration": "public final class Interval extends BaseInterval implements ReadableInterval, Serializable ",
      "methods_under_test": {
        "=1": {
          "Interval.parse(String)": [
            1,
            1,
            1
          ],
          "Interval.toInterval()": [
            1,
            1,
            1
          ],
          "Interval.withStart(ReadableInstant)": [
            1,
            1,
            1
          ],
          "Interval.withEnd(ReadableInstant)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Interval.overlap(ReadableInterval)": [
            2,
            2,
            2
          ],
          "Interval.gap(ReadableInterval)": [
            4,
            4,
            4
          ],
          "Interval.abuts(ReadableInterval)": [
            3,
            3,
            3
          ],
          "Interval.withChronology(Chronology)": [
            2,
            2,
            2
          ],
          "Interval.withStartMillis(long)": [
            2,
            2,
            2
          ],
          "Interval.withEndMillis(long)": [
            2,
            2,
            2
          ],
          "Interval.withDurationAfterStart(ReadableDuration)": [
            2,
            2,
            2
          ],
          "Interval.withDurationBeforeEnd(ReadableDuration)": [
            2,
            2,
            2
          ],
          "Interval.withPeriodAfterStart(ReadablePeriod)": [
            2,
            2,
            2
          ],
          "Interval.withPeriodBeforeEnd(ReadablePeriod)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "SkipDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/SkipDateTimeField.java",
      "class_declaration": "public final class SkipDateTimeField extends DelegatedDateTimeField ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "SkipDateTimeField.get(long)": [
            2,
            2,
            2
          ],
          "SkipDateTimeField.set(long, int)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DateTimeParserBucket",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/format/DateTimeParserBucket.java",
      "class_declaration": "public class DateTimeParserBucket ",
      "methods_under_test": {
        "=1": {
          "DateTimeParserBucket.setZone(DateTimeZone)": [
            1,
            1,
            1
          ],
          "DateTimeParserBucket.setOffset(int)": [
            1,
            1,
            1
          ],
          "DateTimeParserBucket.setOffset(Integer)": [
            1,
            1,
            1
          ],
          "DateTimeParserBucket.saveField(DateTimeField, int)": [
            1,
            1,
            1
          ],
          "DateTimeParserBucket.saveField(DateTimeFieldType, int)": [
            1,
            1,
            1
          ],
          "DateTimeParserBucket.saveField(DateTimeFieldType, String, Locale)": [
            1,
            1,
            1
          ],
          "DateTimeParserBucket.computeMillis()": [
            1,
            1,
            1
          ],
          "DateTimeParserBucket.computeMillis(boolean)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DateTimeParserBucket.saveState()": [
            2,
            2,
            2
          ],
          "DateTimeParserBucket.restoreState(Object)": [
            3,
            3,
            3
          ],
          "SavedState.restoreState(DateTimeParserBucket)": [
            3,
            3,
            3
          ],
          "SavedField.set(long, boolean)": [
            3,
            3,
            3
          ],
          "SavedField.compareTo(SavedField)": [
            2,
            2,
            2
          ],
          "DateTimeParserBucket.compareReverse(DurationField, DurationField)": [
            4,
            4,
            4
          ]
        },
        "11-20": {
          "DateTimeParserBucket.computeMillis(boolean, String)": [
            18,
            18,
            18
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "RemainderDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/field/RemainderDateTimeField.java",
      "class_declaration": "public class RemainderDateTimeField extends DecoratedDateTimeField ",
      "methods_under_test": {
        "=1": {
          "RemainderDateTimeField.addWrapField(long, int)": [
            1,
            1,
            1
          ],
          "RemainderDateTimeField.set(long, int)": [
            1,
            1,
            1
          ],
          "RemainderDateTimeField.roundFloor(long)": [
            1,
            1,
            1
          ],
          "RemainderDateTimeField.roundCeiling(long)": [
            1,
            1,
            1
          ],
          "RemainderDateTimeField.roundHalfFloor(long)": [
            1,
            1,
            1
          ],
          "RemainderDateTimeField.roundHalfCeiling(long)": [
            1,
            1,
            1
          ],
          "RemainderDateTimeField.roundHalfEven(long)": [
            1,
            1,
            1
          ],
          "RemainderDateTimeField.remainder(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "RemainderDateTimeField.get(long)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractConverter",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/convert/AbstractConverter.java",
      "class_declaration": "public abstract class AbstractConverter implements Converter ",
      "methods_under_test": {
        "=1": {
          "AbstractConverter.getInstantMillis(Object, Chronology)": [
            1,
            1,
            1
          ],
          "AbstractConverter.getChronology(Object, DateTimeZone)": [
            1,
            1,
            1
          ],
          "AbstractConverter.getChronology(Object, Chronology)": [
            1,
            1,
            1
          ],
          "AbstractConverter.getPartialValues(ReadablePartial, Object, Chronology)": [
            1,
            1,
            1
          ],
          "AbstractConverter.getPartialValues(ReadablePartial, Object, Chronology, DateTimeFormatter)": [
            1,
            1,
            1
          ],
          "AbstractConverter.getPeriodType(Object)": [
            1,
            1,
            1
          ],
          "AbstractConverter.isReadableInterval(Object, Chronology)": [
            1,
            1,
            1
          ],
          "AbstractConverter.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BaseDateTime",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/base/BaseDateTime.java",
      "class_declaration": "public abstract class BaseDateTime extends AbstractDateTime implements ReadableDateTime, Serializable ",
      "methods_under_test": {
        "=1": {
          "BaseDateTime.checkChronology(Chronology)": [
            1,
            1,
            1
          ],
          "BaseDateTime.checkInstant(long, Chronology)": [
            1,
            1,
            1
          ]
        },
        "2-10": {},
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BasicDayOfYearDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java",
      "class_declaration": "final class BasicDayOfYearDateTimeField extends PreciseDurationDateTimeField ",
      "methods_under_test": {
        "=1": {
          "BasicDayOfYearDateTimeField.get(long)": [
            1,
            1,
            1
          ],
          "BasicDayOfYearDateTimeField.getMaximumValue(long)": [
            1,
            1,
            1
          ],
          "BasicDayOfYearDateTimeField.getMaximumValueForSet(long, int)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasicDayOfYearDateTimeField.getMaximumValue(ReadablePartial)": [
            2,
            2,
            2
          ],
          "BasicDayOfYearDateTimeField.getMaximumValue(ReadablePartial, int[])": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "ReadableDuration",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/ReadableDuration.java",
      "error": "list index out of range"
    },
    {
      "src_name": "BasicSingleEraDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/BasicSingleEraDateTimeField.java",
      "class_declaration": "final class BasicSingleEraDateTimeField extends BaseDateTimeField ",
      "methods_under_test": {
        "=1": {
          "BasicSingleEraDateTimeField.get(long)": [
            1,
            1,
            1
          ],
          "BasicSingleEraDateTimeField.set(long, int)": [
            1,
            1,
            1
          ],
          "BasicSingleEraDateTimeField.roundFloor(long)": [
            1,
            1,
            1
          ],
          "BasicSingleEraDateTimeField.roundCeiling(long)": [
            1,
            1,
            1
          ],
          "BasicSingleEraDateTimeField.roundHalfFloor(long)": [
            1,
            1,
            1
          ],
          "BasicSingleEraDateTimeField.roundHalfCeiling(long)": [
            1,
            1,
            1
          ],
          "BasicSingleEraDateTimeField.roundHalfEven(long)": [
            1,
            1,
            1
          ],
          "BasicSingleEraDateTimeField.getAsText(int, Locale)": [
            1,
            1,
            1
          ],
          "BasicSingleEraDateTimeField.getMaximumTextLength(Locale)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasicSingleEraDateTimeField.set(long, String, Locale)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractPeriod",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/base/AbstractPeriod.java",
      "class_declaration": "public abstract class AbstractPeriod implements ReadablePeriod ",
      "methods_under_test": {
        "=1": {
          "AbstractPeriod.size()": [
            1,
            1,
            1
          ],
          "AbstractPeriod.getFieldType(int)": [
            1,
            1,
            1
          ],
          "AbstractPeriod.isSupported(DurationFieldType)": [
            1,
            1,
            1
          ],
          "AbstractPeriod.indexOf(DurationFieldType)": [
            1,
            1,
            1
          ],
          "AbstractPeriod.toPeriod()": [
            1,
            1,
            1
          ],
          "AbstractPeriod.toMutablePeriod()": [
            1,
            1,
            1
          ],
          "AbstractPeriod.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractPeriod.getFieldTypes()": [
            2,
            2,
            2
          ],
          "AbstractPeriod.getValues()": [
            2,
            2,
            2
          ],
          "AbstractPeriod.get(DurationFieldType)": [
            2,
            2,
            2
          ],
          "AbstractPeriod.equals(Object)": [
            6,
            6,
            6
          ],
          "AbstractPeriod.hashCode()": [
            2,
            2,
            2
          ],
          "AbstractPeriod.toString(PeriodFormatter)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "AbstractInterval",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/base/AbstractInterval.java",
      "class_declaration": "public abstract class AbstractInterval implements ReadableInterval ",
      "methods_under_test": {
        "=1": {
          "AbstractInterval.checkInterval(long, long)": [
            1,
            1,
            1
          ],
          "AbstractInterval.contains(long)": [
            1,
            1,
            1
          ],
          "AbstractInterval.containsNow()": [
            1,
            1,
            1
          ],
          "AbstractInterval.isBefore(long)": [
            1,
            1,
            1
          ],
          "AbstractInterval.isAfter(long)": [
            1,
            1,
            1
          ],
          "AbstractInterval.toInterval()": [
            1,
            1,
            1
          ],
          "AbstractInterval.toMutableInterval()": [
            1,
            1,
            1
          ],
          "AbstractInterval.toDurationMillis()": [
            1,
            1,
            1
          ],
          "AbstractInterval.toPeriod()": [
            1,
            1,
            1
          ],
          "AbstractInterval.toPeriod(PeriodType)": [
            1,
            1,
            1
          ],
          "AbstractInterval.hashCode()": [
            1,
            1,
            1
          ],
          "AbstractInterval.toString()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "AbstractInterval.contains(ReadableInstant)": [
            2,
            2,
            2
          ],
          "AbstractInterval.contains(ReadableInterval)": [
            2,
            2,
            2
          ],
          "AbstractInterval.overlaps(ReadableInterval)": [
            3,
            3,
            3
          ],
          "AbstractInterval.isBefore(ReadableInstant)": [
            2,
            2,
            2
          ],
          "AbstractInterval.isBefore(ReadableInterval)": [
            2,
            2,
            2
          ],
          "AbstractInterval.isAfter(ReadableInstant)": [
            2,
            2,
            2
          ],
          "AbstractInterval.isAfter(ReadableInterval)": [
            2,
            2,
            2
          ],
          "AbstractInterval.toDuration()": [
            3,
            3,
            3
          ],
          "AbstractInterval.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "TimeZoneTable",
      "src_path": "../../defects4j-subjects/Time-13f/src/example/org/joda/example/time/TimeZoneTable.java",
      "class_declaration": "public class TimeZoneTable ",
      "methods_under_test": {
        "=1": {},
        "2-10": {
          "ZoneData.getStandardOffsetStr()": [
            3,
            3,
            3
          ],
          "ZoneData.compareTo(Object)": [
            7,
            7,
            7
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DateTimeZoneBuilder",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java",
      "class_declaration": "public class DateTimeZoneBuilder ",
      "methods_under_test": {
        "=1": {
          "DateTimeZoneBuilder.setStandardOffset(int)": [
            1,
            1,
            1
          ],
          "DateTimeZoneBuilder.setFixedSavings(String, int)": [
            1,
            1,
            1
          ],
          "OfYear.readFrom(DataInput)": [
            1,
            1,
            1
          ],
          "OfYear.writeTo(DataOutput)": [
            1,
            1,
            1
          ],
          "Recurrence.readFrom(DataInput)": [
            1,
            1,
            1
          ],
          "Recurrence.next(long, int, int)": [
            1,
            1,
            1
          ],
          "Recurrence.previous(long, int, int)": [
            1,
            1,
            1
          ],
          "Recurrence.writeTo(DataOutput)": [
            1,
            1,
            1
          ],
          "Recurrence.rename(String)": [
            1,
            1,
            1
          ],
          "Recurrence.renameAppend(String)": [
            1,
            1,
            1
          ],
          "RuleSet.setFixedSavings(String, int)": [
            1,
            1,
            1
          ],
          "RuleSet.setUpperLimit(int, OfYear)": [
            1,
            1,
            1
          ],
          "DSTZone.readFrom(DataInput, String)": [
            1,
            1,
            1
          ],
          "DSTZone.getNameKey(long)": [
            1,
            1,
            1
          ],
          "DSTZone.getOffset(long)": [
            1,
            1,
            1
          ],
          "DSTZone.getStandardOffset(long)": [
            1,
            1,
            1
          ],
          "DSTZone.writeTo(DataOutput)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DateTimeZoneBuilder.readFrom(InputStream, String)": [
            3,
            3,
            3
          ],
          "DateTimeZoneBuilder.readFrom(DataInput, String)": [
            5,
            5,
            5
          ],
          "DateTimeZoneBuilder.writeMillis(DataOutput, long)": [
            7,
            7,
            7
          ],
          "DateTimeZoneBuilder.readMillis(DataInput)": [
            6,
            6,
            6
          ],
          "DateTimeZoneBuilder.addCutover(int, char, int, int, int, boolean, int)": [
            2,
            2,
            2
          ],
          "DateTimeZoneBuilder.addRecurringSavings(String, int, int, int, char, int, int, int, boolean, int)": [
            2,
            2,
            2
          ],
          "DateTimeZoneBuilder.writeTo(String, OutputStream)": [
            3,
            3,
            3
          ],
          "DateTimeZoneBuilder.writeTo(String, DataOutput)": [
            4,
            4,
            4
          ],
          "OfYear.setInstant(int, int, int)": [
            4,
            4,
            4
          ],
          "OfYear.next(long, int, int)": [
            6,
            6,
            6
          ],
          "OfYear.previous(long, int, int)": [
            6,
            6,
            6
          ],
          "OfYear.equals(Object)": [
            3,
            3,
            3
          ],
          "Recurrence.equals(Object)": [
            3,
            3,
            3
          ],
          "Rule.next(final, long, int, int)": [
            5,
            5,
            5
          ],
          "Transition.isTransitionFrom(Transition)": [
            2,
            2,
            2
          ],
          "RuleSet.addRule(Rule)": [
            2,
            2,
            2
          ],
          "RuleSet.firstTransition(final, long)": [
            9,
            9,
            9
          ],
          "RuleSet.nextTransition(final, long, final, int)": [
            8,
            8,
            8
          ],
          "RuleSet.getUpperLimit(int)": [
            2,
            2,
            2
          ],
          "RuleSet.buildTailZone(String)": [
            3,
            3,
            3
          ],
          "DSTZone.equals(Object)": [
            3,
            3,
            3
          ],
          "PrecalculatedZone.getNameKey(long)": [
            10,
            10,
            10
          ],
          "PrecalculatedZone.getOffset(long)": [
            10,
            10,
            10
          ],
          "PrecalculatedZone.getStandardOffset(long)": [
            10,
            10,
            10
          ],
          "PrecalculatedZone.nextTransition(long)": [
            7,
            7,
            7
          ],
          "PrecalculatedZone.equals(Object)": [
            3,
            3,
            3
          ]
        },
        "11-20": {
          "DateTimeZoneBuilder.toDateTimeZone(String, boolean)": [
            12,
            12,
            12
          ],
          "DSTZone.nextTransition(long)": [
            13,
            13,
            13
          ],
          "DSTZone.previousTransition(long)": [
            13,
            13,
            13
          ],
          "PrecalculatedZone.readFrom(DataInput, String)": [
            12,
            12,
            12
          ],
          "PrecalculatedZone.create(String, boolean, ArrayList<Transition>, DSTZone)": [
            15,
            15,
            15
          ],
          "PrecalculatedZone.previousTransition(long)": [
            17,
            17,
            17
          ],
          "PrecalculatedZone.writeTo(DataOutput)": [
            11,
            11,
            11
          ]
        },
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BasicWeekyearDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java",
      "class_declaration": "final class BasicWeekyearDateTimeField extends ImpreciseDateTimeField ",
      "methods_under_test": {
        "=1": {
          "BasicWeekyearDateTimeField.get(long)": [
            1,
            1,
            1
          ],
          "BasicWeekyearDateTimeField.add(long, long)": [
            1,
            1,
            1
          ],
          "BasicWeekyearDateTimeField.addWrapField(long, int)": [
            1,
            1,
            1
          ],
          "BasicWeekyearDateTimeField.isLeap(long)": [
            1,
            1,
            1
          ],
          "BasicWeekyearDateTimeField.getLeapAmount(long)": [
            1,
            1,
            1
          ],
          "BasicWeekyearDateTimeField.remainder(long)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasicWeekyearDateTimeField.add(long, int)": [
            2,
            2,
            2
          ],
          "BasicWeekyearDateTimeField.getDifferenceAsLong(long, long)": [
            4,
            4,
            4
          ],
          "BasicWeekyearDateTimeField.set(long, int)": [
            5,
            5,
            5
          ],
          "BasicWeekyearDateTimeField.roundFloor(long)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "YearMonthDay",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/YearMonthDay.java",
      "class_declaration": "@Deprecated\npublic final class YearMonthDay extends BasePartial implements ReadablePartial, Serializable ",
      "methods_under_test": {
        "=1": {
          "YearMonthDay.size()": [
            1,
            1,
            1
          ],
          "YearMonthDay.getFieldType(int)": [
            1,
            1,
            1
          ],
          "YearMonthDay.plus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "YearMonthDay.plusYears(int)": [
            1,
            1,
            1
          ],
          "YearMonthDay.plusMonths(int)": [
            1,
            1,
            1
          ],
          "YearMonthDay.plusDays(int)": [
            1,
            1,
            1
          ],
          "YearMonthDay.minus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "YearMonthDay.minusYears(int)": [
            1,
            1,
            1
          ],
          "YearMonthDay.minusMonths(int)": [
            1,
            1,
            1
          ],
          "YearMonthDay.minusDays(int)": [
            1,
            1,
            1
          ],
          "YearMonthDay.property(DateTimeFieldType)": [
            1,
            1,
            1
          ],
          "YearMonthDay.toLocalDate()": [
            1,
            1,
            1
          ],
          "YearMonthDay.toDateTimeAtMidnight()": [
            1,
            1,
            1
          ],
          "YearMonthDay.toDateTimeAtMidnight(DateTimeZone)": [
            1,
            1,
            1
          ],
          "YearMonthDay.toDateTimeAtCurrentTime()": [
            1,
            1,
            1
          ],
          "YearMonthDay.toDateTimeAtCurrentTime(DateTimeZone)": [
            1,
            1,
            1
          ],
          "YearMonthDay.toDateMidnight()": [
            1,
            1,
            1
          ],
          "YearMonthDay.toDateMidnight(DateTimeZone)": [
            1,
            1,
            1
          ],
          "YearMonthDay.toDateTime(TimeOfDay)": [
            1,
            1,
            1
          ],
          "YearMonthDay.toInterval()": [
            1,
            1,
            1
          ],
          "YearMonthDay.toInterval(DateTimeZone)": [
            1,
            1,
            1
          ],
          "YearMonthDay.withYear(int)": [
            1,
            1,
            1
          ],
          "YearMonthDay.withMonthOfYear(int)": [
            1,
            1,
            1
          ],
          "YearMonthDay.withDayOfMonth(int)": [
            1,
            1,
            1
          ],
          "YearMonthDay.year()": [
            1,
            1,
            1
          ],
          "YearMonthDay.monthOfYear()": [
            1,
            1,
            1
          ],
          "YearMonthDay.dayOfMonth()": [
            1,
            1,
            1
          ],
          "YearMonthDay.toString()": [
            1,
            1,
            1
          ],
          "Property.addToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.addWrapFieldToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String, Locale)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String)": [
            1,
            1,
            1
          ],
          "Property.withMaximumValue()": [
            1,
            1,
            1
          ],
          "Property.withMinimumValue()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "YearMonthDay.fromCalendarFields(Calendar)": [
            2,
            2,
            2
          ],
          "YearMonthDay.fromDateFields(Date)": [
            2,
            2,
            2
          ],
          "YearMonthDay.getField(int, Chronology)": [
            4,
            4,
            4
          ],
          "YearMonthDay.withChronologyRetainFields(Chronology)": [
            3,
            3,
            3
          ],
          "YearMonthDay.withField(DateTimeFieldType, int)": [
            2,
            2,
            2
          ],
          "YearMonthDay.withFieldAdded(DurationFieldType, int)": [
            2,
            2,
            2
          ],
          "YearMonthDay.withPeriodAdded(ReadablePeriod, int)": [
            4,
            4,
            4
          ],
          "YearMonthDay.toDateTime(TimeOfDay, DateTimeZone)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "Instant",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/Instant.java",
      "class_declaration": "public final class Instant extends AbstractInstant implements ReadableInstant, Serializable ",
      "methods_under_test": {
        "=1": {
          "Instant.now()": [
            1,
            1,
            1
          ],
          "Instant.parse(String)": [
            1,
            1,
            1
          ],
          "Instant.parse(String, DateTimeFormatter)": [
            1,
            1,
            1
          ],
          "Instant.toInstant()": [
            1,
            1,
            1
          ],
          "Instant.withMillis(long)": [
            1,
            1,
            1
          ],
          "Instant.plus(long)": [
            1,
            1,
            1
          ],
          "Instant.plus(ReadableDuration)": [
            1,
            1,
            1
          ],
          "Instant.minus(long)": [
            1,
            1,
            1
          ],
          "Instant.minus(ReadableDuration)": [
            1,
            1,
            1
          ],
          "Instant.toDateTime()": [
            1,
            1,
            1
          ],
          "Instant.toDateTimeISO()": [
            1,
            1,
            1
          ],
          "Instant.toMutableDateTime()": [
            1,
            1,
            1
          ],
          "Instant.toMutableDateTimeISO()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "Instant.withDurationAdded(long, int)": [
            2,
            2,
            2
          ],
          "Instant.withDurationAdded(ReadableDuration, int)": [
            2,
            2,
            2
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "BasicChronology",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/BasicChronology.java",
      "class_declaration": "abstract class BasicChronology extends AssembledChronology ",
      "methods_under_test": {
        "=1": {
          "BasicChronology.equals(Object)": [
            1,
            1,
            1
          ],
          "BasicChronology.hashCode()": [
            1,
            1,
            1
          ],
          "BasicChronology.assemble(Fields)": [
            1,
            1,
            1
          ],
          "BasicChronology.getDaysInYear(int)": [
            1,
            1,
            1
          ],
          "BasicChronology.getWeeksInYear(int)": [
            1,
            1,
            1
          ],
          "BasicChronology.getYearMillis(int)": [
            1,
            1,
            1
          ],
          "BasicChronology.getYearMonthMillis(int, int)": [
            1,
            1,
            1
          ],
          "BasicChronology.getYearMonthDayMillis(int, int, int)": [
            1,
            1,
            1
          ],
          "BasicChronology.getMonthOfYear(long)": [
            1,
            1,
            1
          ],
          "BasicChronology.getDayOfMonth(long)": [
            1,
            1,
            1
          ],
          "BasicChronology.getDayOfMonth(long, int)": [
            1,
            1,
            1
          ],
          "BasicChronology.getDayOfMonth(long, int, int)": [
            1,
            1,
            1
          ],
          "BasicChronology.getDayOfYear(long)": [
            1,
            1,
            1
          ],
          "BasicChronology.getDayOfYear(long, int)": [
            1,
            1,
            1
          ],
          "BasicChronology.getWeekOfWeekyear(long)": [
            1,
            1,
            1
          ],
          "BasicChronology.getDaysInMonthMax(long)": [
            1,
            1,
            1
          ],
          "BasicChronology.getDaysInMonthMaxForSet(long, int)": [
            1,
            1,
            1
          ],
          "BasicChronology.getDateMidnightMillis(int, int, int)": [
            1,
            1,
            1
          ],
          "BasicChronology.getMaxMonth(int)": [
            1,
            1,
            1
          ],
          "HalfdayField.getAsText(int, Locale)": [
            1,
            1,
            1
          ],
          "HalfdayField.set(long, String, Locale)": [
            1,
            1,
            1
          ],
          "HalfdayField.getMaximumTextLength(Locale)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "BasicChronology.getZone()": [
            2,
            2,
            2
          ],
          "BasicChronology.getDateTimeMillis(int, int, int, int)": [
            2,
            2,
            2
          ],
          "BasicChronology.getDateTimeMillis(int, int, int, int, int, int, int)": [
            2,
            2,
            2
          ],
          "BasicChronology.toString()": [
            4,
            4,
            4
          ],
          "BasicChronology.getFirstWeekOfYearMillis(int)": [
            3,
            3,
            3
          ],
          "BasicChronology.getYear(long)": [
            6,
            6,
            6
          ],
          "BasicChronology.getWeekyear(long)": [
            4,
            4,
            4
          ],
          "BasicChronology.getWeekOfWeekyear(long, int)": [
            3,
            3,
            3
          ],
          "BasicChronology.getDayOfWeek(long)": [
            3,
            3,
            3
          ],
          "BasicChronology.getMillisOfDay(long)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "GJEraDateTimeField",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/chrono/GJEraDateTimeField.java",
      "class_declaration": "final class GJEraDateTimeField extends BaseDateTimeField ",
      "methods_under_test": {
        "=1": {
          "GJEraDateTimeField.getAsText(int, Locale)": [
            1,
            1,
            1
          ],
          "GJEraDateTimeField.set(long, String, Locale)": [
            1,
            1,
            1
          ],
          "GJEraDateTimeField.roundHalfFloor(long)": [
            1,
            1,
            1
          ],
          "GJEraDateTimeField.roundHalfCeiling(long)": [
            1,
            1,
            1
          ],
          "GJEraDateTimeField.roundHalfEven(long)": [
            1,
            1,
            1
          ],
          "GJEraDateTimeField.getMaximumTextLength(Locale)": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "GJEraDateTimeField.get(long)": [
            3,
            3,
            3
          ],
          "GJEraDateTimeField.set(long, int)": [
            3,
            3,
            3
          ],
          "GJEraDateTimeField.roundFloor(long)": [
            3,
            3,
            3
          ],
          "GJEraDateTimeField.roundCeiling(long)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    },
    {
      "src_name": "DateTime",
      "src_path": "../../defects4j-subjects/Time-13f/src/main/java/org/joda/time/DateTime.java",
      "class_declaration": "public final class DateTime extends BaseDateTime implements ReadableDateTime, Serializable ",
      "methods_under_test": {
        "=1": {
          "DateTime.now()": [
            1,
            1,
            1
          ],
          "DateTime.parse(String)": [
            1,
            1,
            1
          ],
          "DateTime.parse(String, DateTimeFormatter)": [
            1,
            1,
            1
          ],
          "DateTime.toDateTime()": [
            1,
            1,
            1
          ],
          "DateTime.withMillis(long)": [
            1,
            1,
            1
          ],
          "DateTime.withChronology(Chronology)": [
            1,
            1,
            1
          ],
          "DateTime.withZone(DateTimeZone)": [
            1,
            1,
            1
          ],
          "DateTime.withEarlierOffsetAtOverlap()": [
            1,
            1,
            1
          ],
          "DateTime.withLaterOffsetAtOverlap()": [
            1,
            1,
            1
          ],
          "DateTime.withDate(int, int, int)": [
            1,
            1,
            1
          ],
          "DateTime.withTime(int, int, int, int)": [
            1,
            1,
            1
          ],
          "DateTime.withTimeAtStartOfDay()": [
            1,
            1,
            1
          ],
          "DateTime.plus(long)": [
            1,
            1,
            1
          ],
          "DateTime.plus(ReadableDuration)": [
            1,
            1,
            1
          ],
          "DateTime.plus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "DateTime.minus(long)": [
            1,
            1,
            1
          ],
          "DateTime.minus(ReadableDuration)": [
            1,
            1,
            1
          ],
          "DateTime.minus(ReadablePeriod)": [
            1,
            1,
            1
          ],
          "DateTime.toDateMidnight()": [
            1,
            1,
            1
          ],
          "DateTime.toYearMonthDay()": [
            1,
            1,
            1
          ],
          "DateTime.toTimeOfDay()": [
            1,
            1,
            1
          ],
          "DateTime.toLocalDateTime()": [
            1,
            1,
            1
          ],
          "DateTime.toLocalDate()": [
            1,
            1,
            1
          ],
          "DateTime.toLocalTime()": [
            1,
            1,
            1
          ],
          "DateTime.withEra(int)": [
            1,
            1,
            1
          ],
          "DateTime.withCenturyOfEra(int)": [
            1,
            1,
            1
          ],
          "DateTime.withYearOfEra(int)": [
            1,
            1,
            1
          ],
          "DateTime.withYearOfCentury(int)": [
            1,
            1,
            1
          ],
          "DateTime.withYear(int)": [
            1,
            1,
            1
          ],
          "DateTime.withWeekyear(int)": [
            1,
            1,
            1
          ],
          "DateTime.withMonthOfYear(int)": [
            1,
            1,
            1
          ],
          "DateTime.withWeekOfWeekyear(int)": [
            1,
            1,
            1
          ],
          "DateTime.withDayOfYear(int)": [
            1,
            1,
            1
          ],
          "DateTime.withDayOfMonth(int)": [
            1,
            1,
            1
          ],
          "DateTime.withDayOfWeek(int)": [
            1,
            1,
            1
          ],
          "DateTime.withHourOfDay(int)": [
            1,
            1,
            1
          ],
          "DateTime.withMinuteOfHour(int)": [
            1,
            1,
            1
          ],
          "DateTime.withSecondOfMinute(int)": [
            1,
            1,
            1
          ],
          "DateTime.withMillisOfSecond(int)": [
            1,
            1,
            1
          ],
          "DateTime.withMillisOfDay(int)": [
            1,
            1,
            1
          ],
          "DateTime.era()": [
            1,
            1,
            1
          ],
          "DateTime.centuryOfEra()": [
            1,
            1,
            1
          ],
          "DateTime.yearOfCentury()": [
            1,
            1,
            1
          ],
          "DateTime.yearOfEra()": [
            1,
            1,
            1
          ],
          "DateTime.year()": [
            1,
            1,
            1
          ],
          "DateTime.weekyear()": [
            1,
            1,
            1
          ],
          "DateTime.monthOfYear()": [
            1,
            1,
            1
          ],
          "DateTime.weekOfWeekyear()": [
            1,
            1,
            1
          ],
          "DateTime.dayOfYear()": [
            1,
            1,
            1
          ],
          "DateTime.dayOfMonth()": [
            1,
            1,
            1
          ],
          "DateTime.dayOfWeek()": [
            1,
            1,
            1
          ],
          "DateTime.hourOfDay()": [
            1,
            1,
            1
          ],
          "DateTime.minuteOfDay()": [
            1,
            1,
            1
          ],
          "DateTime.minuteOfHour()": [
            1,
            1,
            1
          ],
          "DateTime.secondOfDay()": [
            1,
            1,
            1
          ],
          "DateTime.secondOfMinute()": [
            1,
            1,
            1
          ],
          "DateTime.millisOfDay()": [
            1,
            1,
            1
          ],
          "DateTime.millisOfSecond()": [
            1,
            1,
            1
          ],
          "Property.addToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.addToCopy(long)": [
            1,
            1,
            1
          ],
          "Property.addWrapFieldToCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(int)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String, Locale)": [
            1,
            1,
            1
          ],
          "Property.setCopy(String)": [
            1,
            1,
            1
          ],
          "Property.withMaximumValue()": [
            1,
            1,
            1
          ],
          "Property.withMinimumValue()": [
            1,
            1,
            1
          ],
          "Property.roundFloorCopy()": [
            1,
            1,
            1
          ],
          "Property.roundCeilingCopy()": [
            1,
            1,
            1
          ],
          "Property.roundHalfFloorCopy()": [
            1,
            1,
            1
          ],
          "Property.roundHalfCeilingCopy()": [
            1,
            1,
            1
          ],
          "Property.roundHalfEvenCopy()": [
            1,
            1,
            1
          ]
        },
        "2-10": {
          "DateTime.now(DateTimeZone)": [
            2,
            2,
            2
          ],
          "DateTime.now(Chronology)": [
            2,
            2,
            2
          ],
          "DateTime.toDateTimeISO()": [
            2,
            2,
            2
          ],
          "DateTime.toDateTime(DateTimeZone)": [
            2,
            2,
            2
          ],
          "DateTime.toDateTime(Chronology)": [
            2,
            2,
            2
          ],
          "DateTime.withZoneRetainFields(DateTimeZone)": [
            2,
            2,
            2
          ],
          "DateTime.withFields(ReadablePartial)": [
            2,
            2,
            2
          ],
          "DateTime.withField(DateTimeFieldType, int)": [
            2,
            2,
            2
          ],
          "DateTime.withFieldAdded(DurationFieldType, int)": [
            3,
            3,
            3
          ],
          "DateTime.withDurationAdded(long, int)": [
            2,
            2,
            2
          ],
          "DateTime.withDurationAdded(ReadableDuration, int)": [
            2,
            2,
            2
          ],
          "DateTime.withPeriodAdded(ReadablePeriod, int)": [
            2,
            2,
            2
          ],
          "DateTime.plusYears(int)": [
            2,
            2,
            2
          ],
          "DateTime.plusMonths(int)": [
            2,
            2,
            2
          ],
          "DateTime.plusWeeks(int)": [
            2,
            2,
            2
          ],
          "DateTime.plusDays(int)": [
            2,
            2,
            2
          ],
          "DateTime.plusHours(int)": [
            2,
            2,
            2
          ],
          "DateTime.plusMinutes(int)": [
            2,
            2,
            2
          ],
          "DateTime.plusSeconds(int)": [
            2,
            2,
            2
          ],
          "DateTime.plusMillis(int)": [
            2,
            2,
            2
          ],
          "DateTime.minusYears(int)": [
            2,
            2,
            2
          ],
          "DateTime.minusMonths(int)": [
            2,
            2,
            2
          ],
          "DateTime.minusWeeks(int)": [
            2,
            2,
            2
          ],
          "DateTime.minusDays(int)": [
            2,
            2,
            2
          ],
          "DateTime.minusHours(int)": [
            2,
            2,
            2
          ],
          "DateTime.minusMinutes(int)": [
            2,
            2,
            2
          ],
          "DateTime.minusSeconds(int)": [
            2,
            2,
            2
          ],
          "DateTime.minusMillis(int)": [
            2,
            2,
            2
          ],
          "DateTime.property(DateTimeFieldType)": [
            3,
            3,
            3
          ]
        },
        "11-20": {},
        ">20": {},
        "to_be_determined": {}
      }
    }
  ],
  "test_unpaired": [
    {
      "MockZone": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/MockZone.java"
    },
    {
      "TestMutableDateTime_Sets": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMutableDateTime_Sets.java"
    },
    {
      "TestGJMonthOfYearField": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestGJMonthOfYearField.java"
    },
    {
      "TestJulianChronology": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestJulianChronology.java"
    },
    {
      "TestDateTime_Constructors": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDateTime_Constructors.java"
    },
    {
      "TestAll": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestAll.java"
    },
    {
      "MainTest": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/MainTest.java"
    },
    {
      "TestTextFields": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/format/TestTextFields.java"
    },
    {
      "TestGJWeekOfWeekyearField": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestGJWeekOfWeekyearField.java"
    },
    {
      "MockUnknownCalendar": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/MockUnknownCalendar.java"
    },
    {
      "TestInterval_Constructors": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestInterval_Constructors.java"
    },
    {
      "TestGJDateTimeField": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestGJDateTimeField.java"
    },
    {
      "TestGJYearField": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestGJYearField.java"
    },
    {
      "TestMonthDay_Basics": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMonthDay_Basics.java"
    },
    {
      "TestYearMonth_Properties": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestYearMonth_Properties.java"
    },
    {
      "TestDateTimeFormatStyle": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/format/TestDateTimeFormatStyle.java"
    },
    {
      "MockNullZoneChronology": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/MockNullZoneChronology.java"
    },
    {
      "TestAllPackages": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestAllPackages.java"
    },
    {
      "TestLocalDateTime_Constructors": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java"
    },
    {
      "TestMutableDateTime_Constructors": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMutableDateTime_Constructors.java"
    },
    {
      "TestMutablePeriod_Updates": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMutablePeriod_Updates.java"
    },
    {
      "TestGregorianChronology": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestGregorianChronology.java"
    },
    {
      "TestAll": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/tz/TestAll.java"
    },
    {
      "TestAll": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/field/TestAll.java"
    },
    {
      "TestInstant_Constructors": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestInstant_Constructors.java"
    },
    {
      "TestGJChronology": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestGJChronology.java"
    },
    {
      "TestYearMonth_Basics": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestYearMonth_Basics.java"
    },
    {
      "TestJulianDayOfMonthField": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestJulianDayOfMonthField.java"
    },
    {
      "TestSerialization": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestSerialization.java"
    },
    {
      "TestYearMonthDay_Constructors": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestYearMonthDay_Constructors.java"
    },
    {
      "TestBuilder": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/tz/TestBuilder.java"
    },
    {
      "TestMutableInterval_Constructors": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMutableInterval_Constructors.java"
    },
    {
      "TestMutableInterval_Updates": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMutableInterval_Updates.java"
    },
    {
      "TestGJDayOfWeekField": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestGJDayOfWeekField.java"
    },
    {
      "TestMutablePeriod_Basics": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMutablePeriod_Basics.java"
    },
    {
      "TestGJWeekyearField": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestGJWeekyearField.java"
    },
    {
      "TestLocalTime_Basics": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestLocalTime_Basics.java"
    },
    {
      "TestLocalDate_Properties": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestLocalDate_Properties.java"
    },
    {
      "TestYearMonthDay_Properties": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestYearMonthDay_Properties.java"
    },
    {
      "TestDateTime_Basics": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDateTime_Basics.java"
    },
    {
      "TestMutableInterval_Basics": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMutableInterval_Basics.java"
    },
    {
      "TestPeriodFormatParsing": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/format/TestPeriodFormatParsing.java"
    },
    {
      "TestLocalTime_Constructors": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestLocalTime_Constructors.java"
    },
    {
      "TestISODateTimeFormat_Fields": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/format/TestISODateTimeFormat_Fields.java"
    },
    {
      "TestMonthDay_Properties": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMonthDay_Properties.java"
    },
    {
      "TestISOPeriodFormatParsing": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/format/TestISOPeriodFormatParsing.java"
    },
    {
      "TestPartial_Constructors": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestPartial_Constructors.java"
    },
    {
      "TestAll": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/TestAll.java"
    },
    {
      "TestGJDayOfYearField": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestGJDayOfYearField.java"
    },
    {
      "TestPeriod_Basics": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestPeriod_Basics.java"
    },
    {
      "TestDateTimeZoneCutover": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDateTimeZoneCutover.java"
    },
    {
      "TestJulianWeekyearField": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestJulianWeekyearField.java"
    },
    {
      "TestMutableDateTime_Properties": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMutableDateTime_Properties.java"
    },
    {
      "TestJulianMonthOfYearField": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestJulianMonthOfYearField.java"
    },
    {
      "ClassLoadTest": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/ClassLoadTest.java"
    },
    {
      "TestStringConvert": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestStringConvert.java"
    },
    {
      "TestMutableDateTime_Adds": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestMutableDateTime_Adds.java"
    },
    {
      "TestCompiler": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/tz/TestCompiler.java"
    },
    {
      "TestJulianYearField": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestJulianYearField.java"
    },
    {
      "TestAll": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestAll.java"
    },
    {
      "TestAll": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/TestAll.java"
    },
    {
      "TestLocalDateTime_Basics": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestLocalDateTime_Basics.java"
    },
    {
      "TestDateTime_Properties": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDateTime_Properties.java"
    },
    {
      "TestAll": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/format/TestAll.java"
    },
    {
      "MockPartial": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/MockPartial.java"
    },
    {
      "TestYearMonthDay_Basics": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestYearMonthDay_Basics.java"
    },
    {
      "TestPeriod_Constructors": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestPeriod_Constructors.java"
    },
    {
      "TestTimeOfDay_Constructors": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestTimeOfDay_Constructors.java"
    },
    {
      "MockUnknownTimeZone": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/convert/MockUnknownTimeZone.java"
    },
    {
      "TestLocalDate_Basics": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestLocalDate_Basics.java"
    },
    {
      "TestDateMidnight_Basics": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDateMidnight_Basics.java"
    },
    {
      "TestDuration_Basics": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDuration_Basics.java"
    },
    {
      "TestGJDayOfMonthField": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/chrono/gj/TestGJDayOfMonthField.java"
    },
    {
      "TestPartial_Match": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestPartial_Match.java"
    },
    {
      "TestPartial_Basics": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestPartial_Basics.java"
    },
    {
      "TestTimeOfDay_Basics": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestTimeOfDay_Basics.java"
    },
    {
      "TestDateMidnight_Properties": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/TestDateMidnight_Properties.java"
    },
    {
      "TestISODateTimeFormatParsing": "../../defects4j-subjects/Time-13f/src/test/java/org/joda/time/format/TestISODateTimeFormatParsing.java"
    }
  ]
}